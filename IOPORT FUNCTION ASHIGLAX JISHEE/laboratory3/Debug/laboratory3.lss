
laboratory3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000864  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000043c  20000000  00400864  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00000040  2000043c  00400ca0  0002043c  2**2
                  ALLOC
  3 .stack        00003004  2000047c  00400ce0  0002043c  2**0
                  ALLOC
  4 .ARM.attributes 0000002e  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002046a  2**0
                  CONTENTS, READONLY
  6 .debug_info   00008693  00000000  00000000  000204c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013d9  00000000  00000000  00028b56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000310  00000000  00000000  00029f2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000298  00000000  00000000  0002a23f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00014d1a  00000000  00000000  0002a4d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00005844  00000000  00000000  0003f1f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00060627  00000000  00000000  00044a35  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000070c  00000000  00000000  000a505c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000fce  00000000  00000000  000a5768  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	80 34 00 20 49 04 40 00 45 04 40 00 45 04 40 00     .4. I.@.E.@.E.@.
  400010:	45 04 40 00 45 04 40 00 45 04 40 00 00 00 00 00     E.@.E.@.E.@.....
	...
  40002c:	45 04 40 00 45 04 40 00 00 00 00 00 45 04 40 00     E.@.E.@.....E.@.
  40003c:	45 04 40 00 45 04 40 00 45 04 40 00 45 04 40 00     E.@.E.@.E.@.E.@.
  40004c:	45 04 40 00 45 04 40 00 45 04 40 00 45 04 40 00     E.@.E.@.E.@.E.@.
  40005c:	45 04 40 00 45 04 40 00 45 04 40 00 45 04 40 00     E.@.E.@.E.@.E.@.
  40006c:	45 04 40 00 45 04 40 00 45 04 40 00 45 04 40 00     E.@.E.@.E.@.E.@.
  40007c:	45 04 40 00 45 04 40 00 45 04 40 00 45 04 40 00     E.@.E.@.E.@.E.@.
  40008c:	45 04 40 00 45 04 40 00 45 04 40 00 45 04 40 00     E.@.E.@.E.@.E.@.
  40009c:	45 04 40 00 45 04 40 00 45 04 40 00 45 04 40 00     E.@.E.@.E.@.E.@.
  4000ac:	45 04 40 00 45 04 40 00 45 04 40 00 45 04 40 00     E.@.E.@.E.@.E.@.
  4000bc:	45 04 40 00 45 04 40 00 45 04 40 00 45 04 40 00     E.@.E.@.E.@.E.@.
  4000cc:	45 04 40 00 45 04 40 00 45 04 40 00 45 04 40 00     E.@.E.@.E.@.E.@.
  4000dc:	45 04 40 00 45 04 40 00 45 04 40 00 45 04 40 00     E.@.E.@.E.@.E.@.
  4000ec:	45 04 40 00 45 04 40 00 45 04 40 00                 E.@.E.@.E.@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	2000043c 	.word	0x2000043c
  400114:	00000000 	.word	0x00000000
  400118:	00400864 	.word	0x00400864

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	00400864 	.word	0x00400864
  400158:	20000440 	.word	0x20000440
  40015c:	00400864 	.word	0x00400864
  400160:	00000000 	.word	0x00000000

00400164 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400164:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400166:	480e      	ldr	r0, [pc, #56]	; (4001a0 <sysclk_init+0x3c>)
  400168:	4b0e      	ldr	r3, [pc, #56]	; (4001a4 <sysclk_init+0x40>)
  40016a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40016c:	213e      	movs	r1, #62	; 0x3e
  40016e:	2000      	movs	r0, #0
  400170:	4b0d      	ldr	r3, [pc, #52]	; (4001a8 <sysclk_init+0x44>)
  400172:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400174:	4c0d      	ldr	r4, [pc, #52]	; (4001ac <sysclk_init+0x48>)
  400176:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400178:	2800      	cmp	r0, #0
  40017a:	d0fc      	beq.n	400176 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40017c:	4b0c      	ldr	r3, [pc, #48]	; (4001b0 <sysclk_init+0x4c>)
  40017e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400180:	4a0c      	ldr	r2, [pc, #48]	; (4001b4 <sysclk_init+0x50>)
  400182:	4b0d      	ldr	r3, [pc, #52]	; (4001b8 <sysclk_init+0x54>)
  400184:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  400186:	4c0d      	ldr	r4, [pc, #52]	; (4001bc <sysclk_init+0x58>)
  400188:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40018a:	2800      	cmp	r0, #0
  40018c:	d0fc      	beq.n	400188 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40018e:	2010      	movs	r0, #16
  400190:	4b0b      	ldr	r3, [pc, #44]	; (4001c0 <sysclk_init+0x5c>)
  400192:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400194:	4b0b      	ldr	r3, [pc, #44]	; (4001c4 <sysclk_init+0x60>)
  400196:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400198:	480b      	ldr	r0, [pc, #44]	; (4001c8 <sysclk_init+0x64>)
  40019a:	4b02      	ldr	r3, [pc, #8]	; (4001a4 <sysclk_init+0x40>)
  40019c:	4798      	blx	r3
  40019e:	bd10      	pop	{r4, pc}
  4001a0:	07270e00 	.word	0x07270e00
  4001a4:	0040061d 	.word	0x0040061d
  4001a8:	0040036d 	.word	0x0040036d
  4001ac:	004003c1 	.word	0x004003c1
  4001b0:	004003d1 	.word	0x004003d1
  4001b4:	200f3f01 	.word	0x200f3f01
  4001b8:	400e0400 	.word	0x400e0400
  4001bc:	004003e1 	.word	0x004003e1
  4001c0:	00400309 	.word	0x00400309
  4001c4:	00400511 	.word	0x00400511
  4001c8:	05b8d800 	.word	0x05b8d800

004001cc <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  4001cc:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4001ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4001d2:	4b49      	ldr	r3, [pc, #292]	; (4002f8 <board_init+0x12c>)
  4001d4:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4001d6:	2009      	movs	r0, #9
  4001d8:	4c48      	ldr	r4, [pc, #288]	; (4002fc <board_init+0x130>)
  4001da:	47a0      	blx	r4
  4001dc:	200a      	movs	r0, #10
  4001de:	47a0      	blx	r4
  4001e0:	200b      	movs	r0, #11
  4001e2:	47a0      	blx	r4
  4001e4:	200c      	movs	r0, #12
  4001e6:	47a0      	blx	r4
  4001e8:	200d      	movs	r0, #13
  4001ea:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4001ec:	4b44      	ldr	r3, [pc, #272]	; (400300 <board_init+0x134>)
  4001ee:	2201      	movs	r2, #1
  4001f0:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4001f2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4001f6:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4001f8:	4942      	ldr	r1, [pc, #264]	; (400304 <board_init+0x138>)
  4001fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  4001fe:	610a      	str	r2, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400200:	f8c1 20a0 	str.w	r2, [r1, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400204:	630a      	str	r2, [r1, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400206:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  40020a:	6108      	str	r0, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40020c:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400210:	6308      	str	r0, [r1, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400212:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400216:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400218:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40021c:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40021e:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400222:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400224:	6219      	str	r1, [r3, #32]
		base->PIO_IFSCER = mask;
  400226:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  40022a:	6f18      	ldr	r0, [r3, #112]	; 0x70
  40022c:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
  400230:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400232:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400234:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
  400238:	6758      	str	r0, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  40023a:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40023e:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400242:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400246:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400248:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40024c:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40024e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400252:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400254:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400256:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  40025a:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40025c:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
  400260:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400262:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400264:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
  400268:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  40026a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  40026e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	base->PIO_AIMER = mask;
  400272:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400276:	2202      	movs	r2, #2
  400278:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40027a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40027e:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400280:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400284:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400286:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400288:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  40028c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40028e:	f021 0102 	bic.w	r1, r1, #2
  400292:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400294:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400296:	f021 0102 	bic.w	r1, r1, #2
  40029a:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_AIMDR = mask;
  40029c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4002a0:	2204      	movs	r2, #4
  4002a2:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4002a4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4002a8:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4002aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4002ae:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4002b0:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4002b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4002b6:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4002b8:	f021 0104 	bic.w	r1, r1, #4
  4002bc:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4002be:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4002c0:	f021 0104 	bic.w	r1, r1, #4
  4002c4:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  4002c6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4002ca:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	base->PIO_AIMER = mask;
  4002ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4002d2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4002d6:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4002d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4002dc:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4002de:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4002e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4002e4:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4002e6:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  4002ea:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4002ec:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4002ee:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  4002f2:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4002f4:	605a      	str	r2, [r3, #4]
  4002f6:	bd10      	pop	{r4, pc}
  4002f8:	400e1850 	.word	0x400e1850
  4002fc:	004003f1 	.word	0x004003f1
  400300:	400e0e00 	.word	0x400e0e00
  400304:	400e1400 	.word	0x400e1400

00400308 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400308:	4a17      	ldr	r2, [pc, #92]	; (400368 <pmc_switch_mck_to_pllack+0x60>)
  40030a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40030c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400310:	4318      	orrs	r0, r3
  400312:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400314:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400316:	f013 0f08 	tst.w	r3, #8
  40031a:	d10a      	bne.n	400332 <pmc_switch_mck_to_pllack+0x2a>
  40031c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400320:	4911      	ldr	r1, [pc, #68]	; (400368 <pmc_switch_mck_to_pllack+0x60>)
  400322:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400324:	f012 0f08 	tst.w	r2, #8
  400328:	d103      	bne.n	400332 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40032a:	3b01      	subs	r3, #1
  40032c:	d1f9      	bne.n	400322 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40032e:	2001      	movs	r0, #1
  400330:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400332:	4a0d      	ldr	r2, [pc, #52]	; (400368 <pmc_switch_mck_to_pllack+0x60>)
  400334:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400336:	f023 0303 	bic.w	r3, r3, #3
  40033a:	f043 0302 	orr.w	r3, r3, #2
  40033e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400340:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400342:	f013 0f08 	tst.w	r3, #8
  400346:	d10a      	bne.n	40035e <pmc_switch_mck_to_pllack+0x56>
  400348:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40034c:	4906      	ldr	r1, [pc, #24]	; (400368 <pmc_switch_mck_to_pllack+0x60>)
  40034e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400350:	f012 0f08 	tst.w	r2, #8
  400354:	d105      	bne.n	400362 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400356:	3b01      	subs	r3, #1
  400358:	d1f9      	bne.n	40034e <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40035a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  40035c:	4770      	bx	lr
	return 0;
  40035e:	2000      	movs	r0, #0
  400360:	4770      	bx	lr
  400362:	2000      	movs	r0, #0
  400364:	4770      	bx	lr
  400366:	bf00      	nop
  400368:	400e0400 	.word	0x400e0400

0040036c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40036c:	b9c8      	cbnz	r0, 4003a2 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40036e:	4a11      	ldr	r2, [pc, #68]	; (4003b4 <pmc_switch_mainck_to_xtal+0x48>)
  400370:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400372:	0209      	lsls	r1, r1, #8
  400374:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400376:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40037a:	f023 0303 	bic.w	r3, r3, #3
  40037e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400382:	f043 0301 	orr.w	r3, r3, #1
  400386:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400388:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40038a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40038c:	f013 0f01 	tst.w	r3, #1
  400390:	d0fb      	beq.n	40038a <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400392:	4a08      	ldr	r2, [pc, #32]	; (4003b4 <pmc_switch_mainck_to_xtal+0x48>)
  400394:	6a13      	ldr	r3, [r2, #32]
  400396:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40039a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40039e:	6213      	str	r3, [r2, #32]
  4003a0:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4003a2:	4904      	ldr	r1, [pc, #16]	; (4003b4 <pmc_switch_mainck_to_xtal+0x48>)
  4003a4:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4003a6:	4a04      	ldr	r2, [pc, #16]	; (4003b8 <pmc_switch_mainck_to_xtal+0x4c>)
  4003a8:	401a      	ands	r2, r3
  4003aa:	4b04      	ldr	r3, [pc, #16]	; (4003bc <pmc_switch_mainck_to_xtal+0x50>)
  4003ac:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4003ae:	620b      	str	r3, [r1, #32]
  4003b0:	4770      	bx	lr
  4003b2:	bf00      	nop
  4003b4:	400e0400 	.word	0x400e0400
  4003b8:	fec8fffc 	.word	0xfec8fffc
  4003bc:	01370002 	.word	0x01370002

004003c0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4003c0:	4b02      	ldr	r3, [pc, #8]	; (4003cc <pmc_osc_is_ready_mainck+0xc>)
  4003c2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4003c4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4003c8:	4770      	bx	lr
  4003ca:	bf00      	nop
  4003cc:	400e0400 	.word	0x400e0400

004003d0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4003d0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4003d4:	4b01      	ldr	r3, [pc, #4]	; (4003dc <pmc_disable_pllack+0xc>)
  4003d6:	629a      	str	r2, [r3, #40]	; 0x28
  4003d8:	4770      	bx	lr
  4003da:	bf00      	nop
  4003dc:	400e0400 	.word	0x400e0400

004003e0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4003e0:	4b02      	ldr	r3, [pc, #8]	; (4003ec <pmc_is_locked_pllack+0xc>)
  4003e2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4003e4:	f000 0002 	and.w	r0, r0, #2
  4003e8:	4770      	bx	lr
  4003ea:	bf00      	nop
  4003ec:	400e0400 	.word	0x400e0400

004003f0 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  4003f0:	282f      	cmp	r0, #47	; 0x2f
  4003f2:	d81e      	bhi.n	400432 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4003f4:	281f      	cmp	r0, #31
  4003f6:	d80c      	bhi.n	400412 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4003f8:	4b11      	ldr	r3, [pc, #68]	; (400440 <pmc_enable_periph_clk+0x50>)
  4003fa:	699a      	ldr	r2, [r3, #24]
  4003fc:	2301      	movs	r3, #1
  4003fe:	4083      	lsls	r3, r0
  400400:	4393      	bics	r3, r2
  400402:	d018      	beq.n	400436 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400404:	2301      	movs	r3, #1
  400406:	fa03 f000 	lsl.w	r0, r3, r0
  40040a:	4b0d      	ldr	r3, [pc, #52]	; (400440 <pmc_enable_periph_clk+0x50>)
  40040c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40040e:	2000      	movs	r0, #0
  400410:	4770      	bx	lr
		ul_id -= 32;
  400412:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400414:	4b0a      	ldr	r3, [pc, #40]	; (400440 <pmc_enable_periph_clk+0x50>)
  400416:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40041a:	2301      	movs	r3, #1
  40041c:	4083      	lsls	r3, r0
  40041e:	4393      	bics	r3, r2
  400420:	d00b      	beq.n	40043a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400422:	2301      	movs	r3, #1
  400424:	fa03 f000 	lsl.w	r0, r3, r0
  400428:	4b05      	ldr	r3, [pc, #20]	; (400440 <pmc_enable_periph_clk+0x50>)
  40042a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  40042e:	2000      	movs	r0, #0
  400430:	4770      	bx	lr
		return 1;
  400432:	2001      	movs	r0, #1
  400434:	4770      	bx	lr
	return 0;
  400436:	2000      	movs	r0, #0
  400438:	4770      	bx	lr
  40043a:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  40043c:	4770      	bx	lr
  40043e:	bf00      	nop
  400440:	400e0400 	.word	0x400e0400

00400444 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400444:	e7fe      	b.n	400444 <Dummy_Handler>
	...

00400448 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400448:	b500      	push	{lr}
  40044a:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  40044c:	4b25      	ldr	r3, [pc, #148]	; (4004e4 <Reset_Handler+0x9c>)
  40044e:	4a26      	ldr	r2, [pc, #152]	; (4004e8 <Reset_Handler+0xa0>)
  400450:	429a      	cmp	r2, r3
  400452:	d010      	beq.n	400476 <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
  400454:	4b25      	ldr	r3, [pc, #148]	; (4004ec <Reset_Handler+0xa4>)
  400456:	4a23      	ldr	r2, [pc, #140]	; (4004e4 <Reset_Handler+0x9c>)
  400458:	429a      	cmp	r2, r3
  40045a:	d20c      	bcs.n	400476 <Reset_Handler+0x2e>
  40045c:	3b01      	subs	r3, #1
  40045e:	1a9b      	subs	r3, r3, r2
  400460:	f023 0303 	bic.w	r3, r3, #3
  400464:	3304      	adds	r3, #4
  400466:	4413      	add	r3, r2
  400468:	491f      	ldr	r1, [pc, #124]	; (4004e8 <Reset_Handler+0xa0>)
			*pDest++ = *pSrc++;
  40046a:	f851 0b04 	ldr.w	r0, [r1], #4
  40046e:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  400472:	429a      	cmp	r2, r3
  400474:	d1f9      	bne.n	40046a <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400476:	4b1e      	ldr	r3, [pc, #120]	; (4004f0 <Reset_Handler+0xa8>)
  400478:	4a1e      	ldr	r2, [pc, #120]	; (4004f4 <Reset_Handler+0xac>)
  40047a:	429a      	cmp	r2, r3
  40047c:	d20a      	bcs.n	400494 <Reset_Handler+0x4c>
  40047e:	3b01      	subs	r3, #1
  400480:	1a9b      	subs	r3, r3, r2
  400482:	f023 0303 	bic.w	r3, r3, #3
  400486:	3304      	adds	r3, #4
  400488:	4413      	add	r3, r2
		*pDest++ = 0;
  40048a:	2100      	movs	r1, #0
  40048c:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  400490:	4293      	cmp	r3, r2
  400492:	d1fb      	bne.n	40048c <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400494:	4a18      	ldr	r2, [pc, #96]	; (4004f8 <Reset_Handler+0xb0>)
  400496:	4b19      	ldr	r3, [pc, #100]	; (4004fc <Reset_Handler+0xb4>)
  400498:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40049c:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40049e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4004a2:	fab3 f383 	clz	r3, r3
  4004a6:	095b      	lsrs	r3, r3, #5
  4004a8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4004aa:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4004ac:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4004b0:	2200      	movs	r2, #0
  4004b2:	4b13      	ldr	r3, [pc, #76]	; (400500 <Reset_Handler+0xb8>)
  4004b4:	701a      	strb	r2, [r3, #0]
	return flags;
  4004b6:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4004b8:	4a12      	ldr	r2, [pc, #72]	; (400504 <Reset_Handler+0xbc>)
  4004ba:	6813      	ldr	r3, [r2, #0]
  4004bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4004c0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4004c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4004c6:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4004ca:	b129      	cbz	r1, 4004d8 <Reset_Handler+0x90>
		cpu_irq_enable();
  4004cc:	2201      	movs	r2, #1
  4004ce:	4b0c      	ldr	r3, [pc, #48]	; (400500 <Reset_Handler+0xb8>)
  4004d0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  4004d2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4004d6:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  4004d8:	4b0b      	ldr	r3, [pc, #44]	; (400508 <Reset_Handler+0xc0>)
  4004da:	4798      	blx	r3

	/* Branch to main function */
	main();
  4004dc:	4b0b      	ldr	r3, [pc, #44]	; (40050c <Reset_Handler+0xc4>)
  4004de:	4798      	blx	r3
  4004e0:	e7fe      	b.n	4004e0 <Reset_Handler+0x98>
  4004e2:	bf00      	nop
  4004e4:	20000000 	.word	0x20000000
  4004e8:	00400864 	.word	0x00400864
  4004ec:	2000043c 	.word	0x2000043c
  4004f0:	2000047c 	.word	0x2000047c
  4004f4:	2000043c 	.word	0x2000043c
  4004f8:	e000ed00 	.word	0xe000ed00
  4004fc:	00400000 	.word	0x00400000
  400500:	2000000a 	.word	0x2000000a
  400504:	e000ed88 	.word	0xe000ed88
  400508:	004006cd 	.word	0x004006cd
  40050c:	00400691 	.word	0x00400691

00400510 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  400510:	4b3b      	ldr	r3, [pc, #236]	; (400600 <SystemCoreClockUpdate+0xf0>)
  400512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400514:	f003 0303 	and.w	r3, r3, #3
  400518:	2b01      	cmp	r3, #1
  40051a:	d01d      	beq.n	400558 <SystemCoreClockUpdate+0x48>
  40051c:	b183      	cbz	r3, 400540 <SystemCoreClockUpdate+0x30>
  40051e:	2b02      	cmp	r3, #2
  400520:	d036      	beq.n	400590 <SystemCoreClockUpdate+0x80>

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  400522:	4b37      	ldr	r3, [pc, #220]	; (400600 <SystemCoreClockUpdate+0xf0>)
  400524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400526:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40052a:	2b70      	cmp	r3, #112	; 0x70
  40052c:	d05f      	beq.n	4005ee <SystemCoreClockUpdate+0xde>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  40052e:	4b34      	ldr	r3, [pc, #208]	; (400600 <SystemCoreClockUpdate+0xf0>)
  400530:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400532:	4934      	ldr	r1, [pc, #208]	; (400604 <SystemCoreClockUpdate+0xf4>)
  400534:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400538:	680b      	ldr	r3, [r1, #0]
  40053a:	40d3      	lsrs	r3, r2
  40053c:	600b      	str	r3, [r1, #0]
  40053e:	4770      	bx	lr
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400540:	4b31      	ldr	r3, [pc, #196]	; (400608 <SystemCoreClockUpdate+0xf8>)
  400542:	695b      	ldr	r3, [r3, #20]
  400544:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400548:	bf14      	ite	ne
  40054a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40054e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400552:	4b2c      	ldr	r3, [pc, #176]	; (400604 <SystemCoreClockUpdate+0xf4>)
  400554:	601a      	str	r2, [r3, #0]
  400556:	e7e4      	b.n	400522 <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400558:	4b29      	ldr	r3, [pc, #164]	; (400600 <SystemCoreClockUpdate+0xf0>)
  40055a:	6a1b      	ldr	r3, [r3, #32]
  40055c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400560:	d003      	beq.n	40056a <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400562:	4a2a      	ldr	r2, [pc, #168]	; (40060c <SystemCoreClockUpdate+0xfc>)
  400564:	4b27      	ldr	r3, [pc, #156]	; (400604 <SystemCoreClockUpdate+0xf4>)
  400566:	601a      	str	r2, [r3, #0]
  400568:	e7db      	b.n	400522 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40056a:	4a29      	ldr	r2, [pc, #164]	; (400610 <SystemCoreClockUpdate+0x100>)
  40056c:	4b25      	ldr	r3, [pc, #148]	; (400604 <SystemCoreClockUpdate+0xf4>)
  40056e:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400570:	4b23      	ldr	r3, [pc, #140]	; (400600 <SystemCoreClockUpdate+0xf0>)
  400572:	6a1b      	ldr	r3, [r3, #32]
  400574:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400578:	2b10      	cmp	r3, #16
  40057a:	d005      	beq.n	400588 <SystemCoreClockUpdate+0x78>
  40057c:	2b20      	cmp	r3, #32
  40057e:	d1d0      	bne.n	400522 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  400580:	4a22      	ldr	r2, [pc, #136]	; (40060c <SystemCoreClockUpdate+0xfc>)
  400582:	4b20      	ldr	r3, [pc, #128]	; (400604 <SystemCoreClockUpdate+0xf4>)
  400584:	601a      	str	r2, [r3, #0]
				break;
  400586:	e7cc      	b.n	400522 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  400588:	4a22      	ldr	r2, [pc, #136]	; (400614 <SystemCoreClockUpdate+0x104>)
  40058a:	4b1e      	ldr	r3, [pc, #120]	; (400604 <SystemCoreClockUpdate+0xf4>)
  40058c:	601a      	str	r2, [r3, #0]
				break;
  40058e:	e7c8      	b.n	400522 <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400590:	4b1b      	ldr	r3, [pc, #108]	; (400600 <SystemCoreClockUpdate+0xf0>)
  400592:	6a1b      	ldr	r3, [r3, #32]
  400594:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400598:	d016      	beq.n	4005c8 <SystemCoreClockUpdate+0xb8>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40059a:	4a1c      	ldr	r2, [pc, #112]	; (40060c <SystemCoreClockUpdate+0xfc>)
  40059c:	4b19      	ldr	r3, [pc, #100]	; (400604 <SystemCoreClockUpdate+0xf4>)
  40059e:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  4005a0:	4b17      	ldr	r3, [pc, #92]	; (400600 <SystemCoreClockUpdate+0xf0>)
  4005a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4005a4:	f003 0303 	and.w	r3, r3, #3
  4005a8:	2b02      	cmp	r3, #2
  4005aa:	d1ba      	bne.n	400522 <SystemCoreClockUpdate+0x12>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4005ac:	4a14      	ldr	r2, [pc, #80]	; (400600 <SystemCoreClockUpdate+0xf0>)
  4005ae:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4005b0:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4005b2:	4814      	ldr	r0, [pc, #80]	; (400604 <SystemCoreClockUpdate+0xf4>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4005b4:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4005b8:	6803      	ldr	r3, [r0, #0]
  4005ba:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4005be:	b2d2      	uxtb	r2, r2
  4005c0:	fbb3 f3f2 	udiv	r3, r3, r2
  4005c4:	6003      	str	r3, [r0, #0]
  4005c6:	e7ac      	b.n	400522 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4005c8:	4a11      	ldr	r2, [pc, #68]	; (400610 <SystemCoreClockUpdate+0x100>)
  4005ca:	4b0e      	ldr	r3, [pc, #56]	; (400604 <SystemCoreClockUpdate+0xf4>)
  4005cc:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4005ce:	4b0c      	ldr	r3, [pc, #48]	; (400600 <SystemCoreClockUpdate+0xf0>)
  4005d0:	6a1b      	ldr	r3, [r3, #32]
  4005d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4005d6:	2b10      	cmp	r3, #16
  4005d8:	d005      	beq.n	4005e6 <SystemCoreClockUpdate+0xd6>
  4005da:	2b20      	cmp	r3, #32
  4005dc:	d1e0      	bne.n	4005a0 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
  4005de:	4a0b      	ldr	r2, [pc, #44]	; (40060c <SystemCoreClockUpdate+0xfc>)
  4005e0:	4b08      	ldr	r3, [pc, #32]	; (400604 <SystemCoreClockUpdate+0xf4>)
  4005e2:	601a      	str	r2, [r3, #0]
				break;
  4005e4:	e7dc      	b.n	4005a0 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
  4005e6:	4a0b      	ldr	r2, [pc, #44]	; (400614 <SystemCoreClockUpdate+0x104>)
  4005e8:	4b06      	ldr	r3, [pc, #24]	; (400604 <SystemCoreClockUpdate+0xf4>)
  4005ea:	601a      	str	r2, [r3, #0]
				break;
  4005ec:	e7d8      	b.n	4005a0 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  4005ee:	4a05      	ldr	r2, [pc, #20]	; (400604 <SystemCoreClockUpdate+0xf4>)
  4005f0:	6813      	ldr	r3, [r2, #0]
  4005f2:	4909      	ldr	r1, [pc, #36]	; (400618 <SystemCoreClockUpdate+0x108>)
  4005f4:	fba1 1303 	umull	r1, r3, r1, r3
  4005f8:	085b      	lsrs	r3, r3, #1
  4005fa:	6013      	str	r3, [r2, #0]
  4005fc:	4770      	bx	lr
  4005fe:	bf00      	nop
  400600:	400e0400 	.word	0x400e0400
  400604:	2000000c 	.word	0x2000000c
  400608:	400e1810 	.word	0x400e1810
  40060c:	00b71b00 	.word	0x00b71b00
  400610:	003d0900 	.word	0x003d0900
  400614:	007a1200 	.word	0x007a1200
  400618:	aaaaaaab 	.word	0xaaaaaaab

0040061c <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  40061c:	4b12      	ldr	r3, [pc, #72]	; (400668 <system_init_flash+0x4c>)
  40061e:	4298      	cmp	r0, r3
  400620:	d911      	bls.n	400646 <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  400622:	4b12      	ldr	r3, [pc, #72]	; (40066c <system_init_flash+0x50>)
  400624:	4298      	cmp	r0, r3
  400626:	d913      	bls.n	400650 <system_init_flash+0x34>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  400628:	4b11      	ldr	r3, [pc, #68]	; (400670 <system_init_flash+0x54>)
  40062a:	4298      	cmp	r0, r3
  40062c:	d914      	bls.n	400658 <system_init_flash+0x3c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  40062e:	4b11      	ldr	r3, [pc, #68]	; (400674 <system_init_flash+0x58>)
  400630:	4298      	cmp	r0, r3
  400632:	d915      	bls.n	400660 <system_init_flash+0x44>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400634:	4b10      	ldr	r3, [pc, #64]	; (400678 <system_init_flash+0x5c>)
  400636:	4298      	cmp	r0, r3
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400638:	bf94      	ite	ls
  40063a:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40063e:	4a0f      	ldrhi	r2, [pc, #60]	; (40067c <system_init_flash+0x60>)
  400640:	4b0f      	ldr	r3, [pc, #60]	; (400680 <system_init_flash+0x64>)
  400642:	601a      	str	r2, [r3, #0]
  400644:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400646:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40064a:	4b0d      	ldr	r3, [pc, #52]	; (400680 <system_init_flash+0x64>)
  40064c:	601a      	str	r2, [r3, #0]
  40064e:	4770      	bx	lr
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400650:	4a0c      	ldr	r2, [pc, #48]	; (400684 <system_init_flash+0x68>)
  400652:	4b0b      	ldr	r3, [pc, #44]	; (400680 <system_init_flash+0x64>)
  400654:	601a      	str	r2, [r3, #0]
  400656:	4770      	bx	lr
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400658:	4a0b      	ldr	r2, [pc, #44]	; (400688 <system_init_flash+0x6c>)
  40065a:	4b09      	ldr	r3, [pc, #36]	; (400680 <system_init_flash+0x64>)
  40065c:	601a      	str	r2, [r3, #0]
  40065e:	4770      	bx	lr
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400660:	4a0a      	ldr	r2, [pc, #40]	; (40068c <system_init_flash+0x70>)
  400662:	4b07      	ldr	r3, [pc, #28]	; (400680 <system_init_flash+0x64>)
  400664:	601a      	str	r2, [r3, #0]
  400666:	4770      	bx	lr
  400668:	01312cff 	.word	0x01312cff
  40066c:	026259ff 	.word	0x026259ff
  400670:	039386ff 	.word	0x039386ff
  400674:	04c4b3ff 	.word	0x04c4b3ff
  400678:	05f5e0ff 	.word	0x05f5e0ff
  40067c:	04000500 	.word	0x04000500
  400680:	400e0a00 	.word	0x400e0a00
  400684:	04000100 	.word	0x04000100
  400688:	04000200 	.word	0x04000200
  40068c:	04000300 	.word	0x04000300

00400690 <main>:
#include <asf.h>

int main (void)
{
  400690:	b508      	push	{r3, lr}
	sysclk_init();
  400692:	4b09      	ldr	r3, [pc, #36]	; (4006b8 <main+0x28>)
  400694:	4798      	blx	r3
	board_init();
  400696:	4b09      	ldr	r3, [pc, #36]	; (4006bc <main+0x2c>)
  400698:	4798      	blx	r3
	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  40069a:	4c09      	ldr	r4, [pc, #36]	; (4006c0 <main+0x30>)
	
	while(1){
		ioport_toggle_pin_level(LED1_GPIO);
		delay_ms(500);
  40069c:	4e09      	ldr	r6, [pc, #36]	; (4006c4 <main+0x34>)
  40069e:	4d0a      	ldr	r5, [pc, #40]	; (4006c8 <main+0x38>)
  4006a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4006a2:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
		port->PIO_CODR = mask;
  4006a6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  4006aa:	bf14      	ite	ne
  4006ac:	6363      	strne	r3, [r4, #52]	; 0x34
		port->PIO_SODR = mask;
  4006ae:	6323      	streq	r3, [r4, #48]	; 0x30
  4006b0:	4630      	mov	r0, r6
  4006b2:	47a8      	blx	r5
		ioport_toggle_pin_level(LED1_GPIO);
  4006b4:	e7f4      	b.n	4006a0 <main+0x10>
  4006b6:	bf00      	nop
  4006b8:	00400165 	.word	0x00400165
  4006bc:	004001cd 	.word	0x004001cd
  4006c0:	400e1400 	.word	0x400e1400
  4006c4:	003450dc 	.word	0x003450dc
  4006c8:	20000001 	.word	0x20000001

004006cc <__libc_init_array>:
  4006cc:	b570      	push	{r4, r5, r6, lr}
  4006ce:	4e0f      	ldr	r6, [pc, #60]	; (40070c <__libc_init_array+0x40>)
  4006d0:	4d0f      	ldr	r5, [pc, #60]	; (400710 <__libc_init_array+0x44>)
  4006d2:	1b76      	subs	r6, r6, r5
  4006d4:	10b6      	asrs	r6, r6, #2
  4006d6:	bf18      	it	ne
  4006d8:	2400      	movne	r4, #0
  4006da:	d005      	beq.n	4006e8 <__libc_init_array+0x1c>
  4006dc:	3401      	adds	r4, #1
  4006de:	f855 3b04 	ldr.w	r3, [r5], #4
  4006e2:	4798      	blx	r3
  4006e4:	42a6      	cmp	r6, r4
  4006e6:	d1f9      	bne.n	4006dc <__libc_init_array+0x10>
  4006e8:	4e0a      	ldr	r6, [pc, #40]	; (400714 <__libc_init_array+0x48>)
  4006ea:	4d0b      	ldr	r5, [pc, #44]	; (400718 <__libc_init_array+0x4c>)
  4006ec:	1b76      	subs	r6, r6, r5
  4006ee:	f000 f8a7 	bl	400840 <_init>
  4006f2:	10b6      	asrs	r6, r6, #2
  4006f4:	bf18      	it	ne
  4006f6:	2400      	movne	r4, #0
  4006f8:	d006      	beq.n	400708 <__libc_init_array+0x3c>
  4006fa:	3401      	adds	r4, #1
  4006fc:	f855 3b04 	ldr.w	r3, [r5], #4
  400700:	4798      	blx	r3
  400702:	42a6      	cmp	r6, r4
  400704:	d1f9      	bne.n	4006fa <__libc_init_array+0x2e>
  400706:	bd70      	pop	{r4, r5, r6, pc}
  400708:	bd70      	pop	{r4, r5, r6, pc}
  40070a:	bf00      	nop
  40070c:	0040084c 	.word	0x0040084c
  400710:	0040084c 	.word	0x0040084c
  400714:	00400854 	.word	0x00400854
  400718:	0040084c 	.word	0x0040084c

0040071c <register_fini>:
  40071c:	4b02      	ldr	r3, [pc, #8]	; (400728 <register_fini+0xc>)
  40071e:	b113      	cbz	r3, 400726 <register_fini+0xa>
  400720:	4802      	ldr	r0, [pc, #8]	; (40072c <register_fini+0x10>)
  400722:	f000 b805 	b.w	400730 <atexit>
  400726:	4770      	bx	lr
  400728:	00000000 	.word	0x00000000
  40072c:	0040073d 	.word	0x0040073d

00400730 <atexit>:
  400730:	2300      	movs	r3, #0
  400732:	4601      	mov	r1, r0
  400734:	461a      	mov	r2, r3
  400736:	4618      	mov	r0, r3
  400738:	f000 b81e 	b.w	400778 <__register_exitproc>

0040073c <__libc_fini_array>:
  40073c:	b538      	push	{r3, r4, r5, lr}
  40073e:	4c0a      	ldr	r4, [pc, #40]	; (400768 <__libc_fini_array+0x2c>)
  400740:	4d0a      	ldr	r5, [pc, #40]	; (40076c <__libc_fini_array+0x30>)
  400742:	1b64      	subs	r4, r4, r5
  400744:	10a4      	asrs	r4, r4, #2
  400746:	d00a      	beq.n	40075e <__libc_fini_array+0x22>
  400748:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40074c:	3b01      	subs	r3, #1
  40074e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  400752:	3c01      	subs	r4, #1
  400754:	f855 3904 	ldr.w	r3, [r5], #-4
  400758:	4798      	blx	r3
  40075a:	2c00      	cmp	r4, #0
  40075c:	d1f9      	bne.n	400752 <__libc_fini_array+0x16>
  40075e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  400762:	f000 b877 	b.w	400854 <_fini>
  400766:	bf00      	nop
  400768:	00400864 	.word	0x00400864
  40076c:	00400860 	.word	0x00400860

00400770 <__retarget_lock_acquire_recursive>:
  400770:	4770      	bx	lr
  400772:	bf00      	nop

00400774 <__retarget_lock_release_recursive>:
  400774:	4770      	bx	lr
  400776:	bf00      	nop

00400778 <__register_exitproc>:
  400778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40077c:	4d2c      	ldr	r5, [pc, #176]	; (400830 <__register_exitproc+0xb8>)
  40077e:	4606      	mov	r6, r0
  400780:	6828      	ldr	r0, [r5, #0]
  400782:	4698      	mov	r8, r3
  400784:	460f      	mov	r7, r1
  400786:	4691      	mov	r9, r2
  400788:	f7ff fff2 	bl	400770 <__retarget_lock_acquire_recursive>
  40078c:	4b29      	ldr	r3, [pc, #164]	; (400834 <__register_exitproc+0xbc>)
  40078e:	681c      	ldr	r4, [r3, #0]
  400790:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  400794:	2b00      	cmp	r3, #0
  400796:	d03e      	beq.n	400816 <__register_exitproc+0x9e>
  400798:	685a      	ldr	r2, [r3, #4]
  40079a:	2a1f      	cmp	r2, #31
  40079c:	dc1c      	bgt.n	4007d8 <__register_exitproc+0x60>
  40079e:	f102 0e01 	add.w	lr, r2, #1
  4007a2:	b176      	cbz	r6, 4007c2 <__register_exitproc+0x4a>
  4007a4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4007a8:	2401      	movs	r4, #1
  4007aa:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4007ae:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4007b2:	4094      	lsls	r4, r2
  4007b4:	4320      	orrs	r0, r4
  4007b6:	2e02      	cmp	r6, #2
  4007b8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4007bc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4007c0:	d023      	beq.n	40080a <__register_exitproc+0x92>
  4007c2:	3202      	adds	r2, #2
  4007c4:	f8c3 e004 	str.w	lr, [r3, #4]
  4007c8:	6828      	ldr	r0, [r5, #0]
  4007ca:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4007ce:	f7ff ffd1 	bl	400774 <__retarget_lock_release_recursive>
  4007d2:	2000      	movs	r0, #0
  4007d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4007d8:	4b17      	ldr	r3, [pc, #92]	; (400838 <__register_exitproc+0xc0>)
  4007da:	b30b      	cbz	r3, 400820 <__register_exitproc+0xa8>
  4007dc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4007e0:	f3af 8000 	nop.w
  4007e4:	4603      	mov	r3, r0
  4007e6:	b1d8      	cbz	r0, 400820 <__register_exitproc+0xa8>
  4007e8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4007ec:	6002      	str	r2, [r0, #0]
  4007ee:	2100      	movs	r1, #0
  4007f0:	6041      	str	r1, [r0, #4]
  4007f2:	460a      	mov	r2, r1
  4007f4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4007f8:	f04f 0e01 	mov.w	lr, #1
  4007fc:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  400800:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  400804:	2e00      	cmp	r6, #0
  400806:	d0dc      	beq.n	4007c2 <__register_exitproc+0x4a>
  400808:	e7cc      	b.n	4007a4 <__register_exitproc+0x2c>
  40080a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40080e:	430c      	orrs	r4, r1
  400810:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  400814:	e7d5      	b.n	4007c2 <__register_exitproc+0x4a>
  400816:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40081a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40081e:	e7bb      	b.n	400798 <__register_exitproc+0x20>
  400820:	6828      	ldr	r0, [r5, #0]
  400822:	f7ff ffa7 	bl	400774 <__retarget_lock_release_recursive>
  400826:	f04f 30ff 	mov.w	r0, #4294967295
  40082a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40082e:	bf00      	nop
  400830:	20000438 	.word	0x20000438
  400834:	0040083c 	.word	0x0040083c
  400838:	00000000 	.word	0x00000000

0040083c <_global_impure_ptr>:
  40083c:	20000010                                ... 

00400840 <_init>:
  400840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400842:	bf00      	nop
  400844:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400846:	bc08      	pop	{r3}
  400848:	469e      	mov	lr, r3
  40084a:	4770      	bx	lr

0040084c <__init_array_start>:
  40084c:	0040071d 	.word	0x0040071d

00400850 <__frame_dummy_init_array_entry>:
  400850:	0040011d                                ..@.

00400854 <_fini>:
  400854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400856:	bf00      	nop
  400858:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40085a:	bc08      	pop	{r3}
  40085c:	469e      	mov	lr, r3
  40085e:	4770      	bx	lr

00400860 <__fini_array_start>:
  400860:	004000f9 	.word	0x004000f9

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr

2000000a <g_interrupt_enabled>:
2000000a:	0001                                        ..

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <impure_data>:
20000010:	0000 0000 02fc 2000 0364 2000 03cc 2000     ....... d.. ... 
	...
200000b8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000c8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000438 <__atexit_recursive_mutex>:
20000438:	0458 2000                                   X.. 
