
laboratory1_sol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000095c  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000043c  20000000  0040095c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000000b8  2000043c  00400d98  0002043c  2**2
                  ALLOC
  3 .stack        00003004  200004f4  00400e50  0002043c  2**0
                  ALLOC
  4 .ARM.attributes 0000002e  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002046a  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000bc8a  00000000  00000000  000204c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ac4  00000000  00000000  0002c14d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002331  00000000  00000000  0002dc11  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000520  00000000  00000000  0002ff42  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000004a0  00000000  00000000  00030462  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001599a  00000000  00000000  00030902  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00007019  00000000  00000000  0004629c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00061337  00000000  00000000  0004d2b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000bb4  00000000  00000000  000ae5ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	f8 34 00 20 3d 05 40 00 39 05 40 00 39 05 40 00     .4. =.@.9.@.9.@.
  400010:	39 05 40 00 39 05 40 00 39 05 40 00 00 00 00 00     9.@.9.@.9.@.....
	...
  40002c:	39 05 40 00 39 05 40 00 00 00 00 00 39 05 40 00     9.@.9.@.....9.@.
  40003c:	39 05 40 00 39 05 40 00 39 05 40 00 39 05 40 00     9.@.9.@.9.@.9.@.
  40004c:	39 05 40 00 39 05 40 00 39 05 40 00 39 05 40 00     9.@.9.@.9.@.9.@.
  40005c:	39 05 40 00 39 05 40 00 cd 01 40 00 e1 01 40 00     9.@.9.@...@...@.
  40006c:	f5 01 40 00 09 02 40 00 1d 02 40 00 39 05 40 00     ..@...@...@.9.@.
  40007c:	39 05 40 00 39 05 40 00 39 05 40 00 39 05 40 00     9.@.9.@.9.@.9.@.
  40008c:	39 05 40 00 39 05 40 00 39 05 40 00 39 05 40 00     9.@.9.@.9.@.9.@.
  40009c:	39 05 40 00 39 05 40 00 39 05 40 00 39 05 40 00     9.@.9.@.9.@.9.@.
  4000ac:	39 05 40 00 39 05 40 00 39 05 40 00 39 05 40 00     9.@.9.@.9.@.9.@.
  4000bc:	39 05 40 00 39 05 40 00 39 05 40 00 39 05 40 00     9.@.9.@.9.@.9.@.
  4000cc:	39 05 40 00 39 05 40 00 39 05 40 00 39 05 40 00     9.@.9.@.9.@.9.@.
  4000dc:	39 05 40 00 39 05 40 00 39 05 40 00 39 05 40 00     9.@.9.@.9.@.9.@.
  4000ec:	39 05 40 00 39 05 40 00 39 05 40 00                 9.@.9.@.9.@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	2000043c 	.word	0x2000043c
  400114:	00000000 	.word	0x00000000
  400118:	0040095c 	.word	0x0040095c

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	0040095c 	.word	0x0040095c
  400158:	20000440 	.word	0x20000440
  40015c:	0040095c 	.word	0x0040095c
  400160:	00000000 	.word	0x00000000

00400164 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400168:	4681      	mov	r9, r0
  40016a:	460f      	mov	r7, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40016c:	4b12      	ldr	r3, [pc, #72]	; (4001b8 <pio_handler_process+0x54>)
  40016e:	4798      	blx	r3
  400170:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400172:	4648      	mov	r0, r9
  400174:	4b11      	ldr	r3, [pc, #68]	; (4001bc <pio_handler_process+0x58>)
  400176:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400178:	4005      	ands	r5, r0
  40017a:	d013      	beq.n	4001a4 <pio_handler_process+0x40>
  40017c:	4c10      	ldr	r4, [pc, #64]	; (4001c0 <pio_handler_process+0x5c>)
  40017e:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400182:	e003      	b.n	40018c <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400184:	42b4      	cmp	r4, r6
  400186:	d00d      	beq.n	4001a4 <pio_handler_process+0x40>
  400188:	3410      	adds	r4, #16
		while (status != 0) {
  40018a:	b15d      	cbz	r5, 4001a4 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  40018c:	6820      	ldr	r0, [r4, #0]
  40018e:	42b8      	cmp	r0, r7
  400190:	d1f8      	bne.n	400184 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400192:	6861      	ldr	r1, [r4, #4]
  400194:	4229      	tst	r1, r5
  400196:	d0f5      	beq.n	400184 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400198:	68e3      	ldr	r3, [r4, #12]
  40019a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  40019c:	6863      	ldr	r3, [r4, #4]
  40019e:	ea25 0503 	bic.w	r5, r5, r3
  4001a2:	e7ef      	b.n	400184 <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4001a4:	4b07      	ldr	r3, [pc, #28]	; (4001c4 <pio_handler_process+0x60>)
  4001a6:	681b      	ldr	r3, [r3, #0]
  4001a8:	b123      	cbz	r3, 4001b4 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  4001aa:	4b07      	ldr	r3, [pc, #28]	; (4001c8 <pio_handler_process+0x64>)
  4001ac:	681b      	ldr	r3, [r3, #0]
  4001ae:	b10b      	cbz	r3, 4001b4 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  4001b0:	4648      	mov	r0, r9
  4001b2:	4798      	blx	r3
  4001b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4001b8:	00400231 	.word	0x00400231
  4001bc:	00400235 	.word	0x00400235
  4001c0:	20000458 	.word	0x20000458
  4001c4:	200004cc 	.word	0x200004cc
  4001c8:	200004c8 	.word	0x200004c8

004001cc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4001cc:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4001ce:	2109      	movs	r1, #9
  4001d0:	4801      	ldr	r0, [pc, #4]	; (4001d8 <PIOA_Handler+0xc>)
  4001d2:	4b02      	ldr	r3, [pc, #8]	; (4001dc <PIOA_Handler+0x10>)
  4001d4:	4798      	blx	r3
  4001d6:	bd08      	pop	{r3, pc}
  4001d8:	400e0e00 	.word	0x400e0e00
  4001dc:	00400165 	.word	0x00400165

004001e0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4001e0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4001e2:	210a      	movs	r1, #10
  4001e4:	4801      	ldr	r0, [pc, #4]	; (4001ec <PIOB_Handler+0xc>)
  4001e6:	4b02      	ldr	r3, [pc, #8]	; (4001f0 <PIOB_Handler+0x10>)
  4001e8:	4798      	blx	r3
  4001ea:	bd08      	pop	{r3, pc}
  4001ec:	400e1000 	.word	0x400e1000
  4001f0:	00400165 	.word	0x00400165

004001f4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4001f4:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4001f6:	210b      	movs	r1, #11
  4001f8:	4801      	ldr	r0, [pc, #4]	; (400200 <PIOC_Handler+0xc>)
  4001fa:	4b02      	ldr	r3, [pc, #8]	; (400204 <PIOC_Handler+0x10>)
  4001fc:	4798      	blx	r3
  4001fe:	bd08      	pop	{r3, pc}
  400200:	400e1200 	.word	0x400e1200
  400204:	00400165 	.word	0x00400165

00400208 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400208:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40020a:	210c      	movs	r1, #12
  40020c:	4801      	ldr	r0, [pc, #4]	; (400214 <PIOD_Handler+0xc>)
  40020e:	4b02      	ldr	r3, [pc, #8]	; (400218 <PIOD_Handler+0x10>)
  400210:	4798      	blx	r3
  400212:	bd08      	pop	{r3, pc}
  400214:	400e1400 	.word	0x400e1400
  400218:	00400165 	.word	0x00400165

0040021c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  40021c:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  40021e:	210d      	movs	r1, #13
  400220:	4801      	ldr	r0, [pc, #4]	; (400228 <PIOE_Handler+0xc>)
  400222:	4b02      	ldr	r3, [pc, #8]	; (40022c <PIOE_Handler+0x10>)
  400224:	4798      	blx	r3
  400226:	bd08      	pop	{r3, pc}
  400228:	400e1600 	.word	0x400e1600
  40022c:	00400165 	.word	0x00400165

00400230 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400230:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400232:	4770      	bx	lr

00400234 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400234:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400236:	4770      	bx	lr

00400238 <pio_toggle_pin>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400238:	0943      	lsrs	r3, r0, #5
  40023a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40023e:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400242:	025b      	lsls	r3, r3, #9
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
  400244:	6b99      	ldr	r1, [r3, #56]	; 0x38
  400246:	f000 021f 	and.w	r2, r0, #31
  40024a:	2001      	movs	r0, #1
  40024c:	4090      	lsls	r0, r2
  40024e:	4201      	tst	r1, r0
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  400250:	bf14      	ite	ne
  400252:	6358      	strne	r0, [r3, #52]	; 0x34
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  400254:	6318      	streq	r0, [r3, #48]	; 0x30
  400256:	4770      	bx	lr

00400258 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400258:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40025a:	480e      	ldr	r0, [pc, #56]	; (400294 <sysclk_init+0x3c>)
  40025c:	4b0e      	ldr	r3, [pc, #56]	; (400298 <sysclk_init+0x40>)
  40025e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400260:	213e      	movs	r1, #62	; 0x3e
  400262:	2000      	movs	r0, #0
  400264:	4b0d      	ldr	r3, [pc, #52]	; (40029c <sysclk_init+0x44>)
  400266:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400268:	4c0d      	ldr	r4, [pc, #52]	; (4002a0 <sysclk_init+0x48>)
  40026a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40026c:	2800      	cmp	r0, #0
  40026e:	d0fc      	beq.n	40026a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400270:	4b0c      	ldr	r3, [pc, #48]	; (4002a4 <sysclk_init+0x4c>)
  400272:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400274:	4a0c      	ldr	r2, [pc, #48]	; (4002a8 <sysclk_init+0x50>)
  400276:	4b0d      	ldr	r3, [pc, #52]	; (4002ac <sysclk_init+0x54>)
  400278:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  40027a:	4c0d      	ldr	r4, [pc, #52]	; (4002b0 <sysclk_init+0x58>)
  40027c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40027e:	2800      	cmp	r0, #0
  400280:	d0fc      	beq.n	40027c <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400282:	2010      	movs	r0, #16
  400284:	4b0b      	ldr	r3, [pc, #44]	; (4002b4 <sysclk_init+0x5c>)
  400286:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400288:	4b0b      	ldr	r3, [pc, #44]	; (4002b8 <sysclk_init+0x60>)
  40028a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40028c:	480b      	ldr	r0, [pc, #44]	; (4002bc <sysclk_init+0x64>)
  40028e:	4b02      	ldr	r3, [pc, #8]	; (400298 <sysclk_init+0x40>)
  400290:	4798      	blx	r3
  400292:	bd10      	pop	{r4, pc}
  400294:	07270e00 	.word	0x07270e00
  400298:	00400711 	.word	0x00400711
  40029c:	00400461 	.word	0x00400461
  4002a0:	004004b5 	.word	0x004004b5
  4002a4:	004004c5 	.word	0x004004c5
  4002a8:	200f3f01 	.word	0x200f3f01
  4002ac:	400e0400 	.word	0x400e0400
  4002b0:	004004d5 	.word	0x004004d5
  4002b4:	004003fd 	.word	0x004003fd
  4002b8:	00400605 	.word	0x00400605
  4002bc:	05b8d800 	.word	0x05b8d800

004002c0 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  4002c0:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4002c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4002c6:	4b49      	ldr	r3, [pc, #292]	; (4003ec <board_init+0x12c>)
  4002c8:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4002ca:	2009      	movs	r0, #9
  4002cc:	4c48      	ldr	r4, [pc, #288]	; (4003f0 <board_init+0x130>)
  4002ce:	47a0      	blx	r4
  4002d0:	200a      	movs	r0, #10
  4002d2:	47a0      	blx	r4
  4002d4:	200b      	movs	r0, #11
  4002d6:	47a0      	blx	r4
  4002d8:	200c      	movs	r0, #12
  4002da:	47a0      	blx	r4
  4002dc:	200d      	movs	r0, #13
  4002de:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4002e0:	4b44      	ldr	r3, [pc, #272]	; (4003f4 <board_init+0x134>)
  4002e2:	2201      	movs	r2, #1
  4002e4:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4002e6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4002ea:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4002ec:	4942      	ldr	r1, [pc, #264]	; (4003f8 <board_init+0x138>)
  4002ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  4002f2:	610a      	str	r2, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4002f4:	f8c1 20a0 	str.w	r2, [r1, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4002f8:	630a      	str	r2, [r1, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4002fa:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  4002fe:	6108      	str	r0, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400300:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400304:	6308      	str	r0, [r1, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400306:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  40030a:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40030c:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400310:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400312:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400316:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400318:	6219      	str	r1, [r3, #32]
		base->PIO_IFSCER = mask;
  40031a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  40031e:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400320:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
  400324:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400326:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400328:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
  40032c:	6758      	str	r0, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  40032e:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400332:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400336:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40033a:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40033c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400340:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400342:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400346:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400348:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  40034a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  40034e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400350:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
  400354:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400356:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400358:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
  40035c:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  40035e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  400362:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	base->PIO_AIMER = mask;
  400366:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40036a:	2202      	movs	r2, #2
  40036c:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40036e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400372:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400374:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400378:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  40037a:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  40037c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400380:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400382:	f021 0102 	bic.w	r1, r1, #2
  400386:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400388:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40038a:	f021 0102 	bic.w	r1, r1, #2
  40038e:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_AIMDR = mask;
  400390:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400394:	2204      	movs	r2, #4
  400396:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400398:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40039c:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40039e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003a2:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4003a4:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4003a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4003aa:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003ac:	f021 0104 	bic.w	r1, r1, #4
  4003b0:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003b2:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003b4:	f021 0104 	bic.w	r1, r1, #4
  4003b8:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  4003ba:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4003be:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	base->PIO_AIMER = mask;
  4003c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4003c6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4003ca:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4003cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003d0:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4003d2:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4003d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4003d8:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003da:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  4003de:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003e0:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003e2:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  4003e6:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003e8:	605a      	str	r2, [r3, #4]
  4003ea:	bd10      	pop	{r4, pc}
  4003ec:	400e1850 	.word	0x400e1850
  4003f0:	004004e5 	.word	0x004004e5
  4003f4:	400e0e00 	.word	0x400e0e00
  4003f8:	400e1400 	.word	0x400e1400

004003fc <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4003fc:	4a17      	ldr	r2, [pc, #92]	; (40045c <pmc_switch_mck_to_pllack+0x60>)
  4003fe:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400404:	4318      	orrs	r0, r3
  400406:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400408:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40040a:	f013 0f08 	tst.w	r3, #8
  40040e:	d10a      	bne.n	400426 <pmc_switch_mck_to_pllack+0x2a>
  400410:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400414:	4911      	ldr	r1, [pc, #68]	; (40045c <pmc_switch_mck_to_pllack+0x60>)
  400416:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400418:	f012 0f08 	tst.w	r2, #8
  40041c:	d103      	bne.n	400426 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40041e:	3b01      	subs	r3, #1
  400420:	d1f9      	bne.n	400416 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400422:	2001      	movs	r0, #1
  400424:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400426:	4a0d      	ldr	r2, [pc, #52]	; (40045c <pmc_switch_mck_to_pllack+0x60>)
  400428:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40042a:	f023 0303 	bic.w	r3, r3, #3
  40042e:	f043 0302 	orr.w	r3, r3, #2
  400432:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400434:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400436:	f013 0f08 	tst.w	r3, #8
  40043a:	d10a      	bne.n	400452 <pmc_switch_mck_to_pllack+0x56>
  40043c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400440:	4906      	ldr	r1, [pc, #24]	; (40045c <pmc_switch_mck_to_pllack+0x60>)
  400442:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400444:	f012 0f08 	tst.w	r2, #8
  400448:	d105      	bne.n	400456 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40044a:	3b01      	subs	r3, #1
  40044c:	d1f9      	bne.n	400442 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40044e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400450:	4770      	bx	lr
	return 0;
  400452:	2000      	movs	r0, #0
  400454:	4770      	bx	lr
  400456:	2000      	movs	r0, #0
  400458:	4770      	bx	lr
  40045a:	bf00      	nop
  40045c:	400e0400 	.word	0x400e0400

00400460 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400460:	b9c8      	cbnz	r0, 400496 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400462:	4a11      	ldr	r2, [pc, #68]	; (4004a8 <pmc_switch_mainck_to_xtal+0x48>)
  400464:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400466:	0209      	lsls	r1, r1, #8
  400468:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40046a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40046e:	f023 0303 	bic.w	r3, r3, #3
  400472:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400476:	f043 0301 	orr.w	r3, r3, #1
  40047a:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40047c:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40047e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400480:	f013 0f01 	tst.w	r3, #1
  400484:	d0fb      	beq.n	40047e <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400486:	4a08      	ldr	r2, [pc, #32]	; (4004a8 <pmc_switch_mainck_to_xtal+0x48>)
  400488:	6a13      	ldr	r3, [r2, #32]
  40048a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40048e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400492:	6213      	str	r3, [r2, #32]
  400494:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400496:	4904      	ldr	r1, [pc, #16]	; (4004a8 <pmc_switch_mainck_to_xtal+0x48>)
  400498:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40049a:	4a04      	ldr	r2, [pc, #16]	; (4004ac <pmc_switch_mainck_to_xtal+0x4c>)
  40049c:	401a      	ands	r2, r3
  40049e:	4b04      	ldr	r3, [pc, #16]	; (4004b0 <pmc_switch_mainck_to_xtal+0x50>)
  4004a0:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4004a2:	620b      	str	r3, [r1, #32]
  4004a4:	4770      	bx	lr
  4004a6:	bf00      	nop
  4004a8:	400e0400 	.word	0x400e0400
  4004ac:	fec8fffc 	.word	0xfec8fffc
  4004b0:	01370002 	.word	0x01370002

004004b4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4004b4:	4b02      	ldr	r3, [pc, #8]	; (4004c0 <pmc_osc_is_ready_mainck+0xc>)
  4004b6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4004b8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4004bc:	4770      	bx	lr
  4004be:	bf00      	nop
  4004c0:	400e0400 	.word	0x400e0400

004004c4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4004c4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4004c8:	4b01      	ldr	r3, [pc, #4]	; (4004d0 <pmc_disable_pllack+0xc>)
  4004ca:	629a      	str	r2, [r3, #40]	; 0x28
  4004cc:	4770      	bx	lr
  4004ce:	bf00      	nop
  4004d0:	400e0400 	.word	0x400e0400

004004d4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4004d4:	4b02      	ldr	r3, [pc, #8]	; (4004e0 <pmc_is_locked_pllack+0xc>)
  4004d6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4004d8:	f000 0002 	and.w	r0, r0, #2
  4004dc:	4770      	bx	lr
  4004de:	bf00      	nop
  4004e0:	400e0400 	.word	0x400e0400

004004e4 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  4004e4:	282f      	cmp	r0, #47	; 0x2f
  4004e6:	d81e      	bhi.n	400526 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4004e8:	281f      	cmp	r0, #31
  4004ea:	d80c      	bhi.n	400506 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4004ec:	4b11      	ldr	r3, [pc, #68]	; (400534 <pmc_enable_periph_clk+0x50>)
  4004ee:	699a      	ldr	r2, [r3, #24]
  4004f0:	2301      	movs	r3, #1
  4004f2:	4083      	lsls	r3, r0
  4004f4:	4393      	bics	r3, r2
  4004f6:	d018      	beq.n	40052a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4004f8:	2301      	movs	r3, #1
  4004fa:	fa03 f000 	lsl.w	r0, r3, r0
  4004fe:	4b0d      	ldr	r3, [pc, #52]	; (400534 <pmc_enable_periph_clk+0x50>)
  400500:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400502:	2000      	movs	r0, #0
  400504:	4770      	bx	lr
		ul_id -= 32;
  400506:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400508:	4b0a      	ldr	r3, [pc, #40]	; (400534 <pmc_enable_periph_clk+0x50>)
  40050a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40050e:	2301      	movs	r3, #1
  400510:	4083      	lsls	r3, r0
  400512:	4393      	bics	r3, r2
  400514:	d00b      	beq.n	40052e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400516:	2301      	movs	r3, #1
  400518:	fa03 f000 	lsl.w	r0, r3, r0
  40051c:	4b05      	ldr	r3, [pc, #20]	; (400534 <pmc_enable_periph_clk+0x50>)
  40051e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  400522:	2000      	movs	r0, #0
  400524:	4770      	bx	lr
		return 1;
  400526:	2001      	movs	r0, #1
  400528:	4770      	bx	lr
	return 0;
  40052a:	2000      	movs	r0, #0
  40052c:	4770      	bx	lr
  40052e:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  400530:	4770      	bx	lr
  400532:	bf00      	nop
  400534:	400e0400 	.word	0x400e0400

00400538 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400538:	e7fe      	b.n	400538 <Dummy_Handler>
	...

0040053c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  40053c:	b500      	push	{lr}
  40053e:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  400540:	4b25      	ldr	r3, [pc, #148]	; (4005d8 <Reset_Handler+0x9c>)
  400542:	4a26      	ldr	r2, [pc, #152]	; (4005dc <Reset_Handler+0xa0>)
  400544:	429a      	cmp	r2, r3
  400546:	d010      	beq.n	40056a <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
  400548:	4b25      	ldr	r3, [pc, #148]	; (4005e0 <Reset_Handler+0xa4>)
  40054a:	4a23      	ldr	r2, [pc, #140]	; (4005d8 <Reset_Handler+0x9c>)
  40054c:	429a      	cmp	r2, r3
  40054e:	d20c      	bcs.n	40056a <Reset_Handler+0x2e>
  400550:	3b01      	subs	r3, #1
  400552:	1a9b      	subs	r3, r3, r2
  400554:	f023 0303 	bic.w	r3, r3, #3
  400558:	3304      	adds	r3, #4
  40055a:	4413      	add	r3, r2
  40055c:	491f      	ldr	r1, [pc, #124]	; (4005dc <Reset_Handler+0xa0>)
			*pDest++ = *pSrc++;
  40055e:	f851 0b04 	ldr.w	r0, [r1], #4
  400562:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  400566:	429a      	cmp	r2, r3
  400568:	d1f9      	bne.n	40055e <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40056a:	4b1e      	ldr	r3, [pc, #120]	; (4005e4 <Reset_Handler+0xa8>)
  40056c:	4a1e      	ldr	r2, [pc, #120]	; (4005e8 <Reset_Handler+0xac>)
  40056e:	429a      	cmp	r2, r3
  400570:	d20a      	bcs.n	400588 <Reset_Handler+0x4c>
  400572:	3b01      	subs	r3, #1
  400574:	1a9b      	subs	r3, r3, r2
  400576:	f023 0303 	bic.w	r3, r3, #3
  40057a:	3304      	adds	r3, #4
  40057c:	4413      	add	r3, r2
		*pDest++ = 0;
  40057e:	2100      	movs	r1, #0
  400580:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  400584:	4293      	cmp	r3, r2
  400586:	d1fb      	bne.n	400580 <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400588:	4a18      	ldr	r2, [pc, #96]	; (4005ec <Reset_Handler+0xb0>)
  40058a:	4b19      	ldr	r3, [pc, #100]	; (4005f0 <Reset_Handler+0xb4>)
  40058c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400590:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400592:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400596:	fab3 f383 	clz	r3, r3
  40059a:	095b      	lsrs	r3, r3, #5
  40059c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40059e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4005a0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4005a4:	2200      	movs	r2, #0
  4005a6:	4b13      	ldr	r3, [pc, #76]	; (4005f4 <Reset_Handler+0xb8>)
  4005a8:	701a      	strb	r2, [r3, #0]
	return flags;
  4005aa:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4005ac:	4a12      	ldr	r2, [pc, #72]	; (4005f8 <Reset_Handler+0xbc>)
  4005ae:	6813      	ldr	r3, [r2, #0]
  4005b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4005b4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4005b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4005ba:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4005be:	b129      	cbz	r1, 4005cc <Reset_Handler+0x90>
		cpu_irq_enable();
  4005c0:	2201      	movs	r2, #1
  4005c2:	4b0c      	ldr	r3, [pc, #48]	; (4005f4 <Reset_Handler+0xb8>)
  4005c4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  4005c6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4005ca:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  4005cc:	4b0b      	ldr	r3, [pc, #44]	; (4005fc <Reset_Handler+0xc0>)
  4005ce:	4798      	blx	r3

	/* Branch to main function */
	main();
  4005d0:	4b0b      	ldr	r3, [pc, #44]	; (400600 <Reset_Handler+0xc4>)
  4005d2:	4798      	blx	r3
  4005d4:	e7fe      	b.n	4005d4 <Reset_Handler+0x98>
  4005d6:	bf00      	nop
  4005d8:	20000000 	.word	0x20000000
  4005dc:	0040095c 	.word	0x0040095c
  4005e0:	2000043c 	.word	0x2000043c
  4005e4:	200004f4 	.word	0x200004f4
  4005e8:	2000043c 	.word	0x2000043c
  4005ec:	e000ed00 	.word	0xe000ed00
  4005f0:	00400000 	.word	0x00400000
  4005f4:	2000000a 	.word	0x2000000a
  4005f8:	e000ed88 	.word	0xe000ed88
  4005fc:	004007c5 	.word	0x004007c5
  400600:	00400785 	.word	0x00400785

00400604 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  400604:	4b3b      	ldr	r3, [pc, #236]	; (4006f4 <SystemCoreClockUpdate+0xf0>)
  400606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400608:	f003 0303 	and.w	r3, r3, #3
  40060c:	2b01      	cmp	r3, #1
  40060e:	d01d      	beq.n	40064c <SystemCoreClockUpdate+0x48>
  400610:	b183      	cbz	r3, 400634 <SystemCoreClockUpdate+0x30>
  400612:	2b02      	cmp	r3, #2
  400614:	d036      	beq.n	400684 <SystemCoreClockUpdate+0x80>

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  400616:	4b37      	ldr	r3, [pc, #220]	; (4006f4 <SystemCoreClockUpdate+0xf0>)
  400618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40061a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40061e:	2b70      	cmp	r3, #112	; 0x70
  400620:	d05f      	beq.n	4006e2 <SystemCoreClockUpdate+0xde>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  400622:	4b34      	ldr	r3, [pc, #208]	; (4006f4 <SystemCoreClockUpdate+0xf0>)
  400624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400626:	4934      	ldr	r1, [pc, #208]	; (4006f8 <SystemCoreClockUpdate+0xf4>)
  400628:	f3c2 1202 	ubfx	r2, r2, #4, #3
  40062c:	680b      	ldr	r3, [r1, #0]
  40062e:	40d3      	lsrs	r3, r2
  400630:	600b      	str	r3, [r1, #0]
  400632:	4770      	bx	lr
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400634:	4b31      	ldr	r3, [pc, #196]	; (4006fc <SystemCoreClockUpdate+0xf8>)
  400636:	695b      	ldr	r3, [r3, #20]
  400638:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40063c:	bf14      	ite	ne
  40063e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400642:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400646:	4b2c      	ldr	r3, [pc, #176]	; (4006f8 <SystemCoreClockUpdate+0xf4>)
  400648:	601a      	str	r2, [r3, #0]
  40064a:	e7e4      	b.n	400616 <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40064c:	4b29      	ldr	r3, [pc, #164]	; (4006f4 <SystemCoreClockUpdate+0xf0>)
  40064e:	6a1b      	ldr	r3, [r3, #32]
  400650:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400654:	d003      	beq.n	40065e <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400656:	4a2a      	ldr	r2, [pc, #168]	; (400700 <SystemCoreClockUpdate+0xfc>)
  400658:	4b27      	ldr	r3, [pc, #156]	; (4006f8 <SystemCoreClockUpdate+0xf4>)
  40065a:	601a      	str	r2, [r3, #0]
  40065c:	e7db      	b.n	400616 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40065e:	4a29      	ldr	r2, [pc, #164]	; (400704 <SystemCoreClockUpdate+0x100>)
  400660:	4b25      	ldr	r3, [pc, #148]	; (4006f8 <SystemCoreClockUpdate+0xf4>)
  400662:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400664:	4b23      	ldr	r3, [pc, #140]	; (4006f4 <SystemCoreClockUpdate+0xf0>)
  400666:	6a1b      	ldr	r3, [r3, #32]
  400668:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40066c:	2b10      	cmp	r3, #16
  40066e:	d005      	beq.n	40067c <SystemCoreClockUpdate+0x78>
  400670:	2b20      	cmp	r3, #32
  400672:	d1d0      	bne.n	400616 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  400674:	4a22      	ldr	r2, [pc, #136]	; (400700 <SystemCoreClockUpdate+0xfc>)
  400676:	4b20      	ldr	r3, [pc, #128]	; (4006f8 <SystemCoreClockUpdate+0xf4>)
  400678:	601a      	str	r2, [r3, #0]
				break;
  40067a:	e7cc      	b.n	400616 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  40067c:	4a22      	ldr	r2, [pc, #136]	; (400708 <SystemCoreClockUpdate+0x104>)
  40067e:	4b1e      	ldr	r3, [pc, #120]	; (4006f8 <SystemCoreClockUpdate+0xf4>)
  400680:	601a      	str	r2, [r3, #0]
				break;
  400682:	e7c8      	b.n	400616 <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400684:	4b1b      	ldr	r3, [pc, #108]	; (4006f4 <SystemCoreClockUpdate+0xf0>)
  400686:	6a1b      	ldr	r3, [r3, #32]
  400688:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40068c:	d016      	beq.n	4006bc <SystemCoreClockUpdate+0xb8>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40068e:	4a1c      	ldr	r2, [pc, #112]	; (400700 <SystemCoreClockUpdate+0xfc>)
  400690:	4b19      	ldr	r3, [pc, #100]	; (4006f8 <SystemCoreClockUpdate+0xf4>)
  400692:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  400694:	4b17      	ldr	r3, [pc, #92]	; (4006f4 <SystemCoreClockUpdate+0xf0>)
  400696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400698:	f003 0303 	and.w	r3, r3, #3
  40069c:	2b02      	cmp	r3, #2
  40069e:	d1ba      	bne.n	400616 <SystemCoreClockUpdate+0x12>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4006a0:	4a14      	ldr	r2, [pc, #80]	; (4006f4 <SystemCoreClockUpdate+0xf0>)
  4006a2:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4006a4:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4006a6:	4814      	ldr	r0, [pc, #80]	; (4006f8 <SystemCoreClockUpdate+0xf4>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4006a8:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4006ac:	6803      	ldr	r3, [r0, #0]
  4006ae:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4006b2:	b2d2      	uxtb	r2, r2
  4006b4:	fbb3 f3f2 	udiv	r3, r3, r2
  4006b8:	6003      	str	r3, [r0, #0]
  4006ba:	e7ac      	b.n	400616 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4006bc:	4a11      	ldr	r2, [pc, #68]	; (400704 <SystemCoreClockUpdate+0x100>)
  4006be:	4b0e      	ldr	r3, [pc, #56]	; (4006f8 <SystemCoreClockUpdate+0xf4>)
  4006c0:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4006c2:	4b0c      	ldr	r3, [pc, #48]	; (4006f4 <SystemCoreClockUpdate+0xf0>)
  4006c4:	6a1b      	ldr	r3, [r3, #32]
  4006c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4006ca:	2b10      	cmp	r3, #16
  4006cc:	d005      	beq.n	4006da <SystemCoreClockUpdate+0xd6>
  4006ce:	2b20      	cmp	r3, #32
  4006d0:	d1e0      	bne.n	400694 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
  4006d2:	4a0b      	ldr	r2, [pc, #44]	; (400700 <SystemCoreClockUpdate+0xfc>)
  4006d4:	4b08      	ldr	r3, [pc, #32]	; (4006f8 <SystemCoreClockUpdate+0xf4>)
  4006d6:	601a      	str	r2, [r3, #0]
				break;
  4006d8:	e7dc      	b.n	400694 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
  4006da:	4a0b      	ldr	r2, [pc, #44]	; (400708 <SystemCoreClockUpdate+0x104>)
  4006dc:	4b06      	ldr	r3, [pc, #24]	; (4006f8 <SystemCoreClockUpdate+0xf4>)
  4006de:	601a      	str	r2, [r3, #0]
				break;
  4006e0:	e7d8      	b.n	400694 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  4006e2:	4a05      	ldr	r2, [pc, #20]	; (4006f8 <SystemCoreClockUpdate+0xf4>)
  4006e4:	6813      	ldr	r3, [r2, #0]
  4006e6:	4909      	ldr	r1, [pc, #36]	; (40070c <SystemCoreClockUpdate+0x108>)
  4006e8:	fba1 1303 	umull	r1, r3, r1, r3
  4006ec:	085b      	lsrs	r3, r3, #1
  4006ee:	6013      	str	r3, [r2, #0]
  4006f0:	4770      	bx	lr
  4006f2:	bf00      	nop
  4006f4:	400e0400 	.word	0x400e0400
  4006f8:	2000000c 	.word	0x2000000c
  4006fc:	400e1810 	.word	0x400e1810
  400700:	00b71b00 	.word	0x00b71b00
  400704:	003d0900 	.word	0x003d0900
  400708:	007a1200 	.word	0x007a1200
  40070c:	aaaaaaab 	.word	0xaaaaaaab

00400710 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400710:	4b12      	ldr	r3, [pc, #72]	; (40075c <system_init_flash+0x4c>)
  400712:	4298      	cmp	r0, r3
  400714:	d911      	bls.n	40073a <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  400716:	4b12      	ldr	r3, [pc, #72]	; (400760 <system_init_flash+0x50>)
  400718:	4298      	cmp	r0, r3
  40071a:	d913      	bls.n	400744 <system_init_flash+0x34>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  40071c:	4b11      	ldr	r3, [pc, #68]	; (400764 <system_init_flash+0x54>)
  40071e:	4298      	cmp	r0, r3
  400720:	d914      	bls.n	40074c <system_init_flash+0x3c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400722:	4b11      	ldr	r3, [pc, #68]	; (400768 <system_init_flash+0x58>)
  400724:	4298      	cmp	r0, r3
  400726:	d915      	bls.n	400754 <system_init_flash+0x44>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400728:	4b10      	ldr	r3, [pc, #64]	; (40076c <system_init_flash+0x5c>)
  40072a:	4298      	cmp	r0, r3
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40072c:	bf94      	ite	ls
  40072e:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400732:	4a0f      	ldrhi	r2, [pc, #60]	; (400770 <system_init_flash+0x60>)
  400734:	4b0f      	ldr	r3, [pc, #60]	; (400774 <system_init_flash+0x64>)
  400736:	601a      	str	r2, [r3, #0]
  400738:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40073a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40073e:	4b0d      	ldr	r3, [pc, #52]	; (400774 <system_init_flash+0x64>)
  400740:	601a      	str	r2, [r3, #0]
  400742:	4770      	bx	lr
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400744:	4a0c      	ldr	r2, [pc, #48]	; (400778 <system_init_flash+0x68>)
  400746:	4b0b      	ldr	r3, [pc, #44]	; (400774 <system_init_flash+0x64>)
  400748:	601a      	str	r2, [r3, #0]
  40074a:	4770      	bx	lr
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40074c:	4a0b      	ldr	r2, [pc, #44]	; (40077c <system_init_flash+0x6c>)
  40074e:	4b09      	ldr	r3, [pc, #36]	; (400774 <system_init_flash+0x64>)
  400750:	601a      	str	r2, [r3, #0]
  400752:	4770      	bx	lr
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400754:	4a0a      	ldr	r2, [pc, #40]	; (400780 <system_init_flash+0x70>)
  400756:	4b07      	ldr	r3, [pc, #28]	; (400774 <system_init_flash+0x64>)
  400758:	601a      	str	r2, [r3, #0]
  40075a:	4770      	bx	lr
  40075c:	01312cff 	.word	0x01312cff
  400760:	026259ff 	.word	0x026259ff
  400764:	039386ff 	.word	0x039386ff
  400768:	04c4b3ff 	.word	0x04c4b3ff
  40076c:	05f5e0ff 	.word	0x05f5e0ff
  400770:	04000500 	.word	0x04000500
  400774:	400e0a00 	.word	0x400e0a00
  400778:	04000100 	.word	0x04000100
  40077c:	04000200 	.word	0x04000200
  400780:	04000300 	.word	0x04000300

00400784 <main>:
#include "sam4e_ek.h"
#include "delay.h"
#include "pio.h"

int main (void)
{
  400784:	b508      	push	{r3, lr}
	sysclk_init();
  400786:	4b0a      	ldr	r3, [pc, #40]	; (4007b0 <main+0x2c>)
  400788:	4798      	blx	r3
	board_init();
  40078a:	4b0a      	ldr	r3, [pc, #40]	; (4007b4 <main+0x30>)
  40078c:	4798      	blx	r3
	while (1)
	{
		pio_toggle_pin(PIO_PA0_IDX);
  40078e:	4e0a      	ldr	r6, [pc, #40]	; (4007b8 <main+0x34>)
		delay_ms(100);
  400790:	4d0a      	ldr	r5, [pc, #40]	; (4007bc <main+0x38>)
  400792:	4c0b      	ldr	r4, [pc, #44]	; (4007c0 <main+0x3c>)
		pio_toggle_pin(PIO_PA0_IDX);
  400794:	2000      	movs	r0, #0
  400796:	47b0      	blx	r6
		delay_ms(100);
  400798:	4628      	mov	r0, r5
  40079a:	47a0      	blx	r4
		pio_toggle_pin(PIO_PD20_IDX);
  40079c:	2074      	movs	r0, #116	; 0x74
  40079e:	47b0      	blx	r6
		delay_ms(100);
  4007a0:	4628      	mov	r0, r5
  4007a2:	47a0      	blx	r4
		pio_toggle_pin(PIO_PD21_IDX);
  4007a4:	2075      	movs	r0, #117	; 0x75
  4007a6:	47b0      	blx	r6
		delay_ms(100);
  4007a8:	4628      	mov	r0, r5
  4007aa:	47a0      	blx	r4
  4007ac:	e7f2      	b.n	400794 <main+0x10>
  4007ae:	bf00      	nop
  4007b0:	00400259 	.word	0x00400259
  4007b4:	004002c1 	.word	0x004002c1
  4007b8:	00400239 	.word	0x00400239
  4007bc:	000a7693 	.word	0x000a7693
  4007c0:	20000001 	.word	0x20000001

004007c4 <__libc_init_array>:
  4007c4:	b570      	push	{r4, r5, r6, lr}
  4007c6:	4e0f      	ldr	r6, [pc, #60]	; (400804 <__libc_init_array+0x40>)
  4007c8:	4d0f      	ldr	r5, [pc, #60]	; (400808 <__libc_init_array+0x44>)
  4007ca:	1b76      	subs	r6, r6, r5
  4007cc:	10b6      	asrs	r6, r6, #2
  4007ce:	bf18      	it	ne
  4007d0:	2400      	movne	r4, #0
  4007d2:	d005      	beq.n	4007e0 <__libc_init_array+0x1c>
  4007d4:	3401      	adds	r4, #1
  4007d6:	f855 3b04 	ldr.w	r3, [r5], #4
  4007da:	4798      	blx	r3
  4007dc:	42a6      	cmp	r6, r4
  4007de:	d1f9      	bne.n	4007d4 <__libc_init_array+0x10>
  4007e0:	4e0a      	ldr	r6, [pc, #40]	; (40080c <__libc_init_array+0x48>)
  4007e2:	4d0b      	ldr	r5, [pc, #44]	; (400810 <__libc_init_array+0x4c>)
  4007e4:	1b76      	subs	r6, r6, r5
  4007e6:	f000 f8a7 	bl	400938 <_init>
  4007ea:	10b6      	asrs	r6, r6, #2
  4007ec:	bf18      	it	ne
  4007ee:	2400      	movne	r4, #0
  4007f0:	d006      	beq.n	400800 <__libc_init_array+0x3c>
  4007f2:	3401      	adds	r4, #1
  4007f4:	f855 3b04 	ldr.w	r3, [r5], #4
  4007f8:	4798      	blx	r3
  4007fa:	42a6      	cmp	r6, r4
  4007fc:	d1f9      	bne.n	4007f2 <__libc_init_array+0x2e>
  4007fe:	bd70      	pop	{r4, r5, r6, pc}
  400800:	bd70      	pop	{r4, r5, r6, pc}
  400802:	bf00      	nop
  400804:	00400944 	.word	0x00400944
  400808:	00400944 	.word	0x00400944
  40080c:	0040094c 	.word	0x0040094c
  400810:	00400944 	.word	0x00400944

00400814 <register_fini>:
  400814:	4b02      	ldr	r3, [pc, #8]	; (400820 <register_fini+0xc>)
  400816:	b113      	cbz	r3, 40081e <register_fini+0xa>
  400818:	4802      	ldr	r0, [pc, #8]	; (400824 <register_fini+0x10>)
  40081a:	f000 b805 	b.w	400828 <atexit>
  40081e:	4770      	bx	lr
  400820:	00000000 	.word	0x00000000
  400824:	00400835 	.word	0x00400835

00400828 <atexit>:
  400828:	2300      	movs	r3, #0
  40082a:	4601      	mov	r1, r0
  40082c:	461a      	mov	r2, r3
  40082e:	4618      	mov	r0, r3
  400830:	f000 b81e 	b.w	400870 <__register_exitproc>

00400834 <__libc_fini_array>:
  400834:	b538      	push	{r3, r4, r5, lr}
  400836:	4c0a      	ldr	r4, [pc, #40]	; (400860 <__libc_fini_array+0x2c>)
  400838:	4d0a      	ldr	r5, [pc, #40]	; (400864 <__libc_fini_array+0x30>)
  40083a:	1b64      	subs	r4, r4, r5
  40083c:	10a4      	asrs	r4, r4, #2
  40083e:	d00a      	beq.n	400856 <__libc_fini_array+0x22>
  400840:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  400844:	3b01      	subs	r3, #1
  400846:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40084a:	3c01      	subs	r4, #1
  40084c:	f855 3904 	ldr.w	r3, [r5], #-4
  400850:	4798      	blx	r3
  400852:	2c00      	cmp	r4, #0
  400854:	d1f9      	bne.n	40084a <__libc_fini_array+0x16>
  400856:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40085a:	f000 b877 	b.w	40094c <_fini>
  40085e:	bf00      	nop
  400860:	0040095c 	.word	0x0040095c
  400864:	00400958 	.word	0x00400958

00400868 <__retarget_lock_acquire_recursive>:
  400868:	4770      	bx	lr
  40086a:	bf00      	nop

0040086c <__retarget_lock_release_recursive>:
  40086c:	4770      	bx	lr
  40086e:	bf00      	nop

00400870 <__register_exitproc>:
  400870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400874:	4d2c      	ldr	r5, [pc, #176]	; (400928 <__register_exitproc+0xb8>)
  400876:	4606      	mov	r6, r0
  400878:	6828      	ldr	r0, [r5, #0]
  40087a:	4698      	mov	r8, r3
  40087c:	460f      	mov	r7, r1
  40087e:	4691      	mov	r9, r2
  400880:	f7ff fff2 	bl	400868 <__retarget_lock_acquire_recursive>
  400884:	4b29      	ldr	r3, [pc, #164]	; (40092c <__register_exitproc+0xbc>)
  400886:	681c      	ldr	r4, [r3, #0]
  400888:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40088c:	2b00      	cmp	r3, #0
  40088e:	d03e      	beq.n	40090e <__register_exitproc+0x9e>
  400890:	685a      	ldr	r2, [r3, #4]
  400892:	2a1f      	cmp	r2, #31
  400894:	dc1c      	bgt.n	4008d0 <__register_exitproc+0x60>
  400896:	f102 0e01 	add.w	lr, r2, #1
  40089a:	b176      	cbz	r6, 4008ba <__register_exitproc+0x4a>
  40089c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4008a0:	2401      	movs	r4, #1
  4008a2:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4008a6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4008aa:	4094      	lsls	r4, r2
  4008ac:	4320      	orrs	r0, r4
  4008ae:	2e02      	cmp	r6, #2
  4008b0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4008b4:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4008b8:	d023      	beq.n	400902 <__register_exitproc+0x92>
  4008ba:	3202      	adds	r2, #2
  4008bc:	f8c3 e004 	str.w	lr, [r3, #4]
  4008c0:	6828      	ldr	r0, [r5, #0]
  4008c2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4008c6:	f7ff ffd1 	bl	40086c <__retarget_lock_release_recursive>
  4008ca:	2000      	movs	r0, #0
  4008cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4008d0:	4b17      	ldr	r3, [pc, #92]	; (400930 <__register_exitproc+0xc0>)
  4008d2:	b30b      	cbz	r3, 400918 <__register_exitproc+0xa8>
  4008d4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4008d8:	f3af 8000 	nop.w
  4008dc:	4603      	mov	r3, r0
  4008de:	b1d8      	cbz	r0, 400918 <__register_exitproc+0xa8>
  4008e0:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4008e4:	6002      	str	r2, [r0, #0]
  4008e6:	2100      	movs	r1, #0
  4008e8:	6041      	str	r1, [r0, #4]
  4008ea:	460a      	mov	r2, r1
  4008ec:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4008f0:	f04f 0e01 	mov.w	lr, #1
  4008f4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4008f8:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4008fc:	2e00      	cmp	r6, #0
  4008fe:	d0dc      	beq.n	4008ba <__register_exitproc+0x4a>
  400900:	e7cc      	b.n	40089c <__register_exitproc+0x2c>
  400902:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  400906:	430c      	orrs	r4, r1
  400908:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40090c:	e7d5      	b.n	4008ba <__register_exitproc+0x4a>
  40090e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  400912:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  400916:	e7bb      	b.n	400890 <__register_exitproc+0x20>
  400918:	6828      	ldr	r0, [r5, #0]
  40091a:	f7ff ffa7 	bl	40086c <__retarget_lock_release_recursive>
  40091e:	f04f 30ff 	mov.w	r0, #4294967295
  400922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400926:	bf00      	nop
  400928:	20000438 	.word	0x20000438
  40092c:	00400934 	.word	0x00400934
  400930:	00000000 	.word	0x00000000

00400934 <_global_impure_ptr>:
  400934:	20000010                                ... 

00400938 <_init>:
  400938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40093a:	bf00      	nop
  40093c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40093e:	bc08      	pop	{r3}
  400940:	469e      	mov	lr, r3
  400942:	4770      	bx	lr

00400944 <__init_array_start>:
  400944:	00400815 	.word	0x00400815

00400948 <__frame_dummy_init_array_entry>:
  400948:	0040011d                                ..@.

0040094c <_fini>:
  40094c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40094e:	bf00      	nop
  400950:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400952:	bc08      	pop	{r3}
  400954:	469e      	mov	lr, r3
  400956:	4770      	bx	lr

00400958 <__fini_array_start>:
  400958:	004000f9 	.word	0x004000f9

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr

2000000a <g_interrupt_enabled>:
2000000a:	0001                                        ..

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <impure_data>:
20000010:	0000 0000 02fc 2000 0364 2000 03cc 2000     ....... d.. ... 
	...
200000b8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000c8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000438 <__atexit_recursive_mutex>:
20000438:	04d0 2000                                   ... 
