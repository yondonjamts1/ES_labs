
ILI93XX_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d88  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000085c  20000000  00402d88  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          0000045c  2000085c  004035e4  0002085c  2**2
                  ALLOC
  3 .stack        00003000  20000cb8  00403a40  0002085c  2**0
                  ALLOC
  4 .ARM.attributes 0000002e  00000000  00000000  0002085c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002088a  2**0
                  CONTENTS, READONLY
  6 .debug_info   00013dcb  00000000  00000000  000208e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002a5c  00000000  00000000  000346ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000890  00000000  00000000  0003710a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000888  00000000  00000000  0003799a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  000186d7  00000000  00000000  00038222  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b0de  00000000  00000000  000508f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00067daf  00000000  00000000  0005b9d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001a88  00000000  00000000  000c3788  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004f80  00000000  00000000  000c5210  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	b8 3c 00 20 99 0f 40 00 97 0f 40 00 97 0f 40 00     .<. ..@...@...@.
  400010:	97 0f 40 00 97 0f 40 00 97 0f 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	97 0f 40 00 97 0f 40 00 00 00 00 00 97 0f 40 00     ..@...@.......@.
  40003c:	97 0f 40 00 97 0f 40 00 97 0f 40 00 97 0f 40 00     ..@...@...@...@.
  40004c:	97 0f 40 00 97 0f 40 00 97 0f 40 00 97 0f 40 00     ..@...@...@...@.
  40005c:	97 0f 40 00 97 0f 40 00 97 0f 40 00 97 0f 40 00     ..@...@...@...@.
  40006c:	97 0f 40 00 97 0f 40 00 97 0f 40 00 97 0f 40 00     ..@...@...@...@.
  40007c:	97 0f 40 00 97 0f 40 00 97 0f 40 00 97 0f 40 00     ..@...@...@...@.
  40008c:	97 0f 40 00 97 0f 40 00 97 0f 40 00 97 0f 40 00     ..@...@...@...@.
  40009c:	97 0f 40 00 97 0f 40 00 97 0f 40 00 97 0f 40 00     ..@...@...@...@.
  4000ac:	97 0f 40 00 97 0f 40 00 97 0f 40 00 97 0f 40 00     ..@...@...@...@.
  4000bc:	97 0f 40 00 97 0f 40 00 97 0f 40 00 97 0f 40 00     ..@...@...@...@.
  4000cc:	97 0f 40 00 97 0f 40 00 97 0f 40 00 97 0f 40 00     ..@...@...@...@.
  4000dc:	97 0f 40 00 97 0f 40 00 97 0f 40 00 97 0f 40 00     ..@...@...@...@.
  4000ec:	97 0f 40 00 97 0f 40 00 97 0f 40 00                 ..@...@...@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	2000085c 	.word	0x2000085c
  400114:	00000000 	.word	0x00000000
  400118:	00402d88 	.word	0x00402d88

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	00402d88 	.word	0x00402d88
  400158:	20000860 	.word	0x20000860
  40015c:	00402d88 	.word	0x00402d88
  400160:	00000000 	.word	0x00000000

00400164 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400164:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400166:	480e      	ldr	r0, [pc, #56]	; (4001a0 <sysclk_init+0x3c>)
  400168:	4b0e      	ldr	r3, [pc, #56]	; (4001a4 <sysclk_init+0x40>)
  40016a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40016c:	213e      	movs	r1, #62	; 0x3e
  40016e:	2000      	movs	r0, #0
  400170:	4b0d      	ldr	r3, [pc, #52]	; (4001a8 <sysclk_init+0x44>)
  400172:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400174:	4c0d      	ldr	r4, [pc, #52]	; (4001ac <sysclk_init+0x48>)
  400176:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400178:	2800      	cmp	r0, #0
  40017a:	d0fc      	beq.n	400176 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40017c:	4b0c      	ldr	r3, [pc, #48]	; (4001b0 <sysclk_init+0x4c>)
  40017e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400180:	4a0c      	ldr	r2, [pc, #48]	; (4001b4 <sysclk_init+0x50>)
  400182:	4b0d      	ldr	r3, [pc, #52]	; (4001b8 <sysclk_init+0x54>)
  400184:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  400186:	4c0d      	ldr	r4, [pc, #52]	; (4001bc <sysclk_init+0x58>)
  400188:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40018a:	2800      	cmp	r0, #0
  40018c:	d0fc      	beq.n	400188 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40018e:	2010      	movs	r0, #16
  400190:	4b0b      	ldr	r3, [pc, #44]	; (4001c0 <sysclk_init+0x5c>)
  400192:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400194:	4b0b      	ldr	r3, [pc, #44]	; (4001c4 <sysclk_init+0x60>)
  400196:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400198:	4801      	ldr	r0, [pc, #4]	; (4001a0 <sysclk_init+0x3c>)
  40019a:	4b02      	ldr	r3, [pc, #8]	; (4001a4 <sysclk_init+0x40>)
  40019c:	4798      	blx	r3
  40019e:	bd10      	pop	{r4, pc}
  4001a0:	07270e00 	.word	0x07270e00
  4001a4:	0040116d 	.word	0x0040116d
  4001a8:	00400e39 	.word	0x00400e39
  4001ac:	00400e8d 	.word	0x00400e8d
  4001b0:	00400e9d 	.word	0x00400e9d
  4001b4:	20133f01 	.word	0x20133f01
  4001b8:	400e0400 	.word	0x400e0400
  4001bc:	00400ead 	.word	0x00400ead
  4001c0:	00400dd5 	.word	0x00400dd5
  4001c4:	00401061 	.word	0x00401061

004001c8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4001c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4001cc:	b980      	cbnz	r0, 4001f0 <_read+0x28>
  4001ce:	460c      	mov	r4, r1
  4001d0:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  4001d2:	2a00      	cmp	r2, #0
  4001d4:	dd0f      	ble.n	4001f6 <_read+0x2e>
  4001d6:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4001d8:	4e08      	ldr	r6, [pc, #32]	; (4001fc <_read+0x34>)
  4001da:	4d09      	ldr	r5, [pc, #36]	; (400200 <_read+0x38>)
  4001dc:	6830      	ldr	r0, [r6, #0]
  4001de:	4621      	mov	r1, r4
  4001e0:	682b      	ldr	r3, [r5, #0]
  4001e2:	4798      	blx	r3
		ptr++;
  4001e4:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  4001e6:	42bc      	cmp	r4, r7
  4001e8:	d1f8      	bne.n	4001dc <_read+0x14>
		nChars++;
	}
	return nChars;
}
  4001ea:	4640      	mov	r0, r8
  4001ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4001f0:	f04f 38ff 	mov.w	r8, #4294967295
  4001f4:	e7f9      	b.n	4001ea <_read+0x22>
	for (; len > 0; --len) {
  4001f6:	4680      	mov	r8, r0
  4001f8:	e7f7      	b.n	4001ea <_read+0x22>
  4001fa:	bf00      	nop
  4001fc:	20000c7c 	.word	0x20000c7c
  400200:	20000c74 	.word	0x20000c74

00400204 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400204:	3801      	subs	r0, #1
  400206:	2802      	cmp	r0, #2
  400208:	d815      	bhi.n	400236 <_write+0x32>
{
  40020a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40020e:	460e      	mov	r6, r1
  400210:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400212:	b19a      	cbz	r2, 40023c <_write+0x38>
  400214:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400216:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400250 <_write+0x4c>
  40021a:	4f0c      	ldr	r7, [pc, #48]	; (40024c <_write+0x48>)
  40021c:	f8d8 0000 	ldr.w	r0, [r8]
  400220:	f815 1b01 	ldrb.w	r1, [r5], #1
  400224:	683b      	ldr	r3, [r7, #0]
  400226:	4798      	blx	r3
  400228:	2800      	cmp	r0, #0
  40022a:	db0a      	blt.n	400242 <_write+0x3e>
  40022c:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  40022e:	3c01      	subs	r4, #1
  400230:	d1f4      	bne.n	40021c <_write+0x18>
  400232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400236:	f04f 30ff 	mov.w	r0, #4294967295
  40023a:	4770      	bx	lr
	for (; len != 0; --len) {
  40023c:	4610      	mov	r0, r2
  40023e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400242:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40024a:	bf00      	nop
  40024c:	20000c78 	.word	0x20000c78
  400250:	20000c7c 	.word	0x20000c7c

00400254 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  400254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400256:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40025a:	4bb1      	ldr	r3, [pc, #708]	; (400520 <board_init+0x2cc>)
  40025c:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40025e:	2009      	movs	r0, #9
  400260:	4cb0      	ldr	r4, [pc, #704]	; (400524 <board_init+0x2d0>)
  400262:	47a0      	blx	r4
  400264:	200a      	movs	r0, #10
  400266:	47a0      	blx	r4
  400268:	200b      	movs	r0, #11
  40026a:	47a0      	blx	r4
  40026c:	200c      	movs	r0, #12
  40026e:	47a0      	blx	r4
  400270:	200d      	movs	r0, #13
  400272:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400274:	4bac      	ldr	r3, [pc, #688]	; (400528 <board_init+0x2d4>)
  400276:	2501      	movs	r5, #1
  400278:	611d      	str	r5, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40027a:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40027e:	631d      	str	r5, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400280:	49aa      	ldr	r1, [pc, #680]	; (40052c <board_init+0x2d8>)
  400282:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  400286:	6108      	str	r0, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400288:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40028c:	6308      	str	r0, [r1, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40028e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400292:	610a      	str	r2, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400294:	f8c1 20a0 	str.w	r2, [r1, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400298:	630a      	str	r2, [r1, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40029a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40029e:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4002a0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4002a4:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4002a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4002aa:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4002ac:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4002ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4002b2:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  4002b4:	f424 2400 	bic.w	r4, r4, #524288	; 0x80000
  4002b8:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4002ba:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  4002bc:	f424 2400 	bic.w	r4, r4, #524288	; 0x80000
  4002c0:	675c      	str	r4, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4002c2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4002c6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4002ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4002ce:	6158      	str	r0, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4002d0:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4002d4:	6658      	str	r0, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4002d6:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4002da:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4002dc:	6218      	str	r0, [r3, #32]
		base->PIO_IFSCER = mask;
  4002de:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4002e2:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  4002e4:	f424 1480 	bic.w	r4, r4, #1048576	; 0x100000
  4002e8:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4002ea:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  4002ec:	f424 1480 	bic.w	r4, r4, #1048576	; 0x100000
  4002f0:	675c      	str	r4, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  4002f2:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  4002f6:	f8c3 00d0 	str.w	r0, [r3, #208]	; 0xd0
	base->PIO_AIMER = mask;
  4002fa:	f8c3 00b0 	str.w	r0, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4002fe:	2402      	movs	r4, #2
  400300:	615c      	str	r4, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400302:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400306:	665c      	str	r4, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400308:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40030c:	655c      	str	r4, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  40030e:	621c      	str	r4, [r3, #32]
		base->PIO_IFSCER = mask;
  400310:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400314:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400316:	f020 0002 	bic.w	r0, r0, #2
  40031a:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40031c:	6f58      	ldr	r0, [r3, #116]	; 0x74
  40031e:	f020 0002 	bic.w	r0, r0, #2
  400322:	6758      	str	r0, [r3, #116]	; 0x74
		base->PIO_AIMDR = mask;
  400324:	f8c3 40b4 	str.w	r4, [r3, #180]	; 0xb4
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400328:	2004      	movs	r0, #4
  40032a:	6158      	str	r0, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40032c:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400330:	6658      	str	r0, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400332:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400336:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400338:	6218      	str	r0, [r3, #32]
		base->PIO_IFSCER = mask;
  40033a:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  40033e:	6f1e      	ldr	r6, [r3, #112]	; 0x70
  400340:	f026 0604 	bic.w	r6, r6, #4
  400344:	671e      	str	r6, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400346:	6f5e      	ldr	r6, [r3, #116]	; 0x74
  400348:	f026 0604 	bic.w	r6, r6, #4
  40034c:	675e      	str	r6, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  40034e:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400352:	f8c3 00d4 	str.w	r0, [r3, #212]	; 0xd4
	base->PIO_AIMER = mask;
  400356:	f8c3 00b0 	str.w	r0, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  40035a:	f44f 66c0 	mov.w	r6, #1536	; 0x600
  40035e:	661e      	str	r6, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400360:	f8c3 6090 	str.w	r6, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400364:	655e      	str	r6, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400366:	625e      	str	r6, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400368:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40036c:	6f1f      	ldr	r7, [r3, #112]	; 0x70
  40036e:	f427 67c0 	bic.w	r7, r7, #1536	; 0x600
  400372:	671f      	str	r7, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400374:	6f5f      	ldr	r7, [r3, #116]	; 0x74
  400376:	f427 67c0 	bic.w	r7, r7, #1536	; 0x600
  40037a:	675f      	str	r7, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40037c:	605e      	str	r6, [r3, #4]
		base->PIO_PUER = mask;
  40037e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  400382:	665d      	str	r5, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400384:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400388:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40038a:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40038c:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400390:	6f1e      	ldr	r6, [r3, #112]	; 0x70
  400392:	f026 0601 	bic.w	r6, r6, #1
  400396:	671e      	str	r6, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400398:	6f5e      	ldr	r6, [r3, #116]	; 0x74
  40039a:	f026 0601 	bic.w	r6, r6, #1
  40039e:	675e      	str	r6, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003a0:	605d      	str	r5, [r3, #4]
		base->PIO_PUER = mask;
  4003a2:	665c      	str	r4, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4003a4:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003a8:	655c      	str	r4, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4003aa:	625c      	str	r4, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4003ac:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4003b0:	6f1d      	ldr	r5, [r3, #112]	; 0x70
  4003b2:	f025 0502 	bic.w	r5, r5, #2
  4003b6:	671d      	str	r5, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003b8:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  4003ba:	f025 0502 	bic.w	r5, r5, #2
  4003be:	675d      	str	r5, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003c0:	605c      	str	r4, [r3, #4]
		base->PIO_PUER = mask;
  4003c2:	6658      	str	r0, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4003c4:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003c8:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4003ca:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4003cc:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4003d0:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  4003d2:	f024 0404 	bic.w	r4, r4, #4
  4003d6:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003d8:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  4003da:	f024 0404 	bic.w	r4, r4, #4
  4003de:	675c      	str	r4, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003e0:	6058      	str	r0, [r3, #4]
		base->PIO_PUER = mask;
  4003e2:	2008      	movs	r0, #8
  4003e4:	6658      	str	r0, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4003e6:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003ea:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4003ec:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4003ee:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4003f2:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  4003f4:	f024 0408 	bic.w	r4, r4, #8
  4003f8:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003fa:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  4003fc:	f024 0408 	bic.w	r4, r4, #8
  400400:	675c      	str	r4, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400402:	6058      	str	r0, [r3, #4]
		base->PIO_PUER = mask;
  400404:	2010      	movs	r0, #16
  400406:	6658      	str	r0, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400408:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40040c:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40040e:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400410:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400414:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  400416:	f024 0410 	bic.w	r4, r4, #16
  40041a:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40041c:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  40041e:	f024 0410 	bic.w	r4, r4, #16
  400422:	675c      	str	r4, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400424:	6058      	str	r0, [r3, #4]
		base->PIO_PUER = mask;
  400426:	2020      	movs	r0, #32
  400428:	6658      	str	r0, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40042a:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40042e:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400430:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400432:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400436:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  400438:	f024 0420 	bic.w	r4, r4, #32
  40043c:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40043e:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  400440:	f024 0420 	bic.w	r4, r4, #32
  400444:	675c      	str	r4, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400446:	6058      	str	r0, [r3, #4]
		base->PIO_PUER = mask;
  400448:	2040      	movs	r0, #64	; 0x40
  40044a:	6658      	str	r0, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40044c:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400450:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400452:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400454:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400458:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  40045a:	f024 0440 	bic.w	r4, r4, #64	; 0x40
  40045e:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400460:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  400462:	f024 0440 	bic.w	r4, r4, #64	; 0x40
  400466:	675c      	str	r4, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400468:	6058      	str	r0, [r3, #4]
		base->PIO_PUER = mask;
  40046a:	2080      	movs	r0, #128	; 0x80
  40046c:	6658      	str	r0, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40046e:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400472:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400474:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400476:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40047a:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  40047c:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  400480:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400482:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  400484:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  400488:	675c      	str	r4, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40048a:	6058      	str	r0, [r3, #4]
		base->PIO_PUER = mask;
  40048c:	f44f 6000 	mov.w	r0, #2048	; 0x800
  400490:	6658      	str	r0, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400492:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400496:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400498:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40049a:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40049e:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  4004a0:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
  4004a4:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4004a6:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  4004a8:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
  4004ac:	675c      	str	r4, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4004ae:	6058      	str	r0, [r3, #4]
		base->PIO_PUER = mask;
  4004b0:	f44f 7080 	mov.w	r0, #256	; 0x100
  4004b4:	6658      	str	r0, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4004b6:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4004ba:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4004bc:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4004be:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4004c2:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  4004c4:	f424 7480 	bic.w	r4, r4, #256	; 0x100
  4004c8:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4004ca:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  4004cc:	f424 7480 	bic.w	r4, r4, #256	; 0x100
  4004d0:	675c      	str	r4, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4004d2:	6058      	str	r0, [r3, #4]
		base->PIO_PUER = mask;
  4004d4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  4004d8:	6648      	str	r0, [r1, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4004da:	f8c1 0090 	str.w	r0, [r1, #144]	; 0x90
		base->PIO_MDDR = mask;
  4004de:	6548      	str	r0, [r1, #84]	; 0x54
		base->PIO_IFDR = mask;
  4004e0:	6248      	str	r0, [r1, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4004e2:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4004e6:	6f0c      	ldr	r4, [r1, #112]	; 0x70
  4004e8:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
  4004ec:	670c      	str	r4, [r1, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4004ee:	6f4c      	ldr	r4, [r1, #116]	; 0x74
  4004f0:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
  4004f4:	674c      	str	r4, [r1, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4004f6:	6048      	str	r0, [r1, #4]
		base->PIO_PUER = mask;
  4004f8:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4004fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4004fe:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400500:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400502:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400506:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400508:	f421 2100 	bic.w	r1, r1, #524288	; 0x80000
  40050c:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40050e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400510:	f421 2100 	bic.w	r1, r1, #524288	; 0x80000
  400514:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400516:	605a      	str	r2, [r3, #4]
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400518:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40051c:	611a      	str	r2, [r3, #16]
  40051e:	e007      	b.n	400530 <board_init+0x2dc>
  400520:	400e1850 	.word	0x400e1850
  400524:	00400ebd 	.word	0x00400ebd
  400528:	400e0e00 	.word	0x400e0e00
  40052c:	400e1400 	.word	0x400e1400
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400530:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  400534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400536:	bf00      	nop

00400538 <aat31xx_set_backlight>:
 * \param ul_level backlight level.
 *
 * \note pin BOARD_AAT31XX_SET_GPIO must be configured before calling aat31xx_set_backlight.
 */
void aat31xx_set_backlight(uint32_t ul_level)
{
  400538:	b4f0      	push	{r4, r5, r6, r7}
  40053a:	b082      	sub	sp, #8
	volatile uint32_t ul_delay;
	uint32_t i;

#ifdef CONF_BOARD_AAT3155
	ul_level = AAT31XX_MAX_BACKLIGHT_LEVEL - ul_level + 1;
  40053c:	f1c0 0011 	rsb	r0, r0, #17
#ifdef CONF_BOARD_AAT3193
	ul_level = AAT31XX_MAX_BACKLIGHT_LEVEL - ul_level + 1;
#endif

	/* Ensure valid level */
	ul_level = (ul_level > AAT31XX_MAX_BACKLIGHT_LEVEL) ? AAT31XX_MAX_BACKLIGHT_LEVEL : ul_level;
  400540:	2810      	cmp	r0, #16
  400542:	bf28      	it	cs
  400544:	2010      	movcs	r0, #16
	ul_level = (ul_level < AAT31XX_MIN_BACKLIGHT_LEVEL) ? AAT31XX_MIN_BACKLIGHT_LEVEL : ul_level;
  400546:	2800      	cmp	r0, #0
  400548:	bf08      	it	eq
  40054a:	2001      	moveq	r0, #1
{
  40054c:	2100      	movs	r1, #0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40054e:	4d10      	ldr	r5, [pc, #64]	; (400590 <aat31xx_set_backlight+0x58>)
  400550:	f44f 5600 	mov.w	r6, #8192	; 0x2000
  400554:	4637      	mov	r7, r6

	/* Set new backlight level */
	for (i = 0; i < ul_level; i++) {
		ioport_set_pin_level(BOARD_AAT31XX_SET_GPIO, IOPORT_PIN_LEVEL_LOW);
		ul_delay = DELAY_PULSE;
  400556:	2418      	movs	r4, #24
  400558:	636f      	str	r7, [r5, #52]	; 0x34
  40055a:	9401      	str	r4, [sp, #4]
		while (ul_delay--) {
  40055c:	9b01      	ldr	r3, [sp, #4]
  40055e:	1e5a      	subs	r2, r3, #1
  400560:	9201      	str	r2, [sp, #4]
  400562:	2b00      	cmp	r3, #0
  400564:	d1fa      	bne.n	40055c <aat31xx_set_backlight+0x24>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400566:	632e      	str	r6, [r5, #48]	; 0x30
		}

		ioport_set_pin_level(BOARD_AAT31XX_SET_GPIO, IOPORT_PIN_LEVEL_HIGH);

		ul_delay = DELAY_PULSE;
  400568:	9401      	str	r4, [sp, #4]
		while (ul_delay--) {
  40056a:	9b01      	ldr	r3, [sp, #4]
  40056c:	1e5a      	subs	r2, r3, #1
  40056e:	9201      	str	r2, [sp, #4]
  400570:	2b00      	cmp	r3, #0
  400572:	d1fa      	bne.n	40056a <aat31xx_set_backlight+0x32>
	for (i = 0; i < ul_level; i++) {
  400574:	3101      	adds	r1, #1
  400576:	4281      	cmp	r1, r0
  400578:	d3ee      	bcc.n	400558 <aat31xx_set_backlight+0x20>
		}
	}

	ul_delay = DELAY_ENABLE;
  40057a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  40057e:	9301      	str	r3, [sp, #4]
	while (ul_delay--) {
  400580:	9b01      	ldr	r3, [sp, #4]
  400582:	1e5a      	subs	r2, r3, #1
  400584:	9201      	str	r2, [sp, #4]
  400586:	2b00      	cmp	r3, #0
  400588:	d1fa      	bne.n	400580 <aat31xx_set_backlight+0x48>
	}
}
  40058a:	b002      	add	sp, #8
  40058c:	bcf0      	pop	{r4, r5, r6, r7}
  40058e:	4770      	bx	lr
  400590:	400e1200 	.word	0x400e1200

00400594 <aat31xx_disable_backlight>:

/**
 * \brief Switch off backlight.
 */
void aat31xx_disable_backlight(void)
{
  400594:	b082      	sub	sp, #8
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400596:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40059a:	4b06      	ldr	r3, [pc, #24]	; (4005b4 <aat31xx_disable_backlight+0x20>)
  40059c:	635a      	str	r2, [r3, #52]	; 0x34
	volatile uint32_t ul_delay;

	ioport_set_pin_level(BOARD_AAT31XX_SET_GPIO, IOPORT_PIN_LEVEL_LOW);

	ul_delay = DELAY_DISABLE;
  40059e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  4005a2:	9301      	str	r3, [sp, #4]
	while (ul_delay--) {
  4005a4:	9b01      	ldr	r3, [sp, #4]
  4005a6:	1e5a      	subs	r2, r3, #1
  4005a8:	9201      	str	r2, [sp, #4]
  4005aa:	2b00      	cmp	r3, #0
  4005ac:	d1fa      	bne.n	4005a4 <aat31xx_disable_backlight+0x10>
	}
}
  4005ae:	b002      	add	sp, #8
  4005b0:	4770      	bx	lr
  4005b2:	bf00      	nop
  4005b4:	400e1200 	.word	0x400e1200

004005b8 <ili93xx_write_ram_prepare>:
/**
 * \brief Prepare to write GRAM data for ili93xx.
 */
static void ili93xx_write_ram_prepare(void)
{
	if (g_uc_device_type == DEVICE_TYPE_ILI9325) {
  4005b8:	4b0b      	ldr	r3, [pc, #44]	; (4005e8 <ili93xx_write_ram_prepare+0x30>)
  4005ba:	781b      	ldrb	r3, [r3, #0]
  4005bc:	2b01      	cmp	r3, #1
  4005be:	d002      	beq.n	4005c6 <ili93xx_write_ram_prepare+0xe>
		/** Write Data to GRAM (R22h) */
		LCD_IR(0);
		LCD_IR(ILI9325_GRAM_DATA_REG);
	} else if (g_uc_device_type == DEVICE_TYPE_ILI9341) {
  4005c0:	2b02      	cmp	r3, #2
  4005c2:	d007      	beq.n	4005d4 <ili93xx_write_ram_prepare+0x1c>
  4005c4:	4770      	bx	lr
/** Define EBI access for ILI93xx 8-bit System Interface.*/
#if defined(BOARD_ILI93XX_ADDR) && defined (BOARD_ILI93XX_RS)
static inline void LCD_IR(uint8_t lcd_index)
{
	/** ILI93XX index register address */
	*((volatile uint8_t *)(BOARD_ILI93XX_ADDR)) = lcd_index;
  4005c6:	f04f 43c2 	mov.w	r3, #1627389952	; 0x61000000
  4005ca:	2200      	movs	r2, #0
  4005cc:	701a      	strb	r2, [r3, #0]
  4005ce:	2222      	movs	r2, #34	; 0x22
  4005d0:	701a      	strb	r2, [r3, #0]
  4005d2:	4770      	bx	lr
  4005d4:	f04f 43c2 	mov.w	r3, #1627389952	; 0x61000000
  4005d8:	222c      	movs	r2, #44	; 0x2c
  4005da:	701a      	strb	r2, [r3, #0]
  4005dc:	2200      	movs	r2, #0
  4005de:	701a      	strb	r2, [r3, #0]
  4005e0:	223c      	movs	r2, #60	; 0x3c
  4005e2:	701a      	strb	r2, [r3, #0]
		/** memory write command (R2Ch)*/
		LCD_IR(ILI9341_CMD_MEMORY_WRITE);
		LCD_IR(0);
		LCD_IR(ILI9341_CMD_WRITE_MEMORY_CONTINUE);
	}
}
  4005e4:	e7ee      	b.n	4005c4 <ili93xx_write_ram_prepare+0xc>
  4005e6:	bf00      	nop
  4005e8:	20000878 	.word	0x20000878

004005ec <ili93xx_write_ram>:
 *
 * \param ul_color 24-bits RGB color.
 */
static void ili93xx_write_ram(ili93xx_color_t ul_color)
{
	LCD_WD((ul_color >> 16) & 0xFF);
  4005ec:	f3c0 4207 	ubfx	r2, r0, #16, #8
}

static inline void LCD_WD(uint8_t lcd_data)
{
	*((volatile uint8_t *)((BOARD_ILI93XX_ADDR) | (BOARD_ILI93XX_RS))) =
  4005f0:	4b03      	ldr	r3, [pc, #12]	; (400600 <ili93xx_write_ram+0x14>)
  4005f2:	701a      	strb	r2, [r3, #0]
	LCD_WD((ul_color >> 8) & 0xFF);
  4005f4:	f3c0 2207 	ubfx	r2, r0, #8, #8
  4005f8:	701a      	strb	r2, [r3, #0]
	LCD_WD(ul_color & 0xFF);
  4005fa:	b2c0      	uxtb	r0, r0
  4005fc:	7018      	strb	r0, [r3, #0]
  4005fe:	4770      	bx	lr
  400600:	61000002 	.word	0x61000002

00400604 <ili93xx_write_ram_buffer>:
 * \param p_ul_buf data buffer.
 * \param ul_size size in pixels.
 */
static void ili93xx_write_ram_buffer(const ili93xx_color_t *p_ul_buf,
		uint32_t ul_size)
{
  400604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400608:	4607      	mov	r7, r0
  40060a:	4688      	mov	r8, r1
	uint32_t ul_addr;
	for (ul_addr = 0; ul_addr < (ul_size - ul_size % 8); ul_addr += 8) {
  40060c:	f031 0907 	bics.w	r9, r1, #7
  400610:	d023      	beq.n	40065a <ili93xx_write_ram_buffer+0x56>
  400612:	4604      	mov	r4, r0
  400614:	2600      	movs	r6, #0
		ili93xx_write_ram(p_ul_buf[ul_addr]);
  400616:	4d12      	ldr	r5, [pc, #72]	; (400660 <ili93xx_write_ram_buffer+0x5c>)
  400618:	6820      	ldr	r0, [r4, #0]
  40061a:	47a8      	blx	r5
		ili93xx_write_ram(p_ul_buf[ul_addr + 1]);
  40061c:	6860      	ldr	r0, [r4, #4]
  40061e:	47a8      	blx	r5
		ili93xx_write_ram(p_ul_buf[ul_addr + 2]);
  400620:	68a0      	ldr	r0, [r4, #8]
  400622:	47a8      	blx	r5
		ili93xx_write_ram(p_ul_buf[ul_addr + 3]);
  400624:	68e0      	ldr	r0, [r4, #12]
  400626:	47a8      	blx	r5
		ili93xx_write_ram(p_ul_buf[ul_addr + 4]);
  400628:	6920      	ldr	r0, [r4, #16]
  40062a:	47a8      	blx	r5
		ili93xx_write_ram(p_ul_buf[ul_addr + 5]);
  40062c:	6960      	ldr	r0, [r4, #20]
  40062e:	47a8      	blx	r5
		ili93xx_write_ram(p_ul_buf[ul_addr + 6]);
  400630:	69a0      	ldr	r0, [r4, #24]
  400632:	47a8      	blx	r5
		ili93xx_write_ram(p_ul_buf[ul_addr + 7]);
  400634:	69e0      	ldr	r0, [r4, #28]
  400636:	47a8      	blx	r5
	for (ul_addr = 0; ul_addr < (ul_size - ul_size % 8); ul_addr += 8) {
  400638:	3608      	adds	r6, #8
  40063a:	3420      	adds	r4, #32
  40063c:	454e      	cmp	r6, r9
  40063e:	d3eb      	bcc.n	400618 <ili93xx_write_ram_buffer+0x14>
	}
	for (; ul_addr < ul_size; ul_addr++) {
  400640:	4546      	cmp	r6, r8
  400642:	d208      	bcs.n	400656 <ili93xx_write_ram_buffer+0x52>
  400644:	eb07 0786 	add.w	r7, r7, r6, lsl #2
		ili93xx_write_ram(p_ul_buf[ul_addr]);
  400648:	4d05      	ldr	r5, [pc, #20]	; (400660 <ili93xx_write_ram_buffer+0x5c>)
  40064a:	f857 0b04 	ldr.w	r0, [r7], #4
  40064e:	47a8      	blx	r5
	for (; ul_addr < ul_size; ul_addr++) {
  400650:	3601      	adds	r6, #1
  400652:	45b0      	cmp	r8, r6
  400654:	d1f9      	bne.n	40064a <ili93xx_write_ram_buffer+0x46>
  400656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (ul_addr = 0; ul_addr < (ul_size - ul_size % 8); ul_addr += 8) {
  40065a:	464e      	mov	r6, r9
  40065c:	e7f0      	b.n	400640 <ili93xx_write_ram_buffer+0x3c>
  40065e:	bf00      	nop
  400660:	004005ed 	.word	0x004005ed

00400664 <ili93xx_write_register_word>:
	*((volatile uint8_t *)(BOARD_ILI93XX_ADDR)) = lcd_index;
  400664:	f04f 43c2 	mov.w	r3, #1627389952	; 0x61000000
  400668:	2200      	movs	r2, #0
  40066a:	701a      	strb	r2, [r3, #0]
  40066c:	7018      	strb	r0, [r3, #0]
 */
static void ili93xx_write_register_word(uint8_t uc_reg, uint16_t us_data)
{
	LCD_IR(0);
	LCD_IR(uc_reg);
	LCD_WD((us_data >> 8) & 0xFF);
  40066e:	0a0a      	lsrs	r2, r1, #8
	*((volatile uint8_t *)((BOARD_ILI93XX_ADDR) | (BOARD_ILI93XX_RS))) =
  400670:	3302      	adds	r3, #2
  400672:	701a      	strb	r2, [r3, #0]
	LCD_WD(us_data & 0xFF);
  400674:	b2c9      	uxtb	r1, r1
  400676:	7019      	strb	r1, [r3, #0]
  400678:	4770      	bx	lr
	...

0040067c <ili93xx_write_register>:
 * \param uc_reg register address.
 * \param us_data data to be written.
 */
static void ili93xx_write_register(uint8_t uc_reg, uint8_t *p_data,
		uint8_t uc_datacnt)
{
  40067c:	b410      	push	{r4}
	*((volatile uint8_t *)(BOARD_ILI93XX_ADDR)) = lcd_index;
  40067e:	f04f 43c2 	mov.w	r3, #1627389952	; 0x61000000
  400682:	2400      	movs	r4, #0
  400684:	701c      	strb	r4, [r3, #0]
  400686:	7018      	strb	r0, [r3, #0]
	LCD_IR(0);
	LCD_IR(uc_reg);
	for (uint8_t i = 0; i < uc_datacnt; i++) {
  400688:	b14a      	cbz	r2, 40069e <ili93xx_write_register+0x22>
  40068a:	1e4b      	subs	r3, r1, #1
  40068c:	1e50      	subs	r0, r2, #1
  40068e:	fa51 f180 	uxtab	r1, r1, r0
	*((volatile uint8_t *)((BOARD_ILI93XX_ADDR) | (BOARD_ILI93XX_RS))) =
  400692:	4804      	ldr	r0, [pc, #16]	; (4006a4 <ili93xx_write_register+0x28>)
		LCD_WD(p_data[i]);
  400694:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  400698:	7002      	strb	r2, [r0, #0]
	for (uint8_t i = 0; i < uc_datacnt; i++) {
  40069a:	428b      	cmp	r3, r1
  40069c:	d1fa      	bne.n	400694 <ili93xx_write_register+0x18>
	}
}
  40069e:	f85d 4b04 	ldr.w	r4, [sp], #4
  4006a2:	4770      	bx	lr
  4006a4:	61000002 	.word	0x61000002

004006a8 <ili93xx_delay>:

/**
 * \brief Delay function.
 */
static void ili93xx_delay(uint32_t ul_ms)
{
  4006a8:	b082      	sub	sp, #8
	volatile uint32_t i;

	for (i = 0; i < ul_ms; i++) {
  4006aa:	2300      	movs	r3, #0
  4006ac:	9301      	str	r3, [sp, #4]
  4006ae:	9b01      	ldr	r3, [sp, #4]
  4006b0:	4298      	cmp	r0, r3
  4006b2:	d911      	bls.n	4006d8 <ili93xx_delay+0x30>
		for (i = 0; i < 100000; i++) {
  4006b4:	2100      	movs	r1, #0
  4006b6:	4a09      	ldr	r2, [pc, #36]	; (4006dc <ili93xx_delay+0x34>)
  4006b8:	9101      	str	r1, [sp, #4]
  4006ba:	9b01      	ldr	r3, [sp, #4]
  4006bc:	4293      	cmp	r3, r2
  4006be:	d805      	bhi.n	4006cc <ili93xx_delay+0x24>
  4006c0:	9b01      	ldr	r3, [sp, #4]
  4006c2:	3301      	adds	r3, #1
  4006c4:	9301      	str	r3, [sp, #4]
  4006c6:	9b01      	ldr	r3, [sp, #4]
  4006c8:	4293      	cmp	r3, r2
  4006ca:	d9f9      	bls.n	4006c0 <ili93xx_delay+0x18>
	for (i = 0; i < ul_ms; i++) {
  4006cc:	9b01      	ldr	r3, [sp, #4]
  4006ce:	3301      	adds	r3, #1
  4006d0:	9301      	str	r3, [sp, #4]
  4006d2:	9b01      	ldr	r3, [sp, #4]
  4006d4:	4283      	cmp	r3, r0
  4006d6:	d3ef      	bcc.n	4006b8 <ili93xx_delay+0x10>
		}
	}
}
  4006d8:	b002      	add	sp, #8
  4006da:	4770      	bx	lr
  4006dc:	0001869f 	.word	0x0001869f

004006e0 <ili93xx_check_box_coordinates>:
 * \param p_ul_x2 X coordinate of lower-right corner on LCD.
 * \param p_ul_y2 Y coordinate of lower-right corner on LCD.
 */
static void ili93xx_check_box_coordinates(uint32_t *p_ul_x1, uint32_t *p_ul_y1,
		uint32_t *p_ul_x2, uint32_t *p_ul_y2)
{
  4006e0:	b430      	push	{r4, r5}
	uint32_t dw;

	if (*p_ul_x1 >= g_ul_lcd_x_length) {
  4006e2:	4c15      	ldr	r4, [pc, #84]	; (400738 <ili93xx_check_box_coordinates+0x58>)
  4006e4:	6824      	ldr	r4, [r4, #0]
  4006e6:	6805      	ldr	r5, [r0, #0]
  4006e8:	42a5      	cmp	r5, r4
		*p_ul_x1 = g_ul_lcd_x_length - 1;
  4006ea:	bf24      	itt	cs
  4006ec:	f104 35ff 	addcs.w	r5, r4, #4294967295
  4006f0:	6005      	strcs	r5, [r0, #0]
	}

	if (*p_ul_x2 >= g_ul_lcd_x_length) {
  4006f2:	6815      	ldr	r5, [r2, #0]
  4006f4:	42ac      	cmp	r4, r5
		*p_ul_x2 = g_ul_lcd_x_length - 1;
  4006f6:	bf9c      	itt	ls
  4006f8:	f104 34ff 	addls.w	r4, r4, #4294967295
  4006fc:	6014      	strls	r4, [r2, #0]
	}

	if (*p_ul_y1 >= g_ul_lcd_y_length) {
  4006fe:	4c0f      	ldr	r4, [pc, #60]	; (40073c <ili93xx_check_box_coordinates+0x5c>)
  400700:	6824      	ldr	r4, [r4, #0]
  400702:	680d      	ldr	r5, [r1, #0]
  400704:	42a5      	cmp	r5, r4
		*p_ul_y1 = g_ul_lcd_y_length - 1;
  400706:	bf24      	itt	cs
  400708:	f104 35ff 	addcs.w	r5, r4, #4294967295
  40070c:	600d      	strcs	r5, [r1, #0]
	}

	if (*p_ul_y2 >= g_ul_lcd_y_length) {
  40070e:	681d      	ldr	r5, [r3, #0]
  400710:	42ac      	cmp	r4, r5
		*p_ul_y2 = g_ul_lcd_y_length - 1;
  400712:	bf9c      	itt	ls
  400714:	f104 34ff 	addls.w	r4, r4, #4294967295
  400718:	601c      	strls	r4, [r3, #0]
	}

	if (*p_ul_x1 > *p_ul_x2) {
  40071a:	6804      	ldr	r4, [r0, #0]
  40071c:	6815      	ldr	r5, [r2, #0]
  40071e:	42ac      	cmp	r4, r5
		dw = *p_ul_x1;
		*p_ul_x1 = *p_ul_x2;
  400720:	bf84      	itt	hi
  400722:	6005      	strhi	r5, [r0, #0]
		*p_ul_x2 = dw;
  400724:	6014      	strhi	r4, [r2, #0]
	}

	if (*p_ul_y1 > *p_ul_y2) {
  400726:	680a      	ldr	r2, [r1, #0]
  400728:	6818      	ldr	r0, [r3, #0]
  40072a:	4282      	cmp	r2, r0
		dw = *p_ul_y1;
		*p_ul_y1 = *p_ul_y2;
  40072c:	bf84      	itt	hi
  40072e:	6008      	strhi	r0, [r1, #0]
		*p_ul_y2 = dw;
  400730:	601a      	strhi	r2, [r3, #0]
	}
}
  400732:	bc30      	pop	{r4, r5}
  400734:	4770      	bx	lr
  400736:	bf00      	nop
  400738:	2000000c 	.word	0x2000000c
  40073c:	20000010 	.word	0x20000010

00400740 <ili93xx_device_type_identify>:
 *        ILI9341 device ID locates in Read ID4 (RD3h) register.
 *
 * \return 0 if secceed in identifying device; otherwise fails.
 */
uint8_t ili93xx_device_type_identify(void)
{
  400740:	b082      	sub	sp, #8
	*((volatile uint8_t *)(BOARD_ILI93XX_ADDR)) = lcd_index;
  400742:	f04f 43c2 	mov.w	r3, #1627389952	; 0x61000000
  400746:	2200      	movs	r2, #0
  400748:	701a      	strb	r2, [r3, #0]
  40074a:	22d3      	movs	r2, #211	; 0xd3
  40074c:	701a      	strb	r2, [r3, #0]
																lcd_data;
}

static inline uint8_t LCD_RD(void)
{
	return *((volatile uint8_t *)((BOARD_ILI93XX_ADDR) |(BOARD_ILI93XX_RS)));
  40074e:	491a      	ldr	r1, [pc, #104]	; (4007b8 <ili93xx_device_type_identify+0x78>)
  400750:	780b      	ldrb	r3, [r1, #0]
		p_data[i] = LCD_RD();
  400752:	f88d 3000 	strb.w	r3, [sp]
  400756:	780b      	ldrb	r3, [r1, #0]
  400758:	f88d 3001 	strb.w	r3, [sp, #1]
  40075c:	780b      	ldrb	r3, [r1, #0]
  40075e:	b2da      	uxtb	r2, r3
  400760:	f88d 2002 	strb.w	r2, [sp, #2]
  400764:	780b      	ldrb	r3, [r1, #0]
  400766:	b2db      	uxtb	r3, r3
  400768:	f88d 3003 	strb.w	r3, [sp, #3]
	uint8_t paratable[6];
	uint16_t chipid;

	/** Read ID4 (RD4h) register to get device code for ILI9341*/
	ili93xx_read_register(ILI9341_CMD_READ_ID4, paratable, 4);
	chipid = ((uint16_t)paratable[2] << 8) + paratable[3];
  40076c:	eb03 2302 	add.w	r3, r3, r2, lsl #8

	if (chipid == ILI9341_DEVICE_CODE) {
  400770:	b29b      	uxth	r3, r3
  400772:	f249 3241 	movw	r2, #37697	; 0x9341
  400776:	4293      	cmp	r3, r2
  400778:	d014      	beq.n	4007a4 <ili93xx_device_type_identify+0x64>
	*((volatile uint8_t *)(BOARD_ILI93XX_ADDR)) = lcd_index;
  40077a:	f04f 43c2 	mov.w	r3, #1627389952	; 0x61000000
  40077e:	2200      	movs	r2, #0
  400780:	701a      	strb	r2, [r3, #0]
  400782:	701a      	strb	r2, [r3, #0]
	return *((volatile uint8_t *)((BOARD_ILI93XX_ADDR) |(BOARD_ILI93XX_RS)));
  400784:	490c      	ldr	r1, [pc, #48]	; (4007b8 <ili93xx_device_type_identify+0x78>)
  400786:	780b      	ldrb	r3, [r1, #0]
  400788:	b2da      	uxtb	r2, r3
		p_data[i] = LCD_RD();
  40078a:	f88d 2000 	strb.w	r2, [sp]
  40078e:	780b      	ldrb	r3, [r1, #0]
		return 0;
	}

	/** Driver Code Read (R00h) for ILI9325*/
	ili93xx_read_register(ILI9325_DEVICE_CODE_REG, paratable, 2);
	chipid = ((uint16_t)paratable[0] << 8) + paratable[1];
  400790:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	if (chipid == ILI9325_DEVICE_CODE) {
  400794:	b29b      	uxth	r3, r3
  400796:	f249 3225 	movw	r2, #37669	; 0x9325
  40079a:	4293      	cmp	r3, r2
  40079c:	d007      	beq.n	4007ae <ili93xx_device_type_identify+0x6e>
		g_uc_device_type = DEVICE_TYPE_ILI9325;
		return 0;
	}

	return 1;
  40079e:	2001      	movs	r0, #1
}
  4007a0:	b002      	add	sp, #8
  4007a2:	4770      	bx	lr
		g_uc_device_type = DEVICE_TYPE_ILI9341;
  4007a4:	2202      	movs	r2, #2
  4007a6:	4b05      	ldr	r3, [pc, #20]	; (4007bc <ili93xx_device_type_identify+0x7c>)
  4007a8:	701a      	strb	r2, [r3, #0]
		return 0;
  4007aa:	2000      	movs	r0, #0
  4007ac:	e7f8      	b.n	4007a0 <ili93xx_device_type_identify+0x60>
		g_uc_device_type = DEVICE_TYPE_ILI9325;
  4007ae:	2201      	movs	r2, #1
  4007b0:	4b02      	ldr	r3, [pc, #8]	; (4007bc <ili93xx_device_type_identify+0x7c>)
  4007b2:	701a      	strb	r2, [r3, #0]
		return 0;
  4007b4:	2000      	movs	r0, #0
  4007b6:	e7f3      	b.n	4007a0 <ili93xx_device_type_identify+0x60>
  4007b8:	61000002 	.word	0x61000002
  4007bc:	20000878 	.word	0x20000878

004007c0 <ili93xx_display_on>:

/**
 * \brief Turn on the LCD.
 */
void ili93xx_display_on(void)
{
  4007c0:	b508      	push	{r3, lr}
	if (g_uc_device_type == DEVICE_TYPE_ILI9325) {
  4007c2:	4b09      	ldr	r3, [pc, #36]	; (4007e8 <ili93xx_display_on+0x28>)
  4007c4:	781b      	ldrb	r3, [r3, #0]
  4007c6:	2b01      	cmp	r3, #1
  4007c8:	d002      	beq.n	4007d0 <ili93xx_display_on+0x10>
		ili93xx_write_register_word(ILI9325_DISP_CTRL1,
				ILI9325_DISP_CTRL1_BASEE |
				ILI9325_DISP_CTRL1_GON |
				ILI9325_DISP_CTRL1_DTE |
				ILI9325_DISP_CTRL1_D(0x03));
	} else if (g_uc_device_type == DEVICE_TYPE_ILI9341) {
  4007ca:	2b02      	cmp	r3, #2
  4007cc:	d006      	beq.n	4007dc <ili93xx_display_on+0x1c>
  4007ce:	bd08      	pop	{r3, pc}
		ili93xx_write_register_word(ILI9325_DISP_CTRL1,
  4007d0:	f240 1133 	movw	r1, #307	; 0x133
  4007d4:	2007      	movs	r0, #7
  4007d6:	4b05      	ldr	r3, [pc, #20]	; (4007ec <ili93xx_display_on+0x2c>)
  4007d8:	4798      	blx	r3
  4007da:	bd08      	pop	{r3, pc}
		ili93xx_write_register(ILI9341_CMD_DISPLAY_ON, NULL, 0);
  4007dc:	2200      	movs	r2, #0
  4007de:	4611      	mov	r1, r2
  4007e0:	2029      	movs	r0, #41	; 0x29
  4007e2:	4b03      	ldr	r3, [pc, #12]	; (4007f0 <ili93xx_display_on+0x30>)
  4007e4:	4798      	blx	r3
	}
}
  4007e6:	e7f2      	b.n	4007ce <ili93xx_display_on+0xe>
  4007e8:	20000878 	.word	0x20000878
  4007ec:	00400665 	.word	0x00400665
  4007f0:	0040067d 	.word	0x0040067d

004007f4 <ili93xx_set_foreground_color>:
 * \brief Set foreground color.
 *
 * \param ul_color foreground color.
 */
void ili93xx_set_foreground_color(ili93xx_color_t ul_color)
{
  4007f4:	4a04      	ldr	r2, [pc, #16]	; (400808 <ili93xx_set_foreground_color+0x14>)
  4007f6:	1f13      	subs	r3, r2, #4
  4007f8:	f502 726f 	add.w	r2, r2, #956	; 0x3bc
	uint32_t i;

	/** Fill the cache with selected color */
	for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
		g_ul_pixel_cache[i] = ul_color;
  4007fc:	f843 0f04 	str.w	r0, [r3, #4]!
	for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
  400800:	4293      	cmp	r3, r2
  400802:	d1fb      	bne.n	4007fc <ili93xx_set_foreground_color+0x8>
	}
}
  400804:	4770      	bx	lr
  400806:	bf00      	nop
  400808:	2000087c 	.word	0x2000087c

0040080c <ili93xx_set_window>:
 * \param ul_width The width of the window.
 * \param ul_height The height of the window.
 */
void ili93xx_set_window(uint32_t ul_x, uint32_t ul_y, uint32_t ul_width,
		uint32_t ul_height)
{
  40080c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400810:	b082      	sub	sp, #8
  400812:	460c      	mov	r4, r1
  400814:	4617      	mov	r7, r2
  400816:	461e      	mov	r6, r3
	Assert(ul_x <= (g_ul_lcd_x_length - 1));
	Assert(ul_y <= (g_ul_lcd_y_length - 1));
	Assert(ul_width <= (g_ul_lcd_x_length - ul_x));
	Assert(ul_height <= (g_ul_lcd_y_length - ul_y));
	if (g_uc_device_type == DEVICE_TYPE_ILI9325) {
  400818:	4b23      	ldr	r3, [pc, #140]	; (4008a8 <ili93xx_set_window+0x9c>)
  40081a:	781b      	ldrb	r3, [r3, #0]
  40081c:	2b01      	cmp	r3, #1
  40081e:	d004      	beq.n	40082a <ili93xx_set_window+0x1e>
				(uint16_t)ul_y);

		/** Set Vertical Address End Position */
		ili93xx_write_register_word(ILI9325_VERTICAL_ADDR_END,
				(uint16_t)(ul_y + ul_height - 1));
	} else if (g_uc_device_type == DEVICE_TYPE_ILI9341) {
  400820:	2b02      	cmp	r3, #2
  400822:	d017      	beq.n	400854 <ili93xx_set_window+0x48>
		paratable[2] = ((ul_y + ul_height - 1) >> 8) & 0xFF;
		paratable[3] = (ul_y + ul_height - 1) & 0xFF;
		ili93xx_write_register(ILI9341_CMD_PAGE_ADDRESS_SET,
				       paratable, 4);
	}
}
  400824:	b002      	add	sp, #8
  400826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ili93xx_write_register_word(ILI9325_HORIZONTAL_ADDR_START,
  40082a:	b285      	uxth	r5, r0
  40082c:	4629      	mov	r1, r5
  40082e:	2050      	movs	r0, #80	; 0x50
  400830:	f8df 807c 	ldr.w	r8, [pc, #124]	; 4008b0 <ili93xx_set_window+0xa4>
  400834:	47c0      	blx	r8
		ili93xx_write_register_word(ILI9325_HORIZONTAL_ADDR_END,
  400836:	1e78      	subs	r0, r7, #1
  400838:	4428      	add	r0, r5
  40083a:	b281      	uxth	r1, r0
  40083c:	2051      	movs	r0, #81	; 0x51
  40083e:	47c0      	blx	r8
		ili93xx_write_register_word(ILI9325_VERTICAL_ADDR_START,
  400840:	b2a4      	uxth	r4, r4
  400842:	4621      	mov	r1, r4
  400844:	2052      	movs	r0, #82	; 0x52
  400846:	47c0      	blx	r8
		ili93xx_write_register_word(ILI9325_VERTICAL_ADDR_END,
  400848:	3e01      	subs	r6, #1
  40084a:	4434      	add	r4, r6
  40084c:	b2a1      	uxth	r1, r4
  40084e:	2053      	movs	r0, #83	; 0x53
  400850:	47c0      	blx	r8
  400852:	e7e7      	b.n	400824 <ili93xx_set_window+0x18>
		paratable[0] = (ul_x >> 8) & 0xFF;
  400854:	0a03      	lsrs	r3, r0, #8
  400856:	f88d 3004 	strb.w	r3, [sp, #4]
		paratable[1] = ul_x & 0xFF;
  40085a:	b2c2      	uxtb	r2, r0
  40085c:	f88d 2005 	strb.w	r2, [sp, #5]
		paratable[2] = ((ul_x + ul_width - 1) >> 8) & 0xFF;
  400860:	1e7b      	subs	r3, r7, #1
  400862:	4418      	add	r0, r3
  400864:	0a00      	lsrs	r0, r0, #8
  400866:	f88d 0006 	strb.w	r0, [sp, #6]
		paratable[3] = (ul_x + ul_width - 1) & 0xFF;
  40086a:	461f      	mov	r7, r3
  40086c:	4417      	add	r7, r2
  40086e:	f88d 7007 	strb.w	r7, [sp, #7]
		ili93xx_write_register(ILI9341_CMD_COLUMN_ADDRESS_SET,
  400872:	2204      	movs	r2, #4
  400874:	eb0d 0102 	add.w	r1, sp, r2
  400878:	202a      	movs	r0, #42	; 0x2a
  40087a:	4d0c      	ldr	r5, [pc, #48]	; (4008ac <ili93xx_set_window+0xa0>)
  40087c:	47a8      	blx	r5
		paratable[0] = (ul_y >> 8) & 0xFF;
  40087e:	0a23      	lsrs	r3, r4, #8
  400880:	f88d 3004 	strb.w	r3, [sp, #4]
		paratable[1] = ul_y & 0xFF;
  400884:	b2e2      	uxtb	r2, r4
  400886:	f88d 2005 	strb.w	r2, [sp, #5]
		paratable[2] = ((ul_y + ul_height - 1) >> 8) & 0xFF;
  40088a:	1e73      	subs	r3, r6, #1
  40088c:	441c      	add	r4, r3
  40088e:	0a24      	lsrs	r4, r4, #8
  400890:	f88d 4006 	strb.w	r4, [sp, #6]
		paratable[3] = (ul_y + ul_height - 1) & 0xFF;
  400894:	461e      	mov	r6, r3
  400896:	4416      	add	r6, r2
  400898:	f88d 6007 	strb.w	r6, [sp, #7]
		ili93xx_write_register(ILI9341_CMD_PAGE_ADDRESS_SET,
  40089c:	2204      	movs	r2, #4
  40089e:	eb0d 0102 	add.w	r1, sp, r2
  4008a2:	202b      	movs	r0, #43	; 0x2b
  4008a4:	47a8      	blx	r5
}
  4008a6:	e7bd      	b.n	400824 <ili93xx_set_window+0x18>
  4008a8:	20000878 	.word	0x20000878
  4008ac:	0040067d 	.word	0x0040067d
  4008b0:	00400665 	.word	0x00400665

004008b4 <ili93xx_set_cursor_position>:
 *
 * \param us_x X coordinate of upper-left corner on LCD.
 * \param us_y Y coordinate of upper-left corner on LCD.
 */
void ili93xx_set_cursor_position(uint16_t us_x, uint16_t us_y)
{
  4008b4:	b538      	push	{r3, r4, r5, lr}
	if (g_uc_device_type == DEVICE_TYPE_ILI9325) {
  4008b6:	4b07      	ldr	r3, [pc, #28]	; (4008d4 <ili93xx_set_cursor_position+0x20>)
  4008b8:	781b      	ldrb	r3, [r3, #0]
  4008ba:	2b01      	cmp	r3, #1
  4008bc:	d000      	beq.n	4008c0 <ili93xx_set_cursor_position+0xc>
  4008be:	bd38      	pop	{r3, r4, r5, pc}
  4008c0:	460c      	mov	r4, r1
  4008c2:	4601      	mov	r1, r0
		/** GRAM Horizontal/Vertical Address Set (R20h, R21h) */
		ili93xx_write_register_word(ILI9325_HORIZONTAL_GRAM_ADDR_SET, us_x);
  4008c4:	2020      	movs	r0, #32
  4008c6:	4d04      	ldr	r5, [pc, #16]	; (4008d8 <ili93xx_set_cursor_position+0x24>)
  4008c8:	47a8      	blx	r5
		ili93xx_write_register_word(ILI9325_VERTICAL_GRAM_ADDR_SET, us_y);
  4008ca:	4621      	mov	r1, r4
  4008cc:	2021      	movs	r0, #33	; 0x21
  4008ce:	47a8      	blx	r5
	} else if (g_uc_device_type == DEVICE_TYPE_ILI9341) {
		/** There is no corresponding operation for ILI9341. */
	}
}
  4008d0:	e7f5      	b.n	4008be <ili93xx_set_cursor_position+0xa>
  4008d2:	bf00      	nop
  4008d4:	20000878 	.word	0x20000878
  4008d8:	00400665 	.word	0x00400665

004008dc <ili93xx_init>:
{
  4008dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4008e0:	b083      	sub	sp, #12
  4008e2:	4606      	mov	r6, r0
	if (ili93xx_device_type_identify() != 0) {
  4008e4:	4bac      	ldr	r3, [pc, #688]	; (400b98 <ili93xx_init+0x2bc>)
  4008e6:	4798      	blx	r3
  4008e8:	2800      	cmp	r0, #0
  4008ea:	f040 8152 	bne.w	400b92 <ili93xx_init+0x2b6>
	g_ul_lcd_x_length = ILI93XX_LCD_WIDTH;
  4008ee:	22f0      	movs	r2, #240	; 0xf0
  4008f0:	4baa      	ldr	r3, [pc, #680]	; (400b9c <ili93xx_init+0x2c0>)
  4008f2:	601a      	str	r2, [r3, #0]
	g_ul_lcd_y_length = ILI93XX_LCD_HEIGHT;
  4008f4:	f44f 72a0 	mov.w	r2, #320	; 0x140
  4008f8:	4ba9      	ldr	r3, [pc, #676]	; (400ba0 <ili93xx_init+0x2c4>)
  4008fa:	601a      	str	r2, [r3, #0]
	if (g_uc_device_type == DEVICE_TYPE_ILI9325) {
  4008fc:	4ba9      	ldr	r3, [pc, #676]	; (400ba4 <ili93xx_init+0x2c8>)
  4008fe:	781b      	ldrb	r3, [r3, #0]
  400900:	2b01      	cmp	r3, #1
  400902:	d006      	beq.n	400912 <ili93xx_init+0x36>
	} else if (g_uc_device_type == DEVICE_TYPE_ILI9341) {
  400904:	2b02      	cmp	r3, #2
  400906:	f000 80b5 	beq.w	400a74 <ili93xx_init+0x198>
		return 1;
  40090a:	2001      	movs	r0, #1
}
  40090c:	b003      	add	sp, #12
  40090e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ili93xx_write_register_word(ILI9325_DISP_CTRL1, ILI9325_DISP_CTRL1_GON |
  400912:	2133      	movs	r1, #51	; 0x33
  400914:	2007      	movs	r0, #7
  400916:	4ca4      	ldr	r4, [pc, #656]	; (400ba8 <ili93xx_init+0x2cc>)
  400918:	47a0      	blx	r4
		ili93xx_write_register_word(ILI9325_POWER_CTRL1, 0x0000);
  40091a:	2100      	movs	r1, #0
  40091c:	2010      	movs	r0, #16
  40091e:	47a0      	blx	r4
		ili93xx_write_register_word(ILI9325_START_OSC_CTRL,
  400920:	2101      	movs	r1, #1
  400922:	2000      	movs	r0, #0
  400924:	47a0      	blx	r4
		ili93xx_write_register_word(ILI9325_DRIVER_OUTPUT_CTRL1,
  400926:	f44f 7180 	mov.w	r1, #256	; 0x100
  40092a:	2001      	movs	r0, #1
  40092c:	47a0      	blx	r4
		ili93xx_write_register_word(ILI9325_LCD_DRIVING_CTRL,
  40092e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
  400932:	2002      	movs	r0, #2
  400934:	47a0      	blx	r4
		ili93xx_write_register_word(ILI9325_RESIZE_CTRL, 0x0000);
  400936:	2100      	movs	r1, #0
  400938:	2004      	movs	r0, #4
  40093a:	47a0      	blx	r4
		ili93xx_write_register_word(ILI9325_DISP_CTRL2,
  40093c:	f240 2107 	movw	r1, #519	; 0x207
  400940:	2008      	movs	r0, #8
  400942:	47a0      	blx	r4
		ili93xx_write_register_word(ILI9325_DISP_CTRL3, 0x0000);
  400944:	2100      	movs	r1, #0
  400946:	2009      	movs	r0, #9
  400948:	47a0      	blx	r4
		ili93xx_write_register_word(ILI9325_DISP_CTRL4, 0x0000);
  40094a:	2100      	movs	r1, #0
  40094c:	200a      	movs	r0, #10
  40094e:	47a0      	blx	r4
		ili93xx_write_register_word(ILI9325_RGB_DISP_INTERFACE_CTRL1,
  400950:	2100      	movs	r1, #0
  400952:	200c      	movs	r0, #12
  400954:	47a0      	blx	r4
		ili93xx_write_register_word(ILI9325_FRAME_MAKER_POS, 0x0000);
  400956:	2100      	movs	r1, #0
  400958:	200d      	movs	r0, #13
  40095a:	47a0      	blx	r4
		ili93xx_write_register_word(ILI9325_RGB_DISP_INTERFACE_CTRL2,
  40095c:	2100      	movs	r1, #0
  40095e:	200f      	movs	r0, #15
  400960:	47a0      	blx	r4
		ili93xx_write_register_word(ILI9325_POWER_CTRL1, 0x0000);
  400962:	2100      	movs	r1, #0
  400964:	2010      	movs	r0, #16
  400966:	47a0      	blx	r4
		ili93xx_write_register_word(ILI9325_POWER_CTRL2, 0x0000);
  400968:	2100      	movs	r1, #0
  40096a:	2011      	movs	r0, #17
  40096c:	47a0      	blx	r4
		ili93xx_write_register_word(ILI9325_POWER_CTRL3, 0x0000);
  40096e:	2100      	movs	r1, #0
  400970:	2012      	movs	r0, #18
  400972:	47a0      	blx	r4
		ili93xx_write_register_word(ILI9325_POWER_CTRL4, 0x0000);
  400974:	2100      	movs	r1, #0
  400976:	2013      	movs	r0, #19
  400978:	47a0      	blx	r4
		ili93xx_delay(200);
  40097a:	20c8      	movs	r0, #200	; 0xc8
  40097c:	4d8b      	ldr	r5, [pc, #556]	; (400bac <ili93xx_init+0x2d0>)
  40097e:	47a8      	blx	r5
		ili93xx_write_register_word(ILI9325_POWER_CTRL1,
  400980:	f241 2190 	movw	r1, #4752	; 0x1290
  400984:	2010      	movs	r0, #16
  400986:	47a0      	blx	r4
		ili93xx_write_register_word(ILI9325_POWER_CTRL2,
  400988:	f240 2127 	movw	r1, #551	; 0x227
  40098c:	2011      	movs	r0, #17
  40098e:	47a0      	blx	r4
		ili93xx_delay(50);
  400990:	2032      	movs	r0, #50	; 0x32
  400992:	47a8      	blx	r5
		ili93xx_write_register_word(ILI9325_POWER_CTRL3,
  400994:	211b      	movs	r1, #27
  400996:	2012      	movs	r0, #18
  400998:	47a0      	blx	r4
		ili93xx_delay(50);
  40099a:	2032      	movs	r0, #50	; 0x32
  40099c:	47a8      	blx	r5
		ili93xx_write_register_word(ILI9325_POWER_CTRL4,
  40099e:	f44f 5188 	mov.w	r1, #4352	; 0x1100
  4009a2:	2013      	movs	r0, #19
  4009a4:	47a0      	blx	r4
		ili93xx_write_register_word(ILI9325_POWER_CTRL7,
  4009a6:	2119      	movs	r1, #25
  4009a8:	2029      	movs	r0, #41	; 0x29
  4009aa:	47a0      	blx	r4
		ili93xx_write_register_word(ILI9325_FRAME_RATE_AND_COLOR_CTRL,
  4009ac:	210d      	movs	r1, #13
  4009ae:	202b      	movs	r0, #43	; 0x2b
  4009b0:	47a0      	blx	r4
		ili93xx_delay(50);
  4009b2:	2032      	movs	r0, #50	; 0x32
  4009b4:	47a8      	blx	r5
		ili93xx_write_register_word(ILI9325_GAMMA_CTL1, 0x0000);
  4009b6:	2100      	movs	r1, #0
  4009b8:	2030      	movs	r0, #48	; 0x30
  4009ba:	47a0      	blx	r4
		ili93xx_write_register_word(ILI9325_GAMMA_CTL2,
  4009bc:	f44f 7101 	mov.w	r1, #516	; 0x204
  4009c0:	2031      	movs	r0, #49	; 0x31
  4009c2:	47a0      	blx	r4
		ili93xx_write_register_word(ILI9325_GAMMA_CTL3,
  4009c4:	f44f 7100 	mov.w	r1, #512	; 0x200
  4009c8:	2032      	movs	r0, #50	; 0x32
  4009ca:	47a0      	blx	r4
		ili93xx_write_register_word(ILI9325_GAMMA_CTL4,
  4009cc:	2107      	movs	r1, #7
  4009ce:	2035      	movs	r0, #53	; 0x35
  4009d0:	47a0      	blx	r4
		ili93xx_write_register_word(ILI9325_GAMMA_CTL5,
  4009d2:	f241 4104 	movw	r1, #5124	; 0x1404
  4009d6:	2036      	movs	r0, #54	; 0x36
  4009d8:	47a0      	blx	r4
		ili93xx_write_register_word(ILI9325_GAMMA_CTL6,
  4009da:	f240 7105 	movw	r1, #1797	; 0x705
  4009de:	2037      	movs	r0, #55	; 0x37
  4009e0:	47a0      	blx	r4
		ili93xx_write_register_word(ILI9325_GAMMA_CTL7,
  4009e2:	f240 3105 	movw	r1, #773	; 0x305
  4009e6:	2038      	movs	r0, #56	; 0x38
  4009e8:	47a0      	blx	r4
		ili93xx_write_register_word(ILI9325_GAMMA_CTL8,
  4009ea:	f240 7107 	movw	r1, #1799	; 0x707
  4009ee:	2039      	movs	r0, #57	; 0x39
  4009f0:	47a0      	blx	r4
		ili93xx_write_register_word(ILI9325_GAMMA_CTL9,
  4009f2:	f240 7101 	movw	r1, #1793	; 0x701
  4009f6:	203c      	movs	r0, #60	; 0x3c
  4009f8:	47a0      	blx	r4
		ili93xx_write_register_word(ILI9325_GAMMA_CTL10,
  4009fa:	210e      	movs	r1, #14
  4009fc:	203d      	movs	r0, #61	; 0x3d
  4009fe:	47a0      	blx	r4
		ili93xx_write_register_word(ILI9325_ENTRY_MODE,
  400a00:	f24d 0110 	movw	r1, #53264	; 0xd010
  400a04:	2003      	movs	r0, #3
  400a06:	47a0      	blx	r4
		ili93xx_write_register_word(ILI9325_DRIVER_OUTPUT_CTRL2,
  400a08:	f44f 4127 	mov.w	r1, #42752	; 0xa700
  400a0c:	2060      	movs	r0, #96	; 0x60
  400a0e:	47a0      	blx	r4
		ili93xx_write_register_word(ILI9325_BASE_IMG_DISP_CTRL,
  400a10:	2101      	movs	r1, #1
  400a12:	2061      	movs	r0, #97	; 0x61
  400a14:	47a0      	blx	r4
		ili93xx_write_register_word(ILI9325_VERTICAL_SCROLL_CTRL,
  400a16:	2100      	movs	r1, #0
  400a18:	206a      	movs	r0, #106	; 0x6a
  400a1a:	47a0      	blx	r4
		ili93xx_write_register_word(ILI9325_PARTIAL_IMG1_DISP_POS,
  400a1c:	2100      	movs	r1, #0
  400a1e:	2080      	movs	r0, #128	; 0x80
  400a20:	47a0      	blx	r4
		ili93xx_write_register_word(
  400a22:	2100      	movs	r1, #0
  400a24:	2081      	movs	r0, #129	; 0x81
  400a26:	47a0      	blx	r4
		ili93xx_write_register_word(ILI9325_PARTIAL_IMG1_AREA_END_LINE,
  400a28:	2100      	movs	r1, #0
  400a2a:	2082      	movs	r0, #130	; 0x82
  400a2c:	47a0      	blx	r4
		ili93xx_write_register_word(ILI9325_PARTIAL_IMG2_DISP_POS,
  400a2e:	2100      	movs	r1, #0
  400a30:	2083      	movs	r0, #131	; 0x83
  400a32:	47a0      	blx	r4
		ili93xx_write_register_word(
  400a34:	2100      	movs	r1, #0
  400a36:	2084      	movs	r0, #132	; 0x84
  400a38:	47a0      	blx	r4
		ili93xx_write_register_word(ILI9325_PARTIAL_IMG2_AREA_END_LINE,
  400a3a:	2100      	movs	r1, #0
  400a3c:	2085      	movs	r0, #133	; 0x85
  400a3e:	47a0      	blx	r4
		ili93xx_write_register_word(ILI9325_PANEL_INTERFACE_CTRL1,
  400a40:	2110      	movs	r1, #16
  400a42:	2090      	movs	r0, #144	; 0x90
  400a44:	47a0      	blx	r4
		ili93xx_write_register_word(ILI9325_PANEL_INTERFACE_CTRL2,
  400a46:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  400a4a:	2092      	movs	r0, #146	; 0x92
  400a4c:	47a0      	blx	r4
		ili93xx_write_register_word(ILI9325_PANEL_INTERFACE_CTRL4,
  400a4e:	f44f 7188 	mov.w	r1, #272	; 0x110
  400a52:	2095      	movs	r0, #149	; 0x95
  400a54:	47a0      	blx	r4
		ili93xx_set_window(0, 0, p_opt->ul_width, p_opt->ul_height);
  400a56:	6873      	ldr	r3, [r6, #4]
  400a58:	6832      	ldr	r2, [r6, #0]
  400a5a:	2100      	movs	r1, #0
  400a5c:	4608      	mov	r0, r1
  400a5e:	4c54      	ldr	r4, [pc, #336]	; (400bb0 <ili93xx_init+0x2d4>)
  400a60:	47a0      	blx	r4
		ili93xx_set_foreground_color(p_opt->foreground_color);
  400a62:	68b0      	ldr	r0, [r6, #8]
  400a64:	4b53      	ldr	r3, [pc, #332]	; (400bb4 <ili93xx_init+0x2d8>)
  400a66:	4798      	blx	r3
		ili93xx_set_cursor_position(0, 0);
  400a68:	2100      	movs	r1, #0
  400a6a:	4608      	mov	r0, r1
  400a6c:	4b52      	ldr	r3, [pc, #328]	; (400bb8 <ili93xx_init+0x2dc>)
  400a6e:	4798      	blx	r3
	return 0;
  400a70:	2000      	movs	r0, #0
  400a72:	e74b      	b.n	40090c <ili93xx_init+0x30>
		paratable[0] = 0x39;
  400a74:	2339      	movs	r3, #57	; 0x39
  400a76:	f88d 3000 	strb.w	r3, [sp]
		paratable[1] = 0x2C;
  400a7a:	232c      	movs	r3, #44	; 0x2c
  400a7c:	f88d 3001 	strb.w	r3, [sp, #1]
		paratable[2] = 0x00;
  400a80:	2400      	movs	r4, #0
  400a82:	f88d 4002 	strb.w	r4, [sp, #2]
		paratable[3] = 0x34;
  400a86:	2334      	movs	r3, #52	; 0x34
  400a88:	f88d 3003 	strb.w	r3, [sp, #3]
		paratable[4] = 0x02;
  400a8c:	2702      	movs	r7, #2
  400a8e:	f88d 7004 	strb.w	r7, [sp, #4]
		ili93xx_write_register(ILI9341_CMD_POWER_CONTROL_A, paratable, 5);
  400a92:	2205      	movs	r2, #5
  400a94:	4669      	mov	r1, sp
  400a96:	20cb      	movs	r0, #203	; 0xcb
  400a98:	4d48      	ldr	r5, [pc, #288]	; (400bbc <ili93xx_init+0x2e0>)
  400a9a:	47a8      	blx	r5
		paratable[0] = 0;
  400a9c:	f88d 4000 	strb.w	r4, [sp]
		paratable[1] = 0xAA;
  400aa0:	23aa      	movs	r3, #170	; 0xaa
  400aa2:	f88d 3001 	strb.w	r3, [sp, #1]
		paratable[2] = 0xB0;
  400aa6:	23b0      	movs	r3, #176	; 0xb0
  400aa8:	f88d 3002 	strb.w	r3, [sp, #2]
		ili93xx_write_register(ILI9341_CMD_POWER_CONTROL_B, paratable, 3);
  400aac:	2203      	movs	r2, #3
  400aae:	4669      	mov	r1, sp
  400ab0:	20cf      	movs	r0, #207	; 0xcf
  400ab2:	47a8      	blx	r5
		paratable[0] = 0x30;
  400ab4:	2330      	movs	r3, #48	; 0x30
  400ab6:	f88d 3000 	strb.w	r3, [sp]
		ili93xx_write_register(ILI9341_CMD_PUMP_RATIO_CONTROL,
  400aba:	2201      	movs	r2, #1
  400abc:	4669      	mov	r1, sp
  400abe:	20f7      	movs	r0, #247	; 0xf7
  400ac0:	47a8      	blx	r5
		paratable[0] = 0x25;
  400ac2:	2325      	movs	r3, #37	; 0x25
  400ac4:	f88d 3000 	strb.w	r3, [sp]
		ili93xx_write_register(ILI9341_CMD_POWER_CONTROL_1, paratable, 1);
  400ac8:	2201      	movs	r2, #1
  400aca:	4669      	mov	r1, sp
  400acc:	20c0      	movs	r0, #192	; 0xc0
  400ace:	47a8      	blx	r5
		paratable[0] = 0x11;
  400ad0:	f04f 0911 	mov.w	r9, #17
  400ad4:	f88d 9000 	strb.w	r9, [sp]
		ili93xx_write_register(ILI9341_CMD_POWER_CONTROL_2, paratable, 1);
  400ad8:	2201      	movs	r2, #1
  400ada:	4669      	mov	r1, sp
  400adc:	20c1      	movs	r0, #193	; 0xc1
  400ade:	47a8      	blx	r5
		paratable[0] = 0x5C;
  400ae0:	235c      	movs	r3, #92	; 0x5c
  400ae2:	f88d 3000 	strb.w	r3, [sp]
		paratable[1] = 0x4C;
  400ae6:	234c      	movs	r3, #76	; 0x4c
  400ae8:	f88d 3001 	strb.w	r3, [sp, #1]
		ili93xx_write_register(ILI9341_CMD_VCOM_CONTROL_1, paratable, 2);
  400aec:	463a      	mov	r2, r7
  400aee:	4669      	mov	r1, sp
  400af0:	20c5      	movs	r0, #197	; 0xc5
  400af2:	47a8      	blx	r5
		paratable[0] = 0x94;
  400af4:	2394      	movs	r3, #148	; 0x94
  400af6:	f88d 3000 	strb.w	r3, [sp]
		ili93xx_write_register(ILI9341_CMD_VCOM_CONTROL_2, paratable, 1);
  400afa:	2201      	movs	r2, #1
  400afc:	4669      	mov	r1, sp
  400afe:	20c7      	movs	r0, #199	; 0xc7
  400b00:	47a8      	blx	r5
		paratable[0] = 0x85;
  400b02:	2385      	movs	r3, #133	; 0x85
  400b04:	f88d 3000 	strb.w	r3, [sp]
		paratable[1] = 0x01;
  400b08:	f04f 0801 	mov.w	r8, #1
  400b0c:	f88d 8001 	strb.w	r8, [sp, #1]
		paratable[2] = 0x78;
  400b10:	2378      	movs	r3, #120	; 0x78
  400b12:	f88d 3002 	strb.w	r3, [sp, #2]
		ili93xx_write_register(ILI9341_CMD_DRIVER_TIMING_CTL_A, paratable, 3);
  400b16:	2203      	movs	r2, #3
  400b18:	4669      	mov	r1, sp
  400b1a:	20e8      	movs	r0, #232	; 0xe8
  400b1c:	47a8      	blx	r5
		paratable[0] = 0x00;
  400b1e:	f88d 4000 	strb.w	r4, [sp]
		paratable[1] = 0x00;
  400b22:	f88d 4001 	strb.w	r4, [sp, #1]
		ili93xx_write_register(ILI9341_CMD_DRIVER_TIMING_CTL_B, paratable, 2);
  400b26:	463a      	mov	r2, r7
  400b28:	4669      	mov	r1, sp
  400b2a:	20ea      	movs	r0, #234	; 0xea
  400b2c:	47a8      	blx	r5
		paratable[0] = ILI9341_CMD_MEMORY_ACCESS_CONTROL_MX |
  400b2e:	2348      	movs	r3, #72	; 0x48
  400b30:	f88d 3000 	strb.w	r3, [sp]
		ili93xx_write_register(ILI9341_CMD_MEMORY_ACCESS_CONTROL,
  400b34:	4642      	mov	r2, r8
  400b36:	4669      	mov	r1, sp
  400b38:	2036      	movs	r0, #54	; 0x36
  400b3a:	47a8      	blx	r5
		paratable[0] = 0x06;
  400b3c:	2306      	movs	r3, #6
  400b3e:	f88d 3000 	strb.w	r3, [sp]
		ili93xx_write_register(ILI9341_CMD_PIXEL_FORMAT_SET, paratable, 1);
  400b42:	4642      	mov	r2, r8
  400b44:	4669      	mov	r1, sp
  400b46:	203a      	movs	r0, #58	; 0x3a
  400b48:	47a8      	blx	r5
		paratable[0] = 0x02;
  400b4a:	f88d 7000 	strb.w	r7, [sp]
		paratable[1] = 0x82;
  400b4e:	2382      	movs	r3, #130	; 0x82
  400b50:	f88d 3001 	strb.w	r3, [sp, #1]
		paratable[2] = 0x27;
  400b54:	2327      	movs	r3, #39	; 0x27
  400b56:	f88d 3002 	strb.w	r3, [sp, #2]
		paratable[3] = 0x00;
  400b5a:	f88d 4003 	strb.w	r4, [sp, #3]
		ili93xx_write_register(ILI9341_CMD_DISPLAY_FUNCTION_CTL, paratable, 4);
  400b5e:	2204      	movs	r2, #4
  400b60:	4669      	mov	r1, sp
  400b62:	20b6      	movs	r0, #182	; 0xb6
  400b64:	47a8      	blx	r5
		ili93xx_set_window(0, 0, p_opt->ul_width, p_opt->ul_height);
  400b66:	6873      	ldr	r3, [r6, #4]
  400b68:	6832      	ldr	r2, [r6, #0]
  400b6a:	4621      	mov	r1, r4
  400b6c:	4620      	mov	r0, r4
  400b6e:	4f10      	ldr	r7, [pc, #64]	; (400bb0 <ili93xx_init+0x2d4>)
  400b70:	47b8      	blx	r7
		ili93xx_set_foreground_color(p_opt->foreground_color);
  400b72:	68b0      	ldr	r0, [r6, #8]
  400b74:	4b0f      	ldr	r3, [pc, #60]	; (400bb4 <ili93xx_init+0x2d8>)
  400b76:	4798      	blx	r3
		ili93xx_write_register(ILI9341_CMD_SLEEP_OUT, paratable, 0);
  400b78:	4622      	mov	r2, r4
  400b7a:	4669      	mov	r1, sp
  400b7c:	4648      	mov	r0, r9
  400b7e:	47a8      	blx	r5
		ili93xx_delay(10);
  400b80:	200a      	movs	r0, #10
  400b82:	4b0a      	ldr	r3, [pc, #40]	; (400bac <ili93xx_init+0x2d0>)
  400b84:	4798      	blx	r3
		ili93xx_write_register(ILI9341_CMD_DISPLAY_ON, paratable, 0);
  400b86:	4622      	mov	r2, r4
  400b88:	4669      	mov	r1, sp
  400b8a:	2029      	movs	r0, #41	; 0x29
  400b8c:	47a8      	blx	r5
	return 0;
  400b8e:	4620      	mov	r0, r4
  400b90:	e6bc      	b.n	40090c <ili93xx_init+0x30>
		return 1;
  400b92:	2001      	movs	r0, #1
  400b94:	e6ba      	b.n	40090c <ili93xx_init+0x30>
  400b96:	bf00      	nop
  400b98:	00400741 	.word	0x00400741
  400b9c:	2000000c 	.word	0x2000000c
  400ba0:	20000010 	.word	0x20000010
  400ba4:	20000878 	.word	0x20000878
  400ba8:	00400665 	.word	0x00400665
  400bac:	004006a9 	.word	0x004006a9
  400bb0:	0040080d 	.word	0x0040080d
  400bb4:	004007f5 	.word	0x004007f5
  400bb8:	004008b5 	.word	0x004008b5
  400bbc:	0040067d 	.word	0x0040067d

00400bc0 <ili93xx_draw_pixel>:
 *
 * \return 0 if succeeds, otherwise fails.
 */
uint32_t ili93xx_draw_pixel(uint32_t ul_x, uint32_t ul_y)
{
	if ((ul_x >= g_ul_lcd_x_length) || (ul_y >= g_ul_lcd_y_length)) {
  400bc0:	4b16      	ldr	r3, [pc, #88]	; (400c1c <ili93xx_draw_pixel+0x5c>)
  400bc2:	681b      	ldr	r3, [r3, #0]
  400bc4:	4283      	cmp	r3, r0
  400bc6:	d924      	bls.n	400c12 <ili93xx_draw_pixel+0x52>
  400bc8:	4b15      	ldr	r3, [pc, #84]	; (400c20 <ili93xx_draw_pixel+0x60>)
  400bca:	681b      	ldr	r3, [r3, #0]
  400bcc:	428b      	cmp	r3, r1
  400bce:	d922      	bls.n	400c16 <ili93xx_draw_pixel+0x56>
{
  400bd0:	b510      	push	{r4, lr}
		return 1;
	}

	if (g_uc_device_type == DEVICE_TYPE_ILI9325) {
  400bd2:	4b14      	ldr	r3, [pc, #80]	; (400c24 <ili93xx_draw_pixel+0x64>)
  400bd4:	781b      	ldrb	r3, [r3, #0]
  400bd6:	2b01      	cmp	r3, #1
  400bd8:	d003      	beq.n	400be2 <ili93xx_draw_pixel+0x22>
		/** Set cursor */
		ili93xx_set_cursor_position(ul_x, ul_y);
		/** Prepare to write in GRAM */
		ili93xx_write_ram_prepare();
		ili93xx_write_ram(*g_ul_pixel_cache);
	} else if (g_uc_device_type == DEVICE_TYPE_ILI9341) {
  400bda:	2b02      	cmp	r3, #2
  400bdc:	d00d      	beq.n	400bfa <ili93xx_draw_pixel+0x3a>
		/** Prepare to write in GRAM */
		ili93xx_write_ram_prepare();
		ili93xx_write_ram(*g_ul_pixel_cache);
	}

	return 0;
  400bde:	2000      	movs	r0, #0
}
  400be0:	bd10      	pop	{r4, pc}
		ili93xx_set_cursor_position(ul_x, ul_y);
  400be2:	b289      	uxth	r1, r1
  400be4:	b280      	uxth	r0, r0
  400be6:	4b10      	ldr	r3, [pc, #64]	; (400c28 <ili93xx_draw_pixel+0x68>)
  400be8:	4798      	blx	r3
		ili93xx_write_ram_prepare();
  400bea:	4b10      	ldr	r3, [pc, #64]	; (400c2c <ili93xx_draw_pixel+0x6c>)
  400bec:	4798      	blx	r3
		ili93xx_write_ram(*g_ul_pixel_cache);
  400bee:	4b10      	ldr	r3, [pc, #64]	; (400c30 <ili93xx_draw_pixel+0x70>)
  400bf0:	6818      	ldr	r0, [r3, #0]
  400bf2:	4b10      	ldr	r3, [pc, #64]	; (400c34 <ili93xx_draw_pixel+0x74>)
  400bf4:	4798      	blx	r3
	return 0;
  400bf6:	2000      	movs	r0, #0
  400bf8:	bd10      	pop	{r4, pc}
		ili93xx_set_window(ul_x, ul_y, 0, 0);
  400bfa:	2300      	movs	r3, #0
  400bfc:	461a      	mov	r2, r3
  400bfe:	4c0e      	ldr	r4, [pc, #56]	; (400c38 <ili93xx_draw_pixel+0x78>)
  400c00:	47a0      	blx	r4
		ili93xx_write_ram_prepare();
  400c02:	4b0a      	ldr	r3, [pc, #40]	; (400c2c <ili93xx_draw_pixel+0x6c>)
  400c04:	4798      	blx	r3
		ili93xx_write_ram(*g_ul_pixel_cache);
  400c06:	4b0a      	ldr	r3, [pc, #40]	; (400c30 <ili93xx_draw_pixel+0x70>)
  400c08:	6818      	ldr	r0, [r3, #0]
  400c0a:	4b0a      	ldr	r3, [pc, #40]	; (400c34 <ili93xx_draw_pixel+0x74>)
  400c0c:	4798      	blx	r3
	return 0;
  400c0e:	2000      	movs	r0, #0
  400c10:	bd10      	pop	{r4, pc}
		return 1;
  400c12:	2001      	movs	r0, #1
  400c14:	4770      	bx	lr
  400c16:	2001      	movs	r0, #1
  400c18:	4770      	bx	lr
  400c1a:	bf00      	nop
  400c1c:	2000000c 	.word	0x2000000c
  400c20:	20000010 	.word	0x20000010
  400c24:	20000878 	.word	0x20000878
  400c28:	004008b5 	.word	0x004008b5
  400c2c:	004005b9 	.word	0x004005b9
  400c30:	2000087c 	.word	0x2000087c
  400c34:	004005ed 	.word	0x004005ed
  400c38:	0040080d 	.word	0x0040080d

00400c3c <ili93xx_draw_filled_rectangle>:
 * \param ul_x2 X coordinate of lower-right corner on LCD.
 * \param ul_y2 Y coordinate of lower-right corner on LCD.
 */
void ili93xx_draw_filled_rectangle(uint32_t ul_x1, uint32_t ul_y1,
		uint32_t ul_x2, uint32_t ul_y2)
{
  400c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400c40:	b084      	sub	sp, #16
  400c42:	9003      	str	r0, [sp, #12]
  400c44:	9102      	str	r1, [sp, #8]
  400c46:	9201      	str	r2, [sp, #4]
  400c48:	aa04      	add	r2, sp, #16
  400c4a:	f842 3d10 	str.w	r3, [r2, #-16]!
	uint32_t size, blocks;

	/** Swap coordinates if necessary */
	ili93xx_check_box_coordinates(&ul_x1, &ul_y1, &ul_x2, &ul_y2);
  400c4e:	4613      	mov	r3, r2
  400c50:	aa01      	add	r2, sp, #4
  400c52:	a902      	add	r1, sp, #8
  400c54:	a803      	add	r0, sp, #12
  400c56:	4c22      	ldr	r4, [pc, #136]	; (400ce0 <ili93xx_draw_filled_rectangle+0xa4>)
  400c58:	47a0      	blx	r4

	/** Determine the refresh window area */
	ili93xx_set_window(ul_x1, ul_y1, (ul_x2 - ul_x1) + 1,
  400c5a:	9803      	ldr	r0, [sp, #12]
  400c5c:	9902      	ldr	r1, [sp, #8]
  400c5e:	9b00      	ldr	r3, [sp, #0]
  400c60:	3301      	adds	r3, #1
  400c62:	9a01      	ldr	r2, [sp, #4]
  400c64:	3201      	adds	r2, #1
  400c66:	1a5b      	subs	r3, r3, r1
  400c68:	1a12      	subs	r2, r2, r0
  400c6a:	4c1e      	ldr	r4, [pc, #120]	; (400ce4 <ili93xx_draw_filled_rectangle+0xa8>)
  400c6c:	47a0      	blx	r4
			(ul_y2 - ul_y1) + 1);

	/** Set cursor */
	ili93xx_set_cursor_position(ul_x1, ul_y1);
  400c6e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
  400c72:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  400c76:	4b1c      	ldr	r3, [pc, #112]	; (400ce8 <ili93xx_draw_filled_rectangle+0xac>)
  400c78:	4798      	blx	r3

	/** Prepare to write in Graphic RAM */
	ili93xx_write_ram_prepare();
  400c7a:	4b1c      	ldr	r3, [pc, #112]	; (400cec <ili93xx_draw_filled_rectangle+0xb0>)
  400c7c:	4798      	blx	r3

	size = (ul_x2 - ul_x1 + 1) * (ul_y2 - ul_y1 + 1);
  400c7e:	9a03      	ldr	r2, [sp, #12]
  400c80:	9b01      	ldr	r3, [sp, #4]
  400c82:	1a9a      	subs	r2, r3, r2
  400c84:	9b00      	ldr	r3, [sp, #0]
  400c86:	f103 0801 	add.w	r8, r3, #1
  400c8a:	9b02      	ldr	r3, [sp, #8]
  400c8c:	eba8 0803 	sub.w	r8, r8, r3
  400c90:	fb02 8808 	mla	r8, r2, r8, r8

	/** Send pixels blocks => one SPI IT / block */
	blocks = size / LCD_DATA_CACHE_SIZE;
  400c94:	4b16      	ldr	r3, [pc, #88]	; (400cf0 <ili93xx_draw_filled_rectangle+0xb4>)
  400c96:	fba3 2308 	umull	r2, r3, r3, r8
  400c9a:	09db      	lsrs	r3, r3, #7
	while (blocks--) {
  400c9c:	b153      	cbz	r3, 400cb4 <ili93xx_draw_filled_rectangle+0x78>
  400c9e:	1e5c      	subs	r4, r3, #1
		ili93xx_write_ram_buffer(g_ul_pixel_cache,
  400ca0:	4f14      	ldr	r7, [pc, #80]	; (400cf4 <ili93xx_draw_filled_rectangle+0xb8>)
  400ca2:	26f0      	movs	r6, #240	; 0xf0
  400ca4:	4d14      	ldr	r5, [pc, #80]	; (400cf8 <ili93xx_draw_filled_rectangle+0xbc>)
  400ca6:	4631      	mov	r1, r6
  400ca8:	4638      	mov	r0, r7
  400caa:	47a8      	blx	r5
	while (blocks--) {
  400cac:	3c01      	subs	r4, #1
  400cae:	f1b4 3fff 	cmp.w	r4, #4294967295
  400cb2:	d1f8      	bne.n	400ca6 <ili93xx_draw_filled_rectangle+0x6a>
								LCD_DATA_CACHE_SIZE);
	}

	/** Send remaining pixels */
	ili93xx_write_ram_buffer(g_ul_pixel_cache,
  400cb4:	490e      	ldr	r1, [pc, #56]	; (400cf0 <ili93xx_draw_filled_rectangle+0xb4>)
  400cb6:	fba1 3108 	umull	r3, r1, r1, r8
  400cba:	09c9      	lsrs	r1, r1, #7
  400cbc:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
  400cc0:	eba8 1101 	sub.w	r1, r8, r1, lsl #4
  400cc4:	480b      	ldr	r0, [pc, #44]	; (400cf4 <ili93xx_draw_filled_rectangle+0xb8>)
  400cc6:	4b0c      	ldr	r3, [pc, #48]	; (400cf8 <ili93xx_draw_filled_rectangle+0xbc>)
  400cc8:	4798      	blx	r3
					size % LCD_DATA_CACHE_SIZE);

	/** Reset the refresh window area */
	ili93xx_set_window(0, 0, g_ul_lcd_x_length, g_ul_lcd_y_length);
  400cca:	4b0c      	ldr	r3, [pc, #48]	; (400cfc <ili93xx_draw_filled_rectangle+0xc0>)
  400ccc:	681b      	ldr	r3, [r3, #0]
  400cce:	4a0c      	ldr	r2, [pc, #48]	; (400d00 <ili93xx_draw_filled_rectangle+0xc4>)
  400cd0:	6812      	ldr	r2, [r2, #0]
  400cd2:	2100      	movs	r1, #0
  400cd4:	4608      	mov	r0, r1
  400cd6:	4c03      	ldr	r4, [pc, #12]	; (400ce4 <ili93xx_draw_filled_rectangle+0xa8>)
  400cd8:	47a0      	blx	r4
}
  400cda:	b004      	add	sp, #16
  400cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400ce0:	004006e1 	.word	0x004006e1
  400ce4:	0040080d 	.word	0x0040080d
  400ce8:	004008b5 	.word	0x004008b5
  400cec:	004005b9 	.word	0x004005b9
  400cf0:	88888889 	.word	0x88888889
  400cf4:	2000087c 	.word	0x2000087c
  400cf8:	00400605 	.word	0x00400605
  400cfc:	20000010 	.word	0x20000010
  400d00:	2000000c 	.word	0x2000000c

00400d04 <ili93xx_draw_string>:
 * \param ul_x X coordinate of string top-left corner.
 * \param ul_y Y coordinate of string top-left corner.
 * \param p_str String to display.
 */
void ili93xx_draw_string(uint32_t ul_x, uint32_t ul_y, const uint8_t *p_str)
{
  400d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400d08:	b085      	sub	sp, #20
  400d0a:	9003      	str	r0, [sp, #12]
  400d0c:	9202      	str	r2, [sp, #8]
	uint32_t xorg = ul_x;

	while (*p_str != 0) {
  400d0e:	7813      	ldrb	r3, [r2, #0]
  400d10:	2b00      	cmp	r3, #0
  400d12:	d048      	beq.n	400da6 <ili93xx_draw_string+0xa2>
  400d14:	468b      	mov	fp, r1
  400d16:	9001      	str	r0, [sp, #4]
				ili93xx_draw_pixel(ul_x + col, ul_y + row);
  400d18:	f8df 8094 	ldr.w	r8, [pc, #148]	; 400db0 <ili93xx_draw_string+0xac>
  400d1c:	e033      	b.n	400d86 <ili93xx_draw_string+0x82>
		/** If newline, jump to the next line (font height + 2) */
		if (*p_str == '\n') {
			ul_y += gfont.height + 2;
  400d1e:	f10b 0b10 	add.w	fp, fp, #16
			ul_x = xorg;
  400d22:	9b03      	ldr	r3, [sp, #12]
  400d24:	9301      	str	r3, [sp, #4]
  400d26:	e029      	b.n	400d7c <ili93xx_draw_string+0x78>
  400d28:	3c01      	subs	r4, #1
		for (row = 0; row < 8; row++) {
  400d2a:	f1b4 3fff 	cmp.w	r4, #4294967295
  400d2e:	d009      	beq.n	400d44 <ili93xx_draw_string+0x40>
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
  400d30:	782b      	ldrb	r3, [r5, #0]
  400d32:	4123      	asrs	r3, r4
  400d34:	f013 0f01 	tst.w	r3, #1
  400d38:	d0f6      	beq.n	400d28 <ili93xx_draw_string+0x24>
				ili93xx_draw_pixel(ul_x + col, ul_y + row);
  400d3a:	ebaa 0104 	sub.w	r1, sl, r4
  400d3e:	4630      	mov	r0, r6
  400d40:	47c0      	blx	r8
  400d42:	e7f1      	b.n	400d28 <ili93xx_draw_string+0x24>
		for (row = 0; row < 8; row++) {
  400d44:	2407      	movs	r4, #7
				ili93xx_draw_pixel(ul_x + col, ul_y + row + 8);
  400d46:	f10b 090f 	add.w	r9, fp, #15
  400d4a:	e002      	b.n	400d52 <ili93xx_draw_string+0x4e>
  400d4c:	3c01      	subs	r4, #1
		for (row = 0; row < 6; row++) {
  400d4e:	2c01      	cmp	r4, #1
  400d50:	d009      	beq.n	400d66 <ili93xx_draw_string+0x62>
			if ((p_uc_charset10x14[offset1] >> (7 - row)) & 0x1) {
  400d52:	787b      	ldrb	r3, [r7, #1]
  400d54:	4123      	asrs	r3, r4
  400d56:	f013 0f01 	tst.w	r3, #1
  400d5a:	d0f7      	beq.n	400d4c <ili93xx_draw_string+0x48>
				ili93xx_draw_pixel(ul_x + col, ul_y + row + 8);
  400d5c:	eba9 0104 	sub.w	r1, r9, r4
  400d60:	4630      	mov	r0, r6
  400d62:	47c0      	blx	r8
  400d64:	e7f2      	b.n	400d4c <ili93xx_draw_string+0x48>
  400d66:	3502      	adds	r5, #2
  400d68:	3601      	adds	r6, #1
	for (col = 0; col < 10; col++) {
  400d6a:	9b00      	ldr	r3, [sp, #0]
  400d6c:	42b3      	cmp	r3, r6
  400d6e:	d002      	beq.n	400d76 <ili93xx_draw_string+0x72>
	offset = ((uint32_t)uc_c - 0x20) * 20;
  400d70:	2407      	movs	r4, #7
  400d72:	462f      	mov	r7, r5
  400d74:	e7dc      	b.n	400d30 <ili93xx_draw_string+0x2c>
			/**
			 * Draw the character and place cursor right after (font
			 * width + 2)
			 */
			ili93xx_draw_char(ul_x, ul_y, *p_str);
			ul_x += gfont.width + 2;
  400d76:	9b01      	ldr	r3, [sp, #4]
  400d78:	330c      	adds	r3, #12
  400d7a:	9301      	str	r3, [sp, #4]
	while (*p_str != 0) {
  400d7c:	9a02      	ldr	r2, [sp, #8]
  400d7e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  400d82:	9202      	str	r2, [sp, #8]
  400d84:	b17b      	cbz	r3, 400da6 <ili93xx_draw_string+0xa2>
		if (*p_str == '\n') {
  400d86:	2b0a      	cmp	r3, #10
  400d88:	d0c9      	beq.n	400d1e <ili93xx_draw_string+0x1a>
	offset = ((uint32_t)uc_c - 0x20) * 20;
  400d8a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  400d8e:	4d07      	ldr	r5, [pc, #28]	; (400dac <ili93xx_draw_string+0xa8>)
  400d90:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  400d94:	f5a3 7520 	sub.w	r5, r3, #640	; 0x280
  400d98:	9e01      	ldr	r6, [sp, #4]
  400d9a:	4633      	mov	r3, r6
  400d9c:	330a      	adds	r3, #10
  400d9e:	9300      	str	r3, [sp, #0]
				ili93xx_draw_pixel(ul_x + col, ul_y + row);
  400da0:	f10b 0a07 	add.w	sl, fp, #7
  400da4:	e7e4      	b.n	400d70 <ili93xx_draw_string+0x6c>
		}

		p_str++;
	}
}
  400da6:	b005      	add	sp, #20
  400da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400dac:	004025d4 	.word	0x004025d4
  400db0:	00400bc1 	.word	0x00400bc1

00400db4 <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
  400db4:	0109      	lsls	r1, r1, #4
  400db6:	5042      	str	r2, [r0, r1]
  400db8:	4770      	bx	lr

00400dba <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
  400dba:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  400dbe:	604a      	str	r2, [r1, #4]
  400dc0:	4770      	bx	lr

00400dc2 <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
  400dc2:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  400dc6:	608a      	str	r2, [r1, #8]
  400dc8:	4770      	bx	lr

00400dca <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
  400dca:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  400dce:	60ca      	str	r2, [r1, #12]
  400dd0:	4770      	bx	lr
	...

00400dd4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400dd4:	4a17      	ldr	r2, [pc, #92]	; (400e34 <pmc_switch_mck_to_pllack+0x60>)
  400dd6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400dd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400ddc:	4318      	orrs	r0, r3
  400dde:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400de0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400de2:	f013 0f08 	tst.w	r3, #8
  400de6:	d10a      	bne.n	400dfe <pmc_switch_mck_to_pllack+0x2a>
  400de8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400dec:	4911      	ldr	r1, [pc, #68]	; (400e34 <pmc_switch_mck_to_pllack+0x60>)
  400dee:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400df0:	f012 0f08 	tst.w	r2, #8
  400df4:	d103      	bne.n	400dfe <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400df6:	3b01      	subs	r3, #1
  400df8:	d1f9      	bne.n	400dee <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400dfa:	2001      	movs	r0, #1
  400dfc:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400dfe:	4a0d      	ldr	r2, [pc, #52]	; (400e34 <pmc_switch_mck_to_pllack+0x60>)
  400e00:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400e02:	f023 0303 	bic.w	r3, r3, #3
  400e06:	f043 0302 	orr.w	r3, r3, #2
  400e0a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400e0c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400e0e:	f013 0f08 	tst.w	r3, #8
  400e12:	d10a      	bne.n	400e2a <pmc_switch_mck_to_pllack+0x56>
  400e14:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400e18:	4906      	ldr	r1, [pc, #24]	; (400e34 <pmc_switch_mck_to_pllack+0x60>)
  400e1a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400e1c:	f012 0f08 	tst.w	r2, #8
  400e20:	d105      	bne.n	400e2e <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400e22:	3b01      	subs	r3, #1
  400e24:	d1f9      	bne.n	400e1a <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400e26:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400e28:	4770      	bx	lr
	return 0;
  400e2a:	2000      	movs	r0, #0
  400e2c:	4770      	bx	lr
  400e2e:	2000      	movs	r0, #0
  400e30:	4770      	bx	lr
  400e32:	bf00      	nop
  400e34:	400e0400 	.word	0x400e0400

00400e38 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400e38:	b9c8      	cbnz	r0, 400e6e <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400e3a:	4a11      	ldr	r2, [pc, #68]	; (400e80 <pmc_switch_mainck_to_xtal+0x48>)
  400e3c:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400e3e:	0209      	lsls	r1, r1, #8
  400e40:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400e42:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400e46:	f023 0303 	bic.w	r3, r3, #3
  400e4a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400e4e:	f043 0301 	orr.w	r3, r3, #1
  400e52:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400e54:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400e56:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400e58:	f013 0f01 	tst.w	r3, #1
  400e5c:	d0fb      	beq.n	400e56 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400e5e:	4a08      	ldr	r2, [pc, #32]	; (400e80 <pmc_switch_mainck_to_xtal+0x48>)
  400e60:	6a13      	ldr	r3, [r2, #32]
  400e62:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400e6a:	6213      	str	r3, [r2, #32]
  400e6c:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400e6e:	4904      	ldr	r1, [pc, #16]	; (400e80 <pmc_switch_mainck_to_xtal+0x48>)
  400e70:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400e72:	4a04      	ldr	r2, [pc, #16]	; (400e84 <pmc_switch_mainck_to_xtal+0x4c>)
  400e74:	401a      	ands	r2, r3
  400e76:	4b04      	ldr	r3, [pc, #16]	; (400e88 <pmc_switch_mainck_to_xtal+0x50>)
  400e78:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400e7a:	620b      	str	r3, [r1, #32]
  400e7c:	4770      	bx	lr
  400e7e:	bf00      	nop
  400e80:	400e0400 	.word	0x400e0400
  400e84:	fec8fffc 	.word	0xfec8fffc
  400e88:	01370002 	.word	0x01370002

00400e8c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400e8c:	4b02      	ldr	r3, [pc, #8]	; (400e98 <pmc_osc_is_ready_mainck+0xc>)
  400e8e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400e90:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400e94:	4770      	bx	lr
  400e96:	bf00      	nop
  400e98:	400e0400 	.word	0x400e0400

00400e9c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400e9c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400ea0:	4b01      	ldr	r3, [pc, #4]	; (400ea8 <pmc_disable_pllack+0xc>)
  400ea2:	629a      	str	r2, [r3, #40]	; 0x28
  400ea4:	4770      	bx	lr
  400ea6:	bf00      	nop
  400ea8:	400e0400 	.word	0x400e0400

00400eac <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400eac:	4b02      	ldr	r3, [pc, #8]	; (400eb8 <pmc_is_locked_pllack+0xc>)
  400eae:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400eb0:	f000 0002 	and.w	r0, r0, #2
  400eb4:	4770      	bx	lr
  400eb6:	bf00      	nop
  400eb8:	400e0400 	.word	0x400e0400

00400ebc <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400ebc:	282f      	cmp	r0, #47	; 0x2f
  400ebe:	d81e      	bhi.n	400efe <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400ec0:	281f      	cmp	r0, #31
  400ec2:	d80c      	bhi.n	400ede <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400ec4:	4b11      	ldr	r3, [pc, #68]	; (400f0c <pmc_enable_periph_clk+0x50>)
  400ec6:	699a      	ldr	r2, [r3, #24]
  400ec8:	2301      	movs	r3, #1
  400eca:	4083      	lsls	r3, r0
  400ecc:	4393      	bics	r3, r2
  400ece:	d018      	beq.n	400f02 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400ed0:	2301      	movs	r3, #1
  400ed2:	fa03 f000 	lsl.w	r0, r3, r0
  400ed6:	4b0d      	ldr	r3, [pc, #52]	; (400f0c <pmc_enable_periph_clk+0x50>)
  400ed8:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400eda:	2000      	movs	r0, #0
  400edc:	4770      	bx	lr
		ul_id -= 32;
  400ede:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400ee0:	4b0a      	ldr	r3, [pc, #40]	; (400f0c <pmc_enable_periph_clk+0x50>)
  400ee2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400ee6:	2301      	movs	r3, #1
  400ee8:	4083      	lsls	r3, r0
  400eea:	4393      	bics	r3, r2
  400eec:	d00b      	beq.n	400f06 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400eee:	2301      	movs	r3, #1
  400ef0:	fa03 f000 	lsl.w	r0, r3, r0
  400ef4:	4b05      	ldr	r3, [pc, #20]	; (400f0c <pmc_enable_periph_clk+0x50>)
  400ef6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  400efa:	2000      	movs	r0, #0
  400efc:	4770      	bx	lr
		return 1;
  400efe:	2001      	movs	r0, #1
  400f00:	4770      	bx	lr
	return 0;
  400f02:	2000      	movs	r0, #0
  400f04:	4770      	bx	lr
  400f06:	2000      	movs	r0, #0
}
  400f08:	4770      	bx	lr
  400f0a:	bf00      	nop
  400f0c:	400e0400 	.word	0x400e0400

00400f10 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  400f10:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  400f12:	23ac      	movs	r3, #172	; 0xac
  400f14:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  400f16:	680b      	ldr	r3, [r1, #0]
  400f18:	684a      	ldr	r2, [r1, #4]
  400f1a:	fbb3 f3f2 	udiv	r3, r3, r2
  400f1e:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  400f20:	1e5c      	subs	r4, r3, #1
  400f22:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  400f26:	4294      	cmp	r4, r2
  400f28:	d80c      	bhi.n	400f44 <uart_init+0x34>
		return 1;

	p_uart->UART_BRGR = cd;
  400f2a:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  400f2c:	688b      	ldr	r3, [r1, #8]
  400f2e:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  400f30:	f240 2302 	movw	r3, #514	; 0x202
  400f34:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400f38:	2350      	movs	r3, #80	; 0x50
  400f3a:	6003      	str	r3, [r0, #0]

	return 0;
  400f3c:	2000      	movs	r0, #0
}
  400f3e:	f85d 4b04 	ldr.w	r4, [sp], #4
  400f42:	4770      	bx	lr
		return 1;
  400f44:	2001      	movs	r0, #1
  400f46:	e7fa      	b.n	400f3e <uart_init+0x2e>

00400f48 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400f48:	6943      	ldr	r3, [r0, #20]
  400f4a:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400f4e:	bf1a      	itte	ne
  400f50:	61c1      	strne	r1, [r0, #28]
	return 0;
  400f52:	2000      	movne	r0, #0
		return 1;
  400f54:	2001      	moveq	r0, #1
}
  400f56:	4770      	bx	lr

00400f58 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400f58:	6943      	ldr	r3, [r0, #20]
  400f5a:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400f5e:	bf1d      	ittte	ne
  400f60:	6983      	ldrne	r3, [r0, #24]
  400f62:	700b      	strbne	r3, [r1, #0]
	return 0;
  400f64:	2000      	movne	r0, #0
		return 1;
  400f66:	2001      	moveq	r0, #1
}
  400f68:	4770      	bx	lr

00400f6a <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400f6a:	6943      	ldr	r3, [r0, #20]
  400f6c:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400f70:	bf1d      	ittte	ne
  400f72:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  400f76:	61c1      	strne	r1, [r0, #28]
	return 0;
  400f78:	2000      	movne	r0, #0
		return 1;
  400f7a:	2001      	moveq	r0, #1
}
  400f7c:	4770      	bx	lr

00400f7e <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400f7e:	6943      	ldr	r3, [r0, #20]
  400f80:	f013 0f01 	tst.w	r3, #1
  400f84:	d005      	beq.n	400f92 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400f86:	6983      	ldr	r3, [r0, #24]
  400f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400f8c:	600b      	str	r3, [r1, #0]

	return 0;
  400f8e:	2000      	movs	r0, #0
  400f90:	4770      	bx	lr
		return 1;
  400f92:	2001      	movs	r0, #1
}
  400f94:	4770      	bx	lr

00400f96 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400f96:	e7fe      	b.n	400f96 <Dummy_Handler>

00400f98 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400f98:	b500      	push	{lr}
  400f9a:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  400f9c:	4b25      	ldr	r3, [pc, #148]	; (401034 <Reset_Handler+0x9c>)
  400f9e:	4a26      	ldr	r2, [pc, #152]	; (401038 <Reset_Handler+0xa0>)
  400fa0:	429a      	cmp	r2, r3
  400fa2:	d010      	beq.n	400fc6 <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
  400fa4:	4b25      	ldr	r3, [pc, #148]	; (40103c <Reset_Handler+0xa4>)
  400fa6:	4a23      	ldr	r2, [pc, #140]	; (401034 <Reset_Handler+0x9c>)
  400fa8:	429a      	cmp	r2, r3
  400faa:	d20c      	bcs.n	400fc6 <Reset_Handler+0x2e>
  400fac:	3b01      	subs	r3, #1
  400fae:	1a9b      	subs	r3, r3, r2
  400fb0:	f023 0303 	bic.w	r3, r3, #3
  400fb4:	3304      	adds	r3, #4
  400fb6:	4413      	add	r3, r2
  400fb8:	491f      	ldr	r1, [pc, #124]	; (401038 <Reset_Handler+0xa0>)
			*pDest++ = *pSrc++;
  400fba:	f851 0b04 	ldr.w	r0, [r1], #4
  400fbe:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  400fc2:	429a      	cmp	r2, r3
  400fc4:	d1f9      	bne.n	400fba <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400fc6:	4b1e      	ldr	r3, [pc, #120]	; (401040 <Reset_Handler+0xa8>)
  400fc8:	4a1e      	ldr	r2, [pc, #120]	; (401044 <Reset_Handler+0xac>)
  400fca:	429a      	cmp	r2, r3
  400fcc:	d20a      	bcs.n	400fe4 <Reset_Handler+0x4c>
  400fce:	3b01      	subs	r3, #1
  400fd0:	1a9b      	subs	r3, r3, r2
  400fd2:	f023 0303 	bic.w	r3, r3, #3
  400fd6:	3304      	adds	r3, #4
  400fd8:	4413      	add	r3, r2
		*pDest++ = 0;
  400fda:	2100      	movs	r1, #0
  400fdc:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  400fe0:	4293      	cmp	r3, r2
  400fe2:	d1fb      	bne.n	400fdc <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400fe4:	4a18      	ldr	r2, [pc, #96]	; (401048 <Reset_Handler+0xb0>)
  400fe6:	4b19      	ldr	r3, [pc, #100]	; (40104c <Reset_Handler+0xb4>)
  400fe8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400fec:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400fee:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400ff2:	fab3 f383 	clz	r3, r3
  400ff6:	095b      	lsrs	r3, r3, #5
  400ff8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400ffa:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400ffc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401000:	2200      	movs	r2, #0
  401002:	4b13      	ldr	r3, [pc, #76]	; (401050 <Reset_Handler+0xb8>)
  401004:	701a      	strb	r2, [r3, #0]
	return flags;
  401006:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401008:	4a12      	ldr	r2, [pc, #72]	; (401054 <Reset_Handler+0xbc>)
  40100a:	6813      	ldr	r3, [r2, #0]
  40100c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401010:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  401012:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401016:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40101a:	b129      	cbz	r1, 401028 <Reset_Handler+0x90>
		cpu_irq_enable();
  40101c:	2201      	movs	r2, #1
  40101e:	4b0c      	ldr	r3, [pc, #48]	; (401050 <Reset_Handler+0xb8>)
  401020:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  401022:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401026:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  401028:	4b0b      	ldr	r3, [pc, #44]	; (401058 <Reset_Handler+0xc0>)
  40102a:	4798      	blx	r3

	/* Branch to main function */
	main();
  40102c:	4b0b      	ldr	r3, [pc, #44]	; (40105c <Reset_Handler+0xc4>)
  40102e:	4798      	blx	r3
  401030:	e7fe      	b.n	401030 <Reset_Handler+0x98>
  401032:	bf00      	nop
  401034:	20000000 	.word	0x20000000
  401038:	00402d88 	.word	0x00402d88
  40103c:	2000085c 	.word	0x2000085c
  401040:	20000cb8 	.word	0x20000cb8
  401044:	2000085c 	.word	0x2000085c
  401048:	e000ed00 	.word	0xe000ed00
  40104c:	00400000 	.word	0x00400000
  401050:	2000000a 	.word	0x2000000a
  401054:	e000ed88 	.word	0xe000ed88
  401058:	004014dd 	.word	0x004014dd
  40105c:	00401335 	.word	0x00401335

00401060 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  401060:	4b3b      	ldr	r3, [pc, #236]	; (401150 <SystemCoreClockUpdate+0xf0>)
  401062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401064:	f003 0303 	and.w	r3, r3, #3
  401068:	2b01      	cmp	r3, #1
  40106a:	d01d      	beq.n	4010a8 <SystemCoreClockUpdate+0x48>
  40106c:	b183      	cbz	r3, 401090 <SystemCoreClockUpdate+0x30>
  40106e:	2b02      	cmp	r3, #2
  401070:	d036      	beq.n	4010e0 <SystemCoreClockUpdate+0x80>

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  401072:	4b37      	ldr	r3, [pc, #220]	; (401150 <SystemCoreClockUpdate+0xf0>)
  401074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401076:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40107a:	2b70      	cmp	r3, #112	; 0x70
  40107c:	d05f      	beq.n	40113e <SystemCoreClockUpdate+0xde>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  40107e:	4b34      	ldr	r3, [pc, #208]	; (401150 <SystemCoreClockUpdate+0xf0>)
  401080:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401082:	4934      	ldr	r1, [pc, #208]	; (401154 <SystemCoreClockUpdate+0xf4>)
  401084:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401088:	680b      	ldr	r3, [r1, #0]
  40108a:	40d3      	lsrs	r3, r2
  40108c:	600b      	str	r3, [r1, #0]
  40108e:	4770      	bx	lr
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  401090:	4b31      	ldr	r3, [pc, #196]	; (401158 <SystemCoreClockUpdate+0xf8>)
  401092:	695b      	ldr	r3, [r3, #20]
  401094:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401098:	bf14      	ite	ne
  40109a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40109e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4010a2:	4b2c      	ldr	r3, [pc, #176]	; (401154 <SystemCoreClockUpdate+0xf4>)
  4010a4:	601a      	str	r2, [r3, #0]
  4010a6:	e7e4      	b.n	401072 <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4010a8:	4b29      	ldr	r3, [pc, #164]	; (401150 <SystemCoreClockUpdate+0xf0>)
  4010aa:	6a1b      	ldr	r3, [r3, #32]
  4010ac:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4010b0:	d003      	beq.n	4010ba <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4010b2:	4a2a      	ldr	r2, [pc, #168]	; (40115c <SystemCoreClockUpdate+0xfc>)
  4010b4:	4b27      	ldr	r3, [pc, #156]	; (401154 <SystemCoreClockUpdate+0xf4>)
  4010b6:	601a      	str	r2, [r3, #0]
  4010b8:	e7db      	b.n	401072 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4010ba:	4a29      	ldr	r2, [pc, #164]	; (401160 <SystemCoreClockUpdate+0x100>)
  4010bc:	4b25      	ldr	r3, [pc, #148]	; (401154 <SystemCoreClockUpdate+0xf4>)
  4010be:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4010c0:	4b23      	ldr	r3, [pc, #140]	; (401150 <SystemCoreClockUpdate+0xf0>)
  4010c2:	6a1b      	ldr	r3, [r3, #32]
  4010c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4010c8:	2b10      	cmp	r3, #16
  4010ca:	d005      	beq.n	4010d8 <SystemCoreClockUpdate+0x78>
  4010cc:	2b20      	cmp	r3, #32
  4010ce:	d1d0      	bne.n	401072 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  4010d0:	4a22      	ldr	r2, [pc, #136]	; (40115c <SystemCoreClockUpdate+0xfc>)
  4010d2:	4b20      	ldr	r3, [pc, #128]	; (401154 <SystemCoreClockUpdate+0xf4>)
  4010d4:	601a      	str	r2, [r3, #0]
				break;
  4010d6:	e7cc      	b.n	401072 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  4010d8:	4a22      	ldr	r2, [pc, #136]	; (401164 <SystemCoreClockUpdate+0x104>)
  4010da:	4b1e      	ldr	r3, [pc, #120]	; (401154 <SystemCoreClockUpdate+0xf4>)
  4010dc:	601a      	str	r2, [r3, #0]
				break;
  4010de:	e7c8      	b.n	401072 <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4010e0:	4b1b      	ldr	r3, [pc, #108]	; (401150 <SystemCoreClockUpdate+0xf0>)
  4010e2:	6a1b      	ldr	r3, [r3, #32]
  4010e4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4010e8:	d016      	beq.n	401118 <SystemCoreClockUpdate+0xb8>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4010ea:	4a1c      	ldr	r2, [pc, #112]	; (40115c <SystemCoreClockUpdate+0xfc>)
  4010ec:	4b19      	ldr	r3, [pc, #100]	; (401154 <SystemCoreClockUpdate+0xf4>)
  4010ee:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  4010f0:	4b17      	ldr	r3, [pc, #92]	; (401150 <SystemCoreClockUpdate+0xf0>)
  4010f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4010f4:	f003 0303 	and.w	r3, r3, #3
  4010f8:	2b02      	cmp	r3, #2
  4010fa:	d1ba      	bne.n	401072 <SystemCoreClockUpdate+0x12>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4010fc:	4a14      	ldr	r2, [pc, #80]	; (401150 <SystemCoreClockUpdate+0xf0>)
  4010fe:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401100:	6a92      	ldr	r2, [r2, #40]	; 0x28
  401102:	4814      	ldr	r0, [pc, #80]	; (401154 <SystemCoreClockUpdate+0xf4>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401104:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401108:	6803      	ldr	r3, [r0, #0]
  40110a:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40110e:	b2d2      	uxtb	r2, r2
  401110:	fbb3 f3f2 	udiv	r3, r3, r2
  401114:	6003      	str	r3, [r0, #0]
  401116:	e7ac      	b.n	401072 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401118:	4a11      	ldr	r2, [pc, #68]	; (401160 <SystemCoreClockUpdate+0x100>)
  40111a:	4b0e      	ldr	r3, [pc, #56]	; (401154 <SystemCoreClockUpdate+0xf4>)
  40111c:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40111e:	4b0c      	ldr	r3, [pc, #48]	; (401150 <SystemCoreClockUpdate+0xf0>)
  401120:	6a1b      	ldr	r3, [r3, #32]
  401122:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401126:	2b10      	cmp	r3, #16
  401128:	d005      	beq.n	401136 <SystemCoreClockUpdate+0xd6>
  40112a:	2b20      	cmp	r3, #32
  40112c:	d1e0      	bne.n	4010f0 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
  40112e:	4a0b      	ldr	r2, [pc, #44]	; (40115c <SystemCoreClockUpdate+0xfc>)
  401130:	4b08      	ldr	r3, [pc, #32]	; (401154 <SystemCoreClockUpdate+0xf4>)
  401132:	601a      	str	r2, [r3, #0]
				break;
  401134:	e7dc      	b.n	4010f0 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
  401136:	4a0b      	ldr	r2, [pc, #44]	; (401164 <SystemCoreClockUpdate+0x104>)
  401138:	4b06      	ldr	r3, [pc, #24]	; (401154 <SystemCoreClockUpdate+0xf4>)
  40113a:	601a      	str	r2, [r3, #0]
				break;
  40113c:	e7d8      	b.n	4010f0 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  40113e:	4a05      	ldr	r2, [pc, #20]	; (401154 <SystemCoreClockUpdate+0xf4>)
  401140:	6813      	ldr	r3, [r2, #0]
  401142:	4909      	ldr	r1, [pc, #36]	; (401168 <SystemCoreClockUpdate+0x108>)
  401144:	fba1 1303 	umull	r1, r3, r1, r3
  401148:	085b      	lsrs	r3, r3, #1
  40114a:	6013      	str	r3, [r2, #0]
  40114c:	4770      	bx	lr
  40114e:	bf00      	nop
  401150:	400e0400 	.word	0x400e0400
  401154:	20000014 	.word	0x20000014
  401158:	400e1810 	.word	0x400e1810
  40115c:	00b71b00 	.word	0x00b71b00
  401160:	003d0900 	.word	0x003d0900
  401164:	007a1200 	.word	0x007a1200
  401168:	aaaaaaab 	.word	0xaaaaaaab

0040116c <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  40116c:	4b12      	ldr	r3, [pc, #72]	; (4011b8 <system_init_flash+0x4c>)
  40116e:	4298      	cmp	r0, r3
  401170:	d911      	bls.n	401196 <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  401172:	4b12      	ldr	r3, [pc, #72]	; (4011bc <system_init_flash+0x50>)
  401174:	4298      	cmp	r0, r3
  401176:	d913      	bls.n	4011a0 <system_init_flash+0x34>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  401178:	4b11      	ldr	r3, [pc, #68]	; (4011c0 <system_init_flash+0x54>)
  40117a:	4298      	cmp	r0, r3
  40117c:	d914      	bls.n	4011a8 <system_init_flash+0x3c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  40117e:	4b11      	ldr	r3, [pc, #68]	; (4011c4 <system_init_flash+0x58>)
  401180:	4298      	cmp	r0, r3
  401182:	d915      	bls.n	4011b0 <system_init_flash+0x44>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  401184:	4b10      	ldr	r3, [pc, #64]	; (4011c8 <system_init_flash+0x5c>)
  401186:	4298      	cmp	r0, r3
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401188:	bf94      	ite	ls
  40118a:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40118e:	4a0f      	ldrhi	r2, [pc, #60]	; (4011cc <system_init_flash+0x60>)
  401190:	4b0f      	ldr	r3, [pc, #60]	; (4011d0 <system_init_flash+0x64>)
  401192:	601a      	str	r2, [r3, #0]
  401194:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401196:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40119a:	4b0d      	ldr	r3, [pc, #52]	; (4011d0 <system_init_flash+0x64>)
  40119c:	601a      	str	r2, [r3, #0]
  40119e:	4770      	bx	lr
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4011a0:	4a0c      	ldr	r2, [pc, #48]	; (4011d4 <system_init_flash+0x68>)
  4011a2:	4b0b      	ldr	r3, [pc, #44]	; (4011d0 <system_init_flash+0x64>)
  4011a4:	601a      	str	r2, [r3, #0]
  4011a6:	4770      	bx	lr
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4011a8:	4a0b      	ldr	r2, [pc, #44]	; (4011d8 <system_init_flash+0x6c>)
  4011aa:	4b09      	ldr	r3, [pc, #36]	; (4011d0 <system_init_flash+0x64>)
  4011ac:	601a      	str	r2, [r3, #0]
  4011ae:	4770      	bx	lr
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4011b0:	4a0a      	ldr	r2, [pc, #40]	; (4011dc <system_init_flash+0x70>)
  4011b2:	4b07      	ldr	r3, [pc, #28]	; (4011d0 <system_init_flash+0x64>)
  4011b4:	601a      	str	r2, [r3, #0]
  4011b6:	4770      	bx	lr
  4011b8:	01312cff 	.word	0x01312cff
  4011bc:	026259ff 	.word	0x026259ff
  4011c0:	039386ff 	.word	0x039386ff
  4011c4:	04c4b3ff 	.word	0x04c4b3ff
  4011c8:	05f5e0ff 	.word	0x05f5e0ff
  4011cc:	04000500 	.word	0x04000500
  4011d0:	400e0a00 	.word	0x400e0a00
  4011d4:	04000100 	.word	0x04000100
  4011d8:	04000200 	.word	0x04000200
  4011dc:	04000300 	.word	0x04000300

004011e0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4011e0:	4b0a      	ldr	r3, [pc, #40]	; (40120c <_sbrk+0x2c>)
  4011e2:	681b      	ldr	r3, [r3, #0]
  4011e4:	b153      	cbz	r3, 4011fc <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  4011e6:	4b09      	ldr	r3, [pc, #36]	; (40120c <_sbrk+0x2c>)
  4011e8:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4011ea:	181a      	adds	r2, r3, r0
  4011ec:	4908      	ldr	r1, [pc, #32]	; (401210 <_sbrk+0x30>)
  4011ee:	4291      	cmp	r1, r2
  4011f0:	db08      	blt.n	401204 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  4011f2:	4610      	mov	r0, r2
  4011f4:	4a05      	ldr	r2, [pc, #20]	; (40120c <_sbrk+0x2c>)
  4011f6:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4011f8:	4618      	mov	r0, r3
  4011fa:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  4011fc:	4a05      	ldr	r2, [pc, #20]	; (401214 <_sbrk+0x34>)
  4011fe:	4b03      	ldr	r3, [pc, #12]	; (40120c <_sbrk+0x2c>)
  401200:	601a      	str	r2, [r3, #0]
  401202:	e7f0      	b.n	4011e6 <_sbrk+0x6>
		return (caddr_t) -1;	
  401204:	f04f 30ff 	mov.w	r0, #4294967295
}
  401208:	4770      	bx	lr
  40120a:	bf00      	nop
  40120c:	20000c3c 	.word	0x20000c3c
  401210:	2001fffc 	.word	0x2001fffc
  401214:	20003cb8 	.word	0x20003cb8

00401218 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401218:	f04f 30ff 	mov.w	r0, #4294967295
  40121c:	4770      	bx	lr

0040121e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  40121e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401222:	604b      	str	r3, [r1, #4]

	return 0;
}
  401224:	2000      	movs	r0, #0
  401226:	4770      	bx	lr

00401228 <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401228:	2000      	movs	r0, #0
  40122a:	4770      	bx	lr

0040122c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  40122c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40122e:	b083      	sub	sp, #12
  401230:	4605      	mov	r5, r0
  401232:	460c      	mov	r4, r1
	uint32_t val = 0;
  401234:	2300      	movs	r3, #0
  401236:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401238:	4b18      	ldr	r3, [pc, #96]	; (40129c <usart_serial_getchar+0x70>)
  40123a:	4298      	cmp	r0, r3
  40123c:	d00a      	beq.n	401254 <usart_serial_getchar+0x28>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40123e:	4b18      	ldr	r3, [pc, #96]	; (4012a0 <usart_serial_getchar+0x74>)
  401240:	4298      	cmp	r0, r3
  401242:	d00f      	beq.n	401264 <usart_serial_getchar+0x38>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401244:	4b17      	ldr	r3, [pc, #92]	; (4012a4 <usart_serial_getchar+0x78>)
  401246:	4298      	cmp	r0, r3
  401248:	d014      	beq.n	401274 <usart_serial_getchar+0x48>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40124a:	4b17      	ldr	r3, [pc, #92]	; (4012a8 <usart_serial_getchar+0x7c>)
  40124c:	429d      	cmp	r5, r3
  40124e:	d01b      	beq.n	401288 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  401250:	b003      	add	sp, #12
  401252:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  401254:	461f      	mov	r7, r3
  401256:	4e15      	ldr	r6, [pc, #84]	; (4012ac <usart_serial_getchar+0x80>)
  401258:	4621      	mov	r1, r4
  40125a:	4638      	mov	r0, r7
  40125c:	47b0      	blx	r6
  40125e:	2800      	cmp	r0, #0
  401260:	d1fa      	bne.n	401258 <usart_serial_getchar+0x2c>
  401262:	e7f2      	b.n	40124a <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  401264:	461e      	mov	r6, r3
  401266:	4d11      	ldr	r5, [pc, #68]	; (4012ac <usart_serial_getchar+0x80>)
  401268:	4621      	mov	r1, r4
  40126a:	4630      	mov	r0, r6
  40126c:	47a8      	blx	r5
  40126e:	2800      	cmp	r0, #0
  401270:	d1fa      	bne.n	401268 <usart_serial_getchar+0x3c>
  401272:	e7ed      	b.n	401250 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  401274:	461e      	mov	r6, r3
  401276:	4d0e      	ldr	r5, [pc, #56]	; (4012b0 <usart_serial_getchar+0x84>)
  401278:	a901      	add	r1, sp, #4
  40127a:	4630      	mov	r0, r6
  40127c:	47a8      	blx	r5
  40127e:	2800      	cmp	r0, #0
  401280:	d1fa      	bne.n	401278 <usart_serial_getchar+0x4c>
		*data = (uint8_t)(val & 0xFF);
  401282:	9b01      	ldr	r3, [sp, #4]
  401284:	7023      	strb	r3, [r4, #0]
  401286:	e7e3      	b.n	401250 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  401288:	461e      	mov	r6, r3
  40128a:	4d09      	ldr	r5, [pc, #36]	; (4012b0 <usart_serial_getchar+0x84>)
  40128c:	a901      	add	r1, sp, #4
  40128e:	4630      	mov	r0, r6
  401290:	47a8      	blx	r5
  401292:	2800      	cmp	r0, #0
  401294:	d1fa      	bne.n	40128c <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
  401296:	9b01      	ldr	r3, [sp, #4]
  401298:	7023      	strb	r3, [r4, #0]
}
  40129a:	e7d9      	b.n	401250 <usart_serial_getchar+0x24>
  40129c:	400e0600 	.word	0x400e0600
  4012a0:	40060600 	.word	0x40060600
  4012a4:	400a0000 	.word	0x400a0000
  4012a8:	400a4000 	.word	0x400a4000
  4012ac:	00400f59 	.word	0x00400f59
  4012b0:	00400f7f 	.word	0x00400f7f

004012b4 <usart_serial_putchar>:
{
  4012b4:	b570      	push	{r4, r5, r6, lr}
  4012b6:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  4012b8:	4b18      	ldr	r3, [pc, #96]	; (40131c <usart_serial_putchar+0x68>)
  4012ba:	4298      	cmp	r0, r3
  4012bc:	d00a      	beq.n	4012d4 <usart_serial_putchar+0x20>
	if (UART1 == (Uart*)p_usart) {
  4012be:	4b18      	ldr	r3, [pc, #96]	; (401320 <usart_serial_putchar+0x6c>)
  4012c0:	4298      	cmp	r0, r3
  4012c2:	d010      	beq.n	4012e6 <usart_serial_putchar+0x32>
	if (USART0 == p_usart) {
  4012c4:	4b17      	ldr	r3, [pc, #92]	; (401324 <usart_serial_putchar+0x70>)
  4012c6:	4298      	cmp	r0, r3
  4012c8:	d016      	beq.n	4012f8 <usart_serial_putchar+0x44>
	if (USART1 == p_usart) {
  4012ca:	4b17      	ldr	r3, [pc, #92]	; (401328 <usart_serial_putchar+0x74>)
  4012cc:	4298      	cmp	r0, r3
  4012ce:	d01c      	beq.n	40130a <usart_serial_putchar+0x56>
	return 0;
  4012d0:	2000      	movs	r0, #0
}
  4012d2:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4012d4:	461e      	mov	r6, r3
  4012d6:	4d15      	ldr	r5, [pc, #84]	; (40132c <usart_serial_putchar+0x78>)
  4012d8:	4621      	mov	r1, r4
  4012da:	4630      	mov	r0, r6
  4012dc:	47a8      	blx	r5
  4012de:	2800      	cmp	r0, #0
  4012e0:	d1fa      	bne.n	4012d8 <usart_serial_putchar+0x24>
		return 1;
  4012e2:	2001      	movs	r0, #1
  4012e4:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4012e6:	461e      	mov	r6, r3
  4012e8:	4d10      	ldr	r5, [pc, #64]	; (40132c <usart_serial_putchar+0x78>)
  4012ea:	4621      	mov	r1, r4
  4012ec:	4630      	mov	r0, r6
  4012ee:	47a8      	blx	r5
  4012f0:	2800      	cmp	r0, #0
  4012f2:	d1fa      	bne.n	4012ea <usart_serial_putchar+0x36>
		return 1;
  4012f4:	2001      	movs	r0, #1
  4012f6:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4012f8:	461e      	mov	r6, r3
  4012fa:	4d0d      	ldr	r5, [pc, #52]	; (401330 <usart_serial_putchar+0x7c>)
  4012fc:	4621      	mov	r1, r4
  4012fe:	4630      	mov	r0, r6
  401300:	47a8      	blx	r5
  401302:	2800      	cmp	r0, #0
  401304:	d1fa      	bne.n	4012fc <usart_serial_putchar+0x48>
		return 1;
  401306:	2001      	movs	r0, #1
  401308:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40130a:	461e      	mov	r6, r3
  40130c:	4d08      	ldr	r5, [pc, #32]	; (401330 <usart_serial_putchar+0x7c>)
  40130e:	4621      	mov	r1, r4
  401310:	4630      	mov	r0, r6
  401312:	47a8      	blx	r5
  401314:	2800      	cmp	r0, #0
  401316:	d1fa      	bne.n	40130e <usart_serial_putchar+0x5a>
		return 1;
  401318:	2001      	movs	r0, #1
  40131a:	bd70      	pop	{r4, r5, r6, pc}
  40131c:	400e0600 	.word	0x400e0600
  401320:	40060600 	.word	0x40060600
  401324:	400a0000 	.word	0x400a0000
  401328:	400a4000 	.word	0x400a4000
  40132c:	00400f49 	.word	0x00400f49
  401330:	00400f6b 	.word	0x00400f6b

00401334 <main>:
 * \brief Application entry point for smc_lcd example.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
  401334:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401338:	b085      	sub	sp, #20
	sysclk_init();
  40133a:	4b48      	ldr	r3, [pc, #288]	; (40145c <main+0x128>)
  40133c:	4798      	blx	r3
	board_init();
  40133e:	4b48      	ldr	r3, [pc, #288]	; (401460 <main+0x12c>)
  401340:	4798      	blx	r3
  401342:	2007      	movs	r0, #7
  401344:	4c47      	ldr	r4, [pc, #284]	; (401464 <main+0x130>)
  401346:	47a0      	blx	r4
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  401348:	4d47      	ldr	r5, [pc, #284]	; (401468 <main+0x134>)
  40134a:	4b48      	ldr	r3, [pc, #288]	; (40146c <main+0x138>)
  40134c:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40134e:	4a48      	ldr	r2, [pc, #288]	; (401470 <main+0x13c>)
  401350:	4b48      	ldr	r3, [pc, #288]	; (401474 <main+0x140>)
  401352:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  401354:	4a48      	ldr	r2, [pc, #288]	; (401478 <main+0x144>)
  401356:	4b49      	ldr	r3, [pc, #292]	; (40147c <main+0x148>)
  401358:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  40135a:	4b49      	ldr	r3, [pc, #292]	; (401480 <main+0x14c>)
  40135c:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
  40135e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  401362:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
  401364:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401368:	9303      	str	r3, [sp, #12]
  40136a:	2007      	movs	r0, #7
  40136c:	47a0      	blx	r4
		uart_init((Uart*)p_usart, &uart_settings);
  40136e:	a901      	add	r1, sp, #4
  401370:	4628      	mov	r0, r5
  401372:	4b44      	ldr	r3, [pc, #272]	; (401484 <main+0x150>)
  401374:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  401376:	4e44      	ldr	r6, [pc, #272]	; (401488 <main+0x154>)
  401378:	6833      	ldr	r3, [r6, #0]
  40137a:	2100      	movs	r1, #0
  40137c:	6898      	ldr	r0, [r3, #8]
  40137e:	4d43      	ldr	r5, [pc, #268]	; (40148c <main+0x158>)
  401380:	47a8      	blx	r5
	setbuf(stdin, NULL);
  401382:	6833      	ldr	r3, [r6, #0]
  401384:	2100      	movs	r1, #0
  401386:	6858      	ldr	r0, [r3, #4]
  401388:	47a8      	blx	r5

	/** Initialize debug console */
	configure_console();

	/** Enable peripheral clock */
	pmc_enable_periph_clk(ID_SMC);
  40138a:	2008      	movs	r0, #8
  40138c:	47a0      	blx	r4

	/** Configure SMC interface for Lcd */
	smc_set_setup_timing(SMC, ILI93XX_LCD_CS, SMC_SETUP_NWE_SETUP(2)
  40138e:	4c40      	ldr	r4, [pc, #256]	; (401490 <main+0x15c>)
  401390:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
  401394:	2101      	movs	r1, #1
  401396:	4620      	mov	r0, r4
  401398:	4b3e      	ldr	r3, [pc, #248]	; (401494 <main+0x160>)
  40139a:	4798      	blx	r3
			| SMC_SETUP_NCS_WR_SETUP(2)
			| SMC_SETUP_NRD_SETUP(2)
			| SMC_SETUP_NCS_RD_SETUP(2));
	smc_set_pulse_timing(SMC, ILI93XX_LCD_CS, SMC_PULSE_NWE_PULSE(4)
  40139c:	4a3e      	ldr	r2, [pc, #248]	; (401498 <main+0x164>)
  40139e:	2101      	movs	r1, #1
  4013a0:	4620      	mov	r0, r4
  4013a2:	4b3e      	ldr	r3, [pc, #248]	; (40149c <main+0x168>)
  4013a4:	4798      	blx	r3
			| SMC_PULSE_NCS_WR_PULSE(4)
			| SMC_PULSE_NRD_PULSE(10)
			| SMC_PULSE_NCS_RD_PULSE(10));
	smc_set_cycle_timing(SMC, ILI93XX_LCD_CS, SMC_CYCLE_NWE_CYCLE(10)
  4013a6:	4a3e      	ldr	r2, [pc, #248]	; (4014a0 <main+0x16c>)
  4013a8:	2101      	movs	r1, #1
  4013aa:	4620      	mov	r0, r4
  4013ac:	4b3d      	ldr	r3, [pc, #244]	; (4014a4 <main+0x170>)
  4013ae:	4798      	blx	r3
#if ((!defined(SAM4S)) && (!defined(SAM4E)))
	smc_set_mode(SMC, ILI93XX_LCD_CS, SMC_MODE_READ_MODE
			| SMC_MODE_WRITE_MODE
			| SMC_MODE_DBW_8_BIT);
#else
	smc_set_mode(SMC, ILI93XX_LCD_CS, SMC_MODE_READ_MODE
  4013b0:	2203      	movs	r2, #3
  4013b2:	2101      	movs	r1, #1
  4013b4:	4620      	mov	r0, r4
  4013b6:	4b3c      	ldr	r3, [pc, #240]	; (4014a8 <main+0x174>)
  4013b8:	4798      	blx	r3
			| SMC_MODE_WRITE_MODE);
#endif
	/** Initialize display parameter */
	g_ili93xx_display_opt.ul_width = ILI93XX_LCD_WIDTH;
  4013ba:	4d3c      	ldr	r5, [pc, #240]	; (4014ac <main+0x178>)
  4013bc:	26f0      	movs	r6, #240	; 0xf0
  4013be:	602e      	str	r6, [r5, #0]
	g_ili93xx_display_opt.ul_height = ILI93XX_LCD_HEIGHT;
  4013c0:	f44f 77a0 	mov.w	r7, #320	; 0x140
  4013c4:	606f      	str	r7, [r5, #4]
	g_ili93xx_display_opt.foreground_color = COLOR_BLACK;
  4013c6:	2400      	movs	r4, #0
  4013c8:	60ac      	str	r4, [r5, #8]
	g_ili93xx_display_opt.background_color = COLOR_WHITE;
  4013ca:	f06f 487f 	mvn.w	r8, #4278190080	; 0xff000000
  4013ce:	f8c5 800c 	str.w	r8, [r5, #12]

	/** Switch off backlight */
	aat31xx_disable_backlight();
  4013d2:	4b37      	ldr	r3, [pc, #220]	; (4014b0 <main+0x17c>)
  4013d4:	4798      	blx	r3

	/** Initialize LCD */
	ili93xx_init(&g_ili93xx_display_opt);
  4013d6:	4628      	mov	r0, r5
  4013d8:	4b36      	ldr	r3, [pc, #216]	; (4014b4 <main+0x180>)
  4013da:	4798      	blx	r3

	/** Set backlight level */
	aat31xx_set_backlight(AAT31XX_AVG_BACKLIGHT_LEVEL);
  4013dc:	2008      	movs	r0, #8
  4013de:	4b36      	ldr	r3, [pc, #216]	; (4014b8 <main+0x184>)
  4013e0:	4798      	blx	r3

	ili93xx_set_foreground_color(COLOR_WHITE);
  4013e2:	4640      	mov	r0, r8
  4013e4:	4d35      	ldr	r5, [pc, #212]	; (4014bc <main+0x188>)
  4013e6:	47a8      	blx	r5
	ili93xx_draw_filled_rectangle(0, 0, ILI93XX_LCD_WIDTH,
  4013e8:	463b      	mov	r3, r7
  4013ea:	4632      	mov	r2, r6
  4013ec:	4621      	mov	r1, r4
  4013ee:	4620      	mov	r0, r4
  4013f0:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 4014d8 <main+0x1a4>
  4013f4:	47c8      	blx	r9
			ILI93XX_LCD_HEIGHT);
	/** Turn on LCD */
	ili93xx_display_on();
  4013f6:	4b32      	ldr	r3, [pc, #200]	; (4014c0 <main+0x18c>)
  4013f8:	4798      	blx	r3
	ili93xx_set_cursor_position(0, 0);
  4013fa:	4621      	mov	r1, r4
  4013fc:	4620      	mov	r0, r4
  4013fe:	4b31      	ldr	r3, [pc, #196]	; (4014c4 <main+0x190>)
  401400:	4798      	blx	r3
	//ili93xx_draw_line(0, 0, 240, 320);
	int i = 10;
	
	while (i < ILI93XX_LCD_WIDTH - 10)
	{
		ili93xx_set_foreground_color(COLOR_WHITE);
  401402:	4640      	mov	r0, r8
  401404:	47a8      	blx	r5
		ili93xx_draw_filled_rectangle(0,0,240,320);
  401406:	463b      	mov	r3, r7
  401408:	4632      	mov	r2, r6
  40140a:	4621      	mov	r1, r4
  40140c:	4620      	mov	r0, r4
  40140e:	47c8      	blx	r9
		ili93xx_set_foreground_color(COLOR_BLACK);
  401410:	4620      	mov	r0, r4
  401412:	47a8      	blx	r5
		ili93xx_draw_string(i, 20, (uint8_t *)"ursdag text");
  401414:	4a2c      	ldr	r2, [pc, #176]	; (4014c8 <main+0x194>)
  401416:	2114      	movs	r1, #20
  401418:	200a      	movs	r0, #10
  40141a:	4b2c      	ldr	r3, [pc, #176]	; (4014cc <main+0x198>)
  40141c:	4798      	blx	r3
		delay_ms(25);
  40141e:	482c      	ldr	r0, [pc, #176]	; (4014d0 <main+0x19c>)
  401420:	4b2c      	ldr	r3, [pc, #176]	; (4014d4 <main+0x1a0>)
  401422:	4798      	blx	r3
		i++;
  401424:	240b      	movs	r4, #11
		ili93xx_set_foreground_color(COLOR_WHITE);
  401426:	462e      	mov	r6, r5
		ili93xx_draw_filled_rectangle(0,0,240,320);
  401428:	2500      	movs	r5, #0
  40142a:	464f      	mov	r7, r9
		ili93xx_set_foreground_color(COLOR_WHITE);
  40142c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  401430:	47b0      	blx	r6
		ili93xx_draw_filled_rectangle(0,0,240,320);
  401432:	f44f 73a0 	mov.w	r3, #320	; 0x140
  401436:	22f0      	movs	r2, #240	; 0xf0
  401438:	4629      	mov	r1, r5
  40143a:	4628      	mov	r0, r5
  40143c:	47b8      	blx	r7
		ili93xx_set_foreground_color(COLOR_BLACK);
  40143e:	4628      	mov	r0, r5
  401440:	47b0      	blx	r6
		ili93xx_draw_string(i, 20, (uint8_t *)"ursdag text");
  401442:	4a21      	ldr	r2, [pc, #132]	; (4014c8 <main+0x194>)
  401444:	2114      	movs	r1, #20
  401446:	4620      	mov	r0, r4
  401448:	4b20      	ldr	r3, [pc, #128]	; (4014cc <main+0x198>)
  40144a:	4798      	blx	r3
		delay_ms(25);
  40144c:	4820      	ldr	r0, [pc, #128]	; (4014d0 <main+0x19c>)
  40144e:	4b21      	ldr	r3, [pc, #132]	; (4014d4 <main+0x1a0>)
  401450:	4798      	blx	r3
		i++;
  401452:	3401      	adds	r4, #1
		if (i >= ILI93XX_LCD_WIDTH - 10)
		{
			i = 10;
  401454:	2ce6      	cmp	r4, #230	; 0xe6
  401456:	bfa8      	it	ge
  401458:	240a      	movge	r4, #10
  40145a:	e7e7      	b.n	40142c <main+0xf8>
  40145c:	00400165 	.word	0x00400165
  401460:	00400255 	.word	0x00400255
  401464:	00400ebd 	.word	0x00400ebd
  401468:	400e0600 	.word	0x400e0600
  40146c:	20000c7c 	.word	0x20000c7c
  401470:	004012b5 	.word	0x004012b5
  401474:	20000c78 	.word	0x20000c78
  401478:	0040122d 	.word	0x0040122d
  40147c:	20000c74 	.word	0x20000c74
  401480:	07270e00 	.word	0x07270e00
  401484:	00400f11 	.word	0x00400f11
  401488:	20000018 	.word	0x20000018
  40148c:	004015c9 	.word	0x004015c9
  401490:	40060000 	.word	0x40060000
  401494:	00400db5 	.word	0x00400db5
  401498:	0a0a0404 	.word	0x0a0a0404
  40149c:	00400dbb 	.word	0x00400dbb
  4014a0:	0016000a 	.word	0x0016000a
  4014a4:	00400dc3 	.word	0x00400dc3
  4014a8:	00400dcb 	.word	0x00400dcb
  4014ac:	20000c80 	.word	0x20000c80
  4014b0:	00400595 	.word	0x00400595
  4014b4:	004008dd 	.word	0x004008dd
  4014b8:	00400539 	.word	0x00400539
  4014bc:	004007f5 	.word	0x004007f5
  4014c0:	004007c1 	.word	0x004007c1
  4014c4:	004008b5 	.word	0x004008b5
  4014c8:	00402d54 	.word	0x00402d54
  4014cc:	00400d05 	.word	0x00400d05
  4014d0:	0003450e 	.word	0x0003450e
  4014d4:	20000001 	.word	0x20000001
  4014d8:	00400c3d 	.word	0x00400c3d

004014dc <__libc_init_array>:
  4014dc:	b570      	push	{r4, r5, r6, lr}
  4014de:	4e0f      	ldr	r6, [pc, #60]	; (40151c <__libc_init_array+0x40>)
  4014e0:	4d0f      	ldr	r5, [pc, #60]	; (401520 <__libc_init_array+0x44>)
  4014e2:	1b76      	subs	r6, r6, r5
  4014e4:	10b6      	asrs	r6, r6, #2
  4014e6:	bf18      	it	ne
  4014e8:	2400      	movne	r4, #0
  4014ea:	d005      	beq.n	4014f8 <__libc_init_array+0x1c>
  4014ec:	3401      	adds	r4, #1
  4014ee:	f855 3b04 	ldr.w	r3, [r5], #4
  4014f2:	4798      	blx	r3
  4014f4:	42a6      	cmp	r6, r4
  4014f6:	d1f9      	bne.n	4014ec <__libc_init_array+0x10>
  4014f8:	4e0a      	ldr	r6, [pc, #40]	; (401524 <__libc_init_array+0x48>)
  4014fa:	4d0b      	ldr	r5, [pc, #44]	; (401528 <__libc_init_array+0x4c>)
  4014fc:	1b76      	subs	r6, r6, r5
  4014fe:	f001 fc31 	bl	402d64 <_init>
  401502:	10b6      	asrs	r6, r6, #2
  401504:	bf18      	it	ne
  401506:	2400      	movne	r4, #0
  401508:	d006      	beq.n	401518 <__libc_init_array+0x3c>
  40150a:	3401      	adds	r4, #1
  40150c:	f855 3b04 	ldr.w	r3, [r5], #4
  401510:	4798      	blx	r3
  401512:	42a6      	cmp	r6, r4
  401514:	d1f9      	bne.n	40150a <__libc_init_array+0x2e>
  401516:	bd70      	pop	{r4, r5, r6, pc}
  401518:	bd70      	pop	{r4, r5, r6, pc}
  40151a:	bf00      	nop
  40151c:	00402d70 	.word	0x00402d70
  401520:	00402d70 	.word	0x00402d70
  401524:	00402d78 	.word	0x00402d78
  401528:	00402d70 	.word	0x00402d70

0040152c <memset>:
  40152c:	b470      	push	{r4, r5, r6}
  40152e:	0786      	lsls	r6, r0, #30
  401530:	d046      	beq.n	4015c0 <memset+0x94>
  401532:	1e54      	subs	r4, r2, #1
  401534:	2a00      	cmp	r2, #0
  401536:	d041      	beq.n	4015bc <memset+0x90>
  401538:	b2ca      	uxtb	r2, r1
  40153a:	4603      	mov	r3, r0
  40153c:	e002      	b.n	401544 <memset+0x18>
  40153e:	f114 34ff 	adds.w	r4, r4, #4294967295
  401542:	d33b      	bcc.n	4015bc <memset+0x90>
  401544:	f803 2b01 	strb.w	r2, [r3], #1
  401548:	079d      	lsls	r5, r3, #30
  40154a:	d1f8      	bne.n	40153e <memset+0x12>
  40154c:	2c03      	cmp	r4, #3
  40154e:	d92e      	bls.n	4015ae <memset+0x82>
  401550:	b2cd      	uxtb	r5, r1
  401552:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  401556:	2c0f      	cmp	r4, #15
  401558:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40155c:	d919      	bls.n	401592 <memset+0x66>
  40155e:	f103 0210 	add.w	r2, r3, #16
  401562:	4626      	mov	r6, r4
  401564:	3e10      	subs	r6, #16
  401566:	2e0f      	cmp	r6, #15
  401568:	f842 5c10 	str.w	r5, [r2, #-16]
  40156c:	f842 5c0c 	str.w	r5, [r2, #-12]
  401570:	f842 5c08 	str.w	r5, [r2, #-8]
  401574:	f842 5c04 	str.w	r5, [r2, #-4]
  401578:	f102 0210 	add.w	r2, r2, #16
  40157c:	d8f2      	bhi.n	401564 <memset+0x38>
  40157e:	f1a4 0210 	sub.w	r2, r4, #16
  401582:	f022 020f 	bic.w	r2, r2, #15
  401586:	f004 040f 	and.w	r4, r4, #15
  40158a:	3210      	adds	r2, #16
  40158c:	2c03      	cmp	r4, #3
  40158e:	4413      	add	r3, r2
  401590:	d90d      	bls.n	4015ae <memset+0x82>
  401592:	461e      	mov	r6, r3
  401594:	4622      	mov	r2, r4
  401596:	3a04      	subs	r2, #4
  401598:	2a03      	cmp	r2, #3
  40159a:	f846 5b04 	str.w	r5, [r6], #4
  40159e:	d8fa      	bhi.n	401596 <memset+0x6a>
  4015a0:	1f22      	subs	r2, r4, #4
  4015a2:	f022 0203 	bic.w	r2, r2, #3
  4015a6:	3204      	adds	r2, #4
  4015a8:	4413      	add	r3, r2
  4015aa:	f004 0403 	and.w	r4, r4, #3
  4015ae:	b12c      	cbz	r4, 4015bc <memset+0x90>
  4015b0:	b2c9      	uxtb	r1, r1
  4015b2:	441c      	add	r4, r3
  4015b4:	f803 1b01 	strb.w	r1, [r3], #1
  4015b8:	429c      	cmp	r4, r3
  4015ba:	d1fb      	bne.n	4015b4 <memset+0x88>
  4015bc:	bc70      	pop	{r4, r5, r6}
  4015be:	4770      	bx	lr
  4015c0:	4614      	mov	r4, r2
  4015c2:	4603      	mov	r3, r0
  4015c4:	e7c2      	b.n	40154c <memset+0x20>
  4015c6:	bf00      	nop

004015c8 <setbuf>:
  4015c8:	2900      	cmp	r1, #0
  4015ca:	bf0c      	ite	eq
  4015cc:	2202      	moveq	r2, #2
  4015ce:	2200      	movne	r2, #0
  4015d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4015d4:	f000 b800 	b.w	4015d8 <setvbuf>

004015d8 <setvbuf>:
  4015d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4015dc:	4c61      	ldr	r4, [pc, #388]	; (401764 <setvbuf+0x18c>)
  4015de:	6825      	ldr	r5, [r4, #0]
  4015e0:	b083      	sub	sp, #12
  4015e2:	4604      	mov	r4, r0
  4015e4:	460f      	mov	r7, r1
  4015e6:	4690      	mov	r8, r2
  4015e8:	461e      	mov	r6, r3
  4015ea:	b115      	cbz	r5, 4015f2 <setvbuf+0x1a>
  4015ec:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4015ee:	2b00      	cmp	r3, #0
  4015f0:	d064      	beq.n	4016bc <setvbuf+0xe4>
  4015f2:	f1b8 0f02 	cmp.w	r8, #2
  4015f6:	d006      	beq.n	401606 <setvbuf+0x2e>
  4015f8:	f1b8 0f01 	cmp.w	r8, #1
  4015fc:	f200 809f 	bhi.w	40173e <setvbuf+0x166>
  401600:	2e00      	cmp	r6, #0
  401602:	f2c0 809c 	blt.w	40173e <setvbuf+0x166>
  401606:	6e63      	ldr	r3, [r4, #100]	; 0x64
  401608:	07d8      	lsls	r0, r3, #31
  40160a:	d534      	bpl.n	401676 <setvbuf+0x9e>
  40160c:	4621      	mov	r1, r4
  40160e:	4628      	mov	r0, r5
  401610:	f000 f95a 	bl	4018c8 <_fflush_r>
  401614:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401616:	b141      	cbz	r1, 40162a <setvbuf+0x52>
  401618:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40161c:	4299      	cmp	r1, r3
  40161e:	d002      	beq.n	401626 <setvbuf+0x4e>
  401620:	4628      	mov	r0, r5
  401622:	f000 fa4b 	bl	401abc <_free_r>
  401626:	2300      	movs	r3, #0
  401628:	6323      	str	r3, [r4, #48]	; 0x30
  40162a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40162e:	2200      	movs	r2, #0
  401630:	61a2      	str	r2, [r4, #24]
  401632:	6062      	str	r2, [r4, #4]
  401634:	061a      	lsls	r2, r3, #24
  401636:	d43a      	bmi.n	4016ae <setvbuf+0xd6>
  401638:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  40163c:	f023 0303 	bic.w	r3, r3, #3
  401640:	f1b8 0f02 	cmp.w	r8, #2
  401644:	81a3      	strh	r3, [r4, #12]
  401646:	d01d      	beq.n	401684 <setvbuf+0xac>
  401648:	ab01      	add	r3, sp, #4
  40164a:	466a      	mov	r2, sp
  40164c:	4621      	mov	r1, r4
  40164e:	4628      	mov	r0, r5
  401650:	f000 fb4c 	bl	401cec <__swhatbuf_r>
  401654:	89a3      	ldrh	r3, [r4, #12]
  401656:	4318      	orrs	r0, r3
  401658:	81a0      	strh	r0, [r4, #12]
  40165a:	2e00      	cmp	r6, #0
  40165c:	d132      	bne.n	4016c4 <setvbuf+0xec>
  40165e:	9e00      	ldr	r6, [sp, #0]
  401660:	4630      	mov	r0, r6
  401662:	f000 fb71 	bl	401d48 <malloc>
  401666:	4607      	mov	r7, r0
  401668:	2800      	cmp	r0, #0
  40166a:	d06b      	beq.n	401744 <setvbuf+0x16c>
  40166c:	89a3      	ldrh	r3, [r4, #12]
  40166e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401672:	81a3      	strh	r3, [r4, #12]
  401674:	e028      	b.n	4016c8 <setvbuf+0xf0>
  401676:	89a3      	ldrh	r3, [r4, #12]
  401678:	0599      	lsls	r1, r3, #22
  40167a:	d4c7      	bmi.n	40160c <setvbuf+0x34>
  40167c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40167e:	f000 fb31 	bl	401ce4 <__retarget_lock_acquire_recursive>
  401682:	e7c3      	b.n	40160c <setvbuf+0x34>
  401684:	2500      	movs	r5, #0
  401686:	6e61      	ldr	r1, [r4, #100]	; 0x64
  401688:	2600      	movs	r6, #0
  40168a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40168e:	f043 0302 	orr.w	r3, r3, #2
  401692:	2001      	movs	r0, #1
  401694:	60a6      	str	r6, [r4, #8]
  401696:	07ce      	lsls	r6, r1, #31
  401698:	81a3      	strh	r3, [r4, #12]
  40169a:	6022      	str	r2, [r4, #0]
  40169c:	6122      	str	r2, [r4, #16]
  40169e:	6160      	str	r0, [r4, #20]
  4016a0:	d401      	bmi.n	4016a6 <setvbuf+0xce>
  4016a2:	0598      	lsls	r0, r3, #22
  4016a4:	d53e      	bpl.n	401724 <setvbuf+0x14c>
  4016a6:	4628      	mov	r0, r5
  4016a8:	b003      	add	sp, #12
  4016aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4016ae:	6921      	ldr	r1, [r4, #16]
  4016b0:	4628      	mov	r0, r5
  4016b2:	f000 fa03 	bl	401abc <_free_r>
  4016b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4016ba:	e7bd      	b.n	401638 <setvbuf+0x60>
  4016bc:	4628      	mov	r0, r5
  4016be:	f000 f95b 	bl	401978 <__sinit>
  4016c2:	e796      	b.n	4015f2 <setvbuf+0x1a>
  4016c4:	2f00      	cmp	r7, #0
  4016c6:	d0cb      	beq.n	401660 <setvbuf+0x88>
  4016c8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4016ca:	2b00      	cmp	r3, #0
  4016cc:	d033      	beq.n	401736 <setvbuf+0x15e>
  4016ce:	9b00      	ldr	r3, [sp, #0]
  4016d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4016d4:	6027      	str	r7, [r4, #0]
  4016d6:	429e      	cmp	r6, r3
  4016d8:	bf1c      	itt	ne
  4016da:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  4016de:	81a2      	strhne	r2, [r4, #12]
  4016e0:	f1b8 0f01 	cmp.w	r8, #1
  4016e4:	bf04      	itt	eq
  4016e6:	f042 0201 	orreq.w	r2, r2, #1
  4016ea:	81a2      	strheq	r2, [r4, #12]
  4016ec:	b292      	uxth	r2, r2
  4016ee:	f012 0308 	ands.w	r3, r2, #8
  4016f2:	6127      	str	r7, [r4, #16]
  4016f4:	6166      	str	r6, [r4, #20]
  4016f6:	d00e      	beq.n	401716 <setvbuf+0x13e>
  4016f8:	07d1      	lsls	r1, r2, #31
  4016fa:	d51a      	bpl.n	401732 <setvbuf+0x15a>
  4016fc:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4016fe:	4276      	negs	r6, r6
  401700:	2300      	movs	r3, #0
  401702:	f015 0501 	ands.w	r5, r5, #1
  401706:	61a6      	str	r6, [r4, #24]
  401708:	60a3      	str	r3, [r4, #8]
  40170a:	d009      	beq.n	401720 <setvbuf+0x148>
  40170c:	2500      	movs	r5, #0
  40170e:	4628      	mov	r0, r5
  401710:	b003      	add	sp, #12
  401712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401716:	60a3      	str	r3, [r4, #8]
  401718:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40171a:	f015 0501 	ands.w	r5, r5, #1
  40171e:	d1f5      	bne.n	40170c <setvbuf+0x134>
  401720:	0593      	lsls	r3, r2, #22
  401722:	d4c0      	bmi.n	4016a6 <setvbuf+0xce>
  401724:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401726:	f000 fadf 	bl	401ce8 <__retarget_lock_release_recursive>
  40172a:	4628      	mov	r0, r5
  40172c:	b003      	add	sp, #12
  40172e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401732:	60a6      	str	r6, [r4, #8]
  401734:	e7f0      	b.n	401718 <setvbuf+0x140>
  401736:	4628      	mov	r0, r5
  401738:	f000 f91e 	bl	401978 <__sinit>
  40173c:	e7c7      	b.n	4016ce <setvbuf+0xf6>
  40173e:	f04f 35ff 	mov.w	r5, #4294967295
  401742:	e7b0      	b.n	4016a6 <setvbuf+0xce>
  401744:	f8dd 9000 	ldr.w	r9, [sp]
  401748:	45b1      	cmp	r9, r6
  40174a:	d004      	beq.n	401756 <setvbuf+0x17e>
  40174c:	4648      	mov	r0, r9
  40174e:	f000 fafb 	bl	401d48 <malloc>
  401752:	4607      	mov	r7, r0
  401754:	b920      	cbnz	r0, 401760 <setvbuf+0x188>
  401756:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40175a:	f04f 35ff 	mov.w	r5, #4294967295
  40175e:	e792      	b.n	401686 <setvbuf+0xae>
  401760:	464e      	mov	r6, r9
  401762:	e783      	b.n	40166c <setvbuf+0x94>
  401764:	20000018 	.word	0x20000018

00401768 <register_fini>:
  401768:	4b02      	ldr	r3, [pc, #8]	; (401774 <register_fini+0xc>)
  40176a:	b113      	cbz	r3, 401772 <register_fini+0xa>
  40176c:	4802      	ldr	r0, [pc, #8]	; (401778 <register_fini+0x10>)
  40176e:	f000 b805 	b.w	40177c <atexit>
  401772:	4770      	bx	lr
  401774:	00000000 	.word	0x00000000
  401778:	004019e9 	.word	0x004019e9

0040177c <atexit>:
  40177c:	2300      	movs	r3, #0
  40177e:	4601      	mov	r1, r0
  401780:	461a      	mov	r2, r3
  401782:	4618      	mov	r0, r3
  401784:	f000 be10 	b.w	4023a8 <__register_exitproc>

00401788 <__sflush_r>:
  401788:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40178c:	b29a      	uxth	r2, r3
  40178e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401792:	460d      	mov	r5, r1
  401794:	0711      	lsls	r1, r2, #28
  401796:	4680      	mov	r8, r0
  401798:	d43a      	bmi.n	401810 <__sflush_r+0x88>
  40179a:	686a      	ldr	r2, [r5, #4]
  40179c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4017a0:	2a00      	cmp	r2, #0
  4017a2:	81ab      	strh	r3, [r5, #12]
  4017a4:	dd6f      	ble.n	401886 <__sflush_r+0xfe>
  4017a6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4017a8:	2c00      	cmp	r4, #0
  4017aa:	d049      	beq.n	401840 <__sflush_r+0xb8>
  4017ac:	2200      	movs	r2, #0
  4017ae:	b29b      	uxth	r3, r3
  4017b0:	f8d8 6000 	ldr.w	r6, [r8]
  4017b4:	f8c8 2000 	str.w	r2, [r8]
  4017b8:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  4017bc:	d067      	beq.n	40188e <__sflush_r+0x106>
  4017be:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4017c0:	075f      	lsls	r7, r3, #29
  4017c2:	d505      	bpl.n	4017d0 <__sflush_r+0x48>
  4017c4:	6869      	ldr	r1, [r5, #4]
  4017c6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4017c8:	1a52      	subs	r2, r2, r1
  4017ca:	b10b      	cbz	r3, 4017d0 <__sflush_r+0x48>
  4017cc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4017ce:	1ad2      	subs	r2, r2, r3
  4017d0:	2300      	movs	r3, #0
  4017d2:	69e9      	ldr	r1, [r5, #28]
  4017d4:	4640      	mov	r0, r8
  4017d6:	47a0      	blx	r4
  4017d8:	1c44      	adds	r4, r0, #1
  4017da:	d03c      	beq.n	401856 <__sflush_r+0xce>
  4017dc:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4017e0:	692a      	ldr	r2, [r5, #16]
  4017e2:	602a      	str	r2, [r5, #0]
  4017e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4017e8:	2200      	movs	r2, #0
  4017ea:	81ab      	strh	r3, [r5, #12]
  4017ec:	04db      	lsls	r3, r3, #19
  4017ee:	606a      	str	r2, [r5, #4]
  4017f0:	d447      	bmi.n	401882 <__sflush_r+0xfa>
  4017f2:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4017f4:	f8c8 6000 	str.w	r6, [r8]
  4017f8:	b311      	cbz	r1, 401840 <__sflush_r+0xb8>
  4017fa:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4017fe:	4299      	cmp	r1, r3
  401800:	d002      	beq.n	401808 <__sflush_r+0x80>
  401802:	4640      	mov	r0, r8
  401804:	f000 f95a 	bl	401abc <_free_r>
  401808:	2000      	movs	r0, #0
  40180a:	6328      	str	r0, [r5, #48]	; 0x30
  40180c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401810:	692e      	ldr	r6, [r5, #16]
  401812:	b1ae      	cbz	r6, 401840 <__sflush_r+0xb8>
  401814:	682c      	ldr	r4, [r5, #0]
  401816:	602e      	str	r6, [r5, #0]
  401818:	0791      	lsls	r1, r2, #30
  40181a:	bf0c      	ite	eq
  40181c:	696b      	ldreq	r3, [r5, #20]
  40181e:	2300      	movne	r3, #0
  401820:	1ba4      	subs	r4, r4, r6
  401822:	60ab      	str	r3, [r5, #8]
  401824:	e00a      	b.n	40183c <__sflush_r+0xb4>
  401826:	4623      	mov	r3, r4
  401828:	4632      	mov	r2, r6
  40182a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40182c:	69e9      	ldr	r1, [r5, #28]
  40182e:	4640      	mov	r0, r8
  401830:	47b8      	blx	r7
  401832:	2800      	cmp	r0, #0
  401834:	eba4 0400 	sub.w	r4, r4, r0
  401838:	4406      	add	r6, r0
  40183a:	dd04      	ble.n	401846 <__sflush_r+0xbe>
  40183c:	2c00      	cmp	r4, #0
  40183e:	dcf2      	bgt.n	401826 <__sflush_r+0x9e>
  401840:	2000      	movs	r0, #0
  401842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401846:	89ab      	ldrh	r3, [r5, #12]
  401848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40184c:	81ab      	strh	r3, [r5, #12]
  40184e:	f04f 30ff 	mov.w	r0, #4294967295
  401852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401856:	f8d8 4000 	ldr.w	r4, [r8]
  40185a:	2c1d      	cmp	r4, #29
  40185c:	d8f3      	bhi.n	401846 <__sflush_r+0xbe>
  40185e:	4b19      	ldr	r3, [pc, #100]	; (4018c4 <__sflush_r+0x13c>)
  401860:	40e3      	lsrs	r3, r4
  401862:	43db      	mvns	r3, r3
  401864:	f013 0301 	ands.w	r3, r3, #1
  401868:	d1ed      	bne.n	401846 <__sflush_r+0xbe>
  40186a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40186e:	606b      	str	r3, [r5, #4]
  401870:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  401874:	6929      	ldr	r1, [r5, #16]
  401876:	81ab      	strh	r3, [r5, #12]
  401878:	04da      	lsls	r2, r3, #19
  40187a:	6029      	str	r1, [r5, #0]
  40187c:	d5b9      	bpl.n	4017f2 <__sflush_r+0x6a>
  40187e:	2c00      	cmp	r4, #0
  401880:	d1b7      	bne.n	4017f2 <__sflush_r+0x6a>
  401882:	6528      	str	r0, [r5, #80]	; 0x50
  401884:	e7b5      	b.n	4017f2 <__sflush_r+0x6a>
  401886:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  401888:	2a00      	cmp	r2, #0
  40188a:	dc8c      	bgt.n	4017a6 <__sflush_r+0x1e>
  40188c:	e7d8      	b.n	401840 <__sflush_r+0xb8>
  40188e:	2301      	movs	r3, #1
  401890:	69e9      	ldr	r1, [r5, #28]
  401892:	4640      	mov	r0, r8
  401894:	47a0      	blx	r4
  401896:	1c43      	adds	r3, r0, #1
  401898:	4602      	mov	r2, r0
  40189a:	d002      	beq.n	4018a2 <__sflush_r+0x11a>
  40189c:	89ab      	ldrh	r3, [r5, #12]
  40189e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4018a0:	e78e      	b.n	4017c0 <__sflush_r+0x38>
  4018a2:	f8d8 3000 	ldr.w	r3, [r8]
  4018a6:	2b00      	cmp	r3, #0
  4018a8:	d0f8      	beq.n	40189c <__sflush_r+0x114>
  4018aa:	2b1d      	cmp	r3, #29
  4018ac:	d001      	beq.n	4018b2 <__sflush_r+0x12a>
  4018ae:	2b16      	cmp	r3, #22
  4018b0:	d102      	bne.n	4018b8 <__sflush_r+0x130>
  4018b2:	f8c8 6000 	str.w	r6, [r8]
  4018b6:	e7c3      	b.n	401840 <__sflush_r+0xb8>
  4018b8:	89ab      	ldrh	r3, [r5, #12]
  4018ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4018be:	81ab      	strh	r3, [r5, #12]
  4018c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4018c4:	20400001 	.word	0x20400001

004018c8 <_fflush_r>:
  4018c8:	b538      	push	{r3, r4, r5, lr}
  4018ca:	460d      	mov	r5, r1
  4018cc:	4604      	mov	r4, r0
  4018ce:	b108      	cbz	r0, 4018d4 <_fflush_r+0xc>
  4018d0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4018d2:	b1bb      	cbz	r3, 401904 <_fflush_r+0x3c>
  4018d4:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  4018d8:	b188      	cbz	r0, 4018fe <_fflush_r+0x36>
  4018da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4018dc:	07db      	lsls	r3, r3, #31
  4018de:	d401      	bmi.n	4018e4 <_fflush_r+0x1c>
  4018e0:	0581      	lsls	r1, r0, #22
  4018e2:	d517      	bpl.n	401914 <_fflush_r+0x4c>
  4018e4:	4620      	mov	r0, r4
  4018e6:	4629      	mov	r1, r5
  4018e8:	f7ff ff4e 	bl	401788 <__sflush_r>
  4018ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4018ee:	07da      	lsls	r2, r3, #31
  4018f0:	4604      	mov	r4, r0
  4018f2:	d402      	bmi.n	4018fa <_fflush_r+0x32>
  4018f4:	89ab      	ldrh	r3, [r5, #12]
  4018f6:	059b      	lsls	r3, r3, #22
  4018f8:	d507      	bpl.n	40190a <_fflush_r+0x42>
  4018fa:	4620      	mov	r0, r4
  4018fc:	bd38      	pop	{r3, r4, r5, pc}
  4018fe:	4604      	mov	r4, r0
  401900:	4620      	mov	r0, r4
  401902:	bd38      	pop	{r3, r4, r5, pc}
  401904:	f000 f838 	bl	401978 <__sinit>
  401908:	e7e4      	b.n	4018d4 <_fflush_r+0xc>
  40190a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40190c:	f000 f9ec 	bl	401ce8 <__retarget_lock_release_recursive>
  401910:	4620      	mov	r0, r4
  401912:	bd38      	pop	{r3, r4, r5, pc}
  401914:	6da8      	ldr	r0, [r5, #88]	; 0x58
  401916:	f000 f9e5 	bl	401ce4 <__retarget_lock_acquire_recursive>
  40191a:	e7e3      	b.n	4018e4 <_fflush_r+0x1c>

0040191c <_cleanup_r>:
  40191c:	4901      	ldr	r1, [pc, #4]	; (401924 <_cleanup_r+0x8>)
  40191e:	f000 b9b3 	b.w	401c88 <_fwalk_reent>
  401922:	bf00      	nop
  401924:	00402491 	.word	0x00402491

00401928 <std.isra.0>:
  401928:	b510      	push	{r4, lr}
  40192a:	2300      	movs	r3, #0
  40192c:	4604      	mov	r4, r0
  40192e:	8181      	strh	r1, [r0, #12]
  401930:	81c2      	strh	r2, [r0, #14]
  401932:	6003      	str	r3, [r0, #0]
  401934:	6043      	str	r3, [r0, #4]
  401936:	6083      	str	r3, [r0, #8]
  401938:	6643      	str	r3, [r0, #100]	; 0x64
  40193a:	6103      	str	r3, [r0, #16]
  40193c:	6143      	str	r3, [r0, #20]
  40193e:	6183      	str	r3, [r0, #24]
  401940:	4619      	mov	r1, r3
  401942:	2208      	movs	r2, #8
  401944:	305c      	adds	r0, #92	; 0x5c
  401946:	f7ff fdf1 	bl	40152c <memset>
  40194a:	4807      	ldr	r0, [pc, #28]	; (401968 <std.isra.0+0x40>)
  40194c:	4907      	ldr	r1, [pc, #28]	; (40196c <std.isra.0+0x44>)
  40194e:	4a08      	ldr	r2, [pc, #32]	; (401970 <std.isra.0+0x48>)
  401950:	4b08      	ldr	r3, [pc, #32]	; (401974 <std.isra.0+0x4c>)
  401952:	6220      	str	r0, [r4, #32]
  401954:	61e4      	str	r4, [r4, #28]
  401956:	6261      	str	r1, [r4, #36]	; 0x24
  401958:	62a2      	str	r2, [r4, #40]	; 0x28
  40195a:	62e3      	str	r3, [r4, #44]	; 0x2c
  40195c:	f104 0058 	add.w	r0, r4, #88	; 0x58
  401960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  401964:	f000 b9ba 	b.w	401cdc <__retarget_lock_init_recursive>
  401968:	004022f5 	.word	0x004022f5
  40196c:	00402319 	.word	0x00402319
  401970:	00402355 	.word	0x00402355
  401974:	00402375 	.word	0x00402375

00401978 <__sinit>:
  401978:	b510      	push	{r4, lr}
  40197a:	4604      	mov	r4, r0
  40197c:	4812      	ldr	r0, [pc, #72]	; (4019c8 <__sinit+0x50>)
  40197e:	f000 f9b1 	bl	401ce4 <__retarget_lock_acquire_recursive>
  401982:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401984:	b9d2      	cbnz	r2, 4019bc <__sinit+0x44>
  401986:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40198a:	4810      	ldr	r0, [pc, #64]	; (4019cc <__sinit+0x54>)
  40198c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  401990:	2103      	movs	r1, #3
  401992:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  401996:	63e0      	str	r0, [r4, #60]	; 0x3c
  401998:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  40199c:	6860      	ldr	r0, [r4, #4]
  40199e:	2104      	movs	r1, #4
  4019a0:	f7ff ffc2 	bl	401928 <std.isra.0>
  4019a4:	2201      	movs	r2, #1
  4019a6:	2109      	movs	r1, #9
  4019a8:	68a0      	ldr	r0, [r4, #8]
  4019aa:	f7ff ffbd 	bl	401928 <std.isra.0>
  4019ae:	2202      	movs	r2, #2
  4019b0:	2112      	movs	r1, #18
  4019b2:	68e0      	ldr	r0, [r4, #12]
  4019b4:	f7ff ffb8 	bl	401928 <std.isra.0>
  4019b8:	2301      	movs	r3, #1
  4019ba:	63a3      	str	r3, [r4, #56]	; 0x38
  4019bc:	4802      	ldr	r0, [pc, #8]	; (4019c8 <__sinit+0x50>)
  4019be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4019c2:	f000 b991 	b.w	401ce8 <__retarget_lock_release_recursive>
  4019c6:	bf00      	nop
  4019c8:	20000c9c 	.word	0x20000c9c
  4019cc:	0040191d 	.word	0x0040191d

004019d0 <__sfp_lock_acquire>:
  4019d0:	4801      	ldr	r0, [pc, #4]	; (4019d8 <__sfp_lock_acquire+0x8>)
  4019d2:	f000 b987 	b.w	401ce4 <__retarget_lock_acquire_recursive>
  4019d6:	bf00      	nop
  4019d8:	20000cb0 	.word	0x20000cb0

004019dc <__sfp_lock_release>:
  4019dc:	4801      	ldr	r0, [pc, #4]	; (4019e4 <__sfp_lock_release+0x8>)
  4019de:	f000 b983 	b.w	401ce8 <__retarget_lock_release_recursive>
  4019e2:	bf00      	nop
  4019e4:	20000cb0 	.word	0x20000cb0

004019e8 <__libc_fini_array>:
  4019e8:	b538      	push	{r3, r4, r5, lr}
  4019ea:	4c0a      	ldr	r4, [pc, #40]	; (401a14 <__libc_fini_array+0x2c>)
  4019ec:	4d0a      	ldr	r5, [pc, #40]	; (401a18 <__libc_fini_array+0x30>)
  4019ee:	1b64      	subs	r4, r4, r5
  4019f0:	10a4      	asrs	r4, r4, #2
  4019f2:	d00a      	beq.n	401a0a <__libc_fini_array+0x22>
  4019f4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4019f8:	3b01      	subs	r3, #1
  4019fa:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4019fe:	3c01      	subs	r4, #1
  401a00:	f855 3904 	ldr.w	r3, [r5], #-4
  401a04:	4798      	blx	r3
  401a06:	2c00      	cmp	r4, #0
  401a08:	d1f9      	bne.n	4019fe <__libc_fini_array+0x16>
  401a0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  401a0e:	f001 b9b3 	b.w	402d78 <_fini>
  401a12:	bf00      	nop
  401a14:	00402d88 	.word	0x00402d88
  401a18:	00402d84 	.word	0x00402d84

00401a1c <_malloc_trim_r>:
  401a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401a1e:	4f24      	ldr	r7, [pc, #144]	; (401ab0 <_malloc_trim_r+0x94>)
  401a20:	460c      	mov	r4, r1
  401a22:	4606      	mov	r6, r0
  401a24:	f000 fc48 	bl	4022b8 <__malloc_lock>
  401a28:	68bb      	ldr	r3, [r7, #8]
  401a2a:	685d      	ldr	r5, [r3, #4]
  401a2c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  401a30:	310f      	adds	r1, #15
  401a32:	f025 0503 	bic.w	r5, r5, #3
  401a36:	4429      	add	r1, r5
  401a38:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  401a3c:	f021 010f 	bic.w	r1, r1, #15
  401a40:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  401a44:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  401a48:	db07      	blt.n	401a5a <_malloc_trim_r+0x3e>
  401a4a:	2100      	movs	r1, #0
  401a4c:	4630      	mov	r0, r6
  401a4e:	f000 fc3f 	bl	4022d0 <_sbrk_r>
  401a52:	68bb      	ldr	r3, [r7, #8]
  401a54:	442b      	add	r3, r5
  401a56:	4298      	cmp	r0, r3
  401a58:	d004      	beq.n	401a64 <_malloc_trim_r+0x48>
  401a5a:	4630      	mov	r0, r6
  401a5c:	f000 fc32 	bl	4022c4 <__malloc_unlock>
  401a60:	2000      	movs	r0, #0
  401a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401a64:	4261      	negs	r1, r4
  401a66:	4630      	mov	r0, r6
  401a68:	f000 fc32 	bl	4022d0 <_sbrk_r>
  401a6c:	3001      	adds	r0, #1
  401a6e:	d00d      	beq.n	401a8c <_malloc_trim_r+0x70>
  401a70:	4b10      	ldr	r3, [pc, #64]	; (401ab4 <_malloc_trim_r+0x98>)
  401a72:	68ba      	ldr	r2, [r7, #8]
  401a74:	6819      	ldr	r1, [r3, #0]
  401a76:	1b2d      	subs	r5, r5, r4
  401a78:	f045 0501 	orr.w	r5, r5, #1
  401a7c:	4630      	mov	r0, r6
  401a7e:	1b09      	subs	r1, r1, r4
  401a80:	6055      	str	r5, [r2, #4]
  401a82:	6019      	str	r1, [r3, #0]
  401a84:	f000 fc1e 	bl	4022c4 <__malloc_unlock>
  401a88:	2001      	movs	r0, #1
  401a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401a8c:	2100      	movs	r1, #0
  401a8e:	4630      	mov	r0, r6
  401a90:	f000 fc1e 	bl	4022d0 <_sbrk_r>
  401a94:	68ba      	ldr	r2, [r7, #8]
  401a96:	1a83      	subs	r3, r0, r2
  401a98:	2b0f      	cmp	r3, #15
  401a9a:	ddde      	ble.n	401a5a <_malloc_trim_r+0x3e>
  401a9c:	4c06      	ldr	r4, [pc, #24]	; (401ab8 <_malloc_trim_r+0x9c>)
  401a9e:	4905      	ldr	r1, [pc, #20]	; (401ab4 <_malloc_trim_r+0x98>)
  401aa0:	6824      	ldr	r4, [r4, #0]
  401aa2:	f043 0301 	orr.w	r3, r3, #1
  401aa6:	1b00      	subs	r0, r0, r4
  401aa8:	6053      	str	r3, [r2, #4]
  401aaa:	6008      	str	r0, [r1, #0]
  401aac:	e7d5      	b.n	401a5a <_malloc_trim_r+0x3e>
  401aae:	bf00      	nop
  401ab0:	2000044c 	.word	0x2000044c
  401ab4:	20000c40 	.word	0x20000c40
  401ab8:	20000854 	.word	0x20000854

00401abc <_free_r>:
  401abc:	2900      	cmp	r1, #0
  401abe:	d044      	beq.n	401b4a <_free_r+0x8e>
  401ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401ac4:	460d      	mov	r5, r1
  401ac6:	4680      	mov	r8, r0
  401ac8:	f000 fbf6 	bl	4022b8 <__malloc_lock>
  401acc:	f855 7c04 	ldr.w	r7, [r5, #-4]
  401ad0:	4969      	ldr	r1, [pc, #420]	; (401c78 <_free_r+0x1bc>)
  401ad2:	f027 0301 	bic.w	r3, r7, #1
  401ad6:	f1a5 0408 	sub.w	r4, r5, #8
  401ada:	18e2      	adds	r2, r4, r3
  401adc:	688e      	ldr	r6, [r1, #8]
  401ade:	6850      	ldr	r0, [r2, #4]
  401ae0:	42b2      	cmp	r2, r6
  401ae2:	f020 0003 	bic.w	r0, r0, #3
  401ae6:	d05e      	beq.n	401ba6 <_free_r+0xea>
  401ae8:	07fe      	lsls	r6, r7, #31
  401aea:	6050      	str	r0, [r2, #4]
  401aec:	d40b      	bmi.n	401b06 <_free_r+0x4a>
  401aee:	f855 7c08 	ldr.w	r7, [r5, #-8]
  401af2:	1be4      	subs	r4, r4, r7
  401af4:	f101 0e08 	add.w	lr, r1, #8
  401af8:	68a5      	ldr	r5, [r4, #8]
  401afa:	4575      	cmp	r5, lr
  401afc:	443b      	add	r3, r7
  401afe:	d06d      	beq.n	401bdc <_free_r+0x120>
  401b00:	68e7      	ldr	r7, [r4, #12]
  401b02:	60ef      	str	r7, [r5, #12]
  401b04:	60bd      	str	r5, [r7, #8]
  401b06:	1815      	adds	r5, r2, r0
  401b08:	686d      	ldr	r5, [r5, #4]
  401b0a:	07ed      	lsls	r5, r5, #31
  401b0c:	d53e      	bpl.n	401b8c <_free_r+0xd0>
  401b0e:	f043 0201 	orr.w	r2, r3, #1
  401b12:	6062      	str	r2, [r4, #4]
  401b14:	50e3      	str	r3, [r4, r3]
  401b16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  401b1a:	d217      	bcs.n	401b4c <_free_r+0x90>
  401b1c:	08db      	lsrs	r3, r3, #3
  401b1e:	1c58      	adds	r0, r3, #1
  401b20:	109a      	asrs	r2, r3, #2
  401b22:	684d      	ldr	r5, [r1, #4]
  401b24:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  401b28:	60a7      	str	r7, [r4, #8]
  401b2a:	2301      	movs	r3, #1
  401b2c:	4093      	lsls	r3, r2
  401b2e:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  401b32:	432b      	orrs	r3, r5
  401b34:	3a08      	subs	r2, #8
  401b36:	60e2      	str	r2, [r4, #12]
  401b38:	604b      	str	r3, [r1, #4]
  401b3a:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  401b3e:	60fc      	str	r4, [r7, #12]
  401b40:	4640      	mov	r0, r8
  401b42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  401b46:	f000 bbbd 	b.w	4022c4 <__malloc_unlock>
  401b4a:	4770      	bx	lr
  401b4c:	0a5a      	lsrs	r2, r3, #9
  401b4e:	2a04      	cmp	r2, #4
  401b50:	d852      	bhi.n	401bf8 <_free_r+0x13c>
  401b52:	099a      	lsrs	r2, r3, #6
  401b54:	f102 0739 	add.w	r7, r2, #57	; 0x39
  401b58:	00ff      	lsls	r7, r7, #3
  401b5a:	f102 0538 	add.w	r5, r2, #56	; 0x38
  401b5e:	19c8      	adds	r0, r1, r7
  401b60:	59ca      	ldr	r2, [r1, r7]
  401b62:	3808      	subs	r0, #8
  401b64:	4290      	cmp	r0, r2
  401b66:	d04f      	beq.n	401c08 <_free_r+0x14c>
  401b68:	6851      	ldr	r1, [r2, #4]
  401b6a:	f021 0103 	bic.w	r1, r1, #3
  401b6e:	428b      	cmp	r3, r1
  401b70:	d232      	bcs.n	401bd8 <_free_r+0x11c>
  401b72:	6892      	ldr	r2, [r2, #8]
  401b74:	4290      	cmp	r0, r2
  401b76:	d1f7      	bne.n	401b68 <_free_r+0xac>
  401b78:	68c3      	ldr	r3, [r0, #12]
  401b7a:	60a0      	str	r0, [r4, #8]
  401b7c:	60e3      	str	r3, [r4, #12]
  401b7e:	609c      	str	r4, [r3, #8]
  401b80:	60c4      	str	r4, [r0, #12]
  401b82:	4640      	mov	r0, r8
  401b84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  401b88:	f000 bb9c 	b.w	4022c4 <__malloc_unlock>
  401b8c:	6895      	ldr	r5, [r2, #8]
  401b8e:	4f3b      	ldr	r7, [pc, #236]	; (401c7c <_free_r+0x1c0>)
  401b90:	42bd      	cmp	r5, r7
  401b92:	4403      	add	r3, r0
  401b94:	d040      	beq.n	401c18 <_free_r+0x15c>
  401b96:	68d0      	ldr	r0, [r2, #12]
  401b98:	60e8      	str	r0, [r5, #12]
  401b9a:	f043 0201 	orr.w	r2, r3, #1
  401b9e:	6085      	str	r5, [r0, #8]
  401ba0:	6062      	str	r2, [r4, #4]
  401ba2:	50e3      	str	r3, [r4, r3]
  401ba4:	e7b7      	b.n	401b16 <_free_r+0x5a>
  401ba6:	07ff      	lsls	r7, r7, #31
  401ba8:	4403      	add	r3, r0
  401baa:	d407      	bmi.n	401bbc <_free_r+0x100>
  401bac:	f855 2c08 	ldr.w	r2, [r5, #-8]
  401bb0:	1aa4      	subs	r4, r4, r2
  401bb2:	4413      	add	r3, r2
  401bb4:	68a0      	ldr	r0, [r4, #8]
  401bb6:	68e2      	ldr	r2, [r4, #12]
  401bb8:	60c2      	str	r2, [r0, #12]
  401bba:	6090      	str	r0, [r2, #8]
  401bbc:	4a30      	ldr	r2, [pc, #192]	; (401c80 <_free_r+0x1c4>)
  401bbe:	6812      	ldr	r2, [r2, #0]
  401bc0:	f043 0001 	orr.w	r0, r3, #1
  401bc4:	4293      	cmp	r3, r2
  401bc6:	6060      	str	r0, [r4, #4]
  401bc8:	608c      	str	r4, [r1, #8]
  401bca:	d3b9      	bcc.n	401b40 <_free_r+0x84>
  401bcc:	4b2d      	ldr	r3, [pc, #180]	; (401c84 <_free_r+0x1c8>)
  401bce:	4640      	mov	r0, r8
  401bd0:	6819      	ldr	r1, [r3, #0]
  401bd2:	f7ff ff23 	bl	401a1c <_malloc_trim_r>
  401bd6:	e7b3      	b.n	401b40 <_free_r+0x84>
  401bd8:	4610      	mov	r0, r2
  401bda:	e7cd      	b.n	401b78 <_free_r+0xbc>
  401bdc:	1811      	adds	r1, r2, r0
  401bde:	6849      	ldr	r1, [r1, #4]
  401be0:	07c9      	lsls	r1, r1, #31
  401be2:	d444      	bmi.n	401c6e <_free_r+0x1b2>
  401be4:	6891      	ldr	r1, [r2, #8]
  401be6:	68d2      	ldr	r2, [r2, #12]
  401be8:	60ca      	str	r2, [r1, #12]
  401bea:	4403      	add	r3, r0
  401bec:	f043 0001 	orr.w	r0, r3, #1
  401bf0:	6091      	str	r1, [r2, #8]
  401bf2:	6060      	str	r0, [r4, #4]
  401bf4:	50e3      	str	r3, [r4, r3]
  401bf6:	e7a3      	b.n	401b40 <_free_r+0x84>
  401bf8:	2a14      	cmp	r2, #20
  401bfa:	d816      	bhi.n	401c2a <_free_r+0x16e>
  401bfc:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  401c00:	00ff      	lsls	r7, r7, #3
  401c02:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  401c06:	e7aa      	b.n	401b5e <_free_r+0xa2>
  401c08:	10aa      	asrs	r2, r5, #2
  401c0a:	2301      	movs	r3, #1
  401c0c:	684d      	ldr	r5, [r1, #4]
  401c0e:	4093      	lsls	r3, r2
  401c10:	432b      	orrs	r3, r5
  401c12:	604b      	str	r3, [r1, #4]
  401c14:	4603      	mov	r3, r0
  401c16:	e7b0      	b.n	401b7a <_free_r+0xbe>
  401c18:	f043 0201 	orr.w	r2, r3, #1
  401c1c:	614c      	str	r4, [r1, #20]
  401c1e:	610c      	str	r4, [r1, #16]
  401c20:	60e5      	str	r5, [r4, #12]
  401c22:	60a5      	str	r5, [r4, #8]
  401c24:	6062      	str	r2, [r4, #4]
  401c26:	50e3      	str	r3, [r4, r3]
  401c28:	e78a      	b.n	401b40 <_free_r+0x84>
  401c2a:	2a54      	cmp	r2, #84	; 0x54
  401c2c:	d806      	bhi.n	401c3c <_free_r+0x180>
  401c2e:	0b1a      	lsrs	r2, r3, #12
  401c30:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  401c34:	00ff      	lsls	r7, r7, #3
  401c36:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  401c3a:	e790      	b.n	401b5e <_free_r+0xa2>
  401c3c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  401c40:	d806      	bhi.n	401c50 <_free_r+0x194>
  401c42:	0bda      	lsrs	r2, r3, #15
  401c44:	f102 0778 	add.w	r7, r2, #120	; 0x78
  401c48:	00ff      	lsls	r7, r7, #3
  401c4a:	f102 0577 	add.w	r5, r2, #119	; 0x77
  401c4e:	e786      	b.n	401b5e <_free_r+0xa2>
  401c50:	f240 5054 	movw	r0, #1364	; 0x554
  401c54:	4282      	cmp	r2, r0
  401c56:	d806      	bhi.n	401c66 <_free_r+0x1aa>
  401c58:	0c9a      	lsrs	r2, r3, #18
  401c5a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  401c5e:	00ff      	lsls	r7, r7, #3
  401c60:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  401c64:	e77b      	b.n	401b5e <_free_r+0xa2>
  401c66:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  401c6a:	257e      	movs	r5, #126	; 0x7e
  401c6c:	e777      	b.n	401b5e <_free_r+0xa2>
  401c6e:	f043 0101 	orr.w	r1, r3, #1
  401c72:	6061      	str	r1, [r4, #4]
  401c74:	6013      	str	r3, [r2, #0]
  401c76:	e763      	b.n	401b40 <_free_r+0x84>
  401c78:	2000044c 	.word	0x2000044c
  401c7c:	20000454 	.word	0x20000454
  401c80:	20000858 	.word	0x20000858
  401c84:	20000c70 	.word	0x20000c70

00401c88 <_fwalk_reent>:
  401c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401c8c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  401c90:	d01f      	beq.n	401cd2 <_fwalk_reent+0x4a>
  401c92:	4688      	mov	r8, r1
  401c94:	4606      	mov	r6, r0
  401c96:	f04f 0900 	mov.w	r9, #0
  401c9a:	687d      	ldr	r5, [r7, #4]
  401c9c:	68bc      	ldr	r4, [r7, #8]
  401c9e:	3d01      	subs	r5, #1
  401ca0:	d411      	bmi.n	401cc6 <_fwalk_reent+0x3e>
  401ca2:	89a3      	ldrh	r3, [r4, #12]
  401ca4:	2b01      	cmp	r3, #1
  401ca6:	f105 35ff 	add.w	r5, r5, #4294967295
  401caa:	d908      	bls.n	401cbe <_fwalk_reent+0x36>
  401cac:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  401cb0:	3301      	adds	r3, #1
  401cb2:	4621      	mov	r1, r4
  401cb4:	4630      	mov	r0, r6
  401cb6:	d002      	beq.n	401cbe <_fwalk_reent+0x36>
  401cb8:	47c0      	blx	r8
  401cba:	ea49 0900 	orr.w	r9, r9, r0
  401cbe:	1c6b      	adds	r3, r5, #1
  401cc0:	f104 0468 	add.w	r4, r4, #104	; 0x68
  401cc4:	d1ed      	bne.n	401ca2 <_fwalk_reent+0x1a>
  401cc6:	683f      	ldr	r7, [r7, #0]
  401cc8:	2f00      	cmp	r7, #0
  401cca:	d1e6      	bne.n	401c9a <_fwalk_reent+0x12>
  401ccc:	4648      	mov	r0, r9
  401cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401cd2:	46b9      	mov	r9, r7
  401cd4:	4648      	mov	r0, r9
  401cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401cda:	bf00      	nop

00401cdc <__retarget_lock_init_recursive>:
  401cdc:	4770      	bx	lr
  401cde:	bf00      	nop

00401ce0 <__retarget_lock_close_recursive>:
  401ce0:	4770      	bx	lr
  401ce2:	bf00      	nop

00401ce4 <__retarget_lock_acquire_recursive>:
  401ce4:	4770      	bx	lr
  401ce6:	bf00      	nop

00401ce8 <__retarget_lock_release_recursive>:
  401ce8:	4770      	bx	lr
  401cea:	bf00      	nop

00401cec <__swhatbuf_r>:
  401cec:	b570      	push	{r4, r5, r6, lr}
  401cee:	460c      	mov	r4, r1
  401cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401cf4:	2900      	cmp	r1, #0
  401cf6:	b090      	sub	sp, #64	; 0x40
  401cf8:	4615      	mov	r5, r2
  401cfa:	461e      	mov	r6, r3
  401cfc:	db14      	blt.n	401d28 <__swhatbuf_r+0x3c>
  401cfe:	aa01      	add	r2, sp, #4
  401d00:	f000 fc28 	bl	402554 <_fstat_r>
  401d04:	2800      	cmp	r0, #0
  401d06:	db0f      	blt.n	401d28 <__swhatbuf_r+0x3c>
  401d08:	9a02      	ldr	r2, [sp, #8]
  401d0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  401d0e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  401d12:	fab2 f282 	clz	r2, r2
  401d16:	0952      	lsrs	r2, r2, #5
  401d18:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401d1c:	f44f 6000 	mov.w	r0, #2048	; 0x800
  401d20:	6032      	str	r2, [r6, #0]
  401d22:	602b      	str	r3, [r5, #0]
  401d24:	b010      	add	sp, #64	; 0x40
  401d26:	bd70      	pop	{r4, r5, r6, pc}
  401d28:	89a2      	ldrh	r2, [r4, #12]
  401d2a:	2300      	movs	r3, #0
  401d2c:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  401d30:	6033      	str	r3, [r6, #0]
  401d32:	d004      	beq.n	401d3e <__swhatbuf_r+0x52>
  401d34:	2240      	movs	r2, #64	; 0x40
  401d36:	4618      	mov	r0, r3
  401d38:	602a      	str	r2, [r5, #0]
  401d3a:	b010      	add	sp, #64	; 0x40
  401d3c:	bd70      	pop	{r4, r5, r6, pc}
  401d3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401d42:	602b      	str	r3, [r5, #0]
  401d44:	b010      	add	sp, #64	; 0x40
  401d46:	bd70      	pop	{r4, r5, r6, pc}

00401d48 <malloc>:
  401d48:	4b02      	ldr	r3, [pc, #8]	; (401d54 <malloc+0xc>)
  401d4a:	4601      	mov	r1, r0
  401d4c:	6818      	ldr	r0, [r3, #0]
  401d4e:	f000 b803 	b.w	401d58 <_malloc_r>
  401d52:	bf00      	nop
  401d54:	20000018 	.word	0x20000018

00401d58 <_malloc_r>:
  401d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401d5c:	f101 060b 	add.w	r6, r1, #11
  401d60:	2e16      	cmp	r6, #22
  401d62:	b083      	sub	sp, #12
  401d64:	4605      	mov	r5, r0
  401d66:	f240 809e 	bls.w	401ea6 <_malloc_r+0x14e>
  401d6a:	f036 0607 	bics.w	r6, r6, #7
  401d6e:	f100 80bd 	bmi.w	401eec <_malloc_r+0x194>
  401d72:	42b1      	cmp	r1, r6
  401d74:	f200 80ba 	bhi.w	401eec <_malloc_r+0x194>
  401d78:	f000 fa9e 	bl	4022b8 <__malloc_lock>
  401d7c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  401d80:	f0c0 8293 	bcc.w	4022aa <_malloc_r+0x552>
  401d84:	0a73      	lsrs	r3, r6, #9
  401d86:	f000 80b8 	beq.w	401efa <_malloc_r+0x1a2>
  401d8a:	2b04      	cmp	r3, #4
  401d8c:	f200 8179 	bhi.w	402082 <_malloc_r+0x32a>
  401d90:	09b3      	lsrs	r3, r6, #6
  401d92:	f103 0039 	add.w	r0, r3, #57	; 0x39
  401d96:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  401d9a:	00c3      	lsls	r3, r0, #3
  401d9c:	4fbf      	ldr	r7, [pc, #764]	; (40209c <_malloc_r+0x344>)
  401d9e:	443b      	add	r3, r7
  401da0:	f1a3 0108 	sub.w	r1, r3, #8
  401da4:	685c      	ldr	r4, [r3, #4]
  401da6:	42a1      	cmp	r1, r4
  401da8:	d106      	bne.n	401db8 <_malloc_r+0x60>
  401daa:	e00c      	b.n	401dc6 <_malloc_r+0x6e>
  401dac:	2a00      	cmp	r2, #0
  401dae:	f280 80aa 	bge.w	401f06 <_malloc_r+0x1ae>
  401db2:	68e4      	ldr	r4, [r4, #12]
  401db4:	42a1      	cmp	r1, r4
  401db6:	d006      	beq.n	401dc6 <_malloc_r+0x6e>
  401db8:	6863      	ldr	r3, [r4, #4]
  401dba:	f023 0303 	bic.w	r3, r3, #3
  401dbe:	1b9a      	subs	r2, r3, r6
  401dc0:	2a0f      	cmp	r2, #15
  401dc2:	ddf3      	ble.n	401dac <_malloc_r+0x54>
  401dc4:	4670      	mov	r0, lr
  401dc6:	693c      	ldr	r4, [r7, #16]
  401dc8:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4020b0 <_malloc_r+0x358>
  401dcc:	4574      	cmp	r4, lr
  401dce:	f000 81ab 	beq.w	402128 <_malloc_r+0x3d0>
  401dd2:	6863      	ldr	r3, [r4, #4]
  401dd4:	f023 0303 	bic.w	r3, r3, #3
  401dd8:	1b9a      	subs	r2, r3, r6
  401dda:	2a0f      	cmp	r2, #15
  401ddc:	f300 8190 	bgt.w	402100 <_malloc_r+0x3a8>
  401de0:	2a00      	cmp	r2, #0
  401de2:	f8c7 e014 	str.w	lr, [r7, #20]
  401de6:	f8c7 e010 	str.w	lr, [r7, #16]
  401dea:	f280 809d 	bge.w	401f28 <_malloc_r+0x1d0>
  401dee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  401df2:	f080 8161 	bcs.w	4020b8 <_malloc_r+0x360>
  401df6:	08db      	lsrs	r3, r3, #3
  401df8:	f103 0c01 	add.w	ip, r3, #1
  401dfc:	1099      	asrs	r1, r3, #2
  401dfe:	687a      	ldr	r2, [r7, #4]
  401e00:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  401e04:	f8c4 8008 	str.w	r8, [r4, #8]
  401e08:	2301      	movs	r3, #1
  401e0a:	408b      	lsls	r3, r1
  401e0c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  401e10:	4313      	orrs	r3, r2
  401e12:	3908      	subs	r1, #8
  401e14:	60e1      	str	r1, [r4, #12]
  401e16:	607b      	str	r3, [r7, #4]
  401e18:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  401e1c:	f8c8 400c 	str.w	r4, [r8, #12]
  401e20:	1082      	asrs	r2, r0, #2
  401e22:	2401      	movs	r4, #1
  401e24:	4094      	lsls	r4, r2
  401e26:	429c      	cmp	r4, r3
  401e28:	f200 808b 	bhi.w	401f42 <_malloc_r+0x1ea>
  401e2c:	421c      	tst	r4, r3
  401e2e:	d106      	bne.n	401e3e <_malloc_r+0xe6>
  401e30:	f020 0003 	bic.w	r0, r0, #3
  401e34:	0064      	lsls	r4, r4, #1
  401e36:	421c      	tst	r4, r3
  401e38:	f100 0004 	add.w	r0, r0, #4
  401e3c:	d0fa      	beq.n	401e34 <_malloc_r+0xdc>
  401e3e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  401e42:	46cc      	mov	ip, r9
  401e44:	4680      	mov	r8, r0
  401e46:	f8dc 300c 	ldr.w	r3, [ip, #12]
  401e4a:	459c      	cmp	ip, r3
  401e4c:	d107      	bne.n	401e5e <_malloc_r+0x106>
  401e4e:	e16d      	b.n	40212c <_malloc_r+0x3d4>
  401e50:	2a00      	cmp	r2, #0
  401e52:	f280 817b 	bge.w	40214c <_malloc_r+0x3f4>
  401e56:	68db      	ldr	r3, [r3, #12]
  401e58:	459c      	cmp	ip, r3
  401e5a:	f000 8167 	beq.w	40212c <_malloc_r+0x3d4>
  401e5e:	6859      	ldr	r1, [r3, #4]
  401e60:	f021 0103 	bic.w	r1, r1, #3
  401e64:	1b8a      	subs	r2, r1, r6
  401e66:	2a0f      	cmp	r2, #15
  401e68:	ddf2      	ble.n	401e50 <_malloc_r+0xf8>
  401e6a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  401e6e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  401e72:	9300      	str	r3, [sp, #0]
  401e74:	199c      	adds	r4, r3, r6
  401e76:	4628      	mov	r0, r5
  401e78:	f046 0601 	orr.w	r6, r6, #1
  401e7c:	f042 0501 	orr.w	r5, r2, #1
  401e80:	605e      	str	r6, [r3, #4]
  401e82:	f8c8 c00c 	str.w	ip, [r8, #12]
  401e86:	f8cc 8008 	str.w	r8, [ip, #8]
  401e8a:	617c      	str	r4, [r7, #20]
  401e8c:	613c      	str	r4, [r7, #16]
  401e8e:	f8c4 e00c 	str.w	lr, [r4, #12]
  401e92:	f8c4 e008 	str.w	lr, [r4, #8]
  401e96:	6065      	str	r5, [r4, #4]
  401e98:	505a      	str	r2, [r3, r1]
  401e9a:	f000 fa13 	bl	4022c4 <__malloc_unlock>
  401e9e:	9b00      	ldr	r3, [sp, #0]
  401ea0:	f103 0408 	add.w	r4, r3, #8
  401ea4:	e01e      	b.n	401ee4 <_malloc_r+0x18c>
  401ea6:	2910      	cmp	r1, #16
  401ea8:	d820      	bhi.n	401eec <_malloc_r+0x194>
  401eaa:	f000 fa05 	bl	4022b8 <__malloc_lock>
  401eae:	2610      	movs	r6, #16
  401eb0:	2318      	movs	r3, #24
  401eb2:	2002      	movs	r0, #2
  401eb4:	4f79      	ldr	r7, [pc, #484]	; (40209c <_malloc_r+0x344>)
  401eb6:	443b      	add	r3, r7
  401eb8:	f1a3 0208 	sub.w	r2, r3, #8
  401ebc:	685c      	ldr	r4, [r3, #4]
  401ebe:	4294      	cmp	r4, r2
  401ec0:	f000 813d 	beq.w	40213e <_malloc_r+0x3e6>
  401ec4:	6863      	ldr	r3, [r4, #4]
  401ec6:	68e1      	ldr	r1, [r4, #12]
  401ec8:	68a6      	ldr	r6, [r4, #8]
  401eca:	f023 0303 	bic.w	r3, r3, #3
  401ece:	4423      	add	r3, r4
  401ed0:	4628      	mov	r0, r5
  401ed2:	685a      	ldr	r2, [r3, #4]
  401ed4:	60f1      	str	r1, [r6, #12]
  401ed6:	f042 0201 	orr.w	r2, r2, #1
  401eda:	608e      	str	r6, [r1, #8]
  401edc:	605a      	str	r2, [r3, #4]
  401ede:	f000 f9f1 	bl	4022c4 <__malloc_unlock>
  401ee2:	3408      	adds	r4, #8
  401ee4:	4620      	mov	r0, r4
  401ee6:	b003      	add	sp, #12
  401ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401eec:	2400      	movs	r4, #0
  401eee:	230c      	movs	r3, #12
  401ef0:	4620      	mov	r0, r4
  401ef2:	602b      	str	r3, [r5, #0]
  401ef4:	b003      	add	sp, #12
  401ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401efa:	2040      	movs	r0, #64	; 0x40
  401efc:	f44f 7300 	mov.w	r3, #512	; 0x200
  401f00:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  401f04:	e74a      	b.n	401d9c <_malloc_r+0x44>
  401f06:	4423      	add	r3, r4
  401f08:	68e1      	ldr	r1, [r4, #12]
  401f0a:	685a      	ldr	r2, [r3, #4]
  401f0c:	68a6      	ldr	r6, [r4, #8]
  401f0e:	f042 0201 	orr.w	r2, r2, #1
  401f12:	60f1      	str	r1, [r6, #12]
  401f14:	4628      	mov	r0, r5
  401f16:	608e      	str	r6, [r1, #8]
  401f18:	605a      	str	r2, [r3, #4]
  401f1a:	f000 f9d3 	bl	4022c4 <__malloc_unlock>
  401f1e:	3408      	adds	r4, #8
  401f20:	4620      	mov	r0, r4
  401f22:	b003      	add	sp, #12
  401f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401f28:	4423      	add	r3, r4
  401f2a:	4628      	mov	r0, r5
  401f2c:	685a      	ldr	r2, [r3, #4]
  401f2e:	f042 0201 	orr.w	r2, r2, #1
  401f32:	605a      	str	r2, [r3, #4]
  401f34:	f000 f9c6 	bl	4022c4 <__malloc_unlock>
  401f38:	3408      	adds	r4, #8
  401f3a:	4620      	mov	r0, r4
  401f3c:	b003      	add	sp, #12
  401f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401f42:	68bc      	ldr	r4, [r7, #8]
  401f44:	6863      	ldr	r3, [r4, #4]
  401f46:	f023 0803 	bic.w	r8, r3, #3
  401f4a:	45b0      	cmp	r8, r6
  401f4c:	d304      	bcc.n	401f58 <_malloc_r+0x200>
  401f4e:	eba8 0306 	sub.w	r3, r8, r6
  401f52:	2b0f      	cmp	r3, #15
  401f54:	f300 8085 	bgt.w	402062 <_malloc_r+0x30a>
  401f58:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4020b4 <_malloc_r+0x35c>
  401f5c:	4b50      	ldr	r3, [pc, #320]	; (4020a0 <_malloc_r+0x348>)
  401f5e:	f8d9 2000 	ldr.w	r2, [r9]
  401f62:	681b      	ldr	r3, [r3, #0]
  401f64:	3201      	adds	r2, #1
  401f66:	4433      	add	r3, r6
  401f68:	eb04 0a08 	add.w	sl, r4, r8
  401f6c:	f000 8155 	beq.w	40221a <_malloc_r+0x4c2>
  401f70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  401f74:	330f      	adds	r3, #15
  401f76:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  401f7a:	f02b 0b0f 	bic.w	fp, fp, #15
  401f7e:	4659      	mov	r1, fp
  401f80:	4628      	mov	r0, r5
  401f82:	f000 f9a5 	bl	4022d0 <_sbrk_r>
  401f86:	1c41      	adds	r1, r0, #1
  401f88:	4602      	mov	r2, r0
  401f8a:	f000 80fc 	beq.w	402186 <_malloc_r+0x42e>
  401f8e:	4582      	cmp	sl, r0
  401f90:	f200 80f7 	bhi.w	402182 <_malloc_r+0x42a>
  401f94:	4b43      	ldr	r3, [pc, #268]	; (4020a4 <_malloc_r+0x34c>)
  401f96:	6819      	ldr	r1, [r3, #0]
  401f98:	4459      	add	r1, fp
  401f9a:	6019      	str	r1, [r3, #0]
  401f9c:	f000 814d 	beq.w	40223a <_malloc_r+0x4e2>
  401fa0:	f8d9 0000 	ldr.w	r0, [r9]
  401fa4:	3001      	adds	r0, #1
  401fa6:	bf1b      	ittet	ne
  401fa8:	eba2 0a0a 	subne.w	sl, r2, sl
  401fac:	4451      	addne	r1, sl
  401fae:	f8c9 2000 	streq.w	r2, [r9]
  401fb2:	6019      	strne	r1, [r3, #0]
  401fb4:	f012 0107 	ands.w	r1, r2, #7
  401fb8:	f000 8115 	beq.w	4021e6 <_malloc_r+0x48e>
  401fbc:	f1c1 0008 	rsb	r0, r1, #8
  401fc0:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  401fc4:	4402      	add	r2, r0
  401fc6:	3108      	adds	r1, #8
  401fc8:	eb02 090b 	add.w	r9, r2, fp
  401fcc:	f3c9 090b 	ubfx	r9, r9, #0, #12
  401fd0:	eba1 0909 	sub.w	r9, r1, r9
  401fd4:	4649      	mov	r1, r9
  401fd6:	4628      	mov	r0, r5
  401fd8:	9301      	str	r3, [sp, #4]
  401fda:	9200      	str	r2, [sp, #0]
  401fdc:	f000 f978 	bl	4022d0 <_sbrk_r>
  401fe0:	1c43      	adds	r3, r0, #1
  401fe2:	e89d 000c 	ldmia.w	sp, {r2, r3}
  401fe6:	f000 8143 	beq.w	402270 <_malloc_r+0x518>
  401fea:	1a80      	subs	r0, r0, r2
  401fec:	4448      	add	r0, r9
  401fee:	f040 0001 	orr.w	r0, r0, #1
  401ff2:	6819      	ldr	r1, [r3, #0]
  401ff4:	60ba      	str	r2, [r7, #8]
  401ff6:	4449      	add	r1, r9
  401ff8:	42bc      	cmp	r4, r7
  401ffa:	6050      	str	r0, [r2, #4]
  401ffc:	6019      	str	r1, [r3, #0]
  401ffe:	d017      	beq.n	402030 <_malloc_r+0x2d8>
  402000:	f1b8 0f0f 	cmp.w	r8, #15
  402004:	f240 80fb 	bls.w	4021fe <_malloc_r+0x4a6>
  402008:	6860      	ldr	r0, [r4, #4]
  40200a:	f1a8 020c 	sub.w	r2, r8, #12
  40200e:	f022 0207 	bic.w	r2, r2, #7
  402012:	eb04 0e02 	add.w	lr, r4, r2
  402016:	f000 0001 	and.w	r0, r0, #1
  40201a:	f04f 0c05 	mov.w	ip, #5
  40201e:	4310      	orrs	r0, r2
  402020:	2a0f      	cmp	r2, #15
  402022:	6060      	str	r0, [r4, #4]
  402024:	f8ce c004 	str.w	ip, [lr, #4]
  402028:	f8ce c008 	str.w	ip, [lr, #8]
  40202c:	f200 8117 	bhi.w	40225e <_malloc_r+0x506>
  402030:	4b1d      	ldr	r3, [pc, #116]	; (4020a8 <_malloc_r+0x350>)
  402032:	68bc      	ldr	r4, [r7, #8]
  402034:	681a      	ldr	r2, [r3, #0]
  402036:	4291      	cmp	r1, r2
  402038:	bf88      	it	hi
  40203a:	6019      	strhi	r1, [r3, #0]
  40203c:	4b1b      	ldr	r3, [pc, #108]	; (4020ac <_malloc_r+0x354>)
  40203e:	681a      	ldr	r2, [r3, #0]
  402040:	4291      	cmp	r1, r2
  402042:	6862      	ldr	r2, [r4, #4]
  402044:	bf88      	it	hi
  402046:	6019      	strhi	r1, [r3, #0]
  402048:	f022 0203 	bic.w	r2, r2, #3
  40204c:	4296      	cmp	r6, r2
  40204e:	eba2 0306 	sub.w	r3, r2, r6
  402052:	d801      	bhi.n	402058 <_malloc_r+0x300>
  402054:	2b0f      	cmp	r3, #15
  402056:	dc04      	bgt.n	402062 <_malloc_r+0x30a>
  402058:	4628      	mov	r0, r5
  40205a:	f000 f933 	bl	4022c4 <__malloc_unlock>
  40205e:	2400      	movs	r4, #0
  402060:	e740      	b.n	401ee4 <_malloc_r+0x18c>
  402062:	19a2      	adds	r2, r4, r6
  402064:	f043 0301 	orr.w	r3, r3, #1
  402068:	f046 0601 	orr.w	r6, r6, #1
  40206c:	6066      	str	r6, [r4, #4]
  40206e:	4628      	mov	r0, r5
  402070:	60ba      	str	r2, [r7, #8]
  402072:	6053      	str	r3, [r2, #4]
  402074:	f000 f926 	bl	4022c4 <__malloc_unlock>
  402078:	3408      	adds	r4, #8
  40207a:	4620      	mov	r0, r4
  40207c:	b003      	add	sp, #12
  40207e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402082:	2b14      	cmp	r3, #20
  402084:	d971      	bls.n	40216a <_malloc_r+0x412>
  402086:	2b54      	cmp	r3, #84	; 0x54
  402088:	f200 80a3 	bhi.w	4021d2 <_malloc_r+0x47a>
  40208c:	0b33      	lsrs	r3, r6, #12
  40208e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  402092:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  402096:	00c3      	lsls	r3, r0, #3
  402098:	e680      	b.n	401d9c <_malloc_r+0x44>
  40209a:	bf00      	nop
  40209c:	2000044c 	.word	0x2000044c
  4020a0:	20000c70 	.word	0x20000c70
  4020a4:	20000c40 	.word	0x20000c40
  4020a8:	20000c68 	.word	0x20000c68
  4020ac:	20000c6c 	.word	0x20000c6c
  4020b0:	20000454 	.word	0x20000454
  4020b4:	20000854 	.word	0x20000854
  4020b8:	0a5a      	lsrs	r2, r3, #9
  4020ba:	2a04      	cmp	r2, #4
  4020bc:	d95b      	bls.n	402176 <_malloc_r+0x41e>
  4020be:	2a14      	cmp	r2, #20
  4020c0:	f200 80ae 	bhi.w	402220 <_malloc_r+0x4c8>
  4020c4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4020c8:	00c9      	lsls	r1, r1, #3
  4020ca:	325b      	adds	r2, #91	; 0x5b
  4020cc:	eb07 0c01 	add.w	ip, r7, r1
  4020d0:	5879      	ldr	r1, [r7, r1]
  4020d2:	f1ac 0c08 	sub.w	ip, ip, #8
  4020d6:	458c      	cmp	ip, r1
  4020d8:	f000 8088 	beq.w	4021ec <_malloc_r+0x494>
  4020dc:	684a      	ldr	r2, [r1, #4]
  4020de:	f022 0203 	bic.w	r2, r2, #3
  4020e2:	4293      	cmp	r3, r2
  4020e4:	d273      	bcs.n	4021ce <_malloc_r+0x476>
  4020e6:	6889      	ldr	r1, [r1, #8]
  4020e8:	458c      	cmp	ip, r1
  4020ea:	d1f7      	bne.n	4020dc <_malloc_r+0x384>
  4020ec:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4020f0:	687b      	ldr	r3, [r7, #4]
  4020f2:	60e2      	str	r2, [r4, #12]
  4020f4:	f8c4 c008 	str.w	ip, [r4, #8]
  4020f8:	6094      	str	r4, [r2, #8]
  4020fa:	f8cc 400c 	str.w	r4, [ip, #12]
  4020fe:	e68f      	b.n	401e20 <_malloc_r+0xc8>
  402100:	19a1      	adds	r1, r4, r6
  402102:	f046 0c01 	orr.w	ip, r6, #1
  402106:	f042 0601 	orr.w	r6, r2, #1
  40210a:	f8c4 c004 	str.w	ip, [r4, #4]
  40210e:	4628      	mov	r0, r5
  402110:	6179      	str	r1, [r7, #20]
  402112:	6139      	str	r1, [r7, #16]
  402114:	f8c1 e00c 	str.w	lr, [r1, #12]
  402118:	f8c1 e008 	str.w	lr, [r1, #8]
  40211c:	604e      	str	r6, [r1, #4]
  40211e:	50e2      	str	r2, [r4, r3]
  402120:	f000 f8d0 	bl	4022c4 <__malloc_unlock>
  402124:	3408      	adds	r4, #8
  402126:	e6dd      	b.n	401ee4 <_malloc_r+0x18c>
  402128:	687b      	ldr	r3, [r7, #4]
  40212a:	e679      	b.n	401e20 <_malloc_r+0xc8>
  40212c:	f108 0801 	add.w	r8, r8, #1
  402130:	f018 0f03 	tst.w	r8, #3
  402134:	f10c 0c08 	add.w	ip, ip, #8
  402138:	f47f ae85 	bne.w	401e46 <_malloc_r+0xee>
  40213c:	e02d      	b.n	40219a <_malloc_r+0x442>
  40213e:	68dc      	ldr	r4, [r3, #12]
  402140:	42a3      	cmp	r3, r4
  402142:	bf08      	it	eq
  402144:	3002      	addeq	r0, #2
  402146:	f43f ae3e 	beq.w	401dc6 <_malloc_r+0x6e>
  40214a:	e6bb      	b.n	401ec4 <_malloc_r+0x16c>
  40214c:	4419      	add	r1, r3
  40214e:	461c      	mov	r4, r3
  402150:	684a      	ldr	r2, [r1, #4]
  402152:	68db      	ldr	r3, [r3, #12]
  402154:	f854 6f08 	ldr.w	r6, [r4, #8]!
  402158:	f042 0201 	orr.w	r2, r2, #1
  40215c:	604a      	str	r2, [r1, #4]
  40215e:	4628      	mov	r0, r5
  402160:	60f3      	str	r3, [r6, #12]
  402162:	609e      	str	r6, [r3, #8]
  402164:	f000 f8ae 	bl	4022c4 <__malloc_unlock>
  402168:	e6bc      	b.n	401ee4 <_malloc_r+0x18c>
  40216a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40216e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  402172:	00c3      	lsls	r3, r0, #3
  402174:	e612      	b.n	401d9c <_malloc_r+0x44>
  402176:	099a      	lsrs	r2, r3, #6
  402178:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40217c:	00c9      	lsls	r1, r1, #3
  40217e:	3238      	adds	r2, #56	; 0x38
  402180:	e7a4      	b.n	4020cc <_malloc_r+0x374>
  402182:	42bc      	cmp	r4, r7
  402184:	d054      	beq.n	402230 <_malloc_r+0x4d8>
  402186:	68bc      	ldr	r4, [r7, #8]
  402188:	6862      	ldr	r2, [r4, #4]
  40218a:	f022 0203 	bic.w	r2, r2, #3
  40218e:	e75d      	b.n	40204c <_malloc_r+0x2f4>
  402190:	f859 3908 	ldr.w	r3, [r9], #-8
  402194:	4599      	cmp	r9, r3
  402196:	f040 8086 	bne.w	4022a6 <_malloc_r+0x54e>
  40219a:	f010 0f03 	tst.w	r0, #3
  40219e:	f100 30ff 	add.w	r0, r0, #4294967295
  4021a2:	d1f5      	bne.n	402190 <_malloc_r+0x438>
  4021a4:	687b      	ldr	r3, [r7, #4]
  4021a6:	ea23 0304 	bic.w	r3, r3, r4
  4021aa:	607b      	str	r3, [r7, #4]
  4021ac:	0064      	lsls	r4, r4, #1
  4021ae:	429c      	cmp	r4, r3
  4021b0:	f63f aec7 	bhi.w	401f42 <_malloc_r+0x1ea>
  4021b4:	2c00      	cmp	r4, #0
  4021b6:	f43f aec4 	beq.w	401f42 <_malloc_r+0x1ea>
  4021ba:	421c      	tst	r4, r3
  4021bc:	4640      	mov	r0, r8
  4021be:	f47f ae3e 	bne.w	401e3e <_malloc_r+0xe6>
  4021c2:	0064      	lsls	r4, r4, #1
  4021c4:	421c      	tst	r4, r3
  4021c6:	f100 0004 	add.w	r0, r0, #4
  4021ca:	d0fa      	beq.n	4021c2 <_malloc_r+0x46a>
  4021cc:	e637      	b.n	401e3e <_malloc_r+0xe6>
  4021ce:	468c      	mov	ip, r1
  4021d0:	e78c      	b.n	4020ec <_malloc_r+0x394>
  4021d2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4021d6:	d815      	bhi.n	402204 <_malloc_r+0x4ac>
  4021d8:	0bf3      	lsrs	r3, r6, #15
  4021da:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4021de:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4021e2:	00c3      	lsls	r3, r0, #3
  4021e4:	e5da      	b.n	401d9c <_malloc_r+0x44>
  4021e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4021ea:	e6ed      	b.n	401fc8 <_malloc_r+0x270>
  4021ec:	687b      	ldr	r3, [r7, #4]
  4021ee:	1092      	asrs	r2, r2, #2
  4021f0:	2101      	movs	r1, #1
  4021f2:	fa01 f202 	lsl.w	r2, r1, r2
  4021f6:	4313      	orrs	r3, r2
  4021f8:	607b      	str	r3, [r7, #4]
  4021fa:	4662      	mov	r2, ip
  4021fc:	e779      	b.n	4020f2 <_malloc_r+0x39a>
  4021fe:	2301      	movs	r3, #1
  402200:	6053      	str	r3, [r2, #4]
  402202:	e729      	b.n	402058 <_malloc_r+0x300>
  402204:	f240 5254 	movw	r2, #1364	; 0x554
  402208:	4293      	cmp	r3, r2
  40220a:	d822      	bhi.n	402252 <_malloc_r+0x4fa>
  40220c:	0cb3      	lsrs	r3, r6, #18
  40220e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  402212:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  402216:	00c3      	lsls	r3, r0, #3
  402218:	e5c0      	b.n	401d9c <_malloc_r+0x44>
  40221a:	f103 0b10 	add.w	fp, r3, #16
  40221e:	e6ae      	b.n	401f7e <_malloc_r+0x226>
  402220:	2a54      	cmp	r2, #84	; 0x54
  402222:	d829      	bhi.n	402278 <_malloc_r+0x520>
  402224:	0b1a      	lsrs	r2, r3, #12
  402226:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40222a:	00c9      	lsls	r1, r1, #3
  40222c:	326e      	adds	r2, #110	; 0x6e
  40222e:	e74d      	b.n	4020cc <_malloc_r+0x374>
  402230:	4b20      	ldr	r3, [pc, #128]	; (4022b4 <_malloc_r+0x55c>)
  402232:	6819      	ldr	r1, [r3, #0]
  402234:	4459      	add	r1, fp
  402236:	6019      	str	r1, [r3, #0]
  402238:	e6b2      	b.n	401fa0 <_malloc_r+0x248>
  40223a:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40223e:	2800      	cmp	r0, #0
  402240:	f47f aeae 	bne.w	401fa0 <_malloc_r+0x248>
  402244:	eb08 030b 	add.w	r3, r8, fp
  402248:	68ba      	ldr	r2, [r7, #8]
  40224a:	f043 0301 	orr.w	r3, r3, #1
  40224e:	6053      	str	r3, [r2, #4]
  402250:	e6ee      	b.n	402030 <_malloc_r+0x2d8>
  402252:	207f      	movs	r0, #127	; 0x7f
  402254:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  402258:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40225c:	e59e      	b.n	401d9c <_malloc_r+0x44>
  40225e:	f104 0108 	add.w	r1, r4, #8
  402262:	4628      	mov	r0, r5
  402264:	9300      	str	r3, [sp, #0]
  402266:	f7ff fc29 	bl	401abc <_free_r>
  40226a:	9b00      	ldr	r3, [sp, #0]
  40226c:	6819      	ldr	r1, [r3, #0]
  40226e:	e6df      	b.n	402030 <_malloc_r+0x2d8>
  402270:	2001      	movs	r0, #1
  402272:	f04f 0900 	mov.w	r9, #0
  402276:	e6bc      	b.n	401ff2 <_malloc_r+0x29a>
  402278:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40227c:	d805      	bhi.n	40228a <_malloc_r+0x532>
  40227e:	0bda      	lsrs	r2, r3, #15
  402280:	f102 0178 	add.w	r1, r2, #120	; 0x78
  402284:	00c9      	lsls	r1, r1, #3
  402286:	3277      	adds	r2, #119	; 0x77
  402288:	e720      	b.n	4020cc <_malloc_r+0x374>
  40228a:	f240 5154 	movw	r1, #1364	; 0x554
  40228e:	428a      	cmp	r2, r1
  402290:	d805      	bhi.n	40229e <_malloc_r+0x546>
  402292:	0c9a      	lsrs	r2, r3, #18
  402294:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  402298:	00c9      	lsls	r1, r1, #3
  40229a:	327c      	adds	r2, #124	; 0x7c
  40229c:	e716      	b.n	4020cc <_malloc_r+0x374>
  40229e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4022a2:	227e      	movs	r2, #126	; 0x7e
  4022a4:	e712      	b.n	4020cc <_malloc_r+0x374>
  4022a6:	687b      	ldr	r3, [r7, #4]
  4022a8:	e780      	b.n	4021ac <_malloc_r+0x454>
  4022aa:	08f0      	lsrs	r0, r6, #3
  4022ac:	f106 0308 	add.w	r3, r6, #8
  4022b0:	e600      	b.n	401eb4 <_malloc_r+0x15c>
  4022b2:	bf00      	nop
  4022b4:	20000c40 	.word	0x20000c40

004022b8 <__malloc_lock>:
  4022b8:	4801      	ldr	r0, [pc, #4]	; (4022c0 <__malloc_lock+0x8>)
  4022ba:	f7ff bd13 	b.w	401ce4 <__retarget_lock_acquire_recursive>
  4022be:	bf00      	nop
  4022c0:	20000ca0 	.word	0x20000ca0

004022c4 <__malloc_unlock>:
  4022c4:	4801      	ldr	r0, [pc, #4]	; (4022cc <__malloc_unlock+0x8>)
  4022c6:	f7ff bd0f 	b.w	401ce8 <__retarget_lock_release_recursive>
  4022ca:	bf00      	nop
  4022cc:	20000ca0 	.word	0x20000ca0

004022d0 <_sbrk_r>:
  4022d0:	b538      	push	{r3, r4, r5, lr}
  4022d2:	4c07      	ldr	r4, [pc, #28]	; (4022f0 <_sbrk_r+0x20>)
  4022d4:	2300      	movs	r3, #0
  4022d6:	4605      	mov	r5, r0
  4022d8:	4608      	mov	r0, r1
  4022da:	6023      	str	r3, [r4, #0]
  4022dc:	f7fe ff80 	bl	4011e0 <_sbrk>
  4022e0:	1c43      	adds	r3, r0, #1
  4022e2:	d000      	beq.n	4022e6 <_sbrk_r+0x16>
  4022e4:	bd38      	pop	{r3, r4, r5, pc}
  4022e6:	6823      	ldr	r3, [r4, #0]
  4022e8:	2b00      	cmp	r3, #0
  4022ea:	d0fb      	beq.n	4022e4 <_sbrk_r+0x14>
  4022ec:	602b      	str	r3, [r5, #0]
  4022ee:	bd38      	pop	{r3, r4, r5, pc}
  4022f0:	20000cb4 	.word	0x20000cb4

004022f4 <__sread>:
  4022f4:	b510      	push	{r4, lr}
  4022f6:	460c      	mov	r4, r1
  4022f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4022fc:	f000 f954 	bl	4025a8 <_read_r>
  402300:	2800      	cmp	r0, #0
  402302:	db03      	blt.n	40230c <__sread+0x18>
  402304:	6d23      	ldr	r3, [r4, #80]	; 0x50
  402306:	4403      	add	r3, r0
  402308:	6523      	str	r3, [r4, #80]	; 0x50
  40230a:	bd10      	pop	{r4, pc}
  40230c:	89a3      	ldrh	r3, [r4, #12]
  40230e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  402312:	81a3      	strh	r3, [r4, #12]
  402314:	bd10      	pop	{r4, pc}
  402316:	bf00      	nop

00402318 <__swrite>:
  402318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40231c:	4616      	mov	r6, r2
  40231e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  402322:	461f      	mov	r7, r3
  402324:	05d3      	lsls	r3, r2, #23
  402326:	460c      	mov	r4, r1
  402328:	4605      	mov	r5, r0
  40232a:	d507      	bpl.n	40233c <__swrite+0x24>
  40232c:	2200      	movs	r2, #0
  40232e:	2302      	movs	r3, #2
  402330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402334:	f000 f922 	bl	40257c <_lseek_r>
  402338:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40233c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402340:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  402344:	81a2      	strh	r2, [r4, #12]
  402346:	463b      	mov	r3, r7
  402348:	4632      	mov	r2, r6
  40234a:	4628      	mov	r0, r5
  40234c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402350:	f000 b814 	b.w	40237c <_write_r>

00402354 <__sseek>:
  402354:	b510      	push	{r4, lr}
  402356:	460c      	mov	r4, r1
  402358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40235c:	f000 f90e 	bl	40257c <_lseek_r>
  402360:	89a3      	ldrh	r3, [r4, #12]
  402362:	1c42      	adds	r2, r0, #1
  402364:	bf0e      	itee	eq
  402366:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40236a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40236e:	6520      	strne	r0, [r4, #80]	; 0x50
  402370:	81a3      	strh	r3, [r4, #12]
  402372:	bd10      	pop	{r4, pc}

00402374 <__sclose>:
  402374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402378:	f000 b878 	b.w	40246c <_close_r>

0040237c <_write_r>:
  40237c:	b570      	push	{r4, r5, r6, lr}
  40237e:	460d      	mov	r5, r1
  402380:	4c08      	ldr	r4, [pc, #32]	; (4023a4 <_write_r+0x28>)
  402382:	4611      	mov	r1, r2
  402384:	4606      	mov	r6, r0
  402386:	461a      	mov	r2, r3
  402388:	4628      	mov	r0, r5
  40238a:	2300      	movs	r3, #0
  40238c:	6023      	str	r3, [r4, #0]
  40238e:	f7fd ff39 	bl	400204 <_write>
  402392:	1c43      	adds	r3, r0, #1
  402394:	d000      	beq.n	402398 <_write_r+0x1c>
  402396:	bd70      	pop	{r4, r5, r6, pc}
  402398:	6823      	ldr	r3, [r4, #0]
  40239a:	2b00      	cmp	r3, #0
  40239c:	d0fb      	beq.n	402396 <_write_r+0x1a>
  40239e:	6033      	str	r3, [r6, #0]
  4023a0:	bd70      	pop	{r4, r5, r6, pc}
  4023a2:	bf00      	nop
  4023a4:	20000cb4 	.word	0x20000cb4

004023a8 <__register_exitproc>:
  4023a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4023ac:	4d2c      	ldr	r5, [pc, #176]	; (402460 <__register_exitproc+0xb8>)
  4023ae:	4606      	mov	r6, r0
  4023b0:	6828      	ldr	r0, [r5, #0]
  4023b2:	4698      	mov	r8, r3
  4023b4:	460f      	mov	r7, r1
  4023b6:	4691      	mov	r9, r2
  4023b8:	f7ff fc94 	bl	401ce4 <__retarget_lock_acquire_recursive>
  4023bc:	4b29      	ldr	r3, [pc, #164]	; (402464 <__register_exitproc+0xbc>)
  4023be:	681c      	ldr	r4, [r3, #0]
  4023c0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4023c4:	2b00      	cmp	r3, #0
  4023c6:	d03e      	beq.n	402446 <__register_exitproc+0x9e>
  4023c8:	685a      	ldr	r2, [r3, #4]
  4023ca:	2a1f      	cmp	r2, #31
  4023cc:	dc1c      	bgt.n	402408 <__register_exitproc+0x60>
  4023ce:	f102 0e01 	add.w	lr, r2, #1
  4023d2:	b176      	cbz	r6, 4023f2 <__register_exitproc+0x4a>
  4023d4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4023d8:	2401      	movs	r4, #1
  4023da:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4023de:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4023e2:	4094      	lsls	r4, r2
  4023e4:	4320      	orrs	r0, r4
  4023e6:	2e02      	cmp	r6, #2
  4023e8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4023ec:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4023f0:	d023      	beq.n	40243a <__register_exitproc+0x92>
  4023f2:	3202      	adds	r2, #2
  4023f4:	f8c3 e004 	str.w	lr, [r3, #4]
  4023f8:	6828      	ldr	r0, [r5, #0]
  4023fa:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4023fe:	f7ff fc73 	bl	401ce8 <__retarget_lock_release_recursive>
  402402:	2000      	movs	r0, #0
  402404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402408:	4b17      	ldr	r3, [pc, #92]	; (402468 <__register_exitproc+0xc0>)
  40240a:	b30b      	cbz	r3, 402450 <__register_exitproc+0xa8>
  40240c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  402410:	f7ff fc9a 	bl	401d48 <malloc>
  402414:	4603      	mov	r3, r0
  402416:	b1d8      	cbz	r0, 402450 <__register_exitproc+0xa8>
  402418:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40241c:	6002      	str	r2, [r0, #0]
  40241e:	2100      	movs	r1, #0
  402420:	6041      	str	r1, [r0, #4]
  402422:	460a      	mov	r2, r1
  402424:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  402428:	f04f 0e01 	mov.w	lr, #1
  40242c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  402430:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  402434:	2e00      	cmp	r6, #0
  402436:	d0dc      	beq.n	4023f2 <__register_exitproc+0x4a>
  402438:	e7cc      	b.n	4023d4 <__register_exitproc+0x2c>
  40243a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40243e:	430c      	orrs	r4, r1
  402440:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  402444:	e7d5      	b.n	4023f2 <__register_exitproc+0x4a>
  402446:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40244a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40244e:	e7bb      	b.n	4023c8 <__register_exitproc+0x20>
  402450:	6828      	ldr	r0, [r5, #0]
  402452:	f7ff fc49 	bl	401ce8 <__retarget_lock_release_recursive>
  402456:	f04f 30ff 	mov.w	r0, #4294967295
  40245a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40245e:	bf00      	nop
  402460:	20000448 	.word	0x20000448
  402464:	00402d60 	.word	0x00402d60
  402468:	00401d49 	.word	0x00401d49

0040246c <_close_r>:
  40246c:	b538      	push	{r3, r4, r5, lr}
  40246e:	4c07      	ldr	r4, [pc, #28]	; (40248c <_close_r+0x20>)
  402470:	2300      	movs	r3, #0
  402472:	4605      	mov	r5, r0
  402474:	4608      	mov	r0, r1
  402476:	6023      	str	r3, [r4, #0]
  402478:	f7fe fece 	bl	401218 <_close>
  40247c:	1c43      	adds	r3, r0, #1
  40247e:	d000      	beq.n	402482 <_close_r+0x16>
  402480:	bd38      	pop	{r3, r4, r5, pc}
  402482:	6823      	ldr	r3, [r4, #0]
  402484:	2b00      	cmp	r3, #0
  402486:	d0fb      	beq.n	402480 <_close_r+0x14>
  402488:	602b      	str	r3, [r5, #0]
  40248a:	bd38      	pop	{r3, r4, r5, pc}
  40248c:	20000cb4 	.word	0x20000cb4

00402490 <_fclose_r>:
  402490:	b570      	push	{r4, r5, r6, lr}
  402492:	b159      	cbz	r1, 4024ac <_fclose_r+0x1c>
  402494:	4605      	mov	r5, r0
  402496:	460c      	mov	r4, r1
  402498:	b110      	cbz	r0, 4024a0 <_fclose_r+0x10>
  40249a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40249c:	2b00      	cmp	r3, #0
  40249e:	d03c      	beq.n	40251a <_fclose_r+0x8a>
  4024a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4024a2:	07d8      	lsls	r0, r3, #31
  4024a4:	d505      	bpl.n	4024b2 <_fclose_r+0x22>
  4024a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4024aa:	b92b      	cbnz	r3, 4024b8 <_fclose_r+0x28>
  4024ac:	2600      	movs	r6, #0
  4024ae:	4630      	mov	r0, r6
  4024b0:	bd70      	pop	{r4, r5, r6, pc}
  4024b2:	89a3      	ldrh	r3, [r4, #12]
  4024b4:	0599      	lsls	r1, r3, #22
  4024b6:	d53c      	bpl.n	402532 <_fclose_r+0xa2>
  4024b8:	4621      	mov	r1, r4
  4024ba:	4628      	mov	r0, r5
  4024bc:	f7ff f964 	bl	401788 <__sflush_r>
  4024c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4024c2:	4606      	mov	r6, r0
  4024c4:	b133      	cbz	r3, 4024d4 <_fclose_r+0x44>
  4024c6:	69e1      	ldr	r1, [r4, #28]
  4024c8:	4628      	mov	r0, r5
  4024ca:	4798      	blx	r3
  4024cc:	2800      	cmp	r0, #0
  4024ce:	bfb8      	it	lt
  4024d0:	f04f 36ff 	movlt.w	r6, #4294967295
  4024d4:	89a3      	ldrh	r3, [r4, #12]
  4024d6:	061a      	lsls	r2, r3, #24
  4024d8:	d422      	bmi.n	402520 <_fclose_r+0x90>
  4024da:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4024dc:	b141      	cbz	r1, 4024f0 <_fclose_r+0x60>
  4024de:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4024e2:	4299      	cmp	r1, r3
  4024e4:	d002      	beq.n	4024ec <_fclose_r+0x5c>
  4024e6:	4628      	mov	r0, r5
  4024e8:	f7ff fae8 	bl	401abc <_free_r>
  4024ec:	2300      	movs	r3, #0
  4024ee:	6323      	str	r3, [r4, #48]	; 0x30
  4024f0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4024f2:	b121      	cbz	r1, 4024fe <_fclose_r+0x6e>
  4024f4:	4628      	mov	r0, r5
  4024f6:	f7ff fae1 	bl	401abc <_free_r>
  4024fa:	2300      	movs	r3, #0
  4024fc:	6463      	str	r3, [r4, #68]	; 0x44
  4024fe:	f7ff fa67 	bl	4019d0 <__sfp_lock_acquire>
  402502:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402504:	2200      	movs	r2, #0
  402506:	07db      	lsls	r3, r3, #31
  402508:	81a2      	strh	r2, [r4, #12]
  40250a:	d50e      	bpl.n	40252a <_fclose_r+0x9a>
  40250c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40250e:	f7ff fbe7 	bl	401ce0 <__retarget_lock_close_recursive>
  402512:	f7ff fa63 	bl	4019dc <__sfp_lock_release>
  402516:	4630      	mov	r0, r6
  402518:	bd70      	pop	{r4, r5, r6, pc}
  40251a:	f7ff fa2d 	bl	401978 <__sinit>
  40251e:	e7bf      	b.n	4024a0 <_fclose_r+0x10>
  402520:	6921      	ldr	r1, [r4, #16]
  402522:	4628      	mov	r0, r5
  402524:	f7ff faca 	bl	401abc <_free_r>
  402528:	e7d7      	b.n	4024da <_fclose_r+0x4a>
  40252a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40252c:	f7ff fbdc 	bl	401ce8 <__retarget_lock_release_recursive>
  402530:	e7ec      	b.n	40250c <_fclose_r+0x7c>
  402532:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402534:	f7ff fbd6 	bl	401ce4 <__retarget_lock_acquire_recursive>
  402538:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40253c:	2b00      	cmp	r3, #0
  40253e:	d1bb      	bne.n	4024b8 <_fclose_r+0x28>
  402540:	6e66      	ldr	r6, [r4, #100]	; 0x64
  402542:	f016 0601 	ands.w	r6, r6, #1
  402546:	d1b1      	bne.n	4024ac <_fclose_r+0x1c>
  402548:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40254a:	f7ff fbcd 	bl	401ce8 <__retarget_lock_release_recursive>
  40254e:	4630      	mov	r0, r6
  402550:	bd70      	pop	{r4, r5, r6, pc}
  402552:	bf00      	nop

00402554 <_fstat_r>:
  402554:	b538      	push	{r3, r4, r5, lr}
  402556:	460b      	mov	r3, r1
  402558:	4c07      	ldr	r4, [pc, #28]	; (402578 <_fstat_r+0x24>)
  40255a:	4605      	mov	r5, r0
  40255c:	4611      	mov	r1, r2
  40255e:	4618      	mov	r0, r3
  402560:	2300      	movs	r3, #0
  402562:	6023      	str	r3, [r4, #0]
  402564:	f7fe fe5b 	bl	40121e <_fstat>
  402568:	1c43      	adds	r3, r0, #1
  40256a:	d000      	beq.n	40256e <_fstat_r+0x1a>
  40256c:	bd38      	pop	{r3, r4, r5, pc}
  40256e:	6823      	ldr	r3, [r4, #0]
  402570:	2b00      	cmp	r3, #0
  402572:	d0fb      	beq.n	40256c <_fstat_r+0x18>
  402574:	602b      	str	r3, [r5, #0]
  402576:	bd38      	pop	{r3, r4, r5, pc}
  402578:	20000cb4 	.word	0x20000cb4

0040257c <_lseek_r>:
  40257c:	b570      	push	{r4, r5, r6, lr}
  40257e:	460d      	mov	r5, r1
  402580:	4c08      	ldr	r4, [pc, #32]	; (4025a4 <_lseek_r+0x28>)
  402582:	4611      	mov	r1, r2
  402584:	4606      	mov	r6, r0
  402586:	461a      	mov	r2, r3
  402588:	4628      	mov	r0, r5
  40258a:	2300      	movs	r3, #0
  40258c:	6023      	str	r3, [r4, #0]
  40258e:	f7fe fe4b 	bl	401228 <_lseek>
  402592:	1c43      	adds	r3, r0, #1
  402594:	d000      	beq.n	402598 <_lseek_r+0x1c>
  402596:	bd70      	pop	{r4, r5, r6, pc}
  402598:	6823      	ldr	r3, [r4, #0]
  40259a:	2b00      	cmp	r3, #0
  40259c:	d0fb      	beq.n	402596 <_lseek_r+0x1a>
  40259e:	6033      	str	r3, [r6, #0]
  4025a0:	bd70      	pop	{r4, r5, r6, pc}
  4025a2:	bf00      	nop
  4025a4:	20000cb4 	.word	0x20000cb4

004025a8 <_read_r>:
  4025a8:	b570      	push	{r4, r5, r6, lr}
  4025aa:	460d      	mov	r5, r1
  4025ac:	4c08      	ldr	r4, [pc, #32]	; (4025d0 <_read_r+0x28>)
  4025ae:	4611      	mov	r1, r2
  4025b0:	4606      	mov	r6, r0
  4025b2:	461a      	mov	r2, r3
  4025b4:	4628      	mov	r0, r5
  4025b6:	2300      	movs	r3, #0
  4025b8:	6023      	str	r3, [r4, #0]
  4025ba:	f7fd fe05 	bl	4001c8 <_read>
  4025be:	1c43      	adds	r3, r0, #1
  4025c0:	d000      	beq.n	4025c4 <_read_r+0x1c>
  4025c2:	bd70      	pop	{r4, r5, r6, pc}
  4025c4:	6823      	ldr	r3, [r4, #0]
  4025c6:	2b00      	cmp	r3, #0
  4025c8:	d0fb      	beq.n	4025c2 <_read_r+0x1a>
  4025ca:	6033      	str	r3, [r6, #0]
  4025cc:	bd70      	pop	{r4, r5, r6, pc}
  4025ce:	bf00      	nop
  4025d0:	20000cb4 	.word	0x20000cb4

004025d4 <p_uc_charset10x14>:
	...
  4025f0:	ccffccff 00000000 00000000 00000000     ................
  402600:	00f000f0 00000000 00f000f0 00000000     ................
  402610:	c00cc00c fcfffcff c00cc00c fcfffcff     ................
  402620:	c00cc00c 701e600c 3033303f fcfffcff     .....`.p?030....
  402630:	f0333033 c018e039 0cf00060 f0603cf0     303.9...`....<`.
  402640:	000fc003 3cf0183c 18003cc0 f87ff03c     ....<..<.<..<...
  402650:	8cc71cc3 ecdccccf 30307878 cc00fc00     ........xx00....
  402660:	00000000 00440000 00f800ec 00000070     ......D.....p...
	...
  402678:	f03fc00f 18607878 0cc00cc0 00000000     ..?.xx`.........
  402688:	00000000 0cc00cc0 78781860 c00ff03f     ........`.xx?...
  402698:	00000000 e00e600c 8003c007 f83ff83f     .....`......?.?.
  4026a8:	c0078003 600ce00e 00030003 00030003     .......`........
  4026b8:	f03ff03f 00030003 00030003 ec004400     ?.?..........D..
  4026c8:	7000f800 00000000 00000000 00000000     ...p............
  4026d8:	00030003 00030003 00030003 00030003     ................
  4026e8:	00030003 3c001800 18003c00 00000000     .......<.<......
	...
  402700:	0c000000 f0003c00 000fc003 00f0003c     .....<......<...
  402710:	000000c0 f87ff03f ccc1fce0 0cc78cc3     ....?...........
  402720:	1cfc0cce f03ff87f 00000000 0c700c30     ......?.....0.p.
  402730:	fcfffcff 0c000c00 00000000 1c700c30     ............0.p.
  402740:	7cc03ce0 ccc1ecc0 0ce78cc3 0c3c0c7e     .<.|........~.<.
  402750:	38703030 0cc01ce0 0cc30cc0 1ce30cc3     00p8............
  402760:	f03cf87f c007c003 c01cc00e c070c038     ..<.........8.p.
  402770:	fcfffcff c000c000 38fc30fc 0ccc1ccc     .........0.8....
  402780:	0ccc0ccc 1cce0ccc f0c3f8c7 f87ff03f     ............?...
  402790:	0cc31ce3 0cc30cc3 9ce30cc3 f030f871     ............q.0.
  4027a0:	00c000c0 00c000c0 fcc7fcc3 00dc00ce     ................
  4027b0:	00f000f8 f87ff03c 0cc39ce7 0cc30cc3     ....<...........
  4027c0:	9ce70cc3 f03cf87f 007e003c 0cc30ce7     ......<.<.~.....
  4027d0:	38c31cc3 e0e770c3 803fc07f 00000000     ...8.p....?.....
  4027e0:	60180000 f03cf03c 00006018 00000000     ...`<.<..`......
  4027f0:	00000000 44180000 f83cec3c 00007018     .......D<.<..p..
  402800:	00000000 00030000 c00f8007 7038e01c     ..............8p
  402810:	1ce03870 00000cc0 c00cc00c c00cc00c     p8..............
  402820:	c00cc00c c00cc00c c00cc00c 0cc00000     ................
  402830:	38701ce0 e01c7038 8007c00f 00000003     ..p88p..........
  402840:	00700030 00c000e0 ecc3ecc1 00e600c3     0.p.............
  402850:	003c007e f871f030 0cc39ce3 fcc3fcc3     ~.<.0.q.........
  402860:	1ce00cc0 f03ff87f fc7ffc3f c0c0c0e0     ......?.?.......
  402870:	c0c0c0c0 c0e0c0c0 fc3ffc7f fcfffcff     ..........?.....
  402880:	0cc30cc3 0cc30cc3 9ce70cc3 f03cf87f     ..............<.
  402890:	f87ff03f 0cc01ce0 0cc00cc0 1ce00cc0     ?...............
  4028a0:	30303870 fcfffcff 0cc00cc0 0cc00cc0     p800............
  4028b0:	1ce00cc0 f03ff87f fcfffcff 0cc30cc3     ......?.........
  4028c0:	0cc30cc3 0cc30cc3 0cc00cc0 fcfffcff     ................
  4028d0:	00c300c3 00c300c3 00c300c3 00c000c0     ................
  4028e0:	f87ff03f 0cc01ce0 0cc30cc0 1ce30cc3     ?...............
  4028f0:	f033f873 fcfffcff 00030003 00030003     s.3.............
  402900:	00030003 fcfffcff 00000000 0cc00cc0     ................
  402910:	fcfffcff 0cc00cc0 00000000 38003000     .............0.8
  402920:	0cc01cc0 1cc00cc0 f0fff8ff 00c000c0     ................
  402930:	fcfffcff 80078007 e01cc00f 38707038     ............8pp8
  402940:	0cc01ce0 fcfffcff 0c000c00 0c000c00     ................
  402950:	0c000c00 0c000c00 fcfffcff 00380070     ............p.8.
  402960:	001f001f 00700038 fcfffcff fcfffcff     ....8.p.........
  402970:	000e001c 80030007 e000c001 fcfffcff     ................
  402980:	f87ff03f 0cc01ce0 0cc00cc0 1ce00cc0     ?...............
  402990:	f03ff87f fcfffcff 00c300c3 00c300c3     ..?.............
  4029a0:	00e700c3 003c007e f87ff03f 0cc01ce0     ....~.<.?.......
  4029b0:	ecc0ccc0 38e07cc0 ec3ffc7f fcfffcff     .....|.8..?.....
  4029c0:	80c300c3 c0c380c3 70e7c0c3 1c3c3c7e     ...........p~<<.
  4029d0:	1c7e183c 0cc30ce7 0cc30cc3 9cc30cc3     <.~.............
  4029e0:	f060f8e1 00c000c0 00c000c0 fcfffcff     ..`.............
  4029f0:	00c000c0 00c000c0 f8fff0ff 0c001c00     ................
  402a00:	0c000c00 1c000c00 f0fff8ff e0ffc0ff     ................
  402a10:	38007000 1c001c00 70003800 c0ffe0ff     .p.8.....8.p....
  402a20:	f8fff0ff 3c001c00 f800f800 1c003c00     .......<.....<..
  402a30:	f0fff8ff 7cf83cf0 c00fe01c 80078007     .....<.|........
  402a40:	e01cc00f 3cf07cf8 00fe00fc 80030007     .....|.<........
  402a50:	fc01fc01 00078003 00fc00fe 7cc03cc0     .............<.|
  402a60:	ccc1ecc0 0cc78cc3 0cdc0cce 0cf00cf8     ................
  402a70:	00000000 fcfffcff 0cc00cc0 00000cc0     ................
  402a80:	00000000 00300030 000c000c 00030003     ....0.0.........
  402a90:	c000c000 30003000 00000000 0cc00cc0     .....0.0........
  402aa0:	fcff0cc0 0000fcff 00000000 001c000c     ................
  402ab0:	00700038 00e000e0 00380070 000c001c     8.p.....p.8.....
  402ac0:	0c000c00 0c000c00 0c000c00 0c000c00     ................
  402ad0:	0c000c00 00000000 00e000c0 00380070     ............p.8.
  402ae0:	00000018 00000000 78063000 cc0cfc0e     .........0.x....
  402af0:	cc0ccc0c cc0ecc0c f803fc07 fcfffcff     ................
  402b00:	0c030c03 0c030c03 9c030c03 f000f801     ................
  402b10:	f807f003 0c0c1c0e 0c0c0c0c 1c0e0c0c     ................
  402b20:	30033807 f801f000 0c039c03 0c030c03     .8.0............
  402b30:	0c030c03 fcfffcff f807f003 cc0cdc0e     ................
  402b40:	cc0ccc0c dc0ecc0c 9003d807 00030000     ................
  402b50:	fc7ffc3f 00e300e3 00300070 00000000     ?.......p.0.....
  402b60:	9c071803 cc0ccc0f cc0ccc0c dc0ccc0c     ................
  402b70:	f007f80f fcfffcff 00030003 00030003     ................
  402b80:	fc018003 0000fc00 00000000 00000000     ................
  402b90:	fc1bfc1b 00000000 00000000 30000000     ...............0
  402ba0:	1c003800 0c000c00 f8cf1c00 0000f0cf     .8..............
  402bb0:	fcff0000 e000fcff f003e001 1c0e3807     .............8..
  402bc0:	00000c0c 00000000 0cc00cc0 fcfffcff     ................
  402bd0:	0c000c00 00000000 fc0ffc0f 0007000e     ................
  402be0:	c003c003 000e0007 fc0ffc0f fc0ffc0f     ................
  402bf0:	00070003 000c000e 000e000c fc03fc07     ................
  402c00:	f807f003 0c0c1c0e 0c0c0c0c 1c0e0c0c     ................
  402c10:	f003f807 fc0ffc0f c00cc00c c00cc00c     ................
  402c20:	c00fc00c 00038007 80070003 c00cc00f     ................
  402c30:	c00cc00c c00cc00c fc0ffc0f fc0ffc0f     ................
  402c40:	00078003 000c000e 000e000c 00030007     ................
  402c50:	9c071803 cc0ccc0f cc0ccc0c fc0ccc0c     ................
  402c60:	3006780e 000c0000 f0ff000c 1c0cf8ff     .x.0............
  402c70:	380c1c0c 0000300c f80ff00f 0c001c00     ...8.0..........
  402c80:	0c000c00 1c000c00 f00ff80f e00fc00f     ................
  402c90:	38007000 1c001c00 70003800 c00fe00f     .p.8.....8.p....
  402ca0:	f80ff00f 1c001c00 f800f800 1c001c00     ................
  402cb0:	f00ff80f 1c0e0c0c f0033807 e001e001     .........8......
  402cc0:	3807f003 0c0c1c0e 000e000c 9c030c07     ...8............
  402cd0:	f001f801 00078003 000c000e 1c0c0c0c     ................
  402ce0:	7c0c3c0c cc0dec0c 0c0f8c0f 0c0c0c0e     .<.|............
  402cf0:	00030000 f03f8007 1ce0f87c 0cc00cc0     ......?.|.......
  402d00:	00000cc0 0c030c03 fc7ffc3f 0cc30ce3     ........?.......
  402d10:	0ce00cc0 0c300c70 0cc00000 0cc00cc0     ....p.0.........
  402d20:	f87c1ce0 8007f03f 00000003 00c000c0     ..|.?...........
  402d30:	00c000c0 00c000c0 00c000c0 00c000c0     ................
  402d40:	fcfffcff fcfffcff fcfffcff fcfffcff     ................
  402d50:	fcfffcff 64737275 74206761 00747865     ....ursdag text.

00402d60 <_global_impure_ptr>:
  402d60:	20000020                                 .. 

00402d64 <_init>:
  402d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402d66:	bf00      	nop
  402d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402d6a:	bc08      	pop	{r3}
  402d6c:	469e      	mov	lr, r3
  402d6e:	4770      	bx	lr

00402d70 <__init_array_start>:
  402d70:	00401769 	.word	0x00401769

00402d74 <__frame_dummy_init_array_entry>:
  402d74:	0040011d                                ..@.

00402d78 <_fini>:
  402d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402d7a:	bf00      	nop
  402d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402d7e:	bc08      	pop	{r3}
  402d80:	469e      	mov	lr, r3
  402d82:	4770      	bx	lr

00402d84 <__fini_array_start>:
  402d84:	004000f9 	.word	0x004000f9

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr

2000000a <g_interrupt_enabled>:
2000000a:	0001                                        ..

2000000c <g_ul_lcd_x_length>:
2000000c:	00f0 0000                                   ....

20000010 <g_ul_lcd_y_length>:
20000010:	0140 0000                                   @...

20000014 <SystemCoreClock>:
20000014:	0900 003d                                   ..=.

20000018 <_impure_ptr>:
20000018:	0020 2000 0000 0000                          .. ....

20000020 <impure_data>:
20000020:	0000 0000 030c 2000 0374 2000 03dc 2000     ....... t.. ... 
	...
200000c8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000d8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000448 <__atexit_recursive_mutex>:
20000448:	0c90 2000                                   ... 

2000044c <__malloc_av_>:
	...
20000454:	044c 2000 044c 2000 0454 2000 0454 2000     L.. L.. T.. T.. 
20000464:	045c 2000 045c 2000 0464 2000 0464 2000     \.. \.. d.. d.. 
20000474:	046c 2000 046c 2000 0474 2000 0474 2000     l.. l.. t.. t.. 
20000484:	047c 2000 047c 2000 0484 2000 0484 2000     |.. |.. ... ... 
20000494:	048c 2000 048c 2000 0494 2000 0494 2000     ... ... ... ... 
200004a4:	049c 2000 049c 2000 04a4 2000 04a4 2000     ... ... ... ... 
200004b4:	04ac 2000 04ac 2000 04b4 2000 04b4 2000     ... ... ... ... 
200004c4:	04bc 2000 04bc 2000 04c4 2000 04c4 2000     ... ... ... ... 
200004d4:	04cc 2000 04cc 2000 04d4 2000 04d4 2000     ... ... ... ... 
200004e4:	04dc 2000 04dc 2000 04e4 2000 04e4 2000     ... ... ... ... 
200004f4:	04ec 2000 04ec 2000 04f4 2000 04f4 2000     ... ... ... ... 
20000504:	04fc 2000 04fc 2000 0504 2000 0504 2000     ... ... ... ... 
20000514:	050c 2000 050c 2000 0514 2000 0514 2000     ... ... ... ... 
20000524:	051c 2000 051c 2000 0524 2000 0524 2000     ... ... $.. $.. 
20000534:	052c 2000 052c 2000 0534 2000 0534 2000     ,.. ,.. 4.. 4.. 
20000544:	053c 2000 053c 2000 0544 2000 0544 2000     <.. <.. D.. D.. 
20000554:	054c 2000 054c 2000 0554 2000 0554 2000     L.. L.. T.. T.. 
20000564:	055c 2000 055c 2000 0564 2000 0564 2000     \.. \.. d.. d.. 
20000574:	056c 2000 056c 2000 0574 2000 0574 2000     l.. l.. t.. t.. 
20000584:	057c 2000 057c 2000 0584 2000 0584 2000     |.. |.. ... ... 
20000594:	058c 2000 058c 2000 0594 2000 0594 2000     ... ... ... ... 
200005a4:	059c 2000 059c 2000 05a4 2000 05a4 2000     ... ... ... ... 
200005b4:	05ac 2000 05ac 2000 05b4 2000 05b4 2000     ... ... ... ... 
200005c4:	05bc 2000 05bc 2000 05c4 2000 05c4 2000     ... ... ... ... 
200005d4:	05cc 2000 05cc 2000 05d4 2000 05d4 2000     ... ... ... ... 
200005e4:	05dc 2000 05dc 2000 05e4 2000 05e4 2000     ... ... ... ... 
200005f4:	05ec 2000 05ec 2000 05f4 2000 05f4 2000     ... ... ... ... 
20000604:	05fc 2000 05fc 2000 0604 2000 0604 2000     ... ... ... ... 
20000614:	060c 2000 060c 2000 0614 2000 0614 2000     ... ... ... ... 
20000624:	061c 2000 061c 2000 0624 2000 0624 2000     ... ... $.. $.. 
20000634:	062c 2000 062c 2000 0634 2000 0634 2000     ,.. ,.. 4.. 4.. 
20000644:	063c 2000 063c 2000 0644 2000 0644 2000     <.. <.. D.. D.. 
20000654:	064c 2000 064c 2000 0654 2000 0654 2000     L.. L.. T.. T.. 
20000664:	065c 2000 065c 2000 0664 2000 0664 2000     \.. \.. d.. d.. 
20000674:	066c 2000 066c 2000 0674 2000 0674 2000     l.. l.. t.. t.. 
20000684:	067c 2000 067c 2000 0684 2000 0684 2000     |.. |.. ... ... 
20000694:	068c 2000 068c 2000 0694 2000 0694 2000     ... ... ... ... 
200006a4:	069c 2000 069c 2000 06a4 2000 06a4 2000     ... ... ... ... 
200006b4:	06ac 2000 06ac 2000 06b4 2000 06b4 2000     ... ... ... ... 
200006c4:	06bc 2000 06bc 2000 06c4 2000 06c4 2000     ... ... ... ... 
200006d4:	06cc 2000 06cc 2000 06d4 2000 06d4 2000     ... ... ... ... 
200006e4:	06dc 2000 06dc 2000 06e4 2000 06e4 2000     ... ... ... ... 
200006f4:	06ec 2000 06ec 2000 06f4 2000 06f4 2000     ... ... ... ... 
20000704:	06fc 2000 06fc 2000 0704 2000 0704 2000     ... ... ... ... 
20000714:	070c 2000 070c 2000 0714 2000 0714 2000     ... ... ... ... 
20000724:	071c 2000 071c 2000 0724 2000 0724 2000     ... ... $.. $.. 
20000734:	072c 2000 072c 2000 0734 2000 0734 2000     ,.. ,.. 4.. 4.. 
20000744:	073c 2000 073c 2000 0744 2000 0744 2000     <.. <.. D.. D.. 
20000754:	074c 2000 074c 2000 0754 2000 0754 2000     L.. L.. T.. T.. 
20000764:	075c 2000 075c 2000 0764 2000 0764 2000     \.. \.. d.. d.. 
20000774:	076c 2000 076c 2000 0774 2000 0774 2000     l.. l.. t.. t.. 
20000784:	077c 2000 077c 2000 0784 2000 0784 2000     |.. |.. ... ... 
20000794:	078c 2000 078c 2000 0794 2000 0794 2000     ... ... ... ... 
200007a4:	079c 2000 079c 2000 07a4 2000 07a4 2000     ... ... ... ... 
200007b4:	07ac 2000 07ac 2000 07b4 2000 07b4 2000     ... ... ... ... 
200007c4:	07bc 2000 07bc 2000 07c4 2000 07c4 2000     ... ... ... ... 
200007d4:	07cc 2000 07cc 2000 07d4 2000 07d4 2000     ... ... ... ... 
200007e4:	07dc 2000 07dc 2000 07e4 2000 07e4 2000     ... ... ... ... 
200007f4:	07ec 2000 07ec 2000 07f4 2000 07f4 2000     ... ... ... ... 
20000804:	07fc 2000 07fc 2000 0804 2000 0804 2000     ... ... ... ... 
20000814:	080c 2000 080c 2000 0814 2000 0814 2000     ... ... ... ... 
20000824:	081c 2000 081c 2000 0824 2000 0824 2000     ... ... $.. $.. 
20000834:	082c 2000 082c 2000 0834 2000 0834 2000     ,.. ,.. 4.. 4.. 
20000844:	083c 2000 083c 2000 0844 2000 0844 2000     <.. <.. D.. D.. 

20000854 <__malloc_sbrk_base>:
20000854:	ffff ffff                                   ....

20000858 <__malloc_trim_threshold>:
20000858:	0000 0002                                   ....
