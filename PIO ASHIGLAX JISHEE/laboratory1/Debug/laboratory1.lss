
laboratory1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000660  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00400660  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000b8  20000434  00400a94  00020434  2**2
                  ALLOC
  3 .stack        00003004  200004ec  00400b4c  00020434  2**0
                  ALLOC
  4 .ARM.attributes 0000002e  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020462  2**0
                  CONTENTS, READONLY
  6 .debug_info   000099f5  00000000  00000000  000204bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000148b  00000000  00000000  00029eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002171  00000000  00000000  0002b33b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000490  00000000  00000000  0002d4ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000440  00000000  00000000  0002d93c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000139e5  00000000  00000000  0002dd7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000054f1  00000000  00000000  00041761  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00060cc0  00000000  00000000  00046c52  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000acc  00000000  00000000  000a7914  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	f0 34 00 20 e9 03 40 00 e5 03 40 00 e5 03 40 00     .4. ..@...@...@.
  400010:	e5 03 40 00 e5 03 40 00 e5 03 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	e5 03 40 00 e5 03 40 00 00 00 00 00 e5 03 40 00     ..@...@.......@.
  40003c:	e5 03 40 00 e5 03 40 00 e5 03 40 00 e5 03 40 00     ..@...@...@...@.
  40004c:	e5 03 40 00 e5 03 40 00 e5 03 40 00 e5 03 40 00     ..@...@...@...@.
  40005c:	e5 03 40 00 e5 03 40 00 f1 01 40 00 05 02 40 00     ..@...@...@...@.
  40006c:	19 02 40 00 2d 02 40 00 41 02 40 00 e5 03 40 00     ..@.-.@.A.@...@.
  40007c:	e5 03 40 00 e5 03 40 00 e5 03 40 00 e5 03 40 00     ..@...@...@...@.
  40008c:	e5 03 40 00 e5 03 40 00 e5 03 40 00 e5 03 40 00     ..@...@...@...@.
  40009c:	e5 03 40 00 e5 03 40 00 e5 03 40 00 e5 03 40 00     ..@...@...@...@.
  4000ac:	e5 03 40 00 e5 03 40 00 e5 03 40 00 e5 03 40 00     ..@...@...@...@.
  4000bc:	e5 03 40 00 e5 03 40 00 e5 03 40 00 e5 03 40 00     ..@...@...@...@.
  4000cc:	e5 03 40 00 e5 03 40 00 e5 03 40 00 e5 03 40 00     ..@...@...@...@.
  4000dc:	e5 03 40 00 e5 03 40 00 e5 03 40 00 e5 03 40 00     ..@...@...@...@.
  4000ec:	e5 03 40 00 e5 03 40 00 e5 03 40 00                 ..@...@...@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	20000434 	.word	0x20000434
  400114:	00000000 	.word	0x00000000
  400118:	00400660 	.word	0x00400660

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	00400660 	.word	0x00400660
  400158:	20000438 	.word	0x20000438
  40015c:	00400660 	.word	0x00400660
  400160:	00000000 	.word	0x00000000

00400164 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400164:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400166:	4770      	bx	lr

00400168 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400168:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40016a:	4770      	bx	lr

0040016c <pio_set_pin_low>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40016c:	0943      	lsrs	r3, r0, #5
  40016e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400172:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400176:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  400178:	f000 001f 	and.w	r0, r0, #31
  40017c:	2201      	movs	r2, #1
  40017e:	fa02 f000 	lsl.w	r0, r2, r0
  400182:	6358      	str	r0, [r3, #52]	; 0x34
  400184:	4770      	bx	lr
	...

00400188 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40018c:	4681      	mov	r9, r0
  40018e:	460f      	mov	r7, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400190:	4b12      	ldr	r3, [pc, #72]	; (4001dc <pio_handler_process+0x54>)
  400192:	4798      	blx	r3
  400194:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400196:	4648      	mov	r0, r9
  400198:	4b11      	ldr	r3, [pc, #68]	; (4001e0 <pio_handler_process+0x58>)
  40019a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  40019c:	4005      	ands	r5, r0
  40019e:	d013      	beq.n	4001c8 <pio_handler_process+0x40>
  4001a0:	4c10      	ldr	r4, [pc, #64]	; (4001e4 <pio_handler_process+0x5c>)
  4001a2:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4001a6:	e003      	b.n	4001b0 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4001a8:	42b4      	cmp	r4, r6
  4001aa:	d00d      	beq.n	4001c8 <pio_handler_process+0x40>
  4001ac:	3410      	adds	r4, #16
		while (status != 0) {
  4001ae:	b15d      	cbz	r5, 4001c8 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4001b0:	6820      	ldr	r0, [r4, #0]
  4001b2:	42b8      	cmp	r0, r7
  4001b4:	d1f8      	bne.n	4001a8 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4001b6:	6861      	ldr	r1, [r4, #4]
  4001b8:	4229      	tst	r1, r5
  4001ba:	d0f5      	beq.n	4001a8 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4001bc:	68e3      	ldr	r3, [r4, #12]
  4001be:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4001c0:	6863      	ldr	r3, [r4, #4]
  4001c2:	ea25 0503 	bic.w	r5, r5, r3
  4001c6:	e7ef      	b.n	4001a8 <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4001c8:	4b07      	ldr	r3, [pc, #28]	; (4001e8 <pio_handler_process+0x60>)
  4001ca:	681b      	ldr	r3, [r3, #0]
  4001cc:	b123      	cbz	r3, 4001d8 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  4001ce:	4b07      	ldr	r3, [pc, #28]	; (4001ec <pio_handler_process+0x64>)
  4001d0:	681b      	ldr	r3, [r3, #0]
  4001d2:	b10b      	cbz	r3, 4001d8 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  4001d4:	4648      	mov	r0, r9
  4001d6:	4798      	blx	r3
  4001d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4001dc:	00400165 	.word	0x00400165
  4001e0:	00400169 	.word	0x00400169
  4001e4:	20000450 	.word	0x20000450
  4001e8:	200004c4 	.word	0x200004c4
  4001ec:	200004c0 	.word	0x200004c0

004001f0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4001f0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4001f2:	2109      	movs	r1, #9
  4001f4:	4801      	ldr	r0, [pc, #4]	; (4001fc <PIOA_Handler+0xc>)
  4001f6:	4b02      	ldr	r3, [pc, #8]	; (400200 <PIOA_Handler+0x10>)
  4001f8:	4798      	blx	r3
  4001fa:	bd08      	pop	{r3, pc}
  4001fc:	400e0e00 	.word	0x400e0e00
  400200:	00400189 	.word	0x00400189

00400204 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400204:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400206:	210a      	movs	r1, #10
  400208:	4801      	ldr	r0, [pc, #4]	; (400210 <PIOB_Handler+0xc>)
  40020a:	4b02      	ldr	r3, [pc, #8]	; (400214 <PIOB_Handler+0x10>)
  40020c:	4798      	blx	r3
  40020e:	bd08      	pop	{r3, pc}
  400210:	400e1000 	.word	0x400e1000
  400214:	00400189 	.word	0x00400189

00400218 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400218:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40021a:	210b      	movs	r1, #11
  40021c:	4801      	ldr	r0, [pc, #4]	; (400224 <PIOC_Handler+0xc>)
  40021e:	4b02      	ldr	r3, [pc, #8]	; (400228 <PIOC_Handler+0x10>)
  400220:	4798      	blx	r3
  400222:	bd08      	pop	{r3, pc}
  400224:	400e1200 	.word	0x400e1200
  400228:	00400189 	.word	0x00400189

0040022c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  40022c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40022e:	210c      	movs	r1, #12
  400230:	4801      	ldr	r0, [pc, #4]	; (400238 <PIOD_Handler+0xc>)
  400232:	4b02      	ldr	r3, [pc, #8]	; (40023c <PIOD_Handler+0x10>)
  400234:	4798      	blx	r3
  400236:	bd08      	pop	{r3, pc}
  400238:	400e1400 	.word	0x400e1400
  40023c:	00400189 	.word	0x00400189

00400240 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400240:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400242:	210d      	movs	r1, #13
  400244:	4801      	ldr	r0, [pc, #4]	; (40024c <PIOE_Handler+0xc>)
  400246:	4b02      	ldr	r3, [pc, #8]	; (400250 <PIOE_Handler+0x10>)
  400248:	4798      	blx	r3
  40024a:	bd08      	pop	{r3, pc}
  40024c:	400e1600 	.word	0x400e1600
  400250:	00400189 	.word	0x00400189

00400254 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  400254:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400256:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40025a:	4b49      	ldr	r3, [pc, #292]	; (400380 <board_init+0x12c>)
  40025c:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40025e:	2009      	movs	r0, #9
  400260:	4c48      	ldr	r4, [pc, #288]	; (400384 <board_init+0x130>)
  400262:	47a0      	blx	r4
  400264:	200a      	movs	r0, #10
  400266:	47a0      	blx	r4
  400268:	200b      	movs	r0, #11
  40026a:	47a0      	blx	r4
  40026c:	200c      	movs	r0, #12
  40026e:	47a0      	blx	r4
  400270:	200d      	movs	r0, #13
  400272:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400274:	4b44      	ldr	r3, [pc, #272]	; (400388 <board_init+0x134>)
  400276:	2201      	movs	r2, #1
  400278:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40027a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40027e:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400280:	4942      	ldr	r1, [pc, #264]	; (40038c <board_init+0x138>)
  400282:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400286:	610a      	str	r2, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400288:	f8c1 20a0 	str.w	r2, [r1, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40028c:	630a      	str	r2, [r1, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40028e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  400292:	6108      	str	r0, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400294:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400298:	6308      	str	r0, [r1, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40029a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  40029e:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4002a0:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4002a4:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4002a6:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4002aa:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4002ac:	6219      	str	r1, [r3, #32]
		base->PIO_IFSCER = mask;
  4002ae:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4002b2:	6f18      	ldr	r0, [r3, #112]	; 0x70
  4002b4:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
  4002b8:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4002ba:	6f58      	ldr	r0, [r3, #116]	; 0x74
  4002bc:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
  4002c0:	6758      	str	r0, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4002c2:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4002c6:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4002ca:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4002ce:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4002d0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4002d4:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4002d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4002da:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4002dc:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4002de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4002e2:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4002e4:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
  4002e8:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4002ea:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4002ec:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
  4002f0:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  4002f2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  4002f6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	base->PIO_AIMER = mask;
  4002fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4002fe:	2202      	movs	r2, #2
  400300:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400302:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400306:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400308:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40030c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  40030e:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400310:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400314:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400316:	f021 0102 	bic.w	r1, r1, #2
  40031a:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40031c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40031e:	f021 0102 	bic.w	r1, r1, #2
  400322:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_AIMDR = mask;
  400324:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400328:	2204      	movs	r2, #4
  40032a:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40032c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400330:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400332:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400336:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400338:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  40033a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  40033e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400340:	f021 0104 	bic.w	r1, r1, #4
  400344:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400346:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400348:	f021 0104 	bic.w	r1, r1, #4
  40034c:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  40034e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400352:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	base->PIO_AIMER = mask;
  400356:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  40035a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  40035e:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400360:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400364:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400366:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400368:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40036c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40036e:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  400372:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400374:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400376:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  40037a:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40037c:	605a      	str	r2, [r3, #4]
  40037e:	bd10      	pop	{r4, pc}
  400380:	400e1850 	.word	0x400e1850
  400384:	00400391 	.word	0x00400391
  400388:	400e0e00 	.word	0x400e0e00
  40038c:	400e1400 	.word	0x400e1400

00400390 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  400390:	282f      	cmp	r0, #47	; 0x2f
  400392:	d81e      	bhi.n	4003d2 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400394:	281f      	cmp	r0, #31
  400396:	d80c      	bhi.n	4003b2 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400398:	4b11      	ldr	r3, [pc, #68]	; (4003e0 <pmc_enable_periph_clk+0x50>)
  40039a:	699a      	ldr	r2, [r3, #24]
  40039c:	2301      	movs	r3, #1
  40039e:	4083      	lsls	r3, r0
  4003a0:	4393      	bics	r3, r2
  4003a2:	d018      	beq.n	4003d6 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4003a4:	2301      	movs	r3, #1
  4003a6:	fa03 f000 	lsl.w	r0, r3, r0
  4003aa:	4b0d      	ldr	r3, [pc, #52]	; (4003e0 <pmc_enable_periph_clk+0x50>)
  4003ac:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4003ae:	2000      	movs	r0, #0
  4003b0:	4770      	bx	lr
		ul_id -= 32;
  4003b2:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4003b4:	4b0a      	ldr	r3, [pc, #40]	; (4003e0 <pmc_enable_periph_clk+0x50>)
  4003b6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4003ba:	2301      	movs	r3, #1
  4003bc:	4083      	lsls	r3, r0
  4003be:	4393      	bics	r3, r2
  4003c0:	d00b      	beq.n	4003da <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4003c2:	2301      	movs	r3, #1
  4003c4:	fa03 f000 	lsl.w	r0, r3, r0
  4003c8:	4b05      	ldr	r3, [pc, #20]	; (4003e0 <pmc_enable_periph_clk+0x50>)
  4003ca:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4003ce:	2000      	movs	r0, #0
  4003d0:	4770      	bx	lr
		return 1;
  4003d2:	2001      	movs	r0, #1
  4003d4:	4770      	bx	lr
	return 0;
  4003d6:	2000      	movs	r0, #0
  4003d8:	4770      	bx	lr
  4003da:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  4003dc:	4770      	bx	lr
  4003de:	bf00      	nop
  4003e0:	400e0400 	.word	0x400e0400

004003e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4003e4:	e7fe      	b.n	4003e4 <Dummy_Handler>
	...

004003e8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4003e8:	b500      	push	{lr}
  4003ea:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  4003ec:	4b25      	ldr	r3, [pc, #148]	; (400484 <Reset_Handler+0x9c>)
  4003ee:	4a26      	ldr	r2, [pc, #152]	; (400488 <Reset_Handler+0xa0>)
  4003f0:	429a      	cmp	r2, r3
  4003f2:	d010      	beq.n	400416 <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
  4003f4:	4b25      	ldr	r3, [pc, #148]	; (40048c <Reset_Handler+0xa4>)
  4003f6:	4a23      	ldr	r2, [pc, #140]	; (400484 <Reset_Handler+0x9c>)
  4003f8:	429a      	cmp	r2, r3
  4003fa:	d20c      	bcs.n	400416 <Reset_Handler+0x2e>
  4003fc:	3b01      	subs	r3, #1
  4003fe:	1a9b      	subs	r3, r3, r2
  400400:	f023 0303 	bic.w	r3, r3, #3
  400404:	3304      	adds	r3, #4
  400406:	4413      	add	r3, r2
  400408:	491f      	ldr	r1, [pc, #124]	; (400488 <Reset_Handler+0xa0>)
			*pDest++ = *pSrc++;
  40040a:	f851 0b04 	ldr.w	r0, [r1], #4
  40040e:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  400412:	429a      	cmp	r2, r3
  400414:	d1f9      	bne.n	40040a <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400416:	4b1e      	ldr	r3, [pc, #120]	; (400490 <Reset_Handler+0xa8>)
  400418:	4a1e      	ldr	r2, [pc, #120]	; (400494 <Reset_Handler+0xac>)
  40041a:	429a      	cmp	r2, r3
  40041c:	d20a      	bcs.n	400434 <Reset_Handler+0x4c>
  40041e:	3b01      	subs	r3, #1
  400420:	1a9b      	subs	r3, r3, r2
  400422:	f023 0303 	bic.w	r3, r3, #3
  400426:	3304      	adds	r3, #4
  400428:	4413      	add	r3, r2
		*pDest++ = 0;
  40042a:	2100      	movs	r1, #0
  40042c:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  400430:	4293      	cmp	r3, r2
  400432:	d1fb      	bne.n	40042c <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400434:	4a18      	ldr	r2, [pc, #96]	; (400498 <Reset_Handler+0xb0>)
  400436:	4b19      	ldr	r3, [pc, #100]	; (40049c <Reset_Handler+0xb4>)
  400438:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40043c:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40043e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400442:	fab3 f383 	clz	r3, r3
  400446:	095b      	lsrs	r3, r3, #5
  400448:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40044a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40044c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400450:	2200      	movs	r2, #0
  400452:	4b13      	ldr	r3, [pc, #76]	; (4004a0 <Reset_Handler+0xb8>)
  400454:	701a      	strb	r2, [r3, #0]
	return flags;
  400456:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400458:	4a12      	ldr	r2, [pc, #72]	; (4004a4 <Reset_Handler+0xbc>)
  40045a:	6813      	ldr	r3, [r2, #0]
  40045c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400460:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  400462:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400466:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40046a:	b129      	cbz	r1, 400478 <Reset_Handler+0x90>
		cpu_irq_enable();
  40046c:	2201      	movs	r2, #1
  40046e:	4b0c      	ldr	r3, [pc, #48]	; (4004a0 <Reset_Handler+0xb8>)
  400470:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  400472:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400476:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  400478:	4b0b      	ldr	r3, [pc, #44]	; (4004a8 <Reset_Handler+0xc0>)
  40047a:	4798      	blx	r3

	/* Branch to main function */
	main();
  40047c:	4b0b      	ldr	r3, [pc, #44]	; (4004ac <Reset_Handler+0xc4>)
  40047e:	4798      	blx	r3
  400480:	e7fe      	b.n	400480 <Reset_Handler+0x98>
  400482:	bf00      	nop
  400484:	20000000 	.word	0x20000000
  400488:	00400660 	.word	0x00400660
  40048c:	20000434 	.word	0x20000434
  400490:	200004ec 	.word	0x200004ec
  400494:	20000434 	.word	0x20000434
  400498:	e000ed00 	.word	0xe000ed00
  40049c:	00400000 	.word	0x00400000
  4004a0:	20000000 	.word	0x20000000
  4004a4:	e000ed88 	.word	0xe000ed88
  4004a8:	004004c9 	.word	0x004004c9
  4004ac:	004004b1 	.word	0x004004b1

004004b0 <main>:
 */
#include <asf.h>
#include "led.h"
#include "sam4e_ek.h"
int main (void)
{
  4004b0:	b508      	push	{r3, lr}
	/* Insert system clock initialization code here (sysclk_init()). */

	board_init();
  4004b2:	4b03      	ldr	r3, [pc, #12]	; (4004c0 <main+0x10>)
  4004b4:	4798      	blx	r3
	pio_set_pin_low(117);
  4004b6:	2075      	movs	r0, #117	; 0x75
  4004b8:	4b02      	ldr	r3, [pc, #8]	; (4004c4 <main+0x14>)
  4004ba:	4798      	blx	r3
	
	/* Insert application code here, after the board has been initialized. */
}
  4004bc:	2000      	movs	r0, #0
  4004be:	bd08      	pop	{r3, pc}
  4004c0:	00400255 	.word	0x00400255
  4004c4:	0040016d 	.word	0x0040016d

004004c8 <__libc_init_array>:
  4004c8:	b570      	push	{r4, r5, r6, lr}
  4004ca:	4e0f      	ldr	r6, [pc, #60]	; (400508 <__libc_init_array+0x40>)
  4004cc:	4d0f      	ldr	r5, [pc, #60]	; (40050c <__libc_init_array+0x44>)
  4004ce:	1b76      	subs	r6, r6, r5
  4004d0:	10b6      	asrs	r6, r6, #2
  4004d2:	bf18      	it	ne
  4004d4:	2400      	movne	r4, #0
  4004d6:	d005      	beq.n	4004e4 <__libc_init_array+0x1c>
  4004d8:	3401      	adds	r4, #1
  4004da:	f855 3b04 	ldr.w	r3, [r5], #4
  4004de:	4798      	blx	r3
  4004e0:	42a6      	cmp	r6, r4
  4004e2:	d1f9      	bne.n	4004d8 <__libc_init_array+0x10>
  4004e4:	4e0a      	ldr	r6, [pc, #40]	; (400510 <__libc_init_array+0x48>)
  4004e6:	4d0b      	ldr	r5, [pc, #44]	; (400514 <__libc_init_array+0x4c>)
  4004e8:	1b76      	subs	r6, r6, r5
  4004ea:	f000 f8a7 	bl	40063c <_init>
  4004ee:	10b6      	asrs	r6, r6, #2
  4004f0:	bf18      	it	ne
  4004f2:	2400      	movne	r4, #0
  4004f4:	d006      	beq.n	400504 <__libc_init_array+0x3c>
  4004f6:	3401      	adds	r4, #1
  4004f8:	f855 3b04 	ldr.w	r3, [r5], #4
  4004fc:	4798      	blx	r3
  4004fe:	42a6      	cmp	r6, r4
  400500:	d1f9      	bne.n	4004f6 <__libc_init_array+0x2e>
  400502:	bd70      	pop	{r4, r5, r6, pc}
  400504:	bd70      	pop	{r4, r5, r6, pc}
  400506:	bf00      	nop
  400508:	00400648 	.word	0x00400648
  40050c:	00400648 	.word	0x00400648
  400510:	00400650 	.word	0x00400650
  400514:	00400648 	.word	0x00400648

00400518 <register_fini>:
  400518:	4b02      	ldr	r3, [pc, #8]	; (400524 <register_fini+0xc>)
  40051a:	b113      	cbz	r3, 400522 <register_fini+0xa>
  40051c:	4802      	ldr	r0, [pc, #8]	; (400528 <register_fini+0x10>)
  40051e:	f000 b805 	b.w	40052c <atexit>
  400522:	4770      	bx	lr
  400524:	00000000 	.word	0x00000000
  400528:	00400539 	.word	0x00400539

0040052c <atexit>:
  40052c:	2300      	movs	r3, #0
  40052e:	4601      	mov	r1, r0
  400530:	461a      	mov	r2, r3
  400532:	4618      	mov	r0, r3
  400534:	f000 b81e 	b.w	400574 <__register_exitproc>

00400538 <__libc_fini_array>:
  400538:	b538      	push	{r3, r4, r5, lr}
  40053a:	4c0a      	ldr	r4, [pc, #40]	; (400564 <__libc_fini_array+0x2c>)
  40053c:	4d0a      	ldr	r5, [pc, #40]	; (400568 <__libc_fini_array+0x30>)
  40053e:	1b64      	subs	r4, r4, r5
  400540:	10a4      	asrs	r4, r4, #2
  400542:	d00a      	beq.n	40055a <__libc_fini_array+0x22>
  400544:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  400548:	3b01      	subs	r3, #1
  40054a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40054e:	3c01      	subs	r4, #1
  400550:	f855 3904 	ldr.w	r3, [r5], #-4
  400554:	4798      	blx	r3
  400556:	2c00      	cmp	r4, #0
  400558:	d1f9      	bne.n	40054e <__libc_fini_array+0x16>
  40055a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40055e:	f000 b877 	b.w	400650 <_fini>
  400562:	bf00      	nop
  400564:	00400660 	.word	0x00400660
  400568:	0040065c 	.word	0x0040065c

0040056c <__retarget_lock_acquire_recursive>:
  40056c:	4770      	bx	lr
  40056e:	bf00      	nop

00400570 <__retarget_lock_release_recursive>:
  400570:	4770      	bx	lr
  400572:	bf00      	nop

00400574 <__register_exitproc>:
  400574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400578:	4d2c      	ldr	r5, [pc, #176]	; (40062c <__register_exitproc+0xb8>)
  40057a:	4606      	mov	r6, r0
  40057c:	6828      	ldr	r0, [r5, #0]
  40057e:	4698      	mov	r8, r3
  400580:	460f      	mov	r7, r1
  400582:	4691      	mov	r9, r2
  400584:	f7ff fff2 	bl	40056c <__retarget_lock_acquire_recursive>
  400588:	4b29      	ldr	r3, [pc, #164]	; (400630 <__register_exitproc+0xbc>)
  40058a:	681c      	ldr	r4, [r3, #0]
  40058c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  400590:	2b00      	cmp	r3, #0
  400592:	d03e      	beq.n	400612 <__register_exitproc+0x9e>
  400594:	685a      	ldr	r2, [r3, #4]
  400596:	2a1f      	cmp	r2, #31
  400598:	dc1c      	bgt.n	4005d4 <__register_exitproc+0x60>
  40059a:	f102 0e01 	add.w	lr, r2, #1
  40059e:	b176      	cbz	r6, 4005be <__register_exitproc+0x4a>
  4005a0:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4005a4:	2401      	movs	r4, #1
  4005a6:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4005aa:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4005ae:	4094      	lsls	r4, r2
  4005b0:	4320      	orrs	r0, r4
  4005b2:	2e02      	cmp	r6, #2
  4005b4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4005b8:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4005bc:	d023      	beq.n	400606 <__register_exitproc+0x92>
  4005be:	3202      	adds	r2, #2
  4005c0:	f8c3 e004 	str.w	lr, [r3, #4]
  4005c4:	6828      	ldr	r0, [r5, #0]
  4005c6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4005ca:	f7ff ffd1 	bl	400570 <__retarget_lock_release_recursive>
  4005ce:	2000      	movs	r0, #0
  4005d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4005d4:	4b17      	ldr	r3, [pc, #92]	; (400634 <__register_exitproc+0xc0>)
  4005d6:	b30b      	cbz	r3, 40061c <__register_exitproc+0xa8>
  4005d8:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4005dc:	f3af 8000 	nop.w
  4005e0:	4603      	mov	r3, r0
  4005e2:	b1d8      	cbz	r0, 40061c <__register_exitproc+0xa8>
  4005e4:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4005e8:	6002      	str	r2, [r0, #0]
  4005ea:	2100      	movs	r1, #0
  4005ec:	6041      	str	r1, [r0, #4]
  4005ee:	460a      	mov	r2, r1
  4005f0:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4005f4:	f04f 0e01 	mov.w	lr, #1
  4005f8:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4005fc:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  400600:	2e00      	cmp	r6, #0
  400602:	d0dc      	beq.n	4005be <__register_exitproc+0x4a>
  400604:	e7cc      	b.n	4005a0 <__register_exitproc+0x2c>
  400606:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40060a:	430c      	orrs	r4, r1
  40060c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  400610:	e7d5      	b.n	4005be <__register_exitproc+0x4a>
  400612:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  400616:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40061a:	e7bb      	b.n	400594 <__register_exitproc+0x20>
  40061c:	6828      	ldr	r0, [r5, #0]
  40061e:	f7ff ffa7 	bl	400570 <__retarget_lock_release_recursive>
  400622:	f04f 30ff 	mov.w	r0, #4294967295
  400626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40062a:	bf00      	nop
  40062c:	20000430 	.word	0x20000430
  400630:	00400638 	.word	0x00400638
  400634:	00000000 	.word	0x00000000

00400638 <_global_impure_ptr>:
  400638:	20000008                                ... 

0040063c <_init>:
  40063c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40063e:	bf00      	nop
  400640:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400642:	bc08      	pop	{r3}
  400644:	469e      	mov	lr, r3
  400646:	4770      	bx	lr

00400648 <__init_array_start>:
  400648:	00400519 	.word	0x00400519

0040064c <__frame_dummy_init_array_entry>:
  40064c:	0040011d                                ..@.

00400650 <_fini>:
  400650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400652:	bf00      	nop
  400654:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400656:	bc08      	pop	{r3}
  400658:	469e      	mov	lr, r3
  40065a:	4770      	bx	lr

0040065c <__fini_array_start>:
  40065c:	004000f9 	.word	0x004000f9
