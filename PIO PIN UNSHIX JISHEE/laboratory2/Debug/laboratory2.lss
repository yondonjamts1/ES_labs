
laboratory2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006c8  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  004006c8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000b8  20000434  00400afc  00020434  2**2
                  ALLOC
  3 .stack        00003004  200004ec  00400bb4  00020434  2**0
                  ALLOC
  4 .ARM.attributes 0000002e  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020462  2**0
                  CONTENTS, READONLY
  6 .debug_info   00009b69  00000000  00000000  000204bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014f7  00000000  00000000  0002a024  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000021c1  00000000  00000000  0002b51b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000490  00000000  00000000  0002d6dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000440  00000000  00000000  0002db6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000139f6  00000000  00000000  0002dfac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000550d  00000000  00000000  000419a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00060d2c  00000000  00000000  00046eaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000acc  00000000  00000000  000a7bdc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	f0 34 00 20 1d 04 40 00 19 04 40 00 19 04 40 00     .4. ..@...@...@.
  400010:	19 04 40 00 19 04 40 00 19 04 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	19 04 40 00 19 04 40 00 00 00 00 00 19 04 40 00     ..@...@.......@.
  40003c:	19 04 40 00 19 04 40 00 19 04 40 00 19 04 40 00     ..@...@...@...@.
  40004c:	19 04 40 00 19 04 40 00 19 04 40 00 19 04 40 00     ..@...@...@...@.
  40005c:	19 04 40 00 19 04 40 00 25 02 40 00 39 02 40 00     ..@...@.%.@.9.@.
  40006c:	4d 02 40 00 61 02 40 00 75 02 40 00 19 04 40 00     M.@.a.@.u.@...@.
  40007c:	19 04 40 00 19 04 40 00 19 04 40 00 19 04 40 00     ..@...@...@...@.
  40008c:	19 04 40 00 19 04 40 00 19 04 40 00 19 04 40 00     ..@...@...@...@.
  40009c:	19 04 40 00 19 04 40 00 19 04 40 00 19 04 40 00     ..@...@...@...@.
  4000ac:	19 04 40 00 19 04 40 00 19 04 40 00 19 04 40 00     ..@...@...@...@.
  4000bc:	19 04 40 00 19 04 40 00 19 04 40 00 19 04 40 00     ..@...@...@...@.
  4000cc:	19 04 40 00 19 04 40 00 19 04 40 00 19 04 40 00     ..@...@...@...@.
  4000dc:	19 04 40 00 19 04 40 00 19 04 40 00 19 04 40 00     ..@...@...@...@.
  4000ec:	19 04 40 00 19 04 40 00 19 04 40 00                 ..@...@...@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	20000434 	.word	0x20000434
  400114:	00000000 	.word	0x00000000
  400118:	004006c8 	.word	0x004006c8

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	004006c8 	.word	0x004006c8
  400158:	20000438 	.word	0x20000438
  40015c:	004006c8 	.word	0x004006c8
  400160:	00000000 	.word	0x00000000

00400164 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400164:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400166:	4770      	bx	lr

00400168 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400168:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40016a:	4770      	bx	lr

0040016c <pio_get_pin_value>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40016c:	0943      	lsrs	r3, r0, #5
  40016e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400172:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400176:	025b      	lsls	r3, r3, #9
	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
  400178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  40017a:	f000 001f 	and.w	r0, r0, #31
  40017e:	fa23 f000 	lsr.w	r0, r3, r0
}
  400182:	f000 0001 	and.w	r0, r0, #1
  400186:	4770      	bx	lr

00400188 <pio_set_pin_high>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400188:	0943      	lsrs	r3, r0, #5
  40018a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40018e:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400192:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  400194:	f000 001f 	and.w	r0, r0, #31
  400198:	2201      	movs	r2, #1
  40019a:	fa02 f000 	lsl.w	r0, r2, r0
  40019e:	6318      	str	r0, [r3, #48]	; 0x30
  4001a0:	4770      	bx	lr

004001a2 <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4001a2:	0943      	lsrs	r3, r0, #5
  4001a4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4001a8:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4001ac:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  4001ae:	f000 001f 	and.w	r0, r0, #31
  4001b2:	2201      	movs	r2, #1
  4001b4:	fa02 f000 	lsl.w	r0, r2, r0
  4001b8:	6358      	str	r0, [r3, #52]	; 0x34
  4001ba:	4770      	bx	lr

004001bc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4001bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4001c0:	4681      	mov	r9, r0
  4001c2:	460f      	mov	r7, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4001c4:	4b12      	ldr	r3, [pc, #72]	; (400210 <pio_handler_process+0x54>)
  4001c6:	4798      	blx	r3
  4001c8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4001ca:	4648      	mov	r0, r9
  4001cc:	4b11      	ldr	r3, [pc, #68]	; (400214 <pio_handler_process+0x58>)
  4001ce:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4001d0:	4005      	ands	r5, r0
  4001d2:	d013      	beq.n	4001fc <pio_handler_process+0x40>
  4001d4:	4c10      	ldr	r4, [pc, #64]	; (400218 <pio_handler_process+0x5c>)
  4001d6:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4001da:	e003      	b.n	4001e4 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4001dc:	42b4      	cmp	r4, r6
  4001de:	d00d      	beq.n	4001fc <pio_handler_process+0x40>
  4001e0:	3410      	adds	r4, #16
		while (status != 0) {
  4001e2:	b15d      	cbz	r5, 4001fc <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4001e4:	6820      	ldr	r0, [r4, #0]
  4001e6:	42b8      	cmp	r0, r7
  4001e8:	d1f8      	bne.n	4001dc <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4001ea:	6861      	ldr	r1, [r4, #4]
  4001ec:	4229      	tst	r1, r5
  4001ee:	d0f5      	beq.n	4001dc <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4001f0:	68e3      	ldr	r3, [r4, #12]
  4001f2:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4001f4:	6863      	ldr	r3, [r4, #4]
  4001f6:	ea25 0503 	bic.w	r5, r5, r3
  4001fa:	e7ef      	b.n	4001dc <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4001fc:	4b07      	ldr	r3, [pc, #28]	; (40021c <pio_handler_process+0x60>)
  4001fe:	681b      	ldr	r3, [r3, #0]
  400200:	b123      	cbz	r3, 40020c <pio_handler_process+0x50>
		if (pio_capture_handler) {
  400202:	4b07      	ldr	r3, [pc, #28]	; (400220 <pio_handler_process+0x64>)
  400204:	681b      	ldr	r3, [r3, #0]
  400206:	b10b      	cbz	r3, 40020c <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400208:	4648      	mov	r0, r9
  40020a:	4798      	blx	r3
  40020c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400210:	00400165 	.word	0x00400165
  400214:	00400169 	.word	0x00400169
  400218:	20000450 	.word	0x20000450
  40021c:	200004c4 	.word	0x200004c4
  400220:	200004c0 	.word	0x200004c0

00400224 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400224:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400226:	2109      	movs	r1, #9
  400228:	4801      	ldr	r0, [pc, #4]	; (400230 <PIOA_Handler+0xc>)
  40022a:	4b02      	ldr	r3, [pc, #8]	; (400234 <PIOA_Handler+0x10>)
  40022c:	4798      	blx	r3
  40022e:	bd08      	pop	{r3, pc}
  400230:	400e0e00 	.word	0x400e0e00
  400234:	004001bd 	.word	0x004001bd

00400238 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400238:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40023a:	210a      	movs	r1, #10
  40023c:	4801      	ldr	r0, [pc, #4]	; (400244 <PIOB_Handler+0xc>)
  40023e:	4b02      	ldr	r3, [pc, #8]	; (400248 <PIOB_Handler+0x10>)
  400240:	4798      	blx	r3
  400242:	bd08      	pop	{r3, pc}
  400244:	400e1000 	.word	0x400e1000
  400248:	004001bd 	.word	0x004001bd

0040024c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  40024c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40024e:	210b      	movs	r1, #11
  400250:	4801      	ldr	r0, [pc, #4]	; (400258 <PIOC_Handler+0xc>)
  400252:	4b02      	ldr	r3, [pc, #8]	; (40025c <PIOC_Handler+0x10>)
  400254:	4798      	blx	r3
  400256:	bd08      	pop	{r3, pc}
  400258:	400e1200 	.word	0x400e1200
  40025c:	004001bd 	.word	0x004001bd

00400260 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400260:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400262:	210c      	movs	r1, #12
  400264:	4801      	ldr	r0, [pc, #4]	; (40026c <PIOD_Handler+0xc>)
  400266:	4b02      	ldr	r3, [pc, #8]	; (400270 <PIOD_Handler+0x10>)
  400268:	4798      	blx	r3
  40026a:	bd08      	pop	{r3, pc}
  40026c:	400e1400 	.word	0x400e1400
  400270:	004001bd 	.word	0x004001bd

00400274 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400274:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400276:	210d      	movs	r1, #13
  400278:	4801      	ldr	r0, [pc, #4]	; (400280 <PIOE_Handler+0xc>)
  40027a:	4b02      	ldr	r3, [pc, #8]	; (400284 <PIOE_Handler+0x10>)
  40027c:	4798      	blx	r3
  40027e:	bd08      	pop	{r3, pc}
  400280:	400e1600 	.word	0x400e1600
  400284:	004001bd 	.word	0x004001bd

00400288 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  400288:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40028a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40028e:	4b49      	ldr	r3, [pc, #292]	; (4003b4 <board_init+0x12c>)
  400290:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400292:	2009      	movs	r0, #9
  400294:	4c48      	ldr	r4, [pc, #288]	; (4003b8 <board_init+0x130>)
  400296:	47a0      	blx	r4
  400298:	200a      	movs	r0, #10
  40029a:	47a0      	blx	r4
  40029c:	200b      	movs	r0, #11
  40029e:	47a0      	blx	r4
  4002a0:	200c      	movs	r0, #12
  4002a2:	47a0      	blx	r4
  4002a4:	200d      	movs	r0, #13
  4002a6:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4002a8:	4b44      	ldr	r3, [pc, #272]	; (4003bc <board_init+0x134>)
  4002aa:	2201      	movs	r2, #1
  4002ac:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4002ae:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4002b2:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4002b4:	4942      	ldr	r1, [pc, #264]	; (4003c0 <board_init+0x138>)
  4002b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  4002ba:	610a      	str	r2, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4002bc:	f8c1 20a0 	str.w	r2, [r1, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4002c0:	630a      	str	r2, [r1, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4002c2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  4002c6:	6108      	str	r0, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4002c8:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4002cc:	6308      	str	r0, [r1, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4002ce:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4002d2:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4002d4:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4002d8:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4002da:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4002de:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4002e0:	6219      	str	r1, [r3, #32]
		base->PIO_IFSCER = mask;
  4002e2:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4002e6:	6f18      	ldr	r0, [r3, #112]	; 0x70
  4002e8:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
  4002ec:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4002ee:	6f58      	ldr	r0, [r3, #116]	; 0x74
  4002f0:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
  4002f4:	6758      	str	r0, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4002f6:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4002fa:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4002fe:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400302:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400304:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400308:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40030a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40030e:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400310:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400312:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400316:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400318:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
  40031c:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40031e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400320:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
  400324:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  400326:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  40032a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	base->PIO_AIMER = mask;
  40032e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400332:	2202      	movs	r2, #2
  400334:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400336:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40033a:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40033c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400340:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400342:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400344:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400348:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40034a:	f021 0102 	bic.w	r1, r1, #2
  40034e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400350:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400352:	f021 0102 	bic.w	r1, r1, #2
  400356:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_AIMDR = mask;
  400358:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40035c:	2204      	movs	r2, #4
  40035e:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400360:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400364:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400366:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40036a:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  40036c:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  40036e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400372:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400374:	f021 0104 	bic.w	r1, r1, #4
  400378:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40037a:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40037c:	f021 0104 	bic.w	r1, r1, #4
  400380:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  400382:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400386:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	base->PIO_AIMER = mask;
  40038a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  40038e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  400392:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400394:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400398:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40039a:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40039c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4003a0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003a2:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  4003a6:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003a8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003aa:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  4003ae:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003b0:	605a      	str	r2, [r3, #4]
  4003b2:	bd10      	pop	{r4, pc}
  4003b4:	400e1850 	.word	0x400e1850
  4003b8:	004003c5 	.word	0x004003c5
  4003bc:	400e0e00 	.word	0x400e0e00
  4003c0:	400e1400 	.word	0x400e1400

004003c4 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  4003c4:	282f      	cmp	r0, #47	; 0x2f
  4003c6:	d81e      	bhi.n	400406 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4003c8:	281f      	cmp	r0, #31
  4003ca:	d80c      	bhi.n	4003e6 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4003cc:	4b11      	ldr	r3, [pc, #68]	; (400414 <pmc_enable_periph_clk+0x50>)
  4003ce:	699a      	ldr	r2, [r3, #24]
  4003d0:	2301      	movs	r3, #1
  4003d2:	4083      	lsls	r3, r0
  4003d4:	4393      	bics	r3, r2
  4003d6:	d018      	beq.n	40040a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4003d8:	2301      	movs	r3, #1
  4003da:	fa03 f000 	lsl.w	r0, r3, r0
  4003de:	4b0d      	ldr	r3, [pc, #52]	; (400414 <pmc_enable_periph_clk+0x50>)
  4003e0:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4003e2:	2000      	movs	r0, #0
  4003e4:	4770      	bx	lr
		ul_id -= 32;
  4003e6:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4003e8:	4b0a      	ldr	r3, [pc, #40]	; (400414 <pmc_enable_periph_clk+0x50>)
  4003ea:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4003ee:	2301      	movs	r3, #1
  4003f0:	4083      	lsls	r3, r0
  4003f2:	4393      	bics	r3, r2
  4003f4:	d00b      	beq.n	40040e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4003f6:	2301      	movs	r3, #1
  4003f8:	fa03 f000 	lsl.w	r0, r3, r0
  4003fc:	4b05      	ldr	r3, [pc, #20]	; (400414 <pmc_enable_periph_clk+0x50>)
  4003fe:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  400402:	2000      	movs	r0, #0
  400404:	4770      	bx	lr
		return 1;
  400406:	2001      	movs	r0, #1
  400408:	4770      	bx	lr
	return 0;
  40040a:	2000      	movs	r0, #0
  40040c:	4770      	bx	lr
  40040e:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  400410:	4770      	bx	lr
  400412:	bf00      	nop
  400414:	400e0400 	.word	0x400e0400

00400418 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400418:	e7fe      	b.n	400418 <Dummy_Handler>
	...

0040041c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  40041c:	b500      	push	{lr}
  40041e:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  400420:	4b25      	ldr	r3, [pc, #148]	; (4004b8 <Reset_Handler+0x9c>)
  400422:	4a26      	ldr	r2, [pc, #152]	; (4004bc <Reset_Handler+0xa0>)
  400424:	429a      	cmp	r2, r3
  400426:	d010      	beq.n	40044a <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
  400428:	4b25      	ldr	r3, [pc, #148]	; (4004c0 <Reset_Handler+0xa4>)
  40042a:	4a23      	ldr	r2, [pc, #140]	; (4004b8 <Reset_Handler+0x9c>)
  40042c:	429a      	cmp	r2, r3
  40042e:	d20c      	bcs.n	40044a <Reset_Handler+0x2e>
  400430:	3b01      	subs	r3, #1
  400432:	1a9b      	subs	r3, r3, r2
  400434:	f023 0303 	bic.w	r3, r3, #3
  400438:	3304      	adds	r3, #4
  40043a:	4413      	add	r3, r2
  40043c:	491f      	ldr	r1, [pc, #124]	; (4004bc <Reset_Handler+0xa0>)
			*pDest++ = *pSrc++;
  40043e:	f851 0b04 	ldr.w	r0, [r1], #4
  400442:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  400446:	429a      	cmp	r2, r3
  400448:	d1f9      	bne.n	40043e <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40044a:	4b1e      	ldr	r3, [pc, #120]	; (4004c4 <Reset_Handler+0xa8>)
  40044c:	4a1e      	ldr	r2, [pc, #120]	; (4004c8 <Reset_Handler+0xac>)
  40044e:	429a      	cmp	r2, r3
  400450:	d20a      	bcs.n	400468 <Reset_Handler+0x4c>
  400452:	3b01      	subs	r3, #1
  400454:	1a9b      	subs	r3, r3, r2
  400456:	f023 0303 	bic.w	r3, r3, #3
  40045a:	3304      	adds	r3, #4
  40045c:	4413      	add	r3, r2
		*pDest++ = 0;
  40045e:	2100      	movs	r1, #0
  400460:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  400464:	4293      	cmp	r3, r2
  400466:	d1fb      	bne.n	400460 <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400468:	4a18      	ldr	r2, [pc, #96]	; (4004cc <Reset_Handler+0xb0>)
  40046a:	4b19      	ldr	r3, [pc, #100]	; (4004d0 <Reset_Handler+0xb4>)
  40046c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400470:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400472:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400476:	fab3 f383 	clz	r3, r3
  40047a:	095b      	lsrs	r3, r3, #5
  40047c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40047e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400480:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400484:	2200      	movs	r2, #0
  400486:	4b13      	ldr	r3, [pc, #76]	; (4004d4 <Reset_Handler+0xb8>)
  400488:	701a      	strb	r2, [r3, #0]
	return flags;
  40048a:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  40048c:	4a12      	ldr	r2, [pc, #72]	; (4004d8 <Reset_Handler+0xbc>)
  40048e:	6813      	ldr	r3, [r2, #0]
  400490:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400494:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  400496:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40049a:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40049e:	b129      	cbz	r1, 4004ac <Reset_Handler+0x90>
		cpu_irq_enable();
  4004a0:	2201      	movs	r2, #1
  4004a2:	4b0c      	ldr	r3, [pc, #48]	; (4004d4 <Reset_Handler+0xb8>)
  4004a4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  4004a6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4004aa:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  4004ac:	4b0b      	ldr	r3, [pc, #44]	; (4004dc <Reset_Handler+0xc0>)
  4004ae:	4798      	blx	r3

	/* Branch to main function */
	main();
  4004b0:	4b0b      	ldr	r3, [pc, #44]	; (4004e0 <Reset_Handler+0xc4>)
  4004b2:	4798      	blx	r3
  4004b4:	e7fe      	b.n	4004b4 <Reset_Handler+0x98>
  4004b6:	bf00      	nop
  4004b8:	20000000 	.word	0x20000000
  4004bc:	004006c8 	.word	0x004006c8
  4004c0:	20000434 	.word	0x20000434
  4004c4:	200004ec 	.word	0x200004ec
  4004c8:	20000434 	.word	0x20000434
  4004cc:	e000ed00 	.word	0xe000ed00
  4004d0:	00400000 	.word	0x00400000
  4004d4:	20000000 	.word	0x20000000
  4004d8:	e000ed88 	.word	0xe000ed88
  4004dc:	00400531 	.word	0x00400531
  4004e0:	004004e5 	.word	0x004004e5

004004e4 <main>:
#include "pio.h"
#include "sam4e_ek.h"
#include "conf_board.h"

int main(void)
{
  4004e4:	b508      	push	{r3, lr}
	board_init();
  4004e6:	4b0d      	ldr	r3, [pc, #52]	; (40051c <main+0x38>)
  4004e8:	4798      	blx	r3
  4004ea:	2009      	movs	r0, #9
  4004ec:	4c0c      	ldr	r4, [pc, #48]	; (400520 <main+0x3c>)
  4004ee:	47a0      	blx	r4
  4004f0:	200a      	movs	r0, #10
  4004f2:	47a0      	blx	r4
  4004f4:	200b      	movs	r0, #11
  4004f6:	47a0      	blx	r4
  4004f8:	200c      	movs	r0, #12
  4004fa:	47a0      	blx	r4
  4004fc:	200d      	movs	r0, #13
  4004fe:	47a0      	blx	r4
	ioport_init();
	while (1)
	{
		if (pio_get_pin_value(19))
  400500:	4d08      	ldr	r5, [pc, #32]	; (400524 <main+0x40>)
		{
			pio_set_pin_low(LED1_GPIO);
  400502:	2474      	movs	r4, #116	; 0x74
  400504:	4e08      	ldr	r6, [pc, #32]	; (400528 <main+0x44>)
  400506:	e002      	b.n	40050e <main+0x2a>
		}
		pio_set_pin_high(LED1_GPIO);
  400508:	4620      	mov	r0, r4
  40050a:	4b08      	ldr	r3, [pc, #32]	; (40052c <main+0x48>)
  40050c:	4798      	blx	r3
		if (pio_get_pin_value(19))
  40050e:	2013      	movs	r0, #19
  400510:	47a8      	blx	r5
  400512:	2800      	cmp	r0, #0
  400514:	d0f8      	beq.n	400508 <main+0x24>
			pio_set_pin_low(LED1_GPIO);
  400516:	4620      	mov	r0, r4
  400518:	47b0      	blx	r6
  40051a:	e7f5      	b.n	400508 <main+0x24>
  40051c:	00400289 	.word	0x00400289
  400520:	004003c5 	.word	0x004003c5
  400524:	0040016d 	.word	0x0040016d
  400528:	004001a3 	.word	0x004001a3
  40052c:	00400189 	.word	0x00400189

00400530 <__libc_init_array>:
  400530:	b570      	push	{r4, r5, r6, lr}
  400532:	4e0f      	ldr	r6, [pc, #60]	; (400570 <__libc_init_array+0x40>)
  400534:	4d0f      	ldr	r5, [pc, #60]	; (400574 <__libc_init_array+0x44>)
  400536:	1b76      	subs	r6, r6, r5
  400538:	10b6      	asrs	r6, r6, #2
  40053a:	bf18      	it	ne
  40053c:	2400      	movne	r4, #0
  40053e:	d005      	beq.n	40054c <__libc_init_array+0x1c>
  400540:	3401      	adds	r4, #1
  400542:	f855 3b04 	ldr.w	r3, [r5], #4
  400546:	4798      	blx	r3
  400548:	42a6      	cmp	r6, r4
  40054a:	d1f9      	bne.n	400540 <__libc_init_array+0x10>
  40054c:	4e0a      	ldr	r6, [pc, #40]	; (400578 <__libc_init_array+0x48>)
  40054e:	4d0b      	ldr	r5, [pc, #44]	; (40057c <__libc_init_array+0x4c>)
  400550:	1b76      	subs	r6, r6, r5
  400552:	f000 f8a7 	bl	4006a4 <_init>
  400556:	10b6      	asrs	r6, r6, #2
  400558:	bf18      	it	ne
  40055a:	2400      	movne	r4, #0
  40055c:	d006      	beq.n	40056c <__libc_init_array+0x3c>
  40055e:	3401      	adds	r4, #1
  400560:	f855 3b04 	ldr.w	r3, [r5], #4
  400564:	4798      	blx	r3
  400566:	42a6      	cmp	r6, r4
  400568:	d1f9      	bne.n	40055e <__libc_init_array+0x2e>
  40056a:	bd70      	pop	{r4, r5, r6, pc}
  40056c:	bd70      	pop	{r4, r5, r6, pc}
  40056e:	bf00      	nop
  400570:	004006b0 	.word	0x004006b0
  400574:	004006b0 	.word	0x004006b0
  400578:	004006b8 	.word	0x004006b8
  40057c:	004006b0 	.word	0x004006b0

00400580 <register_fini>:
  400580:	4b02      	ldr	r3, [pc, #8]	; (40058c <register_fini+0xc>)
  400582:	b113      	cbz	r3, 40058a <register_fini+0xa>
  400584:	4802      	ldr	r0, [pc, #8]	; (400590 <register_fini+0x10>)
  400586:	f000 b805 	b.w	400594 <atexit>
  40058a:	4770      	bx	lr
  40058c:	00000000 	.word	0x00000000
  400590:	004005a1 	.word	0x004005a1

00400594 <atexit>:
  400594:	2300      	movs	r3, #0
  400596:	4601      	mov	r1, r0
  400598:	461a      	mov	r2, r3
  40059a:	4618      	mov	r0, r3
  40059c:	f000 b81e 	b.w	4005dc <__register_exitproc>

004005a0 <__libc_fini_array>:
  4005a0:	b538      	push	{r3, r4, r5, lr}
  4005a2:	4c0a      	ldr	r4, [pc, #40]	; (4005cc <__libc_fini_array+0x2c>)
  4005a4:	4d0a      	ldr	r5, [pc, #40]	; (4005d0 <__libc_fini_array+0x30>)
  4005a6:	1b64      	subs	r4, r4, r5
  4005a8:	10a4      	asrs	r4, r4, #2
  4005aa:	d00a      	beq.n	4005c2 <__libc_fini_array+0x22>
  4005ac:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4005b0:	3b01      	subs	r3, #1
  4005b2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4005b6:	3c01      	subs	r4, #1
  4005b8:	f855 3904 	ldr.w	r3, [r5], #-4
  4005bc:	4798      	blx	r3
  4005be:	2c00      	cmp	r4, #0
  4005c0:	d1f9      	bne.n	4005b6 <__libc_fini_array+0x16>
  4005c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4005c6:	f000 b877 	b.w	4006b8 <_fini>
  4005ca:	bf00      	nop
  4005cc:	004006c8 	.word	0x004006c8
  4005d0:	004006c4 	.word	0x004006c4

004005d4 <__retarget_lock_acquire_recursive>:
  4005d4:	4770      	bx	lr
  4005d6:	bf00      	nop

004005d8 <__retarget_lock_release_recursive>:
  4005d8:	4770      	bx	lr
  4005da:	bf00      	nop

004005dc <__register_exitproc>:
  4005dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4005e0:	4d2c      	ldr	r5, [pc, #176]	; (400694 <__register_exitproc+0xb8>)
  4005e2:	4606      	mov	r6, r0
  4005e4:	6828      	ldr	r0, [r5, #0]
  4005e6:	4698      	mov	r8, r3
  4005e8:	460f      	mov	r7, r1
  4005ea:	4691      	mov	r9, r2
  4005ec:	f7ff fff2 	bl	4005d4 <__retarget_lock_acquire_recursive>
  4005f0:	4b29      	ldr	r3, [pc, #164]	; (400698 <__register_exitproc+0xbc>)
  4005f2:	681c      	ldr	r4, [r3, #0]
  4005f4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4005f8:	2b00      	cmp	r3, #0
  4005fa:	d03e      	beq.n	40067a <__register_exitproc+0x9e>
  4005fc:	685a      	ldr	r2, [r3, #4]
  4005fe:	2a1f      	cmp	r2, #31
  400600:	dc1c      	bgt.n	40063c <__register_exitproc+0x60>
  400602:	f102 0e01 	add.w	lr, r2, #1
  400606:	b176      	cbz	r6, 400626 <__register_exitproc+0x4a>
  400608:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40060c:	2401      	movs	r4, #1
  40060e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  400612:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  400616:	4094      	lsls	r4, r2
  400618:	4320      	orrs	r0, r4
  40061a:	2e02      	cmp	r6, #2
  40061c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  400620:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  400624:	d023      	beq.n	40066e <__register_exitproc+0x92>
  400626:	3202      	adds	r2, #2
  400628:	f8c3 e004 	str.w	lr, [r3, #4]
  40062c:	6828      	ldr	r0, [r5, #0]
  40062e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  400632:	f7ff ffd1 	bl	4005d8 <__retarget_lock_release_recursive>
  400636:	2000      	movs	r0, #0
  400638:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40063c:	4b17      	ldr	r3, [pc, #92]	; (40069c <__register_exitproc+0xc0>)
  40063e:	b30b      	cbz	r3, 400684 <__register_exitproc+0xa8>
  400640:	f44f 70c8 	mov.w	r0, #400	; 0x190
  400644:	f3af 8000 	nop.w
  400648:	4603      	mov	r3, r0
  40064a:	b1d8      	cbz	r0, 400684 <__register_exitproc+0xa8>
  40064c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  400650:	6002      	str	r2, [r0, #0]
  400652:	2100      	movs	r1, #0
  400654:	6041      	str	r1, [r0, #4]
  400656:	460a      	mov	r2, r1
  400658:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40065c:	f04f 0e01 	mov.w	lr, #1
  400660:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  400664:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  400668:	2e00      	cmp	r6, #0
  40066a:	d0dc      	beq.n	400626 <__register_exitproc+0x4a>
  40066c:	e7cc      	b.n	400608 <__register_exitproc+0x2c>
  40066e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  400672:	430c      	orrs	r4, r1
  400674:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  400678:	e7d5      	b.n	400626 <__register_exitproc+0x4a>
  40067a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40067e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  400682:	e7bb      	b.n	4005fc <__register_exitproc+0x20>
  400684:	6828      	ldr	r0, [r5, #0]
  400686:	f7ff ffa7 	bl	4005d8 <__retarget_lock_release_recursive>
  40068a:	f04f 30ff 	mov.w	r0, #4294967295
  40068e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400692:	bf00      	nop
  400694:	20000430 	.word	0x20000430
  400698:	004006a0 	.word	0x004006a0
  40069c:	00000000 	.word	0x00000000

004006a0 <_global_impure_ptr>:
  4006a0:	20000008                                ... 

004006a4 <_init>:
  4006a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4006a6:	bf00      	nop
  4006a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4006aa:	bc08      	pop	{r3}
  4006ac:	469e      	mov	lr, r3
  4006ae:	4770      	bx	lr

004006b0 <__init_array_start>:
  4006b0:	00400581 	.word	0x00400581

004006b4 <__frame_dummy_init_array_entry>:
  4006b4:	0040011d                                ..@.

004006b8 <_fini>:
  4006b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4006ba:	bf00      	nop
  4006bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4006be:	bc08      	pop	{r3}
  4006c0:	469e      	mov	lr, r3
  4006c2:	4770      	bx	lr

004006c4 <__fini_array_start>:
  4006c4:	004000f9 	.word	0x004000f9
