
laboratory2sol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000868  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00400868  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000bc  20000434  00400c9c  00020434  2**2
                  ALLOC
  3 .stack        00003000  200004f0  00400d58  00020434  2**0
                  ALLOC
  4 .ARM.attributes 0000002e  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020462  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000a594  00000000  00000000  000204bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000015ce  00000000  00000000  0002aa4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002222  00000000  00000000  0002c01d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000498  00000000  00000000  0002e23f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000448  00000000  00000000  0002e6d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000139f0  00000000  00000000  0002eb1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00005534  00000000  00000000  0004250f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00060ce3  00000000  00000000  00047a43  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000ae8  00000000  00000000  000a8728  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	f0 34 00 20 49 05 40 00 45 05 40 00 45 05 40 00     .4. I.@.E.@.E.@.
  400010:	45 05 40 00 45 05 40 00 45 05 40 00 00 00 00 00     E.@.E.@.E.@.....
	...
  40002c:	45 05 40 00 45 05 40 00 00 00 00 00 45 05 40 00     E.@.E.@.....E.@.
  40003c:	45 05 40 00 45 05 40 00 45 05 40 00 45 05 40 00     E.@.E.@.E.@.E.@.
  40004c:	45 05 40 00 45 05 40 00 45 05 40 00 45 05 40 00     E.@.E.@.E.@.E.@.
  40005c:	45 05 40 00 45 05 40 00 d1 02 40 00 e5 02 40 00     E.@.E.@...@...@.
  40006c:	f9 02 40 00 0d 03 40 00 21 03 40 00 45 05 40 00     ..@...@.!.@.E.@.
  40007c:	45 05 40 00 45 05 40 00 45 05 40 00 45 05 40 00     E.@.E.@.E.@.E.@.
  40008c:	45 05 40 00 45 05 40 00 45 05 40 00 45 05 40 00     E.@.E.@.E.@.E.@.
  40009c:	45 05 40 00 45 05 40 00 45 05 40 00 45 05 40 00     E.@.E.@.E.@.E.@.
  4000ac:	45 05 40 00 45 05 40 00 45 05 40 00 45 05 40 00     E.@.E.@.E.@.E.@.
  4000bc:	45 05 40 00 45 05 40 00 45 05 40 00 45 05 40 00     E.@.E.@.E.@.E.@.
  4000cc:	45 05 40 00 45 05 40 00 45 05 40 00 45 05 40 00     E.@.E.@.E.@.E.@.
  4000dc:	45 05 40 00 45 05 40 00 45 05 40 00 45 05 40 00     E.@.E.@.E.@.E.@.
  4000ec:	45 05 40 00 45 05 40 00 45 05 40 00                 E.@.E.@.E.@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	20000434 	.word	0x20000434
  400114:	00000000 	.word	0x00000000
  400118:	00400868 	.word	0x00400868

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	00400868 	.word	0x00400868
  400158:	20000438 	.word	0x20000438
  40015c:	00400868 	.word	0x00400868
  400160:	00000000 	.word	0x00000000

00400164 <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  400164:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  400168:	0053      	lsls	r3, r2, #1
  40016a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40016e:	fbb2 f2f3 	udiv	r2, r2, r3
  400172:	3a01      	subs	r2, #1
  400174:	f3c2 020d 	ubfx	r2, r2, #0, #14
  400178:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  40017c:	4770      	bx	lr

0040017e <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  40017e:	f012 0f10 	tst.w	r2, #16
  400182:	d010      	beq.n	4001a6 <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  400184:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400188:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  40018c:	bf14      	ite	ne
  40018e:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  400192:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  400196:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  40019a:	bf14      	ite	ne
  40019c:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  4001a0:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
  4001a4:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  4001a6:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  4001aa:	4770      	bx	lr

004001ac <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IER = ul_mask;
  4001ac:	6401      	str	r1, [r0, #64]	; 0x40
  4001ae:	4770      	bx	lr

004001b0 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4001b0:	6441      	str	r1, [r0, #68]	; 0x44
  4001b2:	4770      	bx	lr

004001b4 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4001b4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4001b6:	4770      	bx	lr

004001b8 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4001b8:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4001ba:	4770      	bx	lr

004001bc <pio_get_pin_value>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4001bc:	0943      	lsrs	r3, r0, #5
  4001be:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4001c2:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4001c6:	025b      	lsls	r3, r3, #9
	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
  4001c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  4001ca:	f000 001f 	and.w	r0, r0, #31
  4001ce:	fa23 f000 	lsr.w	r0, r3, r0
}
  4001d2:	f000 0001 	and.w	r0, r0, #1
  4001d6:	4770      	bx	lr

004001d8 <pio_toggle_pin>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4001d8:	0943      	lsrs	r3, r0, #5
  4001da:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4001de:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4001e2:	025b      	lsls	r3, r3, #9
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
  4001e4:	6b99      	ldr	r1, [r3, #56]	; 0x38
  4001e6:	f000 021f 	and.w	r2, r0, #31
  4001ea:	2001      	movs	r0, #1
  4001ec:	4090      	lsls	r0, r2
  4001ee:	4201      	tst	r1, r0
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  4001f0:	bf14      	ite	ne
  4001f2:	6358      	strne	r0, [r3, #52]	; 0x34
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  4001f4:	6318      	streq	r0, [r3, #48]	; 0x30
  4001f6:	4770      	bx	lr

004001f8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4001f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4001fc:	4681      	mov	r9, r0
  4001fe:	460f      	mov	r7, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400200:	4b12      	ldr	r3, [pc, #72]	; (40024c <pio_handler_process+0x54>)
  400202:	4798      	blx	r3
  400204:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400206:	4648      	mov	r0, r9
  400208:	4b11      	ldr	r3, [pc, #68]	; (400250 <pio_handler_process+0x58>)
  40020a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  40020c:	4005      	ands	r5, r0
  40020e:	d013      	beq.n	400238 <pio_handler_process+0x40>
  400210:	4c10      	ldr	r4, [pc, #64]	; (400254 <pio_handler_process+0x5c>)
  400212:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400216:	e003      	b.n	400220 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400218:	42b4      	cmp	r4, r6
  40021a:	d00d      	beq.n	400238 <pio_handler_process+0x40>
  40021c:	3410      	adds	r4, #16
		while (status != 0) {
  40021e:	b15d      	cbz	r5, 400238 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400220:	6820      	ldr	r0, [r4, #0]
  400222:	42b8      	cmp	r0, r7
  400224:	d1f8      	bne.n	400218 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400226:	6861      	ldr	r1, [r4, #4]
  400228:	4229      	tst	r1, r5
  40022a:	d0f5      	beq.n	400218 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40022c:	68e3      	ldr	r3, [r4, #12]
  40022e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400230:	6863      	ldr	r3, [r4, #4]
  400232:	ea25 0503 	bic.w	r5, r5, r3
  400236:	e7ef      	b.n	400218 <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400238:	4b07      	ldr	r3, [pc, #28]	; (400258 <pio_handler_process+0x60>)
  40023a:	681b      	ldr	r3, [r3, #0]
  40023c:	b123      	cbz	r3, 400248 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  40023e:	4b07      	ldr	r3, [pc, #28]	; (40025c <pio_handler_process+0x64>)
  400240:	681b      	ldr	r3, [r3, #0]
  400242:	b10b      	cbz	r3, 400248 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400244:	4648      	mov	r0, r9
  400246:	4798      	blx	r3
  400248:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40024c:	004001b5 	.word	0x004001b5
  400250:	004001b9 	.word	0x004001b9
  400254:	20000450 	.word	0x20000450
  400258:	200004c8 	.word	0x200004c8
  40025c:	200004c4 	.word	0x200004c4

00400260 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400262:	4c18      	ldr	r4, [pc, #96]	; (4002c4 <pio_handler_set+0x64>)
  400264:	6826      	ldr	r6, [r4, #0]
  400266:	2e06      	cmp	r6, #6
  400268:	d829      	bhi.n	4002be <pio_handler_set+0x5e>
  40026a:	f04f 0c00 	mov.w	ip, #0
  40026e:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400270:	4f15      	ldr	r7, [pc, #84]	; (4002c8 <pio_handler_set+0x68>)
  400272:	e004      	b.n	40027e <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400274:	3401      	adds	r4, #1
  400276:	b2e4      	uxtb	r4, r4
  400278:	46a4      	mov	ip, r4
  40027a:	42a6      	cmp	r6, r4
  40027c:	d309      	bcc.n	400292 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  40027e:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400280:	0125      	lsls	r5, r4, #4
  400282:	597d      	ldr	r5, [r7, r5]
  400284:	428d      	cmp	r5, r1
  400286:	d1f5      	bne.n	400274 <pio_handler_set+0x14>
  400288:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  40028c:	686d      	ldr	r5, [r5, #4]
  40028e:	4295      	cmp	r5, r2
  400290:	d1f0      	bne.n	400274 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400292:	4d0d      	ldr	r5, [pc, #52]	; (4002c8 <pio_handler_set+0x68>)
  400294:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  400298:	eb05 040e 	add.w	r4, r5, lr
  40029c:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  4002a0:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  4002a2:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  4002a4:	9906      	ldr	r1, [sp, #24]
  4002a6:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  4002a8:	3601      	adds	r6, #1
  4002aa:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
  4002ac:	bf04      	itt	eq
  4002ae:	4905      	ldreq	r1, [pc, #20]	; (4002c4 <pio_handler_set+0x64>)
  4002b0:	600e      	streq	r6, [r1, #0]
  4002b2:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4002b4:	461a      	mov	r2, r3
  4002b6:	4b05      	ldr	r3, [pc, #20]	; (4002cc <pio_handler_set+0x6c>)
  4002b8:	4798      	blx	r3

	return 0;
  4002ba:	2000      	movs	r0, #0
  4002bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
  4002be:	2001      	movs	r0, #1
}
  4002c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4002c2:	bf00      	nop
  4002c4:	200004c0 	.word	0x200004c0
  4002c8:	20000450 	.word	0x20000450
  4002cc:	0040017f 	.word	0x0040017f

004002d0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4002d0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4002d2:	2109      	movs	r1, #9
  4002d4:	4801      	ldr	r0, [pc, #4]	; (4002dc <PIOA_Handler+0xc>)
  4002d6:	4b02      	ldr	r3, [pc, #8]	; (4002e0 <PIOA_Handler+0x10>)
  4002d8:	4798      	blx	r3
  4002da:	bd08      	pop	{r3, pc}
  4002dc:	400e0e00 	.word	0x400e0e00
  4002e0:	004001f9 	.word	0x004001f9

004002e4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4002e4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4002e6:	210a      	movs	r1, #10
  4002e8:	4801      	ldr	r0, [pc, #4]	; (4002f0 <PIOB_Handler+0xc>)
  4002ea:	4b02      	ldr	r3, [pc, #8]	; (4002f4 <PIOB_Handler+0x10>)
  4002ec:	4798      	blx	r3
  4002ee:	bd08      	pop	{r3, pc}
  4002f0:	400e1000 	.word	0x400e1000
  4002f4:	004001f9 	.word	0x004001f9

004002f8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4002f8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4002fa:	210b      	movs	r1, #11
  4002fc:	4801      	ldr	r0, [pc, #4]	; (400304 <PIOC_Handler+0xc>)
  4002fe:	4b02      	ldr	r3, [pc, #8]	; (400308 <PIOC_Handler+0x10>)
  400300:	4798      	blx	r3
  400302:	bd08      	pop	{r3, pc}
  400304:	400e1200 	.word	0x400e1200
  400308:	004001f9 	.word	0x004001f9

0040030c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  40030c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40030e:	210c      	movs	r1, #12
  400310:	4801      	ldr	r0, [pc, #4]	; (400318 <PIOD_Handler+0xc>)
  400312:	4b02      	ldr	r3, [pc, #8]	; (40031c <PIOD_Handler+0x10>)
  400314:	4798      	blx	r3
  400316:	bd08      	pop	{r3, pc}
  400318:	400e1400 	.word	0x400e1400
  40031c:	004001f9 	.word	0x004001f9

00400320 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400320:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400322:	210d      	movs	r1, #13
  400324:	4801      	ldr	r0, [pc, #4]	; (40032c <PIOE_Handler+0xc>)
  400326:	4b02      	ldr	r3, [pc, #8]	; (400330 <PIOE_Handler+0x10>)
  400328:	4798      	blx	r3
  40032a:	bd08      	pop	{r3, pc}
  40032c:	400e1600 	.word	0x400e1600
  400330:	004001f9 	.word	0x004001f9

00400334 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  400334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400336:	4605      	mov	r5, r0
  400338:	460c      	mov	r4, r1
  40033a:	4617      	mov	r7, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  40033c:	4b18      	ldr	r3, [pc, #96]	; (4003a0 <pio_handler_set_priority+0x6c>)
  40033e:	4798      	blx	r3
  400340:	4606      	mov	r6, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  400342:	f04f 31ff 	mov.w	r1, #4294967295
  400346:	4628      	mov	r0, r5
  400348:	4b16      	ldr	r3, [pc, #88]	; (4003a4 <pio_handler_set_priority+0x70>)
  40034a:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  40034c:	4628      	mov	r0, r5
  40034e:	4b16      	ldr	r3, [pc, #88]	; (4003a8 <pio_handler_set_priority+0x74>)
  400350:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  400352:	b2e2      	uxtb	r2, r4
  400354:	f002 031f 	and.w	r3, r2, #31
  400358:	2101      	movs	r1, #1
  40035a:	4099      	lsls	r1, r3
  40035c:	0963      	lsrs	r3, r4, #5
  40035e:	009b      	lsls	r3, r3, #2
  400360:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  400364:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
  400368:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40036c:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
  400370:	2c00      	cmp	r4, #0
  400372:	db0d      	blt.n	400390 <pio_handler_set_priority+0x5c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  400374:	013f      	lsls	r7, r7, #4
  400376:	b2ff      	uxtb	r7, r7
  400378:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
  40037c:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
  400380:	f884 7300 	strb.w	r7, [r4, #768]	; 0x300
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400384:	6019      	str	r1, [r3, #0]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  400386:	4631      	mov	r1, r6
  400388:	4628      	mov	r0, r5
  40038a:	4b08      	ldr	r3, [pc, #32]	; (4003ac <pio_handler_set_priority+0x78>)
  40038c:	4798      	blx	r3
  40038e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400390:	f002 020f 	and.w	r2, r2, #15
  400394:	013f      	lsls	r7, r7, #4
  400396:	b2ff      	uxtb	r7, r7
  400398:	4805      	ldr	r0, [pc, #20]	; (4003b0 <pio_handler_set_priority+0x7c>)
  40039a:	5487      	strb	r7, [r0, r2]
  40039c:	e7f2      	b.n	400384 <pio_handler_set_priority+0x50>
  40039e:	bf00      	nop
  4003a0:	004001b9 	.word	0x004001b9
  4003a4:	004001b1 	.word	0x004001b1
  4003a8:	004001b5 	.word	0x004001b5
  4003ac:	004001ad 	.word	0x004001ad
  4003b0:	e000ed14 	.word	0xe000ed14

004003b4 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  4003b4:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4003b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4003ba:	4b49      	ldr	r3, [pc, #292]	; (4004e0 <board_init+0x12c>)
  4003bc:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4003be:	2009      	movs	r0, #9
  4003c0:	4c48      	ldr	r4, [pc, #288]	; (4004e4 <board_init+0x130>)
  4003c2:	47a0      	blx	r4
  4003c4:	200a      	movs	r0, #10
  4003c6:	47a0      	blx	r4
  4003c8:	200b      	movs	r0, #11
  4003ca:	47a0      	blx	r4
  4003cc:	200c      	movs	r0, #12
  4003ce:	47a0      	blx	r4
  4003d0:	200d      	movs	r0, #13
  4003d2:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4003d4:	4b44      	ldr	r3, [pc, #272]	; (4004e8 <board_init+0x134>)
  4003d6:	2201      	movs	r2, #1
  4003d8:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003da:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4003de:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4003e0:	4942      	ldr	r1, [pc, #264]	; (4004ec <board_init+0x138>)
  4003e2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  4003e6:	610a      	str	r2, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003e8:	f8c1 20a0 	str.w	r2, [r1, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4003ec:	630a      	str	r2, [r1, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4003ee:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  4003f2:	6108      	str	r0, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003f4:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4003f8:	6308      	str	r0, [r1, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4003fa:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4003fe:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400400:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400404:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400406:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40040a:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  40040c:	6219      	str	r1, [r3, #32]
		base->PIO_IFSCER = mask;
  40040e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400412:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400414:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
  400418:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40041a:	6f58      	ldr	r0, [r3, #116]	; 0x74
  40041c:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
  400420:	6758      	str	r0, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400422:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400426:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  40042a:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40042e:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400430:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400434:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400436:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40043a:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  40043c:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  40043e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400442:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400444:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
  400448:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40044a:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40044c:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
  400450:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  400452:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  400456:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	base->PIO_AIMER = mask;
  40045a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40045e:	2202      	movs	r2, #2
  400460:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400462:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400466:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400468:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40046c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  40046e:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400470:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400474:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400476:	f021 0102 	bic.w	r1, r1, #2
  40047a:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40047c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40047e:	f021 0102 	bic.w	r1, r1, #2
  400482:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_AIMDR = mask;
  400484:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400488:	2204      	movs	r2, #4
  40048a:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40048c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400490:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400492:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400496:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400498:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  40049a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  40049e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4004a0:	f021 0104 	bic.w	r1, r1, #4
  4004a4:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4004a6:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4004a8:	f021 0104 	bic.w	r1, r1, #4
  4004ac:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  4004ae:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4004b2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	base->PIO_AIMER = mask;
  4004b6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4004ba:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4004be:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4004c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4004c4:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4004c6:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4004c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4004cc:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4004ce:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  4004d2:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4004d4:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4004d6:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  4004da:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4004dc:	605a      	str	r2, [r3, #4]
  4004de:	bd10      	pop	{r4, pc}
  4004e0:	400e1850 	.word	0x400e1850
  4004e4:	004004f1 	.word	0x004004f1
  4004e8:	400e0e00 	.word	0x400e0e00
  4004ec:	400e1400 	.word	0x400e1400

004004f0 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  4004f0:	282f      	cmp	r0, #47	; 0x2f
  4004f2:	d81e      	bhi.n	400532 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4004f4:	281f      	cmp	r0, #31
  4004f6:	d80c      	bhi.n	400512 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4004f8:	4b11      	ldr	r3, [pc, #68]	; (400540 <pmc_enable_periph_clk+0x50>)
  4004fa:	699a      	ldr	r2, [r3, #24]
  4004fc:	2301      	movs	r3, #1
  4004fe:	4083      	lsls	r3, r0
  400500:	4393      	bics	r3, r2
  400502:	d018      	beq.n	400536 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400504:	2301      	movs	r3, #1
  400506:	fa03 f000 	lsl.w	r0, r3, r0
  40050a:	4b0d      	ldr	r3, [pc, #52]	; (400540 <pmc_enable_periph_clk+0x50>)
  40050c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40050e:	2000      	movs	r0, #0
  400510:	4770      	bx	lr
		ul_id -= 32;
  400512:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400514:	4b0a      	ldr	r3, [pc, #40]	; (400540 <pmc_enable_periph_clk+0x50>)
  400516:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40051a:	2301      	movs	r3, #1
  40051c:	4083      	lsls	r3, r0
  40051e:	4393      	bics	r3, r2
  400520:	d00b      	beq.n	40053a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400522:	2301      	movs	r3, #1
  400524:	fa03 f000 	lsl.w	r0, r3, r0
  400528:	4b05      	ldr	r3, [pc, #20]	; (400540 <pmc_enable_periph_clk+0x50>)
  40052a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  40052e:	2000      	movs	r0, #0
  400530:	4770      	bx	lr
		return 1;
  400532:	2001      	movs	r0, #1
  400534:	4770      	bx	lr
	return 0;
  400536:	2000      	movs	r0, #0
  400538:	4770      	bx	lr
  40053a:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  40053c:	4770      	bx	lr
  40053e:	bf00      	nop
  400540:	400e0400 	.word	0x400e0400

00400544 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400544:	e7fe      	b.n	400544 <Dummy_Handler>
	...

00400548 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400548:	b500      	push	{lr}
  40054a:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  40054c:	4b25      	ldr	r3, [pc, #148]	; (4005e4 <Reset_Handler+0x9c>)
  40054e:	4a26      	ldr	r2, [pc, #152]	; (4005e8 <Reset_Handler+0xa0>)
  400550:	429a      	cmp	r2, r3
  400552:	d010      	beq.n	400576 <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
  400554:	4b25      	ldr	r3, [pc, #148]	; (4005ec <Reset_Handler+0xa4>)
  400556:	4a23      	ldr	r2, [pc, #140]	; (4005e4 <Reset_Handler+0x9c>)
  400558:	429a      	cmp	r2, r3
  40055a:	d20c      	bcs.n	400576 <Reset_Handler+0x2e>
  40055c:	3b01      	subs	r3, #1
  40055e:	1a9b      	subs	r3, r3, r2
  400560:	f023 0303 	bic.w	r3, r3, #3
  400564:	3304      	adds	r3, #4
  400566:	4413      	add	r3, r2
  400568:	491f      	ldr	r1, [pc, #124]	; (4005e8 <Reset_Handler+0xa0>)
			*pDest++ = *pSrc++;
  40056a:	f851 0b04 	ldr.w	r0, [r1], #4
  40056e:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  400572:	429a      	cmp	r2, r3
  400574:	d1f9      	bne.n	40056a <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400576:	4b1e      	ldr	r3, [pc, #120]	; (4005f0 <Reset_Handler+0xa8>)
  400578:	4a1e      	ldr	r2, [pc, #120]	; (4005f4 <Reset_Handler+0xac>)
  40057a:	429a      	cmp	r2, r3
  40057c:	d20a      	bcs.n	400594 <Reset_Handler+0x4c>
  40057e:	3b01      	subs	r3, #1
  400580:	1a9b      	subs	r3, r3, r2
  400582:	f023 0303 	bic.w	r3, r3, #3
  400586:	3304      	adds	r3, #4
  400588:	4413      	add	r3, r2
		*pDest++ = 0;
  40058a:	2100      	movs	r1, #0
  40058c:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  400590:	4293      	cmp	r3, r2
  400592:	d1fb      	bne.n	40058c <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400594:	4a18      	ldr	r2, [pc, #96]	; (4005f8 <Reset_Handler+0xb0>)
  400596:	4b19      	ldr	r3, [pc, #100]	; (4005fc <Reset_Handler+0xb4>)
  400598:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40059c:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40059e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4005a2:	fab3 f383 	clz	r3, r3
  4005a6:	095b      	lsrs	r3, r3, #5
  4005a8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4005aa:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4005ac:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4005b0:	2200      	movs	r2, #0
  4005b2:	4b13      	ldr	r3, [pc, #76]	; (400600 <Reset_Handler+0xb8>)
  4005b4:	701a      	strb	r2, [r3, #0]
	return flags;
  4005b6:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4005b8:	4a12      	ldr	r2, [pc, #72]	; (400604 <Reset_Handler+0xbc>)
  4005ba:	6813      	ldr	r3, [r2, #0]
  4005bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4005c0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4005c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4005c6:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4005ca:	b129      	cbz	r1, 4005d8 <Reset_Handler+0x90>
		cpu_irq_enable();
  4005cc:	2201      	movs	r2, #1
  4005ce:	4b0c      	ldr	r3, [pc, #48]	; (400600 <Reset_Handler+0xb8>)
  4005d0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  4005d2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4005d6:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  4005d8:	4b0b      	ldr	r3, [pc, #44]	; (400608 <Reset_Handler+0xc0>)
  4005da:	4798      	blx	r3

	/* Branch to main function */
	main();
  4005dc:	4b0b      	ldr	r3, [pc, #44]	; (40060c <Reset_Handler+0xc4>)
  4005de:	4798      	blx	r3
  4005e0:	e7fe      	b.n	4005e0 <Reset_Handler+0x98>
  4005e2:	bf00      	nop
  4005e4:	20000000 	.word	0x20000000
  4005e8:	00400868 	.word	0x00400868
  4005ec:	20000434 	.word	0x20000434
  4005f0:	200004f0 	.word	0x200004f0
  4005f4:	20000434 	.word	0x20000434
  4005f8:	e000ed00 	.word	0xe000ed00
  4005fc:	00400000 	.word	0x00400000
  400600:	20000000 	.word	0x20000000
  400604:	e000ed88 	.word	0xe000ed88
  400608:	004006d1 	.word	0x004006d1
  40060c:	0040062d 	.word	0x0040062d

00400610 <handler>:
	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  400610:	4b05      	ldr	r3, [pc, #20]	; (400628 <handler+0x18>)
  400612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  400614:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
		port->PIO_CODR = mask;
  400618:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  40061c:	4b02      	ldr	r3, [pc, #8]	; (400628 <handler+0x18>)
  40061e:	bf14      	ite	ne
  400620:	635a      	strne	r2, [r3, #52]	; 0x34
		port->PIO_SODR = mask;
  400622:	631a      	streq	r2, [r3, #48]	; 0x30
  400624:	4770      	bx	lr
  400626:	bf00      	nop
  400628:	400e1400 	.word	0x400e1400

0040062c <main>:
	ioport_toggle_pin_level(LED1_GPIO);
	return 0;
}

int main (void)
{
  40062c:	b530      	push	{r4, r5, lr}
  40062e:	b083      	sub	sp, #12
	board_init();
  400630:	4b1c      	ldr	r3, [pc, #112]	; (4006a4 <main+0x78>)
  400632:	4798      	blx	r3
  400634:	2009      	movs	r0, #9
  400636:	4c1c      	ldr	r4, [pc, #112]	; (4006a8 <main+0x7c>)
  400638:	47a0      	blx	r4
  40063a:	200a      	movs	r0, #10
  40063c:	47a0      	blx	r4
  40063e:	200b      	movs	r0, #11
  400640:	47a0      	blx	r4
  400642:	200c      	movs	r0, #12
  400644:	47a0      	blx	r4
  400646:	200d      	movs	r0, #13
  400648:	47a0      	blx	r4
	ioport_init();
	
	//Ajil #1
	pmc_enable_periph_clk(ID_PIOA);
  40064a:	2009      	movs	r0, #9
  40064c:	47a0      	blx	r4
	pio_set_debounce_filter(PIOA, PIN_PUSHBUTTON_1_MASK, 19);
  40064e:	4c17      	ldr	r4, [pc, #92]	; (4006ac <main+0x80>)
  400650:	2213      	movs	r2, #19
  400652:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400656:	4620      	mov	r0, r4
  400658:	4b15      	ldr	r3, [pc, #84]	; (4006b0 <main+0x84>)
  40065a:	4798      	blx	r3
	pio_handler_set(PIOA, ID_PIOA, PIN_PUSHBUTTON_1_MASK, PIN_PUSHBUTTON_1_ATTR, handler);
  40065c:	4b15      	ldr	r3, [pc, #84]	; (4006b4 <main+0x88>)
  40065e:	9300      	str	r3, [sp, #0]
  400660:	2379      	movs	r3, #121	; 0x79
  400662:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400666:	2109      	movs	r1, #9
  400668:	4620      	mov	r0, r4
  40066a:	4d13      	ldr	r5, [pc, #76]	; (4006b8 <main+0x8c>)
  40066c:	47a8      	blx	r5
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40066e:	f44f 7200 	mov.w	r2, #512	; 0x200
  400672:	4b12      	ldr	r3, [pc, #72]	; (4006bc <main+0x90>)
  400674:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ((IRQn_Type) ID_PIOA);
	pio_handler_set_priority(PIOA, (IRQn_Type) ID_PIOA, 0);
  400676:	2200      	movs	r2, #0
  400678:	2109      	movs	r1, #9
  40067a:	4620      	mov	r0, r4
  40067c:	4b10      	ldr	r3, [pc, #64]	; (4006c0 <main+0x94>)
  40067e:	4798      	blx	r3
	pio_enable_interrupt(PIOA, PIN_PUSHBUTTON_1_MASK);
  400680:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400684:	4620      	mov	r0, r4
  400686:	4b0f      	ldr	r3, [pc, #60]	; (4006c4 <main+0x98>)
  400688:	4798      	blx	r3
		ioport_set_pin_level(LED2_GPIO, LED2_ACTIVE_LEVEL);
		ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
		ioport_set_pin_level(LED1_GPIO, LED1_INACTIVE_LEVEL);
	}*/
	
	if (pio_get_pin_value(PIN_PUSHBUTTON_2_MASK))
  40068a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40068e:	4b0e      	ldr	r3, [pc, #56]	; (4006c8 <main+0x9c>)
  400690:	4798      	blx	r3
  400692:	b910      	cbnz	r0, 40069a <main+0x6e>
	{
		pio_toggle_pin(LED1_GPIO);
	}
	
}
  400694:	2000      	movs	r0, #0
  400696:	b003      	add	sp, #12
  400698:	bd30      	pop	{r4, r5, pc}
		pio_toggle_pin(LED1_GPIO);
  40069a:	2074      	movs	r0, #116	; 0x74
  40069c:	4b0b      	ldr	r3, [pc, #44]	; (4006cc <main+0xa0>)
  40069e:	4798      	blx	r3
  4006a0:	e7f8      	b.n	400694 <main+0x68>
  4006a2:	bf00      	nop
  4006a4:	004003b5 	.word	0x004003b5
  4006a8:	004004f1 	.word	0x004004f1
  4006ac:	400e0e00 	.word	0x400e0e00
  4006b0:	00400165 	.word	0x00400165
  4006b4:	00400611 	.word	0x00400611
  4006b8:	00400261 	.word	0x00400261
  4006bc:	e000e100 	.word	0xe000e100
  4006c0:	00400335 	.word	0x00400335
  4006c4:	004001ad 	.word	0x004001ad
  4006c8:	004001bd 	.word	0x004001bd
  4006cc:	004001d9 	.word	0x004001d9

004006d0 <__libc_init_array>:
  4006d0:	b570      	push	{r4, r5, r6, lr}
  4006d2:	4e0f      	ldr	r6, [pc, #60]	; (400710 <__libc_init_array+0x40>)
  4006d4:	4d0f      	ldr	r5, [pc, #60]	; (400714 <__libc_init_array+0x44>)
  4006d6:	1b76      	subs	r6, r6, r5
  4006d8:	10b6      	asrs	r6, r6, #2
  4006da:	bf18      	it	ne
  4006dc:	2400      	movne	r4, #0
  4006de:	d005      	beq.n	4006ec <__libc_init_array+0x1c>
  4006e0:	3401      	adds	r4, #1
  4006e2:	f855 3b04 	ldr.w	r3, [r5], #4
  4006e6:	4798      	blx	r3
  4006e8:	42a6      	cmp	r6, r4
  4006ea:	d1f9      	bne.n	4006e0 <__libc_init_array+0x10>
  4006ec:	4e0a      	ldr	r6, [pc, #40]	; (400718 <__libc_init_array+0x48>)
  4006ee:	4d0b      	ldr	r5, [pc, #44]	; (40071c <__libc_init_array+0x4c>)
  4006f0:	1b76      	subs	r6, r6, r5
  4006f2:	f000 f8a7 	bl	400844 <_init>
  4006f6:	10b6      	asrs	r6, r6, #2
  4006f8:	bf18      	it	ne
  4006fa:	2400      	movne	r4, #0
  4006fc:	d006      	beq.n	40070c <__libc_init_array+0x3c>
  4006fe:	3401      	adds	r4, #1
  400700:	f855 3b04 	ldr.w	r3, [r5], #4
  400704:	4798      	blx	r3
  400706:	42a6      	cmp	r6, r4
  400708:	d1f9      	bne.n	4006fe <__libc_init_array+0x2e>
  40070a:	bd70      	pop	{r4, r5, r6, pc}
  40070c:	bd70      	pop	{r4, r5, r6, pc}
  40070e:	bf00      	nop
  400710:	00400850 	.word	0x00400850
  400714:	00400850 	.word	0x00400850
  400718:	00400858 	.word	0x00400858
  40071c:	00400850 	.word	0x00400850

00400720 <register_fini>:
  400720:	4b02      	ldr	r3, [pc, #8]	; (40072c <register_fini+0xc>)
  400722:	b113      	cbz	r3, 40072a <register_fini+0xa>
  400724:	4802      	ldr	r0, [pc, #8]	; (400730 <register_fini+0x10>)
  400726:	f000 b805 	b.w	400734 <atexit>
  40072a:	4770      	bx	lr
  40072c:	00000000 	.word	0x00000000
  400730:	00400741 	.word	0x00400741

00400734 <atexit>:
  400734:	2300      	movs	r3, #0
  400736:	4601      	mov	r1, r0
  400738:	461a      	mov	r2, r3
  40073a:	4618      	mov	r0, r3
  40073c:	f000 b81e 	b.w	40077c <__register_exitproc>

00400740 <__libc_fini_array>:
  400740:	b538      	push	{r3, r4, r5, lr}
  400742:	4c0a      	ldr	r4, [pc, #40]	; (40076c <__libc_fini_array+0x2c>)
  400744:	4d0a      	ldr	r5, [pc, #40]	; (400770 <__libc_fini_array+0x30>)
  400746:	1b64      	subs	r4, r4, r5
  400748:	10a4      	asrs	r4, r4, #2
  40074a:	d00a      	beq.n	400762 <__libc_fini_array+0x22>
  40074c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  400750:	3b01      	subs	r3, #1
  400752:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  400756:	3c01      	subs	r4, #1
  400758:	f855 3904 	ldr.w	r3, [r5], #-4
  40075c:	4798      	blx	r3
  40075e:	2c00      	cmp	r4, #0
  400760:	d1f9      	bne.n	400756 <__libc_fini_array+0x16>
  400762:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  400766:	f000 b877 	b.w	400858 <_fini>
  40076a:	bf00      	nop
  40076c:	00400868 	.word	0x00400868
  400770:	00400864 	.word	0x00400864

00400774 <__retarget_lock_acquire_recursive>:
  400774:	4770      	bx	lr
  400776:	bf00      	nop

00400778 <__retarget_lock_release_recursive>:
  400778:	4770      	bx	lr
  40077a:	bf00      	nop

0040077c <__register_exitproc>:
  40077c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400780:	4d2c      	ldr	r5, [pc, #176]	; (400834 <__register_exitproc+0xb8>)
  400782:	4606      	mov	r6, r0
  400784:	6828      	ldr	r0, [r5, #0]
  400786:	4698      	mov	r8, r3
  400788:	460f      	mov	r7, r1
  40078a:	4691      	mov	r9, r2
  40078c:	f7ff fff2 	bl	400774 <__retarget_lock_acquire_recursive>
  400790:	4b29      	ldr	r3, [pc, #164]	; (400838 <__register_exitproc+0xbc>)
  400792:	681c      	ldr	r4, [r3, #0]
  400794:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  400798:	2b00      	cmp	r3, #0
  40079a:	d03e      	beq.n	40081a <__register_exitproc+0x9e>
  40079c:	685a      	ldr	r2, [r3, #4]
  40079e:	2a1f      	cmp	r2, #31
  4007a0:	dc1c      	bgt.n	4007dc <__register_exitproc+0x60>
  4007a2:	f102 0e01 	add.w	lr, r2, #1
  4007a6:	b176      	cbz	r6, 4007c6 <__register_exitproc+0x4a>
  4007a8:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4007ac:	2401      	movs	r4, #1
  4007ae:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4007b2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4007b6:	4094      	lsls	r4, r2
  4007b8:	4320      	orrs	r0, r4
  4007ba:	2e02      	cmp	r6, #2
  4007bc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4007c0:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4007c4:	d023      	beq.n	40080e <__register_exitproc+0x92>
  4007c6:	3202      	adds	r2, #2
  4007c8:	f8c3 e004 	str.w	lr, [r3, #4]
  4007cc:	6828      	ldr	r0, [r5, #0]
  4007ce:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4007d2:	f7ff ffd1 	bl	400778 <__retarget_lock_release_recursive>
  4007d6:	2000      	movs	r0, #0
  4007d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4007dc:	4b17      	ldr	r3, [pc, #92]	; (40083c <__register_exitproc+0xc0>)
  4007de:	b30b      	cbz	r3, 400824 <__register_exitproc+0xa8>
  4007e0:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4007e4:	f3af 8000 	nop.w
  4007e8:	4603      	mov	r3, r0
  4007ea:	b1d8      	cbz	r0, 400824 <__register_exitproc+0xa8>
  4007ec:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4007f0:	6002      	str	r2, [r0, #0]
  4007f2:	2100      	movs	r1, #0
  4007f4:	6041      	str	r1, [r0, #4]
  4007f6:	460a      	mov	r2, r1
  4007f8:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4007fc:	f04f 0e01 	mov.w	lr, #1
  400800:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  400804:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  400808:	2e00      	cmp	r6, #0
  40080a:	d0dc      	beq.n	4007c6 <__register_exitproc+0x4a>
  40080c:	e7cc      	b.n	4007a8 <__register_exitproc+0x2c>
  40080e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  400812:	430c      	orrs	r4, r1
  400814:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  400818:	e7d5      	b.n	4007c6 <__register_exitproc+0x4a>
  40081a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40081e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  400822:	e7bb      	b.n	40079c <__register_exitproc+0x20>
  400824:	6828      	ldr	r0, [r5, #0]
  400826:	f7ff ffa7 	bl	400778 <__retarget_lock_release_recursive>
  40082a:	f04f 30ff 	mov.w	r0, #4294967295
  40082e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400832:	bf00      	nop
  400834:	20000430 	.word	0x20000430
  400838:	00400840 	.word	0x00400840
  40083c:	00000000 	.word	0x00000000

00400840 <_global_impure_ptr>:
  400840:	20000008                                ... 

00400844 <_init>:
  400844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400846:	bf00      	nop
  400848:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40084a:	bc08      	pop	{r3}
  40084c:	469e      	mov	lr, r3
  40084e:	4770      	bx	lr

00400850 <__init_array_start>:
  400850:	00400721 	.word	0x00400721

00400854 <__frame_dummy_init_array_entry>:
  400854:	0040011d                                ..@.

00400858 <_fini>:
  400858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40085a:	bf00      	nop
  40085c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40085e:	bc08      	pop	{r3}
  400860:	469e      	mov	lr, r3
  400862:	4770      	bx	lr

00400864 <__fini_array_start>:
  400864:	004000f9 	.word	0x004000f9
