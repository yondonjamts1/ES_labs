
DACC_SINEWAVE_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000044bc  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004044bc  004044bc  000144bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009b8  20000000  004044c4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000098  200009b8  00404e7c  000209b8  2**2
                  ALLOC
  4 .stack        00003000  20000a50  00404f14  000209b8  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000209e6  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000f08b  00000000  00000000  00020a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002337  00000000  00000000  0002faca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00002bf6  00000000  00000000  00031e01  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000758  00000000  00000000  000349f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000690  00000000  00000000  0003514f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00005fb8  00000000  00000000  000357df  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00008ba7  00000000  00000000  0003b797  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00062596  00000000  00000000  0004433e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001bdc  00000000  00000000  000a68d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	50 3a 00 20 e9 05 40 00 e7 05 40 00 e7 05 40 00     P:. ..@...@...@.
  400010:	e7 05 40 00 e7 05 40 00 e7 05 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	e7 05 40 00 e7 05 40 00 00 00 00 00 e7 05 40 00     ..@...@.......@.
  40003c:	09 0b 40 00 e7 05 40 00 e7 05 40 00 e7 05 40 00     ..@...@...@...@.
  40004c:	e7 05 40 00 e7 05 40 00 e7 05 40 00 e7 05 40 00     ..@...@...@...@.
  40005c:	e7 05 40 00 e7 05 40 00 e7 05 40 00 e7 05 40 00     ..@...@...@...@.
  40006c:	e7 05 40 00 e7 05 40 00 e7 05 40 00 e7 05 40 00     ..@...@...@...@.
  40007c:	e7 05 40 00 e7 05 40 00 e7 05 40 00 e7 05 40 00     ..@...@...@...@.
  40008c:	e7 05 40 00 e7 05 40 00 e7 05 40 00 e7 05 40 00     ..@...@...@...@.
  40009c:	e7 05 40 00 e7 05 40 00 e7 05 40 00 e7 05 40 00     ..@...@...@...@.
  4000ac:	e7 05 40 00 e7 05 40 00 e7 05 40 00 e7 05 40 00     ..@...@...@...@.
  4000bc:	e7 05 40 00 e7 05 40 00 e7 05 40 00 e7 05 40 00     ..@...@...@...@.
  4000cc:	e7 05 40 00 e7 05 40 00 e7 05 40 00 e7 05 40 00     ..@...@...@...@.
  4000dc:	e7 05 40 00 e7 05 40 00 e7 05 40 00 e7 05 40 00     ..@...@...@...@.
  4000ec:	e7 05 40 00 e7 05 40 00 e7 05 40 00                 ..@...@...@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	200009b8 	.word	0x200009b8
  400114:	00000000 	.word	0x00000000
  400118:	004044c4 	.word	0x004044c4

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	004044c4 	.word	0x004044c4
  400158:	200009bc 	.word	0x200009bc
  40015c:	004044c4 	.word	0x004044c4
  400160:	00000000 	.word	0x00000000

00400164 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400164:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400166:	480e      	ldr	r0, [pc, #56]	; (4001a0 <sysclk_init+0x3c>)
  400168:	4b0e      	ldr	r3, [pc, #56]	; (4001a4 <sysclk_init+0x40>)
  40016a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40016c:	213e      	movs	r1, #62	; 0x3e
  40016e:	2000      	movs	r0, #0
  400170:	4b0d      	ldr	r3, [pc, #52]	; (4001a8 <sysclk_init+0x44>)
  400172:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400174:	4c0d      	ldr	r4, [pc, #52]	; (4001ac <sysclk_init+0x48>)
  400176:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400178:	2800      	cmp	r0, #0
  40017a:	d0fc      	beq.n	400176 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40017c:	4b0c      	ldr	r3, [pc, #48]	; (4001b0 <sysclk_init+0x4c>)
  40017e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400180:	4a0c      	ldr	r2, [pc, #48]	; (4001b4 <sysclk_init+0x50>)
  400182:	4b0d      	ldr	r3, [pc, #52]	; (4001b8 <sysclk_init+0x54>)
  400184:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  400186:	4c0d      	ldr	r4, [pc, #52]	; (4001bc <sysclk_init+0x58>)
  400188:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40018a:	2800      	cmp	r0, #0
  40018c:	d0fc      	beq.n	400188 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40018e:	2010      	movs	r0, #16
  400190:	4b0b      	ldr	r3, [pc, #44]	; (4001c0 <sysclk_init+0x5c>)
  400192:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400194:	4b0b      	ldr	r3, [pc, #44]	; (4001c4 <sysclk_init+0x60>)
  400196:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400198:	4801      	ldr	r0, [pc, #4]	; (4001a0 <sysclk_init+0x3c>)
  40019a:	4b02      	ldr	r3, [pc, #8]	; (4001a4 <sysclk_init+0x40>)
  40019c:	4798      	blx	r3
  40019e:	bd10      	pop	{r4, pc}
  4001a0:	07270e00 	.word	0x07270e00
  4001a4:	004007bd 	.word	0x004007bd
  4001a8:	00400489 	.word	0x00400489
  4001ac:	004004dd 	.word	0x004004dd
  4001b0:	004004ed 	.word	0x004004ed
  4001b4:	20133f01 	.word	0x20133f01
  4001b8:	400e0400 	.word	0x400e0400
  4001bc:	004004fd 	.word	0x004004fd
  4001c0:	00400425 	.word	0x00400425
  4001c4:	004006b1 	.word	0x004006b1

004001c8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4001c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4001cc:	b980      	cbnz	r0, 4001f0 <_read+0x28>
  4001ce:	460c      	mov	r4, r1
  4001d0:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  4001d2:	2a00      	cmp	r2, #0
  4001d4:	dd0f      	ble.n	4001f6 <_read+0x2e>
  4001d6:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4001d8:	4e08      	ldr	r6, [pc, #32]	; (4001fc <_read+0x34>)
  4001da:	4d09      	ldr	r5, [pc, #36]	; (400200 <_read+0x38>)
  4001dc:	6830      	ldr	r0, [r6, #0]
  4001de:	4621      	mov	r1, r4
  4001e0:	682b      	ldr	r3, [r5, #0]
  4001e2:	4798      	blx	r3
		ptr++;
  4001e4:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  4001e6:	42bc      	cmp	r4, r7
  4001e8:	d1f8      	bne.n	4001dc <_read+0x14>
		nChars++;
	}
	return nChars;
}
  4001ea:	4640      	mov	r0, r8
  4001ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4001f0:	f04f 38ff 	mov.w	r8, #4294967295
  4001f4:	e7f9      	b.n	4001ea <_read+0x22>
	for (; len > 0; --len) {
  4001f6:	4680      	mov	r8, r0
  4001f8:	e7f7      	b.n	4001ea <_read+0x22>
  4001fa:	bf00      	nop
  4001fc:	20000a24 	.word	0x20000a24
  400200:	20000a1c 	.word	0x20000a1c

00400204 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400204:	3801      	subs	r0, #1
  400206:	2802      	cmp	r0, #2
  400208:	d815      	bhi.n	400236 <_write+0x32>
{
  40020a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40020e:	460e      	mov	r6, r1
  400210:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400212:	b19a      	cbz	r2, 40023c <_write+0x38>
  400214:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400216:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400250 <_write+0x4c>
  40021a:	4f0c      	ldr	r7, [pc, #48]	; (40024c <_write+0x48>)
  40021c:	f8d8 0000 	ldr.w	r0, [r8]
  400220:	f815 1b01 	ldrb.w	r1, [r5], #1
  400224:	683b      	ldr	r3, [r7, #0]
  400226:	4798      	blx	r3
  400228:	2800      	cmp	r0, #0
  40022a:	db0a      	blt.n	400242 <_write+0x3e>
  40022c:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  40022e:	3c01      	subs	r4, #1
  400230:	d1f4      	bne.n	40021c <_write+0x18>
  400232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400236:	f04f 30ff 	mov.w	r0, #4294967295
  40023a:	4770      	bx	lr
	for (; len != 0; --len) {
  40023c:	4610      	mov	r0, r2
  40023e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400242:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40024a:	bf00      	nop
  40024c:	20000a20 	.word	0x20000a20
  400250:	20000a24 	.word	0x20000a24

00400254 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  400254:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400256:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40025a:	4b49      	ldr	r3, [pc, #292]	; (400380 <board_init+0x12c>)
  40025c:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40025e:	2009      	movs	r0, #9
  400260:	4c48      	ldr	r4, [pc, #288]	; (400384 <board_init+0x130>)
  400262:	47a0      	blx	r4
  400264:	200a      	movs	r0, #10
  400266:	47a0      	blx	r4
  400268:	200b      	movs	r0, #11
  40026a:	47a0      	blx	r4
  40026c:	200c      	movs	r0, #12
  40026e:	47a0      	blx	r4
  400270:	200d      	movs	r0, #13
  400272:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400274:	4b44      	ldr	r3, [pc, #272]	; (400388 <board_init+0x134>)
  400276:	2201      	movs	r2, #1
  400278:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40027a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40027e:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400280:	4942      	ldr	r1, [pc, #264]	; (40038c <board_init+0x138>)
  400282:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400286:	610a      	str	r2, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400288:	f8c1 20a0 	str.w	r2, [r1, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40028c:	630a      	str	r2, [r1, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40028e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  400292:	6108      	str	r0, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400294:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400298:	6308      	str	r0, [r1, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40029a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  40029e:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4002a0:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4002a4:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4002a6:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4002aa:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4002ac:	6219      	str	r1, [r3, #32]
		base->PIO_IFSCER = mask;
  4002ae:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4002b2:	6f18      	ldr	r0, [r3, #112]	; 0x70
  4002b4:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
  4002b8:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4002ba:	6f58      	ldr	r0, [r3, #116]	; 0x74
  4002bc:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
  4002c0:	6758      	str	r0, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4002c2:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4002c6:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4002ca:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4002ce:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4002d0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4002d4:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4002d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4002da:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4002dc:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4002de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4002e2:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4002e4:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
  4002e8:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4002ea:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4002ec:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
  4002f0:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  4002f2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  4002f6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	base->PIO_AIMER = mask;
  4002fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4002fe:	2202      	movs	r2, #2
  400300:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400302:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400306:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400308:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40030c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  40030e:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400310:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400314:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400316:	f021 0102 	bic.w	r1, r1, #2
  40031a:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40031c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40031e:	f021 0102 	bic.w	r1, r1, #2
  400322:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_AIMDR = mask;
  400324:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400328:	2204      	movs	r2, #4
  40032a:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40032c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400330:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400332:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400336:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400338:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  40033a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  40033e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400340:	f021 0104 	bic.w	r1, r1, #4
  400344:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400346:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400348:	f021 0104 	bic.w	r1, r1, #4
  40034c:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  40034e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400352:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	base->PIO_AIMER = mask;
  400356:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  40035a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  40035e:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400360:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400364:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400366:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400368:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40036c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40036e:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  400372:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400374:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400376:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  40037a:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40037c:	605a      	str	r2, [r3, #4]
  40037e:	bd10      	pop	{r4, pc}
  400380:	400e1850 	.word	0x400e1850
  400384:	0040050d 	.word	0x0040050d
  400388:	400e0e00 	.word	0x400e0e00
  40038c:	400e1400 	.word	0x400e1400

00400390 <dacc_reset>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_reset(Dacc *p_dacc)
{
	p_dacc->DACC_CR = DACC_CR_SWRST;
  400390:	2301      	movs	r3, #1
  400392:	6003      	str	r3, [r0, #0]
  400394:	4770      	bx	lr

00400396 <dacc_set_transfer_mode>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_transfer_mode(Dacc *p_dacc, uint32_t ul_mode)
{
	if (ul_mode) {
  400396:	b949      	cbnz	r1, 4003ac <dacc_set_transfer_mode+0x16>
#endif
	} else {
#if (SAM3N) || (SAM4L) || (SAM4N)
		p_dacc->DACC_MR &= (~DACC_MR_WORD);
#elif (SAM4S) || (SAM4E)
		p_dacc->DACC_MR |= DACC_MR_ONE;
  400398:	6843      	ldr	r3, [r0, #4]
  40039a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40039e:	6043      	str	r3, [r0, #4]
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
  4003a0:	6843      	ldr	r3, [r0, #4]
  4003a2:	f023 0310 	bic.w	r3, r3, #16
  4003a6:	6043      	str	r3, [r0, #4]
#else
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
#endif
	}
	return DACC_RC_OK;
}
  4003a8:	2000      	movs	r0, #0
  4003aa:	4770      	bx	lr
		p_dacc->DACC_MR |= DACC_MR_ONE;
  4003ac:	6843      	ldr	r3, [r0, #4]
  4003ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  4003b2:	6043      	str	r3, [r0, #4]
		p_dacc->DACC_MR |= DACC_MR_WORD_WORD;
  4003b4:	6843      	ldr	r3, [r0, #4]
  4003b6:	f043 0310 	orr.w	r3, r3, #16
  4003ba:	6043      	str	r3, [r0, #4]
  4003bc:	e7f4      	b.n	4003a8 <dacc_set_transfer_mode+0x12>

004003be <dacc_get_interrupt_status>:
 *
 * \return The interrupt status.
 */
uint32_t dacc_get_interrupt_status(Dacc *p_dacc)
{
	return p_dacc->DACC_ISR;
  4003be:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
  4003c0:	4770      	bx	lr

004003c2 <dacc_write_conversion_data>:
 * \param p_dacc Pointer to a DACC instance. 
 * \param ul_data The data to be transferred to analog value.
 */
void dacc_write_conversion_data(Dacc *p_dacc, uint32_t ul_data)
{
	p_dacc->DACC_CDR = ul_data;
  4003c2:	6201      	str	r1, [r0, #32]
  4003c4:	4770      	bx	lr

004003c6 <dacc_set_channel_selection>:
 *
 * \return \ref DACC_RC_OK if successful.
 */
uint32_t dacc_set_channel_selection(Dacc *p_dacc, uint32_t ul_channel)
{
	uint32_t mr = p_dacc->DACC_MR & (~DACC_MR_USER_SEL_Msk);
  4003c6:	6843      	ldr	r3, [r0, #4]
	if (ul_channel > MAX_CH_NB) {
  4003c8:	2901      	cmp	r1, #1
  4003ca:	d901      	bls.n	4003d0 <dacc_set_channel_selection+0xa>
		return DACC_RC_INVALID_PARAM;
  4003cc:	2001      	movs	r0, #1
	mr &= ~(DACC_MR_TAG);
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
	p_dacc->DACC_MR = mr;

	return DACC_RC_OK;
}
  4003ce:	4770      	bx	lr
	mr &= ~(DACC_MR_TAG);
  4003d0:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
  4003d4:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
	p_dacc->DACC_MR = mr;
  4003d8:	6041      	str	r1, [r0, #4]
	return DACC_RC_OK;
  4003da:	2000      	movs	r0, #0
  4003dc:	4770      	bx	lr
	...

004003e0 <dacc_set_timing>:
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_timing(Dacc *p_dacc,
		 uint32_t ul_maxs, uint32_t ul_startup)
{
	uint32_t mr = p_dacc->DACC_MR
  4003e0:	6843      	ldr	r3, [r0, #4]
	& (~(DACC_MR_REFRESH_Msk | DACC_MR_STARTUP_Msk));
	if (ul_maxs) {
  4003e2:	b941      	cbnz	r1, 4003f6 <dacc_set_timing+0x16>
		mr |= DACC_MR_MAXS;
		} else {
		mr &= ~DACC_MR_MAXS;
  4003e4:	4907      	ldr	r1, [pc, #28]	; (400404 <dacc_set_timing+0x24>)
  4003e6:	4019      	ands	r1, r3
	}
	mr |= (DACC_MR_STARTUP_Msk & ((ul_startup) << DACC_MR_STARTUP_Pos));
  4003e8:	0612      	lsls	r2, r2, #24
  4003ea:	f002 527c 	and.w	r2, r2, #1056964608	; 0x3f000000
  4003ee:	430a      	orrs	r2, r1

	p_dacc->DACC_MR = mr;
  4003f0:	6042      	str	r2, [r0, #4]
	return DACC_RC_OK;
}
  4003f2:	2000      	movs	r0, #0
  4003f4:	4770      	bx	lr
	uint32_t mr = p_dacc->DACC_MR
  4003f6:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
  4003fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
		mr |= DACC_MR_MAXS;
  4003fe:	f443 1100 	orr.w	r1, r3, #2097152	; 0x200000
  400402:	e7f1      	b.n	4003e8 <dacc_set_timing+0x8>
  400404:	c0df00ff 	.word	0xc0df00ff

00400408 <dacc_enable_channel>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
  400408:	2901      	cmp	r1, #1
  40040a:	d901      	bls.n	400410 <dacc_enable_channel+0x8>
		return DACC_RC_INVALID_PARAM;
  40040c:	2001      	movs	r0, #1

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
	return DACC_RC_OK;
}
  40040e:	4770      	bx	lr
	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
  400410:	2301      	movs	r3, #1
  400412:	fa03 f101 	lsl.w	r1, r3, r1
  400416:	6101      	str	r1, [r0, #16]
	return DACC_RC_OK;
  400418:	2000      	movs	r0, #0
  40041a:	4770      	bx	lr

0040041c <dacc_set_analog_control>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_analog_control(Dacc *p_dacc, uint32_t ul_analog_control)
{
	p_dacc->DACC_ACR = ul_analog_control;
  40041c:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
	return DACC_RC_OK;
}
  400420:	2000      	movs	r0, #0
  400422:	4770      	bx	lr

00400424 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400424:	4a17      	ldr	r2, [pc, #92]	; (400484 <pmc_switch_mck_to_pllack+0x60>)
  400426:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40042c:	4318      	orrs	r0, r3
  40042e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400430:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400432:	f013 0f08 	tst.w	r3, #8
  400436:	d10a      	bne.n	40044e <pmc_switch_mck_to_pllack+0x2a>
  400438:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40043c:	4911      	ldr	r1, [pc, #68]	; (400484 <pmc_switch_mck_to_pllack+0x60>)
  40043e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400440:	f012 0f08 	tst.w	r2, #8
  400444:	d103      	bne.n	40044e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400446:	3b01      	subs	r3, #1
  400448:	d1f9      	bne.n	40043e <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40044a:	2001      	movs	r0, #1
  40044c:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40044e:	4a0d      	ldr	r2, [pc, #52]	; (400484 <pmc_switch_mck_to_pllack+0x60>)
  400450:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400452:	f023 0303 	bic.w	r3, r3, #3
  400456:	f043 0302 	orr.w	r3, r3, #2
  40045a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40045c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40045e:	f013 0f08 	tst.w	r3, #8
  400462:	d10a      	bne.n	40047a <pmc_switch_mck_to_pllack+0x56>
  400464:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400468:	4906      	ldr	r1, [pc, #24]	; (400484 <pmc_switch_mck_to_pllack+0x60>)
  40046a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40046c:	f012 0f08 	tst.w	r2, #8
  400470:	d105      	bne.n	40047e <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400472:	3b01      	subs	r3, #1
  400474:	d1f9      	bne.n	40046a <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400476:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400478:	4770      	bx	lr
	return 0;
  40047a:	2000      	movs	r0, #0
  40047c:	4770      	bx	lr
  40047e:	2000      	movs	r0, #0
  400480:	4770      	bx	lr
  400482:	bf00      	nop
  400484:	400e0400 	.word	0x400e0400

00400488 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400488:	b9c8      	cbnz	r0, 4004be <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40048a:	4a11      	ldr	r2, [pc, #68]	; (4004d0 <pmc_switch_mainck_to_xtal+0x48>)
  40048c:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40048e:	0209      	lsls	r1, r1, #8
  400490:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400492:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400496:	f023 0303 	bic.w	r3, r3, #3
  40049a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40049e:	f043 0301 	orr.w	r3, r3, #1
  4004a2:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4004a4:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4004a6:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4004a8:	f013 0f01 	tst.w	r3, #1
  4004ac:	d0fb      	beq.n	4004a6 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4004ae:	4a08      	ldr	r2, [pc, #32]	; (4004d0 <pmc_switch_mainck_to_xtal+0x48>)
  4004b0:	6a13      	ldr	r3, [r2, #32]
  4004b2:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4004b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4004ba:	6213      	str	r3, [r2, #32]
  4004bc:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4004be:	4904      	ldr	r1, [pc, #16]	; (4004d0 <pmc_switch_mainck_to_xtal+0x48>)
  4004c0:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4004c2:	4a04      	ldr	r2, [pc, #16]	; (4004d4 <pmc_switch_mainck_to_xtal+0x4c>)
  4004c4:	401a      	ands	r2, r3
  4004c6:	4b04      	ldr	r3, [pc, #16]	; (4004d8 <pmc_switch_mainck_to_xtal+0x50>)
  4004c8:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4004ca:	620b      	str	r3, [r1, #32]
  4004cc:	4770      	bx	lr
  4004ce:	bf00      	nop
  4004d0:	400e0400 	.word	0x400e0400
  4004d4:	fec8fffc 	.word	0xfec8fffc
  4004d8:	01370002 	.word	0x01370002

004004dc <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4004dc:	4b02      	ldr	r3, [pc, #8]	; (4004e8 <pmc_osc_is_ready_mainck+0xc>)
  4004de:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4004e0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4004e4:	4770      	bx	lr
  4004e6:	bf00      	nop
  4004e8:	400e0400 	.word	0x400e0400

004004ec <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4004ec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4004f0:	4b01      	ldr	r3, [pc, #4]	; (4004f8 <pmc_disable_pllack+0xc>)
  4004f2:	629a      	str	r2, [r3, #40]	; 0x28
  4004f4:	4770      	bx	lr
  4004f6:	bf00      	nop
  4004f8:	400e0400 	.word	0x400e0400

004004fc <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4004fc:	4b02      	ldr	r3, [pc, #8]	; (400508 <pmc_is_locked_pllack+0xc>)
  4004fe:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400500:	f000 0002 	and.w	r0, r0, #2
  400504:	4770      	bx	lr
  400506:	bf00      	nop
  400508:	400e0400 	.word	0x400e0400

0040050c <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  40050c:	282f      	cmp	r0, #47	; 0x2f
  40050e:	d81e      	bhi.n	40054e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400510:	281f      	cmp	r0, #31
  400512:	d80c      	bhi.n	40052e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400514:	4b11      	ldr	r3, [pc, #68]	; (40055c <pmc_enable_periph_clk+0x50>)
  400516:	699a      	ldr	r2, [r3, #24]
  400518:	2301      	movs	r3, #1
  40051a:	4083      	lsls	r3, r0
  40051c:	4393      	bics	r3, r2
  40051e:	d018      	beq.n	400552 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400520:	2301      	movs	r3, #1
  400522:	fa03 f000 	lsl.w	r0, r3, r0
  400526:	4b0d      	ldr	r3, [pc, #52]	; (40055c <pmc_enable_periph_clk+0x50>)
  400528:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40052a:	2000      	movs	r0, #0
  40052c:	4770      	bx	lr
		ul_id -= 32;
  40052e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400530:	4b0a      	ldr	r3, [pc, #40]	; (40055c <pmc_enable_periph_clk+0x50>)
  400532:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400536:	2301      	movs	r3, #1
  400538:	4083      	lsls	r3, r0
  40053a:	4393      	bics	r3, r2
  40053c:	d00b      	beq.n	400556 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40053e:	2301      	movs	r3, #1
  400540:	fa03 f000 	lsl.w	r0, r3, r0
  400544:	4b05      	ldr	r3, [pc, #20]	; (40055c <pmc_enable_periph_clk+0x50>)
  400546:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  40054a:	2000      	movs	r0, #0
  40054c:	4770      	bx	lr
		return 1;
  40054e:	2001      	movs	r0, #1
  400550:	4770      	bx	lr
	return 0;
  400552:	2000      	movs	r0, #0
  400554:	4770      	bx	lr
  400556:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  400558:	4770      	bx	lr
  40055a:	bf00      	nop
  40055c:	400e0400 	.word	0x400e0400

00400560 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  400560:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  400562:	23ac      	movs	r3, #172	; 0xac
  400564:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  400566:	680b      	ldr	r3, [r1, #0]
  400568:	684a      	ldr	r2, [r1, #4]
  40056a:	fbb3 f3f2 	udiv	r3, r3, r2
  40056e:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  400570:	1e5c      	subs	r4, r3, #1
  400572:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  400576:	4294      	cmp	r4, r2
  400578:	d80c      	bhi.n	400594 <uart_init+0x34>
		return 1;

	p_uart->UART_BRGR = cd;
  40057a:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  40057c:	688b      	ldr	r3, [r1, #8]
  40057e:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  400580:	f240 2302 	movw	r3, #514	; 0x202
  400584:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400588:	2350      	movs	r3, #80	; 0x50
  40058a:	6003      	str	r3, [r0, #0]

	return 0;
  40058c:	2000      	movs	r0, #0
}
  40058e:	f85d 4b04 	ldr.w	r4, [sp], #4
  400592:	4770      	bx	lr
		return 1;
  400594:	2001      	movs	r0, #1
  400596:	e7fa      	b.n	40058e <uart_init+0x2e>

00400598 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400598:	6943      	ldr	r3, [r0, #20]
  40059a:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  40059e:	bf1a      	itte	ne
  4005a0:	61c1      	strne	r1, [r0, #28]
	return 0;
  4005a2:	2000      	movne	r0, #0
		return 1;
  4005a4:	2001      	moveq	r0, #1
}
  4005a6:	4770      	bx	lr

004005a8 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4005a8:	6943      	ldr	r3, [r0, #20]
  4005aa:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4005ae:	bf1d      	ittte	ne
  4005b0:	6983      	ldrne	r3, [r0, #24]
  4005b2:	700b      	strbne	r3, [r1, #0]
	return 0;
  4005b4:	2000      	movne	r0, #0
		return 1;
  4005b6:	2001      	moveq	r0, #1
}
  4005b8:	4770      	bx	lr

004005ba <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4005ba:	6943      	ldr	r3, [r0, #20]
  4005bc:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4005c0:	bf1d      	ittte	ne
  4005c2:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  4005c6:	61c1      	strne	r1, [r0, #28]
	return 0;
  4005c8:	2000      	movne	r0, #0
		return 1;
  4005ca:	2001      	moveq	r0, #1
}
  4005cc:	4770      	bx	lr

004005ce <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4005ce:	6943      	ldr	r3, [r0, #20]
  4005d0:	f013 0f01 	tst.w	r3, #1
  4005d4:	d005      	beq.n	4005e2 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4005d6:	6983      	ldr	r3, [r0, #24]
  4005d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4005dc:	600b      	str	r3, [r1, #0]

	return 0;
  4005de:	2000      	movs	r0, #0
  4005e0:	4770      	bx	lr
		return 1;
  4005e2:	2001      	movs	r0, #1
}
  4005e4:	4770      	bx	lr

004005e6 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4005e6:	e7fe      	b.n	4005e6 <Dummy_Handler>

004005e8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4005e8:	b500      	push	{lr}
  4005ea:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  4005ec:	4b25      	ldr	r3, [pc, #148]	; (400684 <Reset_Handler+0x9c>)
  4005ee:	4a26      	ldr	r2, [pc, #152]	; (400688 <Reset_Handler+0xa0>)
  4005f0:	429a      	cmp	r2, r3
  4005f2:	d010      	beq.n	400616 <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
  4005f4:	4b25      	ldr	r3, [pc, #148]	; (40068c <Reset_Handler+0xa4>)
  4005f6:	4a23      	ldr	r2, [pc, #140]	; (400684 <Reset_Handler+0x9c>)
  4005f8:	429a      	cmp	r2, r3
  4005fa:	d20c      	bcs.n	400616 <Reset_Handler+0x2e>
  4005fc:	3b01      	subs	r3, #1
  4005fe:	1a9b      	subs	r3, r3, r2
  400600:	f023 0303 	bic.w	r3, r3, #3
  400604:	3304      	adds	r3, #4
  400606:	4413      	add	r3, r2
  400608:	491f      	ldr	r1, [pc, #124]	; (400688 <Reset_Handler+0xa0>)
			*pDest++ = *pSrc++;
  40060a:	f851 0b04 	ldr.w	r0, [r1], #4
  40060e:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  400612:	429a      	cmp	r2, r3
  400614:	d1f9      	bne.n	40060a <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400616:	4b1e      	ldr	r3, [pc, #120]	; (400690 <Reset_Handler+0xa8>)
  400618:	4a1e      	ldr	r2, [pc, #120]	; (400694 <Reset_Handler+0xac>)
  40061a:	429a      	cmp	r2, r3
  40061c:	d20a      	bcs.n	400634 <Reset_Handler+0x4c>
  40061e:	3b01      	subs	r3, #1
  400620:	1a9b      	subs	r3, r3, r2
  400622:	f023 0303 	bic.w	r3, r3, #3
  400626:	3304      	adds	r3, #4
  400628:	4413      	add	r3, r2
		*pDest++ = 0;
  40062a:	2100      	movs	r1, #0
  40062c:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  400630:	4293      	cmp	r3, r2
  400632:	d1fb      	bne.n	40062c <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400634:	4a18      	ldr	r2, [pc, #96]	; (400698 <Reset_Handler+0xb0>)
  400636:	4b19      	ldr	r3, [pc, #100]	; (40069c <Reset_Handler+0xb4>)
  400638:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40063c:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40063e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400642:	fab3 f383 	clz	r3, r3
  400646:	095b      	lsrs	r3, r3, #5
  400648:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40064a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40064c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400650:	2200      	movs	r2, #0
  400652:	4b13      	ldr	r3, [pc, #76]	; (4006a0 <Reset_Handler+0xb8>)
  400654:	701a      	strb	r2, [r3, #0]
	return flags;
  400656:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400658:	4a12      	ldr	r2, [pc, #72]	; (4006a4 <Reset_Handler+0xbc>)
  40065a:	6813      	ldr	r3, [r2, #0]
  40065c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400660:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  400662:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400666:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40066a:	b129      	cbz	r1, 400678 <Reset_Handler+0x90>
		cpu_irq_enable();
  40066c:	2201      	movs	r2, #1
  40066e:	4b0c      	ldr	r3, [pc, #48]	; (4006a0 <Reset_Handler+0xb8>)
  400670:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  400672:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400676:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  400678:	4b0b      	ldr	r3, [pc, #44]	; (4006a8 <Reset_Handler+0xc0>)
  40067a:	4798      	blx	r3

	/* Branch to main function */
	main();
  40067c:	4b0b      	ldr	r3, [pc, #44]	; (4006ac <Reset_Handler+0xc4>)
  40067e:	4798      	blx	r3
  400680:	e7fe      	b.n	400680 <Reset_Handler+0x98>
  400682:	bf00      	nop
  400684:	20000000 	.word	0x20000000
  400688:	004044c4 	.word	0x004044c4
  40068c:	200009b8 	.word	0x200009b8
  400690:	20000a50 	.word	0x20000a50
  400694:	200009b8 	.word	0x200009b8
  400698:	e000ed00 	.word	0xe000ed00
  40069c:	00400000 	.word	0x00400000
  4006a0:	20000000 	.word	0x20000000
  4006a4:	e000ed88 	.word	0xe000ed88
  4006a8:	00400ef9 	.word	0x00400ef9
  4006ac:	00400b95 	.word	0x00400b95

004006b0 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  4006b0:	4b3b      	ldr	r3, [pc, #236]	; (4007a0 <SystemCoreClockUpdate+0xf0>)
  4006b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4006b4:	f003 0303 	and.w	r3, r3, #3
  4006b8:	2b01      	cmp	r3, #1
  4006ba:	d01d      	beq.n	4006f8 <SystemCoreClockUpdate+0x48>
  4006bc:	b183      	cbz	r3, 4006e0 <SystemCoreClockUpdate+0x30>
  4006be:	2b02      	cmp	r3, #2
  4006c0:	d036      	beq.n	400730 <SystemCoreClockUpdate+0x80>

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  4006c2:	4b37      	ldr	r3, [pc, #220]	; (4007a0 <SystemCoreClockUpdate+0xf0>)
  4006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4006c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4006ca:	2b70      	cmp	r3, #112	; 0x70
  4006cc:	d05f      	beq.n	40078e <SystemCoreClockUpdate+0xde>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  4006ce:	4b34      	ldr	r3, [pc, #208]	; (4007a0 <SystemCoreClockUpdate+0xf0>)
  4006d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4006d2:	4934      	ldr	r1, [pc, #208]	; (4007a4 <SystemCoreClockUpdate+0xf4>)
  4006d4:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4006d8:	680b      	ldr	r3, [r1, #0]
  4006da:	40d3      	lsrs	r3, r2
  4006dc:	600b      	str	r3, [r1, #0]
  4006de:	4770      	bx	lr
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  4006e0:	4b31      	ldr	r3, [pc, #196]	; (4007a8 <SystemCoreClockUpdate+0xf8>)
  4006e2:	695b      	ldr	r3, [r3, #20]
  4006e4:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4006e8:	bf14      	ite	ne
  4006ea:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4006ee:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4006f2:	4b2c      	ldr	r3, [pc, #176]	; (4007a4 <SystemCoreClockUpdate+0xf4>)
  4006f4:	601a      	str	r2, [r3, #0]
  4006f6:	e7e4      	b.n	4006c2 <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4006f8:	4b29      	ldr	r3, [pc, #164]	; (4007a0 <SystemCoreClockUpdate+0xf0>)
  4006fa:	6a1b      	ldr	r3, [r3, #32]
  4006fc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400700:	d003      	beq.n	40070a <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400702:	4a2a      	ldr	r2, [pc, #168]	; (4007ac <SystemCoreClockUpdate+0xfc>)
  400704:	4b27      	ldr	r3, [pc, #156]	; (4007a4 <SystemCoreClockUpdate+0xf4>)
  400706:	601a      	str	r2, [r3, #0]
  400708:	e7db      	b.n	4006c2 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40070a:	4a29      	ldr	r2, [pc, #164]	; (4007b0 <SystemCoreClockUpdate+0x100>)
  40070c:	4b25      	ldr	r3, [pc, #148]	; (4007a4 <SystemCoreClockUpdate+0xf4>)
  40070e:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400710:	4b23      	ldr	r3, [pc, #140]	; (4007a0 <SystemCoreClockUpdate+0xf0>)
  400712:	6a1b      	ldr	r3, [r3, #32]
  400714:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400718:	2b10      	cmp	r3, #16
  40071a:	d005      	beq.n	400728 <SystemCoreClockUpdate+0x78>
  40071c:	2b20      	cmp	r3, #32
  40071e:	d1d0      	bne.n	4006c2 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  400720:	4a22      	ldr	r2, [pc, #136]	; (4007ac <SystemCoreClockUpdate+0xfc>)
  400722:	4b20      	ldr	r3, [pc, #128]	; (4007a4 <SystemCoreClockUpdate+0xf4>)
  400724:	601a      	str	r2, [r3, #0]
				break;
  400726:	e7cc      	b.n	4006c2 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  400728:	4a22      	ldr	r2, [pc, #136]	; (4007b4 <SystemCoreClockUpdate+0x104>)
  40072a:	4b1e      	ldr	r3, [pc, #120]	; (4007a4 <SystemCoreClockUpdate+0xf4>)
  40072c:	601a      	str	r2, [r3, #0]
				break;
  40072e:	e7c8      	b.n	4006c2 <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400730:	4b1b      	ldr	r3, [pc, #108]	; (4007a0 <SystemCoreClockUpdate+0xf0>)
  400732:	6a1b      	ldr	r3, [r3, #32]
  400734:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400738:	d016      	beq.n	400768 <SystemCoreClockUpdate+0xb8>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40073a:	4a1c      	ldr	r2, [pc, #112]	; (4007ac <SystemCoreClockUpdate+0xfc>)
  40073c:	4b19      	ldr	r3, [pc, #100]	; (4007a4 <SystemCoreClockUpdate+0xf4>)
  40073e:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  400740:	4b17      	ldr	r3, [pc, #92]	; (4007a0 <SystemCoreClockUpdate+0xf0>)
  400742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400744:	f003 0303 	and.w	r3, r3, #3
  400748:	2b02      	cmp	r3, #2
  40074a:	d1ba      	bne.n	4006c2 <SystemCoreClockUpdate+0x12>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40074c:	4a14      	ldr	r2, [pc, #80]	; (4007a0 <SystemCoreClockUpdate+0xf0>)
  40074e:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400750:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400752:	4814      	ldr	r0, [pc, #80]	; (4007a4 <SystemCoreClockUpdate+0xf4>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400754:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400758:	6803      	ldr	r3, [r0, #0]
  40075a:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40075e:	b2d2      	uxtb	r2, r2
  400760:	fbb3 f3f2 	udiv	r3, r3, r2
  400764:	6003      	str	r3, [r0, #0]
  400766:	e7ac      	b.n	4006c2 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400768:	4a11      	ldr	r2, [pc, #68]	; (4007b0 <SystemCoreClockUpdate+0x100>)
  40076a:	4b0e      	ldr	r3, [pc, #56]	; (4007a4 <SystemCoreClockUpdate+0xf4>)
  40076c:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40076e:	4b0c      	ldr	r3, [pc, #48]	; (4007a0 <SystemCoreClockUpdate+0xf0>)
  400770:	6a1b      	ldr	r3, [r3, #32]
  400772:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400776:	2b10      	cmp	r3, #16
  400778:	d005      	beq.n	400786 <SystemCoreClockUpdate+0xd6>
  40077a:	2b20      	cmp	r3, #32
  40077c:	d1e0      	bne.n	400740 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
  40077e:	4a0b      	ldr	r2, [pc, #44]	; (4007ac <SystemCoreClockUpdate+0xfc>)
  400780:	4b08      	ldr	r3, [pc, #32]	; (4007a4 <SystemCoreClockUpdate+0xf4>)
  400782:	601a      	str	r2, [r3, #0]
				break;
  400784:	e7dc      	b.n	400740 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
  400786:	4a0b      	ldr	r2, [pc, #44]	; (4007b4 <SystemCoreClockUpdate+0x104>)
  400788:	4b06      	ldr	r3, [pc, #24]	; (4007a4 <SystemCoreClockUpdate+0xf4>)
  40078a:	601a      	str	r2, [r3, #0]
				break;
  40078c:	e7d8      	b.n	400740 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  40078e:	4a05      	ldr	r2, [pc, #20]	; (4007a4 <SystemCoreClockUpdate+0xf4>)
  400790:	6813      	ldr	r3, [r2, #0]
  400792:	4909      	ldr	r1, [pc, #36]	; (4007b8 <SystemCoreClockUpdate+0x108>)
  400794:	fba1 1303 	umull	r1, r3, r1, r3
  400798:	085b      	lsrs	r3, r3, #1
  40079a:	6013      	str	r3, [r2, #0]
  40079c:	4770      	bx	lr
  40079e:	bf00      	nop
  4007a0:	400e0400 	.word	0x400e0400
  4007a4:	20000004 	.word	0x20000004
  4007a8:	400e1810 	.word	0x400e1810
  4007ac:	00b71b00 	.word	0x00b71b00
  4007b0:	003d0900 	.word	0x003d0900
  4007b4:	007a1200 	.word	0x007a1200
  4007b8:	aaaaaaab 	.word	0xaaaaaaab

004007bc <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  4007bc:	4b12      	ldr	r3, [pc, #72]	; (400808 <system_init_flash+0x4c>)
  4007be:	4298      	cmp	r0, r3
  4007c0:	d911      	bls.n	4007e6 <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  4007c2:	4b12      	ldr	r3, [pc, #72]	; (40080c <system_init_flash+0x50>)
  4007c4:	4298      	cmp	r0, r3
  4007c6:	d913      	bls.n	4007f0 <system_init_flash+0x34>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  4007c8:	4b11      	ldr	r3, [pc, #68]	; (400810 <system_init_flash+0x54>)
  4007ca:	4298      	cmp	r0, r3
  4007cc:	d914      	bls.n	4007f8 <system_init_flash+0x3c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  4007ce:	4b11      	ldr	r3, [pc, #68]	; (400814 <system_init_flash+0x58>)
  4007d0:	4298      	cmp	r0, r3
  4007d2:	d915      	bls.n	400800 <system_init_flash+0x44>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  4007d4:	4b10      	ldr	r3, [pc, #64]	; (400818 <system_init_flash+0x5c>)
  4007d6:	4298      	cmp	r0, r3
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4007d8:	bf94      	ite	ls
  4007da:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4007de:	4a0f      	ldrhi	r2, [pc, #60]	; (40081c <system_init_flash+0x60>)
  4007e0:	4b0f      	ldr	r3, [pc, #60]	; (400820 <system_init_flash+0x64>)
  4007e2:	601a      	str	r2, [r3, #0]
  4007e4:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4007e6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4007ea:	4b0d      	ldr	r3, [pc, #52]	; (400820 <system_init_flash+0x64>)
  4007ec:	601a      	str	r2, [r3, #0]
  4007ee:	4770      	bx	lr
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4007f0:	4a0c      	ldr	r2, [pc, #48]	; (400824 <system_init_flash+0x68>)
  4007f2:	4b0b      	ldr	r3, [pc, #44]	; (400820 <system_init_flash+0x64>)
  4007f4:	601a      	str	r2, [r3, #0]
  4007f6:	4770      	bx	lr
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4007f8:	4a0b      	ldr	r2, [pc, #44]	; (400828 <system_init_flash+0x6c>)
  4007fa:	4b09      	ldr	r3, [pc, #36]	; (400820 <system_init_flash+0x64>)
  4007fc:	601a      	str	r2, [r3, #0]
  4007fe:	4770      	bx	lr
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400800:	4a0a      	ldr	r2, [pc, #40]	; (40082c <system_init_flash+0x70>)
  400802:	4b07      	ldr	r3, [pc, #28]	; (400820 <system_init_flash+0x64>)
  400804:	601a      	str	r2, [r3, #0]
  400806:	4770      	bx	lr
  400808:	01312cff 	.word	0x01312cff
  40080c:	026259ff 	.word	0x026259ff
  400810:	039386ff 	.word	0x039386ff
  400814:	04c4b3ff 	.word	0x04c4b3ff
  400818:	05f5e0ff 	.word	0x05f5e0ff
  40081c:	04000500 	.word	0x04000500
  400820:	400e0a00 	.word	0x400e0a00
  400824:	04000100 	.word	0x04000100
  400828:	04000200 	.word	0x04000200
  40082c:	04000300 	.word	0x04000300

00400830 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400830:	4b0a      	ldr	r3, [pc, #40]	; (40085c <_sbrk+0x2c>)
  400832:	681b      	ldr	r3, [r3, #0]
  400834:	b153      	cbz	r3, 40084c <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400836:	4b09      	ldr	r3, [pc, #36]	; (40085c <_sbrk+0x2c>)
  400838:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  40083a:	181a      	adds	r2, r3, r0
  40083c:	4908      	ldr	r1, [pc, #32]	; (400860 <_sbrk+0x30>)
  40083e:	4291      	cmp	r1, r2
  400840:	db08      	blt.n	400854 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  400842:	4610      	mov	r0, r2
  400844:	4a05      	ldr	r2, [pc, #20]	; (40085c <_sbrk+0x2c>)
  400846:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400848:	4618      	mov	r0, r3
  40084a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  40084c:	4a05      	ldr	r2, [pc, #20]	; (400864 <_sbrk+0x34>)
  40084e:	4b03      	ldr	r3, [pc, #12]	; (40085c <_sbrk+0x2c>)
  400850:	601a      	str	r2, [r3, #0]
  400852:	e7f0      	b.n	400836 <_sbrk+0x6>
		return (caddr_t) -1;	
  400854:	f04f 30ff 	mov.w	r0, #4294967295
}
  400858:	4770      	bx	lr
  40085a:	bf00      	nop
  40085c:	200009d4 	.word	0x200009d4
  400860:	2001fffc 	.word	0x2001fffc
  400864:	20003a50 	.word	0x20003a50

00400868 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400868:	f04f 30ff 	mov.w	r0, #4294967295
  40086c:	4770      	bx	lr

0040086e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  40086e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400872:	604b      	str	r3, [r1, #4]

	return 0;
}
  400874:	2000      	movs	r0, #0
  400876:	4770      	bx	lr

00400878 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400878:	2001      	movs	r0, #1
  40087a:	4770      	bx	lr

0040087c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  40087c:	2000      	movs	r0, #0
  40087e:	4770      	bx	lr

00400880 <display_menu>:

/**
 * \brief Display main menu.
 */
static void display_menu(void)
{
  400880:	b538      	push	{r3, r4, r5, lr}
	puts("======== Menu Choices for this example ========\r");
  400882:	4813      	ldr	r0, [pc, #76]	; (4008d0 <display_menu+0x50>)
  400884:	4d13      	ldr	r5, [pc, #76]	; (4008d4 <display_menu+0x54>)
  400886:	47a8      	blx	r5
	printf("-- 0: Set frequency(%dHz-%dkHz).\n\r",
  400888:	2203      	movs	r2, #3
  40088a:	21c8      	movs	r1, #200	; 0xc8
  40088c:	4812      	ldr	r0, [pc, #72]	; (4008d8 <display_menu+0x58>)
  40088e:	4c13      	ldr	r4, [pc, #76]	; (4008dc <display_menu+0x5c>)
  400890:	47a0      	blx	r4
		MIN_FREQUENCY, MAX_FREQUENCY / 1000);
	printf("-- 1: Set amplitude(%d-%d).\n\r", MIN_AMPLITUDE, MAX_AMPLITUDE);
  400892:	f640 72ff 	movw	r2, #4095	; 0xfff
  400896:	2164      	movs	r1, #100	; 0x64
  400898:	4811      	ldr	r0, [pc, #68]	; (4008e0 <display_menu+0x60>)
  40089a:	47a0      	blx	r4
	puts("-- i: Display present frequency and amplitude.\n\r"
  40089c:	4811      	ldr	r0, [pc, #68]	; (4008e4 <display_menu+0x64>)
  40089e:	47a8      	blx	r5
			"-- w: Switch to full amplitude square wave or back.\n\r"
			"-- m: Display this menu.\n\r"
			"------------ Current configuration ------------\r");
	printf("-- DACC channel:\t%d\n\r", DACC_CHANNEL);
  4008a0:	2101      	movs	r1, #1
  4008a2:	4811      	ldr	r0, [pc, #68]	; (4008e8 <display_menu+0x68>)
  4008a4:	47a0      	blx	r4
	printf("-- Amplitude   :\t%ld\n\r", (long)g_l_amplitude);
  4008a6:	4b11      	ldr	r3, [pc, #68]	; (4008ec <display_menu+0x6c>)
  4008a8:	6819      	ldr	r1, [r3, #0]
  4008aa:	4811      	ldr	r0, [pc, #68]	; (4008f0 <display_menu+0x70>)
  4008ac:	47a0      	blx	r4
	printf("-- Frequency   :\t%lu\n\r", (unsigned long)g_ul_frequency);
  4008ae:	4b11      	ldr	r3, [pc, #68]	; (4008f4 <display_menu+0x74>)
  4008b0:	6819      	ldr	r1, [r3, #0]
  4008b2:	4811      	ldr	r0, [pc, #68]	; (4008f8 <display_menu+0x78>)
  4008b4:	47a0      	blx	r4
	printf("-- Wave        :\t%s\n\r", g_uc_wave_sel ? "SQUARE" : "SINE");
  4008b6:	4b11      	ldr	r3, [pc, #68]	; (4008fc <display_menu+0x7c>)
  4008b8:	7819      	ldrb	r1, [r3, #0]
  4008ba:	4b11      	ldr	r3, [pc, #68]	; (400900 <display_menu+0x80>)
  4008bc:	4a11      	ldr	r2, [pc, #68]	; (400904 <display_menu+0x84>)
  4008be:	2900      	cmp	r1, #0
  4008c0:	bf14      	ite	ne
  4008c2:	4611      	movne	r1, r2
  4008c4:	4619      	moveq	r1, r3
  4008c6:	4810      	ldr	r0, [pc, #64]	; (400908 <display_menu+0x88>)
  4008c8:	47a0      	blx	r4
	puts("===============================================\r");
  4008ca:	4810      	ldr	r0, [pc, #64]	; (40090c <display_menu+0x8c>)
  4008cc:	47a8      	blx	r5
  4008ce:	bd38      	pop	{r3, r4, r5, pc}
  4008d0:	00403f48 	.word	0x00403f48
  4008d4:	004010a9 	.word	0x004010a9
  4008d8:	00403f7c 	.word	0x00403f7c
  4008dc:	00400f49 	.word	0x00400f49
  4008e0:	00403fa0 	.word	0x00403fa0
  4008e4:	00403fc0 	.word	0x00403fc0
  4008e8:	00404070 	.word	0x00404070
  4008ec:	200009d8 	.word	0x200009d8
  4008f0:	00404088 	.word	0x00404088
  4008f4:	200009e0 	.word	0x200009e0
  4008f8:	004040a0 	.word	0x004040a0
  4008fc:	200009dc 	.word	0x200009dc
  400900:	00403f40 	.word	0x00403f40
  400904:	00403f38 	.word	0x00403f38
  400908:	004040b8 	.word	0x004040b8
  40090c:	004040d0 	.word	0x004040d0

00400910 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  400910:	b570      	push	{r4, r5, r6, lr}
  400912:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400914:	4b18      	ldr	r3, [pc, #96]	; (400978 <usart_serial_putchar+0x68>)
  400916:	4298      	cmp	r0, r3
  400918:	d00a      	beq.n	400930 <usart_serial_putchar+0x20>
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40091a:	4b18      	ldr	r3, [pc, #96]	; (40097c <usart_serial_putchar+0x6c>)
  40091c:	4298      	cmp	r0, r3
  40091e:	d010      	beq.n	400942 <usart_serial_putchar+0x32>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400920:	4b17      	ldr	r3, [pc, #92]	; (400980 <usart_serial_putchar+0x70>)
  400922:	4298      	cmp	r0, r3
  400924:	d016      	beq.n	400954 <usart_serial_putchar+0x44>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400926:	4b17      	ldr	r3, [pc, #92]	; (400984 <usart_serial_putchar+0x74>)
  400928:	4298      	cmp	r0, r3
  40092a:	d01c      	beq.n	400966 <usart_serial_putchar+0x56>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  40092c:	2000      	movs	r0, #0
}
  40092e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400930:	461e      	mov	r6, r3
  400932:	4d15      	ldr	r5, [pc, #84]	; (400988 <usart_serial_putchar+0x78>)
  400934:	4621      	mov	r1, r4
  400936:	4630      	mov	r0, r6
  400938:	47a8      	blx	r5
  40093a:	2800      	cmp	r0, #0
  40093c:	d1fa      	bne.n	400934 <usart_serial_putchar+0x24>
		return 1;
  40093e:	2001      	movs	r0, #1
  400940:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400942:	461e      	mov	r6, r3
  400944:	4d10      	ldr	r5, [pc, #64]	; (400988 <usart_serial_putchar+0x78>)
  400946:	4621      	mov	r1, r4
  400948:	4630      	mov	r0, r6
  40094a:	47a8      	blx	r5
  40094c:	2800      	cmp	r0, #0
  40094e:	d1fa      	bne.n	400946 <usart_serial_putchar+0x36>
		return 1;
  400950:	2001      	movs	r0, #1
  400952:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400954:	461e      	mov	r6, r3
  400956:	4d0d      	ldr	r5, [pc, #52]	; (40098c <usart_serial_putchar+0x7c>)
  400958:	4621      	mov	r1, r4
  40095a:	4630      	mov	r0, r6
  40095c:	47a8      	blx	r5
  40095e:	2800      	cmp	r0, #0
  400960:	d1fa      	bne.n	400958 <usart_serial_putchar+0x48>
		return 1;
  400962:	2001      	movs	r0, #1
  400964:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400966:	461e      	mov	r6, r3
  400968:	4d08      	ldr	r5, [pc, #32]	; (40098c <usart_serial_putchar+0x7c>)
  40096a:	4621      	mov	r1, r4
  40096c:	4630      	mov	r0, r6
  40096e:	47a8      	blx	r5
  400970:	2800      	cmp	r0, #0
  400972:	d1fa      	bne.n	40096a <usart_serial_putchar+0x5a>
		return 1;
  400974:	2001      	movs	r0, #1
  400976:	bd70      	pop	{r4, r5, r6, pc}
  400978:	400e0600 	.word	0x400e0600
  40097c:	40060600 	.word	0x40060600
  400980:	400a0000 	.word	0x400a0000
  400984:	400a4000 	.word	0x400a4000
  400988:	00400599 	.word	0x00400599
  40098c:	004005bb 	.word	0x004005bb

00400990 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400990:	b5f0      	push	{r4, r5, r6, r7, lr}
  400992:	b083      	sub	sp, #12
  400994:	4605      	mov	r5, r0
  400996:	460c      	mov	r4, r1
	uint32_t val = 0;
  400998:	2300      	movs	r3, #0
  40099a:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40099c:	4b18      	ldr	r3, [pc, #96]	; (400a00 <usart_serial_getchar+0x70>)
  40099e:	4298      	cmp	r0, r3
  4009a0:	d00a      	beq.n	4009b8 <usart_serial_getchar+0x28>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4009a2:	4b18      	ldr	r3, [pc, #96]	; (400a04 <usart_serial_getchar+0x74>)
  4009a4:	4298      	cmp	r0, r3
  4009a6:	d00f      	beq.n	4009c8 <usart_serial_getchar+0x38>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4009a8:	4b17      	ldr	r3, [pc, #92]	; (400a08 <usart_serial_getchar+0x78>)
  4009aa:	4298      	cmp	r0, r3
  4009ac:	d014      	beq.n	4009d8 <usart_serial_getchar+0x48>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4009ae:	4b17      	ldr	r3, [pc, #92]	; (400a0c <usart_serial_getchar+0x7c>)
  4009b0:	429d      	cmp	r5, r3
  4009b2:	d01b      	beq.n	4009ec <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4009b4:	b003      	add	sp, #12
  4009b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  4009b8:	461f      	mov	r7, r3
  4009ba:	4e15      	ldr	r6, [pc, #84]	; (400a10 <usart_serial_getchar+0x80>)
  4009bc:	4621      	mov	r1, r4
  4009be:	4638      	mov	r0, r7
  4009c0:	47b0      	blx	r6
  4009c2:	2800      	cmp	r0, #0
  4009c4:	d1fa      	bne.n	4009bc <usart_serial_getchar+0x2c>
  4009c6:	e7f2      	b.n	4009ae <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  4009c8:	461e      	mov	r6, r3
  4009ca:	4d11      	ldr	r5, [pc, #68]	; (400a10 <usart_serial_getchar+0x80>)
  4009cc:	4621      	mov	r1, r4
  4009ce:	4630      	mov	r0, r6
  4009d0:	47a8      	blx	r5
  4009d2:	2800      	cmp	r0, #0
  4009d4:	d1fa      	bne.n	4009cc <usart_serial_getchar+0x3c>
  4009d6:	e7ed      	b.n	4009b4 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  4009d8:	461e      	mov	r6, r3
  4009da:	4d0e      	ldr	r5, [pc, #56]	; (400a14 <usart_serial_getchar+0x84>)
  4009dc:	a901      	add	r1, sp, #4
  4009de:	4630      	mov	r0, r6
  4009e0:	47a8      	blx	r5
  4009e2:	2800      	cmp	r0, #0
  4009e4:	d1fa      	bne.n	4009dc <usart_serial_getchar+0x4c>
		*data = (uint8_t)(val & 0xFF);
  4009e6:	9b01      	ldr	r3, [sp, #4]
  4009e8:	7023      	strb	r3, [r4, #0]
  4009ea:	e7e3      	b.n	4009b4 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  4009ec:	461e      	mov	r6, r3
  4009ee:	4d09      	ldr	r5, [pc, #36]	; (400a14 <usart_serial_getchar+0x84>)
  4009f0:	a901      	add	r1, sp, #4
  4009f2:	4630      	mov	r0, r6
  4009f4:	47a8      	blx	r5
  4009f6:	2800      	cmp	r0, #0
  4009f8:	d1fa      	bne.n	4009f0 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
  4009fa:	9b01      	ldr	r3, [sp, #4]
  4009fc:	7023      	strb	r3, [r4, #0]
}
  4009fe:	e7d9      	b.n	4009b4 <usart_serial_getchar+0x24>
  400a00:	400e0600 	.word	0x400e0600
  400a04:	40060600 	.word	0x40060600
  400a08:	400a0000 	.word	0x400a0000
  400a0c:	400a4000 	.word	0x400a4000
  400a10:	004005a9 	.word	0x004005a9
  400a14:	004005cf 	.word	0x004005cf

00400a18 <get_input_value>:
{
  400a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400a1c:	b083      	sub	sp, #12
  400a1e:	4683      	mov	fp, r0
  400a20:	468a      	mov	sl, r1
	uint8_t uc_key, str_temp[5] = { 0 };
  400a22:	2700      	movs	r7, #0
  400a24:	9700      	str	r7, [sp, #0]
  400a26:	f88d 7004 	strb.w	r7, [sp, #4]
  400a2a:	46e8      	mov	r8, sp
  400a2c:	46e9      	mov	r9, sp
		while (uart_read((Uart*)p_usart, data));
  400a2e:	4e2f      	ldr	r6, [pc, #188]	; (400aec <get_input_value+0xd4>)
  400a30:	4d2f      	ldr	r5, [pc, #188]	; (400af0 <get_input_value+0xd8>)
  400a32:	f10d 0107 	add.w	r1, sp, #7
  400a36:	4630      	mov	r0, r6
  400a38:	47a8      	blx	r5
  400a3a:	4604      	mov	r4, r0
  400a3c:	2800      	cmp	r0, #0
  400a3e:	d1f8      	bne.n	400a32 <get_input_value+0x1a>
		if (uc_key == '\n' || uc_key == '\r') {
  400a40:	f89d 1007 	ldrb.w	r1, [sp, #7]
  400a44:	290a      	cmp	r1, #10
  400a46:	d011      	beq.n	400a6c <get_input_value+0x54>
  400a48:	290d      	cmp	r1, #13
  400a4a:	d00f      	beq.n	400a6c <get_input_value+0x54>
		if ('0' <= uc_key && '9' >= uc_key) {
  400a4c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
  400a50:	b2db      	uxtb	r3, r3
  400a52:	2b09      	cmp	r3, #9
  400a54:	d8ed      	bhi.n	400a32 <get_input_value+0x1a>
			printf("%c", uc_key);
  400a56:	4827      	ldr	r0, [pc, #156]	; (400af4 <get_input_value+0xdc>)
  400a58:	4b27      	ldr	r3, [pc, #156]	; (400af8 <get_input_value+0xe0>)
  400a5a:	4798      	blx	r3
			str_temp[i++] = uc_key;
  400a5c:	3701      	adds	r7, #1
  400a5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
  400a62:	f809 3b01 	strb.w	r3, [r9], #1
			if (i >= 4) {
  400a66:	2f04      	cmp	r7, #4
  400a68:	d1e3      	bne.n	400a32 <get_input_value+0x1a>
  400a6a:	e002      	b.n	400a72 <get_input_value+0x5a>
			puts("\r");
  400a6c:	4823      	ldr	r0, [pc, #140]	; (400afc <get_input_value+0xe4>)
  400a6e:	4b24      	ldr	r3, [pc, #144]	; (400b00 <get_input_value+0xe8>)
  400a70:	4798      	blx	r3
	str_temp[i] = '\0';
  400a72:	ab02      	add	r3, sp, #8
  400a74:	443b      	add	r3, r7
  400a76:	2200      	movs	r2, #0
  400a78:	f803 2c08 	strb.w	r2, [r3, #-8]
  400a7c:	1e7b      	subs	r3, r7, #1
  400a7e:	3f05      	subs	r7, #5
				value += (str_temp[i] - '0') * 1000;
  400a80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
				value += (str_temp[i] - '0') * 100;
  400a84:	2164      	movs	r1, #100	; 0x64
  400a86:	e004      	b.n	400a92 <get_input_value+0x7a>
  400a88:	3c30      	subs	r4, #48	; 0x30
				value += (str_temp[i] - '0');
  400a8a:	4414      	add	r4, r2
  400a8c:	3b01      	subs	r3, #1
	for (i = 0; i < 4; i++) {
  400a8e:	42bb      	cmp	r3, r7
  400a90:	d01e      	beq.n	400ad0 <get_input_value+0xb8>
		if (str_temp[i] != '0') {
  400a92:	f818 2b01 	ldrb.w	r2, [r8], #1
  400a96:	2a30      	cmp	r2, #48	; 0x30
  400a98:	d0f8      	beq.n	400a8c <get_input_value+0x74>
			switch (length - i - 1) {
  400a9a:	2b03      	cmp	r3, #3
  400a9c:	d8f6      	bhi.n	400a8c <get_input_value+0x74>
  400a9e:	a501      	add	r5, pc, #4	; (adr r5, 400aa4 <get_input_value+0x8c>)
  400aa0:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
  400aa4:	00400a89 	.word	0x00400a89
  400aa8:	00400ab5 	.word	0x00400ab5
  400aac:	00400ac1 	.word	0x00400ac1
  400ab0:	00400ac9 	.word	0x00400ac9
				value += (str_temp[i] - '0') * 10;
  400ab4:	3a30      	subs	r2, #48	; 0x30
  400ab6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400aba:	eb04 0442 	add.w	r4, r4, r2, lsl #1
				break;
  400abe:	e7e5      	b.n	400a8c <get_input_value+0x74>
				value += (str_temp[i] - '0') * 100;
  400ac0:	3a30      	subs	r2, #48	; 0x30
  400ac2:	fb01 4402 	mla	r4, r1, r2, r4
				break;
  400ac6:	e7e1      	b.n	400a8c <get_input_value+0x74>
				value += (str_temp[i] - '0') * 1000;
  400ac8:	3a30      	subs	r2, #48	; 0x30
  400aca:	fb00 4402 	mla	r4, r0, r2, r4
				break;
  400ace:	e7dd      	b.n	400a8c <get_input_value+0x74>
	if (value > ul_upper_limit || value < ul_lower_limit) {
  400ad0:	4554      	cmp	r4, sl
  400ad2:	d801      	bhi.n	400ad8 <get_input_value+0xc0>
  400ad4:	455c      	cmp	r4, fp
  400ad6:	d204      	bcs.n	400ae2 <get_input_value+0xca>
		puts("\n\r-F- Input value is invalid!");
  400ad8:	480a      	ldr	r0, [pc, #40]	; (400b04 <get_input_value+0xec>)
  400ada:	4b09      	ldr	r3, [pc, #36]	; (400b00 <get_input_value+0xe8>)
  400adc:	4798      	blx	r3
		return VAL_INVALID;
  400ade:	f04f 34ff 	mov.w	r4, #4294967295
}
  400ae2:	4620      	mov	r0, r4
  400ae4:	b003      	add	sp, #12
  400ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400aea:	bf00      	nop
  400aec:	400e0600 	.word	0x400e0600
  400af0:	004005a9 	.word	0x004005a9
  400af4:	004041cc 	.word	0x004041cc
  400af8:	00400f49 	.word	0x00400f49
  400afc:	00403fbc 	.word	0x00403fbc
  400b00:	004010a9 	.word	0x004010a9
  400b04:	004041d0 	.word	0x004041d0

00400b08 <SysTick_Handler>:

/**
 * \brief SysTick IRQ handler.
 */
void SysTick_Handler(void)
{
  400b08:	b508      	push	{r3, lr}
	uint32_t status;
	uint32_t dac_val;
	
	status = dacc_get_interrupt_status(DACC_BASE);
  400b0a:	481a      	ldr	r0, [pc, #104]	; (400b74 <SysTick_Handler+0x6c>)
  400b0c:	4b1a      	ldr	r3, [pc, #104]	; (400b78 <SysTick_Handler+0x70>)
  400b0e:	4798      	blx	r3
	if ((status & DACC_ISR_TXRDY0) == DACC_ISR_TXRDY0) {
#elif (DACC_CHANNEL == 1)
	if ((status & DACC_ISR_TXRDY1) == DACC_ISR_TXRDY1) {
#endif
#else
	if ((status & DACC_ISR_TXRDY) == DACC_ISR_TXRDY) {
  400b10:	f010 0f01 	tst.w	r0, #1
  400b14:	d020      	beq.n	400b58 <SysTick_Handler+0x50>
#endif
		g_ul_index_sample++;
  400b16:	4a19      	ldr	r2, [pc, #100]	; (400b7c <SysTick_Handler+0x74>)
  400b18:	6813      	ldr	r3, [r2, #0]
  400b1a:	3301      	adds	r3, #1
  400b1c:	6013      	str	r3, [r2, #0]
		if (g_ul_index_sample >= SAMPLES) {
  400b1e:	2b63      	cmp	r3, #99	; 0x63
  400b20:	d91b      	bls.n	400b5a <SysTick_Handler+0x52>
			g_ul_index_sample = 0;
  400b22:	2200      	movs	r2, #0
  400b24:	4b15      	ldr	r3, [pc, #84]	; (400b7c <SysTick_Handler+0x74>)
  400b26:	601a      	str	r2, [r3, #0]
		}
		dac_val = g_uc_wave_sel ?
  400b28:	4b15      	ldr	r3, [pc, #84]	; (400b80 <SysTick_Handler+0x78>)
				((g_ul_index_sample > SAMPLES / 2) ? 0 : MAX_AMPLITUDE)
				: wave_to_dacc(gc_us_sine_data[g_ul_index_sample],
  400b2a:	781b      	ldrb	r3, [r3, #0]
  400b2c:	b9fb      	cbnz	r3, 400b6e <SysTick_Handler+0x66>
  400b2e:	4b13      	ldr	r3, [pc, #76]	; (400b7c <SysTick_Handler+0x74>)
  400b30:	681a      	ldr	r2, [r3, #0]
  400b32:	4b14      	ldr	r3, [pc, #80]	; (400b84 <SysTick_Handler+0x7c>)
  400b34:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
  400b38:	4b13      	ldr	r3, [pc, #76]	; (400b88 <SysTick_Handler+0x80>)
  400b3a:	681b      	ldr	r3, [r3, #0]
  400b3c:	fb03 f301 	mul.w	r3, r3, r1
  400b40:	4912      	ldr	r1, [pc, #72]	; (400b8c <SysTick_Handler+0x84>)
  400b42:	fb81 2103 	smull	r2, r1, r1, r3
  400b46:	18ca      	adds	r2, r1, r3
  400b48:	17d9      	asrs	r1, r3, #31
  400b4a:	ebc1 21e2 	rsb	r1, r1, r2, asr #11
  400b4e:	f201 71ff 	addw	r1, r1, #2047	; 0x7ff
					 g_l_amplitude,
					 MAX_DIGITAL * 2, MAX_AMPLITUDE);
#if !(SAMV70 || SAMV71 || SAME70 || SAMS70)
		dacc_write_conversion_data(DACC_BASE, dac_val);
  400b52:	4808      	ldr	r0, [pc, #32]	; (400b74 <SysTick_Handler+0x6c>)
  400b54:	4b0e      	ldr	r3, [pc, #56]	; (400b90 <SysTick_Handler+0x88>)
  400b56:	4798      	blx	r3
  400b58:	bd08      	pop	{r3, pc}
		dac_val = g_uc_wave_sel ?
  400b5a:	4a09      	ldr	r2, [pc, #36]	; (400b80 <SysTick_Handler+0x78>)
				: wave_to_dacc(gc_us_sine_data[g_ul_index_sample],
  400b5c:	7812      	ldrb	r2, [r2, #0]
  400b5e:	2a00      	cmp	r2, #0
  400b60:	d0e5      	beq.n	400b2e <SysTick_Handler+0x26>
  400b62:	2b32      	cmp	r3, #50	; 0x32
  400b64:	f640 71ff 	movw	r1, #4095	; 0xfff
  400b68:	bf88      	it	hi
  400b6a:	2100      	movhi	r1, #0
  400b6c:	e7f1      	b.n	400b52 <SysTick_Handler+0x4a>
  400b6e:	f640 71ff 	movw	r1, #4095	; 0xfff
  400b72:	e7ee      	b.n	400b52 <SysTick_Handler+0x4a>
  400b74:	400b8000 	.word	0x400b8000
  400b78:	004003bf 	.word	0x004003bf
  400b7c:	200009e4 	.word	0x200009e4
  400b80:	200009dc 	.word	0x200009dc
  400b84:	00404104 	.word	0x00404104
  400b88:	200009d8 	.word	0x200009d8
  400b8c:	80100201 	.word	0x80100201
  400b90:	004003c3 	.word	0x004003c3

00400b94 <main>:
 *  \brief DAC Sinewave application entry point.
 *
 *  \return Unused (ANSI-C compatibility).
 */
int main(void)
{
  400b94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400b98:	b085      	sub	sp, #20
	uint8_t uc_key;
	uint32_t ul_freq, ul_amp;

	/* Initialize the system */
	sysclk_init();
  400b9a:	4bae      	ldr	r3, [pc, #696]	; (400e54 <main+0x2c0>)
  400b9c:	4798      	blx	r3
	board_init();
  400b9e:	4bae      	ldr	r3, [pc, #696]	; (400e58 <main+0x2c4>)
  400ba0:	4798      	blx	r3
  400ba2:	2007      	movs	r0, #7
  400ba4:	4cad      	ldr	r4, [pc, #692]	; (400e5c <main+0x2c8>)
  400ba6:	47a0      	blx	r4
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400ba8:	4dad      	ldr	r5, [pc, #692]	; (400e60 <main+0x2cc>)
  400baa:	4bae      	ldr	r3, [pc, #696]	; (400e64 <main+0x2d0>)
  400bac:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400bae:	4aae      	ldr	r2, [pc, #696]	; (400e68 <main+0x2d4>)
  400bb0:	4bae      	ldr	r3, [pc, #696]	; (400e6c <main+0x2d8>)
  400bb2:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400bb4:	4aae      	ldr	r2, [pc, #696]	; (400e70 <main+0x2dc>)
  400bb6:	4baf      	ldr	r3, [pc, #700]	; (400e74 <main+0x2e0>)
  400bb8:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400bba:	4baf      	ldr	r3, [pc, #700]	; (400e78 <main+0x2e4>)
  400bbc:	9300      	str	r3, [sp, #0]
	uart_settings.ul_baudrate = opt->baudrate;
  400bbe:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400bc2:	9301      	str	r3, [sp, #4]
	uart_settings.ul_mode = opt->paritytype;
  400bc4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400bc8:	9302      	str	r3, [sp, #8]
  400bca:	2007      	movs	r0, #7
  400bcc:	47a0      	blx	r4
		uart_init((Uart*)p_usart, &uart_settings);
  400bce:	4669      	mov	r1, sp
  400bd0:	4628      	mov	r0, r5
  400bd2:	4baa      	ldr	r3, [pc, #680]	; (400e7c <main+0x2e8>)
  400bd4:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400bd6:	4eaa      	ldr	r6, [pc, #680]	; (400e80 <main+0x2ec>)
  400bd8:	6833      	ldr	r3, [r6, #0]
  400bda:	2100      	movs	r1, #0
  400bdc:	6898      	ldr	r0, [r3, #8]
  400bde:	4da9      	ldr	r5, [pc, #676]	; (400e84 <main+0x2f0>)
  400be0:	47a8      	blx	r5
	setbuf(stdin, NULL);
  400be2:	6833      	ldr	r3, [r6, #0]
  400be4:	2100      	movs	r1, #0
  400be6:	6858      	ldr	r0, [r3, #4]
  400be8:	47a8      	blx	r5

	/* Initialize debug console */
	configure_console();

	/* Output example information */
	puts(STRING_HEADER);
  400bea:	48a7      	ldr	r0, [pc, #668]	; (400e88 <main+0x2f4>)
  400bec:	4ba7      	ldr	r3, [pc, #668]	; (400e8c <main+0x2f8>)
  400bee:	4798      	blx	r3
  400bf0:	2020      	movs	r0, #32
  400bf2:	47a0      	blx	r4
#else
	sysclk_enable_peripheral_clock(DACC_ID);
#endif

	/* Reset DACC registers */
	dacc_reset(DACC_BASE);
  400bf4:	4ca6      	ldr	r4, [pc, #664]	; (400e90 <main+0x2fc>)
  400bf6:	4620      	mov	r0, r4
  400bf8:	4ba6      	ldr	r3, [pc, #664]	; (400e94 <main+0x300>)
  400bfa:	4798      	blx	r3

	/* Half word transfer mode */
	dacc_set_transfer_mode(DACC_BASE, 0);
  400bfc:	2100      	movs	r1, #0
  400bfe:	4620      	mov	r0, r4
  400c00:	4ba5      	ldr	r3, [pc, #660]	; (400e98 <main+0x304>)
  400c02:	4798      	blx	r3
	 * max speed mode -    0 (disabled)
	 * startup time   - 0x10 (1024 dacc clocks)
	 */
#if !(SAMV70 || SAMV71 || SAME70 || SAMS70)
#if (SAM4E)
	dacc_set_timing(DACC_BASE,0, 0x10);
  400c04:	2210      	movs	r2, #16
  400c06:	2100      	movs	r1, #0
  400c08:	4620      	mov	r0, r4
  400c0a:	4ba4      	ldr	r3, [pc, #656]	; (400e9c <main+0x308>)
  400c0c:	4798      	blx	r3
#else
	dacc_set_timing(DACC_BASE, 0x08, 0, 0x10);
#endif

	/* Disable TAG and select output channel DACC_CHANNEL */
	dacc_set_channel_selection(DACC_BASE, DACC_CHANNEL);
  400c0e:	2101      	movs	r1, #1
  400c10:	4620      	mov	r0, r4
  400c12:	4ba3      	ldr	r3, [pc, #652]	; (400ea0 <main+0x30c>)
  400c14:	4798      	blx	r3
#endif

	/* Enable output channel DACC_CHANNEL */
	dacc_enable_channel(DACC_BASE, DACC_CHANNEL);
  400c16:	2101      	movs	r1, #1
  400c18:	4620      	mov	r0, r4
  400c1a:	4ba2      	ldr	r3, [pc, #648]	; (400ea4 <main+0x310>)
  400c1c:	4798      	blx	r3

	/* Set up analog current */
	dacc_set_analog_control(DACC_BASE, DACC_ANALOG_CONTROL);
  400c1e:	f44f 7185 	mov.w	r1, #266	; 0x10a
  400c22:	4620      	mov	r0, r4
  400c24:	4ba0      	ldr	r3, [pc, #640]	; (400ea8 <main+0x314>)
  400c26:	4798      	blx	r3
#endif /* (SAM3N) */

	g_l_amplitude = MAX_AMPLITUDE / 2;
  400c28:	f240 72ff 	movw	r2, #2047	; 0x7ff
  400c2c:	4b9f      	ldr	r3, [pc, #636]	; (400eac <main+0x318>)
  400c2e:	601a      	str	r2, [r3, #0]
	g_ul_frequency = DEFAULT_FREQUENCY;
  400c30:	f640 32b8 	movw	r2, #3000	; 0xbb8
  400c34:	4b9e      	ldr	r3, [pc, #632]	; (400eb0 <main+0x31c>)
  400c36:	601a      	str	r2, [r3, #0]
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  400c38:	4b9e      	ldr	r3, [pc, #632]	; (400eb4 <main+0x320>)
  400c3a:	f240 128f 	movw	r2, #399	; 0x18f
  400c3e:	605a      	str	r2, [r3, #4]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400c40:	21f0      	movs	r1, #240	; 0xf0
  400c42:	4a9d      	ldr	r2, [pc, #628]	; (400eb8 <main+0x324>)
  400c44:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  400c48:	2200      	movs	r2, #0
  400c4a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  400c4c:	2207      	movs	r2, #7
  400c4e:	601a      	str	r2, [r3, #0]

	SysTick_Config(sysclk_get_cpu_hz() / (g_ul_frequency * SAMPLES));
	
	/* Main menu */
	display_menu();
  400c50:	4b9a      	ldr	r3, [pc, #616]	; (400ebc <main+0x328>)
  400c52:	4798      	blx	r3
		while (uart_read((Uart*)p_usart, data));
  400c54:	4d82      	ldr	r5, [pc, #520]	; (400e60 <main+0x2cc>)
  400c56:	4c9a      	ldr	r4, [pc, #616]	; (400ec0 <main+0x32c>)
			ul_freq = get_input_value(MIN_FREQUENCY, MAX_FREQUENCY);
			printf("\r\n");

			if (ul_freq != VAL_INVALID) {
				printf("Set frequency to : %luHz\n\r", (unsigned long)ul_freq);
				SysTick_Config(sysclk_get_cpu_hz() / (ul_freq * SAMPLES));
  400c58:	f8df 921c 	ldr.w	r9, [pc, #540]	; 400e78 <main+0x2e4>
  400c5c:	e045      	b.n	400cea <main+0x156>
			printf("Frequency:\t");
  400c5e:	4899      	ldr	r0, [pc, #612]	; (400ec4 <main+0x330>)
  400c60:	4e99      	ldr	r6, [pc, #612]	; (400ec8 <main+0x334>)
  400c62:	47b0      	blx	r6
			ul_freq = get_input_value(MIN_FREQUENCY, MAX_FREQUENCY);
  400c64:	f640 31b8 	movw	r1, #3000	; 0xbb8
  400c68:	20c8      	movs	r0, #200	; 0xc8
  400c6a:	4b98      	ldr	r3, [pc, #608]	; (400ecc <main+0x338>)
  400c6c:	4798      	blx	r3
  400c6e:	4607      	mov	r7, r0
			printf("\r\n");
  400c70:	4897      	ldr	r0, [pc, #604]	; (400ed0 <main+0x33c>)
  400c72:	47b0      	blx	r6
			if (ul_freq != VAL_INVALID) {
  400c74:	f1b7 3fff 	cmp.w	r7, #4294967295
  400c78:	d034      	beq.n	400ce4 <main+0x150>
				printf("Set frequency to : %luHz\n\r", (unsigned long)ul_freq);
  400c7a:	4639      	mov	r1, r7
  400c7c:	4895      	ldr	r0, [pc, #596]	; (400ed4 <main+0x340>)
  400c7e:	47b0      	blx	r6
				SysTick_Config(sysclk_get_cpu_hz() / (ul_freq * SAMPLES));
  400c80:	2364      	movs	r3, #100	; 0x64
  400c82:	fb03 f307 	mul.w	r3, r3, r7
  400c86:	fbb9 f3f3 	udiv	r3, r9, r3
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
  400c8a:	3b01      	subs	r3, #1
  400c8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  400c90:	d209      	bcs.n	400ca6 <main+0x112>
  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  400c92:	4a88      	ldr	r2, [pc, #544]	; (400eb4 <main+0x320>)
  400c94:	6053      	str	r3, [r2, #4]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400c96:	21f0      	movs	r1, #240	; 0xf0
  400c98:	4b87      	ldr	r3, [pc, #540]	; (400eb8 <main+0x324>)
  400c9a:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  400c9e:	2300      	movs	r3, #0
  400ca0:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  400ca2:	2307      	movs	r3, #7
  400ca4:	6013      	str	r3, [r2, #0]
				g_ul_frequency = ul_freq;
  400ca6:	4b82      	ldr	r3, [pc, #520]	; (400eb0 <main+0x31c>)
  400ca8:	601f      	str	r7, [r3, #0]
  400caa:	e01b      	b.n	400ce4 <main+0x150>
			}
			break;

		case '1':
			printf("Amplitude:\t");
  400cac:	488a      	ldr	r0, [pc, #552]	; (400ed8 <main+0x344>)
  400cae:	4f86      	ldr	r7, [pc, #536]	; (400ec8 <main+0x334>)
  400cb0:	47b8      	blx	r7
			ul_amp = get_input_value(MIN_AMPLITUDE, MAX_AMPLITUDE);
  400cb2:	f640 71ff 	movw	r1, #4095	; 0xfff
  400cb6:	2064      	movs	r0, #100	; 0x64
  400cb8:	4b84      	ldr	r3, [pc, #528]	; (400ecc <main+0x338>)
  400cba:	4798      	blx	r3
  400cbc:	4680      	mov	r8, r0
			printf("\r\n");
  400cbe:	4884      	ldr	r0, [pc, #528]	; (400ed0 <main+0x33c>)
  400cc0:	47b8      	blx	r7
			if (ul_amp != VAL_INVALID) {
  400cc2:	f1b8 3fff 	cmp.w	r8, #4294967295
  400cc6:	d00d      	beq.n	400ce4 <main+0x150>
				printf("Set amplitude to : %lu\n\r", (unsigned long)ul_amp);
  400cc8:	4641      	mov	r1, r8
  400cca:	4884      	ldr	r0, [pc, #528]	; (400edc <main+0x348>)
  400ccc:	47b8      	blx	r7
				g_l_amplitude = ul_amp;
  400cce:	4b77      	ldr	r3, [pc, #476]	; (400eac <main+0x318>)
  400cd0:	f8c3 8000 	str.w	r8, [r3]
  400cd4:	e006      	b.n	400ce4 <main+0x150>
			}
			break;

		case 'i':
		case 'I':
			printf("-I- Frequency : %lu Hz Amplitude : %ld\n\r",
  400cd6:	4b75      	ldr	r3, [pc, #468]	; (400eac <main+0x318>)
  400cd8:	681a      	ldr	r2, [r3, #0]
  400cda:	4b75      	ldr	r3, [pc, #468]	; (400eb0 <main+0x31c>)
  400cdc:	6819      	ldr	r1, [r3, #0]
  400cde:	4880      	ldr	r0, [pc, #512]	; (400ee0 <main+0x34c>)
  400ce0:	4b79      	ldr	r3, [pc, #484]	; (400ec8 <main+0x334>)
  400ce2:	4798      	blx	r3
		case 'm':
		case 'M':
			display_menu();
			break;
		}
		puts("Press \'m\' or \'M\' to display the main menu again!\r");
  400ce4:	487f      	ldr	r0, [pc, #508]	; (400ee4 <main+0x350>)
  400ce6:	4b69      	ldr	r3, [pc, #420]	; (400e8c <main+0x2f8>)
  400ce8:	4798      	blx	r3
  400cea:	f10d 010f 	add.w	r1, sp, #15
  400cee:	4628      	mov	r0, r5
  400cf0:	47a0      	blx	r4
  400cf2:	2800      	cmp	r0, #0
  400cf4:	d1f9      	bne.n	400cea <main+0x156>
		switch (uc_key) {
  400cf6:	f89d 300f 	ldrb.w	r3, [sp, #15]
  400cfa:	3b30      	subs	r3, #48	; 0x30
  400cfc:	2b47      	cmp	r3, #71	; 0x47
  400cfe:	d8f1      	bhi.n	400ce4 <main+0x150>
  400d00:	a201      	add	r2, pc, #4	; (adr r2, 400d08 <main+0x174>)
  400d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400d06:	bf00      	nop
  400d08:	00400c5f 	.word	0x00400c5f
  400d0c:	00400cad 	.word	0x00400cad
  400d10:	00400ce5 	.word	0x00400ce5
  400d14:	00400ce5 	.word	0x00400ce5
  400d18:	00400ce5 	.word	0x00400ce5
  400d1c:	00400ce5 	.word	0x00400ce5
  400d20:	00400ce5 	.word	0x00400ce5
  400d24:	00400ce5 	.word	0x00400ce5
  400d28:	00400ce5 	.word	0x00400ce5
  400d2c:	00400ce5 	.word	0x00400ce5
  400d30:	00400ce5 	.word	0x00400ce5
  400d34:	00400ce5 	.word	0x00400ce5
  400d38:	00400ce5 	.word	0x00400ce5
  400d3c:	00400ce5 	.word	0x00400ce5
  400d40:	00400ce5 	.word	0x00400ce5
  400d44:	00400ce5 	.word	0x00400ce5
  400d48:	00400ce5 	.word	0x00400ce5
  400d4c:	00400ce5 	.word	0x00400ce5
  400d50:	00400ce5 	.word	0x00400ce5
  400d54:	00400ce5 	.word	0x00400ce5
  400d58:	00400ce5 	.word	0x00400ce5
  400d5c:	00400ce5 	.word	0x00400ce5
  400d60:	00400ce5 	.word	0x00400ce5
  400d64:	00400ce5 	.word	0x00400ce5
  400d68:	00400ce5 	.word	0x00400ce5
  400d6c:	00400cd7 	.word	0x00400cd7
  400d70:	00400ce5 	.word	0x00400ce5
  400d74:	00400ce5 	.word	0x00400ce5
  400d78:	00400ce5 	.word	0x00400ce5
  400d7c:	00400e4d 	.word	0x00400e4d
  400d80:	00400ce5 	.word	0x00400ce5
  400d84:	00400ce5 	.word	0x00400ce5
  400d88:	00400ce5 	.word	0x00400ce5
  400d8c:	00400ce5 	.word	0x00400ce5
  400d90:	00400ce5 	.word	0x00400ce5
  400d94:	00400ce5 	.word	0x00400ce5
  400d98:	00400ce5 	.word	0x00400ce5
  400d9c:	00400ce5 	.word	0x00400ce5
  400da0:	00400ce5 	.word	0x00400ce5
  400da4:	00400e29 	.word	0x00400e29
  400da8:	00400ce5 	.word	0x00400ce5
  400dac:	00400ce5 	.word	0x00400ce5
  400db0:	00400ce5 	.word	0x00400ce5
  400db4:	00400ce5 	.word	0x00400ce5
  400db8:	00400ce5 	.word	0x00400ce5
  400dbc:	00400ce5 	.word	0x00400ce5
  400dc0:	00400ce5 	.word	0x00400ce5
  400dc4:	00400ce5 	.word	0x00400ce5
  400dc8:	00400ce5 	.word	0x00400ce5
  400dcc:	00400ce5 	.word	0x00400ce5
  400dd0:	00400ce5 	.word	0x00400ce5
  400dd4:	00400ce5 	.word	0x00400ce5
  400dd8:	00400ce5 	.word	0x00400ce5
  400ddc:	00400ce5 	.word	0x00400ce5
  400de0:	00400ce5 	.word	0x00400ce5
  400de4:	00400ce5 	.word	0x00400ce5
  400de8:	00400ce5 	.word	0x00400ce5
  400dec:	00400cd7 	.word	0x00400cd7
  400df0:	00400ce5 	.word	0x00400ce5
  400df4:	00400ce5 	.word	0x00400ce5
  400df8:	00400ce5 	.word	0x00400ce5
  400dfc:	00400e4d 	.word	0x00400e4d
  400e00:	00400ce5 	.word	0x00400ce5
  400e04:	00400ce5 	.word	0x00400ce5
  400e08:	00400ce5 	.word	0x00400ce5
  400e0c:	00400ce5 	.word	0x00400ce5
  400e10:	00400ce5 	.word	0x00400ce5
  400e14:	00400ce5 	.word	0x00400ce5
  400e18:	00400ce5 	.word	0x00400ce5
  400e1c:	00400ce5 	.word	0x00400ce5
  400e20:	00400ce5 	.word	0x00400ce5
  400e24:	00400e29 	.word	0x00400e29
			printf("-I- Switch wave to : %s\n\r", g_uc_wave_sel ?
  400e28:	4b2f      	ldr	r3, [pc, #188]	; (400ee8 <main+0x354>)
  400e2a:	7819      	ldrb	r1, [r3, #0]
  400e2c:	4b2f      	ldr	r3, [pc, #188]	; (400eec <main+0x358>)
  400e2e:	4a30      	ldr	r2, [pc, #192]	; (400ef0 <main+0x35c>)
  400e30:	2900      	cmp	r1, #0
  400e32:	bf14      	ite	ne
  400e34:	4611      	movne	r1, r2
  400e36:	4619      	moveq	r1, r3
  400e38:	482e      	ldr	r0, [pc, #184]	; (400ef4 <main+0x360>)
  400e3a:	4b23      	ldr	r3, [pc, #140]	; (400ec8 <main+0x334>)
  400e3c:	4798      	blx	r3
			g_uc_wave_sel = (g_uc_wave_sel + 1) & 1;
  400e3e:	4a2a      	ldr	r2, [pc, #168]	; (400ee8 <main+0x354>)
  400e40:	7813      	ldrb	r3, [r2, #0]
  400e42:	3301      	adds	r3, #1
  400e44:	f003 0301 	and.w	r3, r3, #1
  400e48:	7013      	strb	r3, [r2, #0]
			break;
  400e4a:	e74b      	b.n	400ce4 <main+0x150>
			display_menu();
  400e4c:	4b1b      	ldr	r3, [pc, #108]	; (400ebc <main+0x328>)
  400e4e:	4798      	blx	r3
			break;
  400e50:	e748      	b.n	400ce4 <main+0x150>
  400e52:	bf00      	nop
  400e54:	00400165 	.word	0x00400165
  400e58:	00400255 	.word	0x00400255
  400e5c:	0040050d 	.word	0x0040050d
  400e60:	400e0600 	.word	0x400e0600
  400e64:	20000a24 	.word	0x20000a24
  400e68:	00400911 	.word	0x00400911
  400e6c:	20000a20 	.word	0x20000a20
  400e70:	00400991 	.word	0x00400991
  400e74:	20000a1c 	.word	0x20000a1c
  400e78:	07270e00 	.word	0x07270e00
  400e7c:	00400561 	.word	0x00400561
  400e80:	20000008 	.word	0x20000008
  400e84:	004010b9 	.word	0x004010b9
  400e88:	00404208 	.word	0x00404208
  400e8c:	004010a9 	.word	0x004010a9
  400e90:	400b8000 	.word	0x400b8000
  400e94:	00400391 	.word	0x00400391
  400e98:	00400397 	.word	0x00400397
  400e9c:	004003e1 	.word	0x004003e1
  400ea0:	004003c7 	.word	0x004003c7
  400ea4:	00400409 	.word	0x00400409
  400ea8:	0040041d 	.word	0x0040041d
  400eac:	200009d8 	.word	0x200009d8
  400eb0:	200009e0 	.word	0x200009e0
  400eb4:	e000e010 	.word	0xe000e010
  400eb8:	e000ed00 	.word	0xe000ed00
  400ebc:	00400881 	.word	0x00400881
  400ec0:	004005a9 	.word	0x004005a9
  400ec4:	0040425c 	.word	0x0040425c
  400ec8:	00400f49 	.word	0x00400f49
  400ecc:	00400a19 	.word	0x00400a19
  400ed0:	00404268 	.word	0x00404268
  400ed4:	0040426c 	.word	0x0040426c
  400ed8:	00404288 	.word	0x00404288
  400edc:	00404294 	.word	0x00404294
  400ee0:	004042b0 	.word	0x004042b0
  400ee4:	004042f8 	.word	0x004042f8
  400ee8:	200009dc 	.word	0x200009dc
  400eec:	004041f0 	.word	0x004041f0
  400ef0:	00403f40 	.word	0x00403f40
  400ef4:	004042dc 	.word	0x004042dc

00400ef8 <__libc_init_array>:
  400ef8:	b570      	push	{r4, r5, r6, lr}
  400efa:	4e0f      	ldr	r6, [pc, #60]	; (400f38 <__libc_init_array+0x40>)
  400efc:	4d0f      	ldr	r5, [pc, #60]	; (400f3c <__libc_init_array+0x44>)
  400efe:	1b76      	subs	r6, r6, r5
  400f00:	10b6      	asrs	r6, r6, #2
  400f02:	bf18      	it	ne
  400f04:	2400      	movne	r4, #0
  400f06:	d005      	beq.n	400f14 <__libc_init_array+0x1c>
  400f08:	3401      	adds	r4, #1
  400f0a:	f855 3b04 	ldr.w	r3, [r5], #4
  400f0e:	4798      	blx	r3
  400f10:	42a6      	cmp	r6, r4
  400f12:	d1f9      	bne.n	400f08 <__libc_init_array+0x10>
  400f14:	4e0a      	ldr	r6, [pc, #40]	; (400f40 <__libc_init_array+0x48>)
  400f16:	4d0b      	ldr	r5, [pc, #44]	; (400f44 <__libc_init_array+0x4c>)
  400f18:	1b76      	subs	r6, r6, r5
  400f1a:	f003 fabd 	bl	404498 <_init>
  400f1e:	10b6      	asrs	r6, r6, #2
  400f20:	bf18      	it	ne
  400f22:	2400      	movne	r4, #0
  400f24:	d006      	beq.n	400f34 <__libc_init_array+0x3c>
  400f26:	3401      	adds	r4, #1
  400f28:	f855 3b04 	ldr.w	r3, [r5], #4
  400f2c:	4798      	blx	r3
  400f2e:	42a6      	cmp	r6, r4
  400f30:	d1f9      	bne.n	400f26 <__libc_init_array+0x2e>
  400f32:	bd70      	pop	{r4, r5, r6, pc}
  400f34:	bd70      	pop	{r4, r5, r6, pc}
  400f36:	bf00      	nop
  400f38:	004044a4 	.word	0x004044a4
  400f3c:	004044a4 	.word	0x004044a4
  400f40:	004044ac 	.word	0x004044ac
  400f44:	004044a4 	.word	0x004044a4

00400f48 <iprintf>:
  400f48:	b40f      	push	{r0, r1, r2, r3}
  400f4a:	b500      	push	{lr}
  400f4c:	4907      	ldr	r1, [pc, #28]	; (400f6c <iprintf+0x24>)
  400f4e:	b083      	sub	sp, #12
  400f50:	ab04      	add	r3, sp, #16
  400f52:	6808      	ldr	r0, [r1, #0]
  400f54:	f853 2b04 	ldr.w	r2, [r3], #4
  400f58:	6881      	ldr	r1, [r0, #8]
  400f5a:	9301      	str	r3, [sp, #4]
  400f5c:	f000 fa3e 	bl	4013dc <_vfiprintf_r>
  400f60:	b003      	add	sp, #12
  400f62:	f85d eb04 	ldr.w	lr, [sp], #4
  400f66:	b004      	add	sp, #16
  400f68:	4770      	bx	lr
  400f6a:	bf00      	nop
  400f6c:	20000008 	.word	0x20000008

00400f70 <memset>:
  400f70:	b470      	push	{r4, r5, r6}
  400f72:	0786      	lsls	r6, r0, #30
  400f74:	d046      	beq.n	401004 <memset+0x94>
  400f76:	1e54      	subs	r4, r2, #1
  400f78:	2a00      	cmp	r2, #0
  400f7a:	d041      	beq.n	401000 <memset+0x90>
  400f7c:	b2ca      	uxtb	r2, r1
  400f7e:	4603      	mov	r3, r0
  400f80:	e002      	b.n	400f88 <memset+0x18>
  400f82:	f114 34ff 	adds.w	r4, r4, #4294967295
  400f86:	d33b      	bcc.n	401000 <memset+0x90>
  400f88:	f803 2b01 	strb.w	r2, [r3], #1
  400f8c:	079d      	lsls	r5, r3, #30
  400f8e:	d1f8      	bne.n	400f82 <memset+0x12>
  400f90:	2c03      	cmp	r4, #3
  400f92:	d92e      	bls.n	400ff2 <memset+0x82>
  400f94:	b2cd      	uxtb	r5, r1
  400f96:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  400f9a:	2c0f      	cmp	r4, #15
  400f9c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  400fa0:	d919      	bls.n	400fd6 <memset+0x66>
  400fa2:	f103 0210 	add.w	r2, r3, #16
  400fa6:	4626      	mov	r6, r4
  400fa8:	3e10      	subs	r6, #16
  400faa:	2e0f      	cmp	r6, #15
  400fac:	f842 5c10 	str.w	r5, [r2, #-16]
  400fb0:	f842 5c0c 	str.w	r5, [r2, #-12]
  400fb4:	f842 5c08 	str.w	r5, [r2, #-8]
  400fb8:	f842 5c04 	str.w	r5, [r2, #-4]
  400fbc:	f102 0210 	add.w	r2, r2, #16
  400fc0:	d8f2      	bhi.n	400fa8 <memset+0x38>
  400fc2:	f1a4 0210 	sub.w	r2, r4, #16
  400fc6:	f022 020f 	bic.w	r2, r2, #15
  400fca:	f004 040f 	and.w	r4, r4, #15
  400fce:	3210      	adds	r2, #16
  400fd0:	2c03      	cmp	r4, #3
  400fd2:	4413      	add	r3, r2
  400fd4:	d90d      	bls.n	400ff2 <memset+0x82>
  400fd6:	461e      	mov	r6, r3
  400fd8:	4622      	mov	r2, r4
  400fda:	3a04      	subs	r2, #4
  400fdc:	2a03      	cmp	r2, #3
  400fde:	f846 5b04 	str.w	r5, [r6], #4
  400fe2:	d8fa      	bhi.n	400fda <memset+0x6a>
  400fe4:	1f22      	subs	r2, r4, #4
  400fe6:	f022 0203 	bic.w	r2, r2, #3
  400fea:	3204      	adds	r2, #4
  400fec:	4413      	add	r3, r2
  400fee:	f004 0403 	and.w	r4, r4, #3
  400ff2:	b12c      	cbz	r4, 401000 <memset+0x90>
  400ff4:	b2c9      	uxtb	r1, r1
  400ff6:	441c      	add	r4, r3
  400ff8:	f803 1b01 	strb.w	r1, [r3], #1
  400ffc:	429c      	cmp	r4, r3
  400ffe:	d1fb      	bne.n	400ff8 <memset+0x88>
  401000:	bc70      	pop	{r4, r5, r6}
  401002:	4770      	bx	lr
  401004:	4614      	mov	r4, r2
  401006:	4603      	mov	r3, r0
  401008:	e7c2      	b.n	400f90 <memset+0x20>
  40100a:	bf00      	nop

0040100c <_puts_r>:
  40100c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40100e:	4605      	mov	r5, r0
  401010:	b089      	sub	sp, #36	; 0x24
  401012:	4608      	mov	r0, r1
  401014:	460c      	mov	r4, r1
  401016:	f000 f933 	bl	401280 <strlen>
  40101a:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40101c:	4f21      	ldr	r7, [pc, #132]	; (4010a4 <_puts_r+0x98>)
  40101e:	9404      	str	r4, [sp, #16]
  401020:	2601      	movs	r6, #1
  401022:	1c44      	adds	r4, r0, #1
  401024:	a904      	add	r1, sp, #16
  401026:	2202      	movs	r2, #2
  401028:	9403      	str	r4, [sp, #12]
  40102a:	9005      	str	r0, [sp, #20]
  40102c:	68ac      	ldr	r4, [r5, #8]
  40102e:	9706      	str	r7, [sp, #24]
  401030:	9607      	str	r6, [sp, #28]
  401032:	9101      	str	r1, [sp, #4]
  401034:	9202      	str	r2, [sp, #8]
  401036:	b353      	cbz	r3, 40108e <_puts_r+0x82>
  401038:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40103a:	f013 0f01 	tst.w	r3, #1
  40103e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401042:	b29a      	uxth	r2, r3
  401044:	d101      	bne.n	40104a <_puts_r+0x3e>
  401046:	0590      	lsls	r0, r2, #22
  401048:	d525      	bpl.n	401096 <_puts_r+0x8a>
  40104a:	0491      	lsls	r1, r2, #18
  40104c:	d406      	bmi.n	40105c <_puts_r+0x50>
  40104e:	6e62      	ldr	r2, [r4, #100]	; 0x64
  401050:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  401054:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  401058:	81a3      	strh	r3, [r4, #12]
  40105a:	6662      	str	r2, [r4, #100]	; 0x64
  40105c:	4628      	mov	r0, r5
  40105e:	aa01      	add	r2, sp, #4
  401060:	4621      	mov	r1, r4
  401062:	f001 fbbd 	bl	4027e0 <__sfvwrite_r>
  401066:	6e63      	ldr	r3, [r4, #100]	; 0x64
  401068:	2800      	cmp	r0, #0
  40106a:	bf0c      	ite	eq
  40106c:	250a      	moveq	r5, #10
  40106e:	f04f 35ff 	movne.w	r5, #4294967295
  401072:	07da      	lsls	r2, r3, #31
  401074:	d402      	bmi.n	40107c <_puts_r+0x70>
  401076:	89a3      	ldrh	r3, [r4, #12]
  401078:	059b      	lsls	r3, r3, #22
  40107a:	d502      	bpl.n	401082 <_puts_r+0x76>
  40107c:	4628      	mov	r0, r5
  40107e:	b009      	add	sp, #36	; 0x24
  401080:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401082:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401084:	f001 fd62 	bl	402b4c <__retarget_lock_release_recursive>
  401088:	4628      	mov	r0, r5
  40108a:	b009      	add	sp, #36	; 0x24
  40108c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40108e:	4628      	mov	r0, r5
  401090:	f001 f99a 	bl	4023c8 <__sinit>
  401094:	e7d0      	b.n	401038 <_puts_r+0x2c>
  401096:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401098:	f001 fd56 	bl	402b48 <__retarget_lock_acquire_recursive>
  40109c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4010a0:	b29a      	uxth	r2, r3
  4010a2:	e7d2      	b.n	40104a <_puts_r+0x3e>
  4010a4:	00404330 	.word	0x00404330

004010a8 <puts>:
  4010a8:	4b02      	ldr	r3, [pc, #8]	; (4010b4 <puts+0xc>)
  4010aa:	4601      	mov	r1, r0
  4010ac:	6818      	ldr	r0, [r3, #0]
  4010ae:	f7ff bfad 	b.w	40100c <_puts_r>
  4010b2:	bf00      	nop
  4010b4:	20000008 	.word	0x20000008

004010b8 <setbuf>:
  4010b8:	2900      	cmp	r1, #0
  4010ba:	bf0c      	ite	eq
  4010bc:	2202      	moveq	r2, #2
  4010be:	2200      	movne	r2, #0
  4010c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4010c4:	f000 b800 	b.w	4010c8 <setvbuf>

004010c8 <setvbuf>:
  4010c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4010cc:	4c61      	ldr	r4, [pc, #388]	; (401254 <setvbuf+0x18c>)
  4010ce:	6825      	ldr	r5, [r4, #0]
  4010d0:	b083      	sub	sp, #12
  4010d2:	4604      	mov	r4, r0
  4010d4:	460f      	mov	r7, r1
  4010d6:	4690      	mov	r8, r2
  4010d8:	461e      	mov	r6, r3
  4010da:	b115      	cbz	r5, 4010e2 <setvbuf+0x1a>
  4010dc:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4010de:	2b00      	cmp	r3, #0
  4010e0:	d064      	beq.n	4011ac <setvbuf+0xe4>
  4010e2:	f1b8 0f02 	cmp.w	r8, #2
  4010e6:	d006      	beq.n	4010f6 <setvbuf+0x2e>
  4010e8:	f1b8 0f01 	cmp.w	r8, #1
  4010ec:	f200 809f 	bhi.w	40122e <setvbuf+0x166>
  4010f0:	2e00      	cmp	r6, #0
  4010f2:	f2c0 809c 	blt.w	40122e <setvbuf+0x166>
  4010f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4010f8:	07d8      	lsls	r0, r3, #31
  4010fa:	d534      	bpl.n	401166 <setvbuf+0x9e>
  4010fc:	4621      	mov	r1, r4
  4010fe:	4628      	mov	r0, r5
  401100:	f001 f90a 	bl	402318 <_fflush_r>
  401104:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401106:	b141      	cbz	r1, 40111a <setvbuf+0x52>
  401108:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40110c:	4299      	cmp	r1, r3
  40110e:	d002      	beq.n	401116 <setvbuf+0x4e>
  401110:	4628      	mov	r0, r5
  401112:	f001 fa7f 	bl	402614 <_free_r>
  401116:	2300      	movs	r3, #0
  401118:	6323      	str	r3, [r4, #48]	; 0x30
  40111a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40111e:	2200      	movs	r2, #0
  401120:	61a2      	str	r2, [r4, #24]
  401122:	6062      	str	r2, [r4, #4]
  401124:	061a      	lsls	r2, r3, #24
  401126:	d43a      	bmi.n	40119e <setvbuf+0xd6>
  401128:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  40112c:	f023 0303 	bic.w	r3, r3, #3
  401130:	f1b8 0f02 	cmp.w	r8, #2
  401134:	81a3      	strh	r3, [r4, #12]
  401136:	d01d      	beq.n	401174 <setvbuf+0xac>
  401138:	ab01      	add	r3, sp, #4
  40113a:	466a      	mov	r2, sp
  40113c:	4621      	mov	r1, r4
  40113e:	4628      	mov	r0, r5
  401140:	f001 fd06 	bl	402b50 <__swhatbuf_r>
  401144:	89a3      	ldrh	r3, [r4, #12]
  401146:	4318      	orrs	r0, r3
  401148:	81a0      	strh	r0, [r4, #12]
  40114a:	2e00      	cmp	r6, #0
  40114c:	d132      	bne.n	4011b4 <setvbuf+0xec>
  40114e:	9e00      	ldr	r6, [sp, #0]
  401150:	4630      	mov	r0, r6
  401152:	f001 fd75 	bl	402c40 <malloc>
  401156:	4607      	mov	r7, r0
  401158:	2800      	cmp	r0, #0
  40115a:	d06b      	beq.n	401234 <setvbuf+0x16c>
  40115c:	89a3      	ldrh	r3, [r4, #12]
  40115e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401162:	81a3      	strh	r3, [r4, #12]
  401164:	e028      	b.n	4011b8 <setvbuf+0xf0>
  401166:	89a3      	ldrh	r3, [r4, #12]
  401168:	0599      	lsls	r1, r3, #22
  40116a:	d4c7      	bmi.n	4010fc <setvbuf+0x34>
  40116c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40116e:	f001 fceb 	bl	402b48 <__retarget_lock_acquire_recursive>
  401172:	e7c3      	b.n	4010fc <setvbuf+0x34>
  401174:	2500      	movs	r5, #0
  401176:	6e61      	ldr	r1, [r4, #100]	; 0x64
  401178:	2600      	movs	r6, #0
  40117a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40117e:	f043 0302 	orr.w	r3, r3, #2
  401182:	2001      	movs	r0, #1
  401184:	60a6      	str	r6, [r4, #8]
  401186:	07ce      	lsls	r6, r1, #31
  401188:	81a3      	strh	r3, [r4, #12]
  40118a:	6022      	str	r2, [r4, #0]
  40118c:	6122      	str	r2, [r4, #16]
  40118e:	6160      	str	r0, [r4, #20]
  401190:	d401      	bmi.n	401196 <setvbuf+0xce>
  401192:	0598      	lsls	r0, r3, #22
  401194:	d53e      	bpl.n	401214 <setvbuf+0x14c>
  401196:	4628      	mov	r0, r5
  401198:	b003      	add	sp, #12
  40119a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40119e:	6921      	ldr	r1, [r4, #16]
  4011a0:	4628      	mov	r0, r5
  4011a2:	f001 fa37 	bl	402614 <_free_r>
  4011a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4011aa:	e7bd      	b.n	401128 <setvbuf+0x60>
  4011ac:	4628      	mov	r0, r5
  4011ae:	f001 f90b 	bl	4023c8 <__sinit>
  4011b2:	e796      	b.n	4010e2 <setvbuf+0x1a>
  4011b4:	2f00      	cmp	r7, #0
  4011b6:	d0cb      	beq.n	401150 <setvbuf+0x88>
  4011b8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4011ba:	2b00      	cmp	r3, #0
  4011bc:	d033      	beq.n	401226 <setvbuf+0x15e>
  4011be:	9b00      	ldr	r3, [sp, #0]
  4011c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4011c4:	6027      	str	r7, [r4, #0]
  4011c6:	429e      	cmp	r6, r3
  4011c8:	bf1c      	itt	ne
  4011ca:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  4011ce:	81a2      	strhne	r2, [r4, #12]
  4011d0:	f1b8 0f01 	cmp.w	r8, #1
  4011d4:	bf04      	itt	eq
  4011d6:	f042 0201 	orreq.w	r2, r2, #1
  4011da:	81a2      	strheq	r2, [r4, #12]
  4011dc:	b292      	uxth	r2, r2
  4011de:	f012 0308 	ands.w	r3, r2, #8
  4011e2:	6127      	str	r7, [r4, #16]
  4011e4:	6166      	str	r6, [r4, #20]
  4011e6:	d00e      	beq.n	401206 <setvbuf+0x13e>
  4011e8:	07d1      	lsls	r1, r2, #31
  4011ea:	d51a      	bpl.n	401222 <setvbuf+0x15a>
  4011ec:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4011ee:	4276      	negs	r6, r6
  4011f0:	2300      	movs	r3, #0
  4011f2:	f015 0501 	ands.w	r5, r5, #1
  4011f6:	61a6      	str	r6, [r4, #24]
  4011f8:	60a3      	str	r3, [r4, #8]
  4011fa:	d009      	beq.n	401210 <setvbuf+0x148>
  4011fc:	2500      	movs	r5, #0
  4011fe:	4628      	mov	r0, r5
  401200:	b003      	add	sp, #12
  401202:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401206:	60a3      	str	r3, [r4, #8]
  401208:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40120a:	f015 0501 	ands.w	r5, r5, #1
  40120e:	d1f5      	bne.n	4011fc <setvbuf+0x134>
  401210:	0593      	lsls	r3, r2, #22
  401212:	d4c0      	bmi.n	401196 <setvbuf+0xce>
  401214:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401216:	f001 fc99 	bl	402b4c <__retarget_lock_release_recursive>
  40121a:	4628      	mov	r0, r5
  40121c:	b003      	add	sp, #12
  40121e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401222:	60a6      	str	r6, [r4, #8]
  401224:	e7f0      	b.n	401208 <setvbuf+0x140>
  401226:	4628      	mov	r0, r5
  401228:	f001 f8ce 	bl	4023c8 <__sinit>
  40122c:	e7c7      	b.n	4011be <setvbuf+0xf6>
  40122e:	f04f 35ff 	mov.w	r5, #4294967295
  401232:	e7b0      	b.n	401196 <setvbuf+0xce>
  401234:	f8dd 9000 	ldr.w	r9, [sp]
  401238:	45b1      	cmp	r9, r6
  40123a:	d004      	beq.n	401246 <setvbuf+0x17e>
  40123c:	4648      	mov	r0, r9
  40123e:	f001 fcff 	bl	402c40 <malloc>
  401242:	4607      	mov	r7, r0
  401244:	b920      	cbnz	r0, 401250 <setvbuf+0x188>
  401246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40124a:	f04f 35ff 	mov.w	r5, #4294967295
  40124e:	e792      	b.n	401176 <setvbuf+0xae>
  401250:	464e      	mov	r6, r9
  401252:	e783      	b.n	40115c <setvbuf+0x94>
  401254:	20000008 	.word	0x20000008
	...

00401280 <strlen>:
  401280:	f890 f000 	pld	[r0]
  401284:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  401288:	f020 0107 	bic.w	r1, r0, #7
  40128c:	f06f 0c00 	mvn.w	ip, #0
  401290:	f010 0407 	ands.w	r4, r0, #7
  401294:	f891 f020 	pld	[r1, #32]
  401298:	f040 8049 	bne.w	40132e <strlen+0xae>
  40129c:	f04f 0400 	mov.w	r4, #0
  4012a0:	f06f 0007 	mvn.w	r0, #7
  4012a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4012a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4012ac:	f100 0008 	add.w	r0, r0, #8
  4012b0:	fa82 f24c 	uadd8	r2, r2, ip
  4012b4:	faa4 f28c 	sel	r2, r4, ip
  4012b8:	fa83 f34c 	uadd8	r3, r3, ip
  4012bc:	faa2 f38c 	sel	r3, r2, ip
  4012c0:	bb4b      	cbnz	r3, 401316 <strlen+0x96>
  4012c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4012c6:	fa82 f24c 	uadd8	r2, r2, ip
  4012ca:	f100 0008 	add.w	r0, r0, #8
  4012ce:	faa4 f28c 	sel	r2, r4, ip
  4012d2:	fa83 f34c 	uadd8	r3, r3, ip
  4012d6:	faa2 f38c 	sel	r3, r2, ip
  4012da:	b9e3      	cbnz	r3, 401316 <strlen+0x96>
  4012dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4012e0:	fa82 f24c 	uadd8	r2, r2, ip
  4012e4:	f100 0008 	add.w	r0, r0, #8
  4012e8:	faa4 f28c 	sel	r2, r4, ip
  4012ec:	fa83 f34c 	uadd8	r3, r3, ip
  4012f0:	faa2 f38c 	sel	r3, r2, ip
  4012f4:	b97b      	cbnz	r3, 401316 <strlen+0x96>
  4012f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4012fa:	f101 0120 	add.w	r1, r1, #32
  4012fe:	fa82 f24c 	uadd8	r2, r2, ip
  401302:	f100 0008 	add.w	r0, r0, #8
  401306:	faa4 f28c 	sel	r2, r4, ip
  40130a:	fa83 f34c 	uadd8	r3, r3, ip
  40130e:	faa2 f38c 	sel	r3, r2, ip
  401312:	2b00      	cmp	r3, #0
  401314:	d0c6      	beq.n	4012a4 <strlen+0x24>
  401316:	2a00      	cmp	r2, #0
  401318:	bf04      	itt	eq
  40131a:	3004      	addeq	r0, #4
  40131c:	461a      	moveq	r2, r3
  40131e:	ba12      	rev	r2, r2
  401320:	fab2 f282 	clz	r2, r2
  401324:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  401328:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40132c:	4770      	bx	lr
  40132e:	e9d1 2300 	ldrd	r2, r3, [r1]
  401332:	f004 0503 	and.w	r5, r4, #3
  401336:	f1c4 0000 	rsb	r0, r4, #0
  40133a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40133e:	f014 0f04 	tst.w	r4, #4
  401342:	f891 f040 	pld	[r1, #64]	; 0x40
  401346:	fa0c f505 	lsl.w	r5, ip, r5
  40134a:	ea62 0205 	orn	r2, r2, r5
  40134e:	bf1c      	itt	ne
  401350:	ea63 0305 	ornne	r3, r3, r5
  401354:	4662      	movne	r2, ip
  401356:	f04f 0400 	mov.w	r4, #0
  40135a:	e7a9      	b.n	4012b0 <strlen+0x30>

0040135c <__sprint_r.part.0>:
  40135c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401360:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  401362:	049c      	lsls	r4, r3, #18
  401364:	4693      	mov	fp, r2
  401366:	d52f      	bpl.n	4013c8 <__sprint_r.part.0+0x6c>
  401368:	6893      	ldr	r3, [r2, #8]
  40136a:	6812      	ldr	r2, [r2, #0]
  40136c:	b353      	cbz	r3, 4013c4 <__sprint_r.part.0+0x68>
  40136e:	460e      	mov	r6, r1
  401370:	4607      	mov	r7, r0
  401372:	f102 0908 	add.w	r9, r2, #8
  401376:	e919 0420 	ldmdb	r9, {r5, sl}
  40137a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40137e:	d017      	beq.n	4013b0 <__sprint_r.part.0+0x54>
  401380:	3d04      	subs	r5, #4
  401382:	2400      	movs	r4, #0
  401384:	e001      	b.n	40138a <__sprint_r.part.0+0x2e>
  401386:	45a0      	cmp	r8, r4
  401388:	d010      	beq.n	4013ac <__sprint_r.part.0+0x50>
  40138a:	4632      	mov	r2, r6
  40138c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  401390:	4638      	mov	r0, r7
  401392:	f001 f8bb 	bl	40250c <_fputwc_r>
  401396:	1c43      	adds	r3, r0, #1
  401398:	f104 0401 	add.w	r4, r4, #1
  40139c:	d1f3      	bne.n	401386 <__sprint_r.part.0+0x2a>
  40139e:	2300      	movs	r3, #0
  4013a0:	f8cb 3008 	str.w	r3, [fp, #8]
  4013a4:	f8cb 3004 	str.w	r3, [fp, #4]
  4013a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4013ac:	f8db 3008 	ldr.w	r3, [fp, #8]
  4013b0:	f02a 0a03 	bic.w	sl, sl, #3
  4013b4:	eba3 030a 	sub.w	r3, r3, sl
  4013b8:	f8cb 3008 	str.w	r3, [fp, #8]
  4013bc:	f109 0908 	add.w	r9, r9, #8
  4013c0:	2b00      	cmp	r3, #0
  4013c2:	d1d8      	bne.n	401376 <__sprint_r.part.0+0x1a>
  4013c4:	2000      	movs	r0, #0
  4013c6:	e7ea      	b.n	40139e <__sprint_r.part.0+0x42>
  4013c8:	f001 fa0a 	bl	4027e0 <__sfvwrite_r>
  4013cc:	2300      	movs	r3, #0
  4013ce:	f8cb 3008 	str.w	r3, [fp, #8]
  4013d2:	f8cb 3004 	str.w	r3, [fp, #4]
  4013d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4013da:	bf00      	nop

004013dc <_vfiprintf_r>:
  4013dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4013e0:	b0ad      	sub	sp, #180	; 0xb4
  4013e2:	461d      	mov	r5, r3
  4013e4:	468b      	mov	fp, r1
  4013e6:	4690      	mov	r8, r2
  4013e8:	9307      	str	r3, [sp, #28]
  4013ea:	9006      	str	r0, [sp, #24]
  4013ec:	b118      	cbz	r0, 4013f6 <_vfiprintf_r+0x1a>
  4013ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4013f0:	2b00      	cmp	r3, #0
  4013f2:	f000 80f3 	beq.w	4015dc <_vfiprintf_r+0x200>
  4013f6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4013fa:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4013fe:	07df      	lsls	r7, r3, #31
  401400:	b281      	uxth	r1, r0
  401402:	d402      	bmi.n	40140a <_vfiprintf_r+0x2e>
  401404:	058e      	lsls	r6, r1, #22
  401406:	f140 80fc 	bpl.w	401602 <_vfiprintf_r+0x226>
  40140a:	048c      	lsls	r4, r1, #18
  40140c:	d40a      	bmi.n	401424 <_vfiprintf_r+0x48>
  40140e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401412:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  401416:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40141a:	f8ab 100c 	strh.w	r1, [fp, #12]
  40141e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  401422:	b289      	uxth	r1, r1
  401424:	0708      	lsls	r0, r1, #28
  401426:	f140 80b3 	bpl.w	401590 <_vfiprintf_r+0x1b4>
  40142a:	f8db 3010 	ldr.w	r3, [fp, #16]
  40142e:	2b00      	cmp	r3, #0
  401430:	f000 80ae 	beq.w	401590 <_vfiprintf_r+0x1b4>
  401434:	f001 031a 	and.w	r3, r1, #26
  401438:	2b0a      	cmp	r3, #10
  40143a:	f000 80b5 	beq.w	4015a8 <_vfiprintf_r+0x1cc>
  40143e:	2300      	movs	r3, #0
  401440:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  401444:	930b      	str	r3, [sp, #44]	; 0x2c
  401446:	9311      	str	r3, [sp, #68]	; 0x44
  401448:	9310      	str	r3, [sp, #64]	; 0x40
  40144a:	9303      	str	r3, [sp, #12]
  40144c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  401450:	46ca      	mov	sl, r9
  401452:	f8cd b010 	str.w	fp, [sp, #16]
  401456:	f898 3000 	ldrb.w	r3, [r8]
  40145a:	4644      	mov	r4, r8
  40145c:	b1fb      	cbz	r3, 40149e <_vfiprintf_r+0xc2>
  40145e:	2b25      	cmp	r3, #37	; 0x25
  401460:	d102      	bne.n	401468 <_vfiprintf_r+0x8c>
  401462:	e01c      	b.n	40149e <_vfiprintf_r+0xc2>
  401464:	2b25      	cmp	r3, #37	; 0x25
  401466:	d003      	beq.n	401470 <_vfiprintf_r+0x94>
  401468:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40146c:	2b00      	cmp	r3, #0
  40146e:	d1f9      	bne.n	401464 <_vfiprintf_r+0x88>
  401470:	eba4 0508 	sub.w	r5, r4, r8
  401474:	b19d      	cbz	r5, 40149e <_vfiprintf_r+0xc2>
  401476:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401478:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40147a:	f8ca 8000 	str.w	r8, [sl]
  40147e:	3301      	adds	r3, #1
  401480:	442a      	add	r2, r5
  401482:	2b07      	cmp	r3, #7
  401484:	f8ca 5004 	str.w	r5, [sl, #4]
  401488:	9211      	str	r2, [sp, #68]	; 0x44
  40148a:	9310      	str	r3, [sp, #64]	; 0x40
  40148c:	dd7a      	ble.n	401584 <_vfiprintf_r+0x1a8>
  40148e:	2a00      	cmp	r2, #0
  401490:	f040 84b0 	bne.w	401df4 <_vfiprintf_r+0xa18>
  401494:	9b03      	ldr	r3, [sp, #12]
  401496:	9210      	str	r2, [sp, #64]	; 0x40
  401498:	442b      	add	r3, r5
  40149a:	46ca      	mov	sl, r9
  40149c:	9303      	str	r3, [sp, #12]
  40149e:	7823      	ldrb	r3, [r4, #0]
  4014a0:	2b00      	cmp	r3, #0
  4014a2:	f000 83e0 	beq.w	401c66 <_vfiprintf_r+0x88a>
  4014a6:	2000      	movs	r0, #0
  4014a8:	f04f 0300 	mov.w	r3, #0
  4014ac:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  4014b0:	f104 0801 	add.w	r8, r4, #1
  4014b4:	7862      	ldrb	r2, [r4, #1]
  4014b6:	4605      	mov	r5, r0
  4014b8:	4606      	mov	r6, r0
  4014ba:	4603      	mov	r3, r0
  4014bc:	f04f 34ff 	mov.w	r4, #4294967295
  4014c0:	f108 0801 	add.w	r8, r8, #1
  4014c4:	f1a2 0120 	sub.w	r1, r2, #32
  4014c8:	2958      	cmp	r1, #88	; 0x58
  4014ca:	f200 82de 	bhi.w	401a8a <_vfiprintf_r+0x6ae>
  4014ce:	e8df f011 	tbh	[pc, r1, lsl #1]
  4014d2:	0221      	.short	0x0221
  4014d4:	02dc02dc 	.word	0x02dc02dc
  4014d8:	02dc0229 	.word	0x02dc0229
  4014dc:	02dc02dc 	.word	0x02dc02dc
  4014e0:	02dc02dc 	.word	0x02dc02dc
  4014e4:	028902dc 	.word	0x028902dc
  4014e8:	02dc0295 	.word	0x02dc0295
  4014ec:	02bd00a2 	.word	0x02bd00a2
  4014f0:	019f02dc 	.word	0x019f02dc
  4014f4:	01a401a4 	.word	0x01a401a4
  4014f8:	01a401a4 	.word	0x01a401a4
  4014fc:	01a401a4 	.word	0x01a401a4
  401500:	01a401a4 	.word	0x01a401a4
  401504:	02dc01a4 	.word	0x02dc01a4
  401508:	02dc02dc 	.word	0x02dc02dc
  40150c:	02dc02dc 	.word	0x02dc02dc
  401510:	02dc02dc 	.word	0x02dc02dc
  401514:	02dc02dc 	.word	0x02dc02dc
  401518:	01b202dc 	.word	0x01b202dc
  40151c:	02dc02dc 	.word	0x02dc02dc
  401520:	02dc02dc 	.word	0x02dc02dc
  401524:	02dc02dc 	.word	0x02dc02dc
  401528:	02dc02dc 	.word	0x02dc02dc
  40152c:	02dc02dc 	.word	0x02dc02dc
  401530:	02dc0197 	.word	0x02dc0197
  401534:	02dc02dc 	.word	0x02dc02dc
  401538:	02dc02dc 	.word	0x02dc02dc
  40153c:	02dc019b 	.word	0x02dc019b
  401540:	025302dc 	.word	0x025302dc
  401544:	02dc02dc 	.word	0x02dc02dc
  401548:	02dc02dc 	.word	0x02dc02dc
  40154c:	02dc02dc 	.word	0x02dc02dc
  401550:	02dc02dc 	.word	0x02dc02dc
  401554:	02dc02dc 	.word	0x02dc02dc
  401558:	021b025a 	.word	0x021b025a
  40155c:	02dc02dc 	.word	0x02dc02dc
  401560:	026e02dc 	.word	0x026e02dc
  401564:	02dc021b 	.word	0x02dc021b
  401568:	027302dc 	.word	0x027302dc
  40156c:	01f502dc 	.word	0x01f502dc
  401570:	02090182 	.word	0x02090182
  401574:	02dc02d7 	.word	0x02dc02d7
  401578:	02dc029a 	.word	0x02dc029a
  40157c:	02dc00a7 	.word	0x02dc00a7
  401580:	022e02dc 	.word	0x022e02dc
  401584:	f10a 0a08 	add.w	sl, sl, #8
  401588:	9b03      	ldr	r3, [sp, #12]
  40158a:	442b      	add	r3, r5
  40158c:	9303      	str	r3, [sp, #12]
  40158e:	e786      	b.n	40149e <_vfiprintf_r+0xc2>
  401590:	4659      	mov	r1, fp
  401592:	9806      	ldr	r0, [sp, #24]
  401594:	f000 fdac 	bl	4020f0 <__swsetup_r>
  401598:	bb18      	cbnz	r0, 4015e2 <_vfiprintf_r+0x206>
  40159a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40159e:	f001 031a 	and.w	r3, r1, #26
  4015a2:	2b0a      	cmp	r3, #10
  4015a4:	f47f af4b 	bne.w	40143e <_vfiprintf_r+0x62>
  4015a8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  4015ac:	2b00      	cmp	r3, #0
  4015ae:	f6ff af46 	blt.w	40143e <_vfiprintf_r+0x62>
  4015b2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4015b6:	07db      	lsls	r3, r3, #31
  4015b8:	d405      	bmi.n	4015c6 <_vfiprintf_r+0x1ea>
  4015ba:	058f      	lsls	r7, r1, #22
  4015bc:	d403      	bmi.n	4015c6 <_vfiprintf_r+0x1ea>
  4015be:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4015c2:	f001 fac3 	bl	402b4c <__retarget_lock_release_recursive>
  4015c6:	462b      	mov	r3, r5
  4015c8:	4642      	mov	r2, r8
  4015ca:	4659      	mov	r1, fp
  4015cc:	9806      	ldr	r0, [sp, #24]
  4015ce:	f000 fd4d 	bl	40206c <__sbprintf>
  4015d2:	9003      	str	r0, [sp, #12]
  4015d4:	9803      	ldr	r0, [sp, #12]
  4015d6:	b02d      	add	sp, #180	; 0xb4
  4015d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4015dc:	f000 fef4 	bl	4023c8 <__sinit>
  4015e0:	e709      	b.n	4013f6 <_vfiprintf_r+0x1a>
  4015e2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4015e6:	07d9      	lsls	r1, r3, #31
  4015e8:	d404      	bmi.n	4015f4 <_vfiprintf_r+0x218>
  4015ea:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4015ee:	059a      	lsls	r2, r3, #22
  4015f0:	f140 84aa 	bpl.w	401f48 <_vfiprintf_r+0xb6c>
  4015f4:	f04f 33ff 	mov.w	r3, #4294967295
  4015f8:	9303      	str	r3, [sp, #12]
  4015fa:	9803      	ldr	r0, [sp, #12]
  4015fc:	b02d      	add	sp, #180	; 0xb4
  4015fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401602:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401606:	f001 fa9f 	bl	402b48 <__retarget_lock_acquire_recursive>
  40160a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40160e:	b281      	uxth	r1, r0
  401610:	e6fb      	b.n	40140a <_vfiprintf_r+0x2e>
  401612:	4276      	negs	r6, r6
  401614:	9207      	str	r2, [sp, #28]
  401616:	f043 0304 	orr.w	r3, r3, #4
  40161a:	f898 2000 	ldrb.w	r2, [r8]
  40161e:	e74f      	b.n	4014c0 <_vfiprintf_r+0xe4>
  401620:	9608      	str	r6, [sp, #32]
  401622:	069e      	lsls	r6, r3, #26
  401624:	f100 8450 	bmi.w	401ec8 <_vfiprintf_r+0xaec>
  401628:	9907      	ldr	r1, [sp, #28]
  40162a:	06dd      	lsls	r5, r3, #27
  40162c:	460a      	mov	r2, r1
  40162e:	f100 83ef 	bmi.w	401e10 <_vfiprintf_r+0xa34>
  401632:	0658      	lsls	r0, r3, #25
  401634:	f140 83ec 	bpl.w	401e10 <_vfiprintf_r+0xa34>
  401638:	880e      	ldrh	r6, [r1, #0]
  40163a:	3104      	adds	r1, #4
  40163c:	2700      	movs	r7, #0
  40163e:	2201      	movs	r2, #1
  401640:	9107      	str	r1, [sp, #28]
  401642:	f04f 0100 	mov.w	r1, #0
  401646:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40164a:	2500      	movs	r5, #0
  40164c:	1c61      	adds	r1, r4, #1
  40164e:	f000 8116 	beq.w	40187e <_vfiprintf_r+0x4a2>
  401652:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  401656:	9102      	str	r1, [sp, #8]
  401658:	ea56 0107 	orrs.w	r1, r6, r7
  40165c:	f040 8114 	bne.w	401888 <_vfiprintf_r+0x4ac>
  401660:	2c00      	cmp	r4, #0
  401662:	f040 835c 	bne.w	401d1e <_vfiprintf_r+0x942>
  401666:	2a00      	cmp	r2, #0
  401668:	f040 83b7 	bne.w	401dda <_vfiprintf_r+0x9fe>
  40166c:	f013 0301 	ands.w	r3, r3, #1
  401670:	9305      	str	r3, [sp, #20]
  401672:	f000 8457 	beq.w	401f24 <_vfiprintf_r+0xb48>
  401676:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40167a:	2330      	movs	r3, #48	; 0x30
  40167c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  401680:	9b05      	ldr	r3, [sp, #20]
  401682:	42a3      	cmp	r3, r4
  401684:	bfb8      	it	lt
  401686:	4623      	movlt	r3, r4
  401688:	9301      	str	r3, [sp, #4]
  40168a:	b10d      	cbz	r5, 401690 <_vfiprintf_r+0x2b4>
  40168c:	3301      	adds	r3, #1
  40168e:	9301      	str	r3, [sp, #4]
  401690:	9b02      	ldr	r3, [sp, #8]
  401692:	f013 0302 	ands.w	r3, r3, #2
  401696:	9309      	str	r3, [sp, #36]	; 0x24
  401698:	d002      	beq.n	4016a0 <_vfiprintf_r+0x2c4>
  40169a:	9b01      	ldr	r3, [sp, #4]
  40169c:	3302      	adds	r3, #2
  40169e:	9301      	str	r3, [sp, #4]
  4016a0:	9b02      	ldr	r3, [sp, #8]
  4016a2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  4016a6:	930a      	str	r3, [sp, #40]	; 0x28
  4016a8:	f040 8217 	bne.w	401ada <_vfiprintf_r+0x6fe>
  4016ac:	9b08      	ldr	r3, [sp, #32]
  4016ae:	9a01      	ldr	r2, [sp, #4]
  4016b0:	1a9d      	subs	r5, r3, r2
  4016b2:	2d00      	cmp	r5, #0
  4016b4:	f340 8211 	ble.w	401ada <_vfiprintf_r+0x6fe>
  4016b8:	2d10      	cmp	r5, #16
  4016ba:	f340 8490 	ble.w	401fde <_vfiprintf_r+0xc02>
  4016be:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4016c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4016c2:	4ec4      	ldr	r6, [pc, #784]	; (4019d4 <_vfiprintf_r+0x5f8>)
  4016c4:	46d6      	mov	lr, sl
  4016c6:	2710      	movs	r7, #16
  4016c8:	46a2      	mov	sl, r4
  4016ca:	4619      	mov	r1, r3
  4016cc:	9c06      	ldr	r4, [sp, #24]
  4016ce:	e007      	b.n	4016e0 <_vfiprintf_r+0x304>
  4016d0:	f101 0c02 	add.w	ip, r1, #2
  4016d4:	f10e 0e08 	add.w	lr, lr, #8
  4016d8:	4601      	mov	r1, r0
  4016da:	3d10      	subs	r5, #16
  4016dc:	2d10      	cmp	r5, #16
  4016de:	dd11      	ble.n	401704 <_vfiprintf_r+0x328>
  4016e0:	1c48      	adds	r0, r1, #1
  4016e2:	3210      	adds	r2, #16
  4016e4:	2807      	cmp	r0, #7
  4016e6:	9211      	str	r2, [sp, #68]	; 0x44
  4016e8:	e88e 00c0 	stmia.w	lr, {r6, r7}
  4016ec:	9010      	str	r0, [sp, #64]	; 0x40
  4016ee:	ddef      	ble.n	4016d0 <_vfiprintf_r+0x2f4>
  4016f0:	2a00      	cmp	r2, #0
  4016f2:	f040 81e4 	bne.w	401abe <_vfiprintf_r+0x6e2>
  4016f6:	3d10      	subs	r5, #16
  4016f8:	2d10      	cmp	r5, #16
  4016fa:	4611      	mov	r1, r2
  4016fc:	f04f 0c01 	mov.w	ip, #1
  401700:	46ce      	mov	lr, r9
  401702:	dced      	bgt.n	4016e0 <_vfiprintf_r+0x304>
  401704:	4654      	mov	r4, sl
  401706:	4661      	mov	r1, ip
  401708:	46f2      	mov	sl, lr
  40170a:	442a      	add	r2, r5
  40170c:	2907      	cmp	r1, #7
  40170e:	9211      	str	r2, [sp, #68]	; 0x44
  401710:	f8ca 6000 	str.w	r6, [sl]
  401714:	f8ca 5004 	str.w	r5, [sl, #4]
  401718:	9110      	str	r1, [sp, #64]	; 0x40
  40171a:	f300 82ec 	bgt.w	401cf6 <_vfiprintf_r+0x91a>
  40171e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401722:	f10a 0a08 	add.w	sl, sl, #8
  401726:	1c48      	adds	r0, r1, #1
  401728:	2d00      	cmp	r5, #0
  40172a:	f040 81de 	bne.w	401aea <_vfiprintf_r+0x70e>
  40172e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401730:	2b00      	cmp	r3, #0
  401732:	f000 81f8 	beq.w	401b26 <_vfiprintf_r+0x74a>
  401736:	3202      	adds	r2, #2
  401738:	a90e      	add	r1, sp, #56	; 0x38
  40173a:	2302      	movs	r3, #2
  40173c:	2807      	cmp	r0, #7
  40173e:	9211      	str	r2, [sp, #68]	; 0x44
  401740:	9010      	str	r0, [sp, #64]	; 0x40
  401742:	e88a 000a 	stmia.w	sl, {r1, r3}
  401746:	f340 81ea 	ble.w	401b1e <_vfiprintf_r+0x742>
  40174a:	2a00      	cmp	r2, #0
  40174c:	f040 838c 	bne.w	401e68 <_vfiprintf_r+0xa8c>
  401750:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401752:	2b80      	cmp	r3, #128	; 0x80
  401754:	f04f 0001 	mov.w	r0, #1
  401758:	4611      	mov	r1, r2
  40175a:	46ca      	mov	sl, r9
  40175c:	f040 81e7 	bne.w	401b2e <_vfiprintf_r+0x752>
  401760:	9b08      	ldr	r3, [sp, #32]
  401762:	9d01      	ldr	r5, [sp, #4]
  401764:	1b5e      	subs	r6, r3, r5
  401766:	2e00      	cmp	r6, #0
  401768:	f340 81e1 	ble.w	401b2e <_vfiprintf_r+0x752>
  40176c:	2e10      	cmp	r6, #16
  40176e:	4d9a      	ldr	r5, [pc, #616]	; (4019d8 <_vfiprintf_r+0x5fc>)
  401770:	f340 8450 	ble.w	402014 <_vfiprintf_r+0xc38>
  401774:	46d4      	mov	ip, sl
  401776:	2710      	movs	r7, #16
  401778:	46a2      	mov	sl, r4
  40177a:	9c06      	ldr	r4, [sp, #24]
  40177c:	e007      	b.n	40178e <_vfiprintf_r+0x3b2>
  40177e:	f101 0e02 	add.w	lr, r1, #2
  401782:	f10c 0c08 	add.w	ip, ip, #8
  401786:	4601      	mov	r1, r0
  401788:	3e10      	subs	r6, #16
  40178a:	2e10      	cmp	r6, #16
  40178c:	dd11      	ble.n	4017b2 <_vfiprintf_r+0x3d6>
  40178e:	1c48      	adds	r0, r1, #1
  401790:	3210      	adds	r2, #16
  401792:	2807      	cmp	r0, #7
  401794:	9211      	str	r2, [sp, #68]	; 0x44
  401796:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40179a:	9010      	str	r0, [sp, #64]	; 0x40
  40179c:	ddef      	ble.n	40177e <_vfiprintf_r+0x3a2>
  40179e:	2a00      	cmp	r2, #0
  4017a0:	f040 829d 	bne.w	401cde <_vfiprintf_r+0x902>
  4017a4:	3e10      	subs	r6, #16
  4017a6:	2e10      	cmp	r6, #16
  4017a8:	f04f 0e01 	mov.w	lr, #1
  4017ac:	4611      	mov	r1, r2
  4017ae:	46cc      	mov	ip, r9
  4017b0:	dced      	bgt.n	40178e <_vfiprintf_r+0x3b2>
  4017b2:	4654      	mov	r4, sl
  4017b4:	46e2      	mov	sl, ip
  4017b6:	4432      	add	r2, r6
  4017b8:	f1be 0f07 	cmp.w	lr, #7
  4017bc:	9211      	str	r2, [sp, #68]	; 0x44
  4017be:	e88a 0060 	stmia.w	sl, {r5, r6}
  4017c2:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  4017c6:	f300 8369 	bgt.w	401e9c <_vfiprintf_r+0xac0>
  4017ca:	f10a 0a08 	add.w	sl, sl, #8
  4017ce:	f10e 0001 	add.w	r0, lr, #1
  4017d2:	4671      	mov	r1, lr
  4017d4:	e1ab      	b.n	401b2e <_vfiprintf_r+0x752>
  4017d6:	9608      	str	r6, [sp, #32]
  4017d8:	f013 0220 	ands.w	r2, r3, #32
  4017dc:	f040 838c 	bne.w	401ef8 <_vfiprintf_r+0xb1c>
  4017e0:	f013 0110 	ands.w	r1, r3, #16
  4017e4:	f040 831a 	bne.w	401e1c <_vfiprintf_r+0xa40>
  4017e8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4017ec:	f000 8316 	beq.w	401e1c <_vfiprintf_r+0xa40>
  4017f0:	9807      	ldr	r0, [sp, #28]
  4017f2:	460a      	mov	r2, r1
  4017f4:	4601      	mov	r1, r0
  4017f6:	3104      	adds	r1, #4
  4017f8:	8806      	ldrh	r6, [r0, #0]
  4017fa:	9107      	str	r1, [sp, #28]
  4017fc:	2700      	movs	r7, #0
  4017fe:	e720      	b.n	401642 <_vfiprintf_r+0x266>
  401800:	9608      	str	r6, [sp, #32]
  401802:	f043 0310 	orr.w	r3, r3, #16
  401806:	e7e7      	b.n	4017d8 <_vfiprintf_r+0x3fc>
  401808:	9608      	str	r6, [sp, #32]
  40180a:	f043 0310 	orr.w	r3, r3, #16
  40180e:	e708      	b.n	401622 <_vfiprintf_r+0x246>
  401810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401814:	f898 2000 	ldrb.w	r2, [r8]
  401818:	e652      	b.n	4014c0 <_vfiprintf_r+0xe4>
  40181a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40181e:	2600      	movs	r6, #0
  401820:	f818 2b01 	ldrb.w	r2, [r8], #1
  401824:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  401828:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  40182c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401830:	2909      	cmp	r1, #9
  401832:	d9f5      	bls.n	401820 <_vfiprintf_r+0x444>
  401834:	e646      	b.n	4014c4 <_vfiprintf_r+0xe8>
  401836:	9608      	str	r6, [sp, #32]
  401838:	2800      	cmp	r0, #0
  40183a:	f040 8408 	bne.w	40204e <_vfiprintf_r+0xc72>
  40183e:	f043 0310 	orr.w	r3, r3, #16
  401842:	069e      	lsls	r6, r3, #26
  401844:	f100 834c 	bmi.w	401ee0 <_vfiprintf_r+0xb04>
  401848:	06dd      	lsls	r5, r3, #27
  40184a:	f100 82f3 	bmi.w	401e34 <_vfiprintf_r+0xa58>
  40184e:	0658      	lsls	r0, r3, #25
  401850:	f140 82f0 	bpl.w	401e34 <_vfiprintf_r+0xa58>
  401854:	9d07      	ldr	r5, [sp, #28]
  401856:	f9b5 6000 	ldrsh.w	r6, [r5]
  40185a:	462a      	mov	r2, r5
  40185c:	17f7      	asrs	r7, r6, #31
  40185e:	3204      	adds	r2, #4
  401860:	4630      	mov	r0, r6
  401862:	4639      	mov	r1, r7
  401864:	9207      	str	r2, [sp, #28]
  401866:	2800      	cmp	r0, #0
  401868:	f171 0200 	sbcs.w	r2, r1, #0
  40186c:	f2c0 835d 	blt.w	401f2a <_vfiprintf_r+0xb4e>
  401870:	1c61      	adds	r1, r4, #1
  401872:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401876:	f04f 0201 	mov.w	r2, #1
  40187a:	f47f aeea 	bne.w	401652 <_vfiprintf_r+0x276>
  40187e:	ea56 0107 	orrs.w	r1, r6, r7
  401882:	f000 824d 	beq.w	401d20 <_vfiprintf_r+0x944>
  401886:	9302      	str	r3, [sp, #8]
  401888:	2a01      	cmp	r2, #1
  40188a:	f000 828c 	beq.w	401da6 <_vfiprintf_r+0x9ca>
  40188e:	2a02      	cmp	r2, #2
  401890:	f040 825c 	bne.w	401d4c <_vfiprintf_r+0x970>
  401894:	980b      	ldr	r0, [sp, #44]	; 0x2c
  401896:	46cb      	mov	fp, r9
  401898:	0933      	lsrs	r3, r6, #4
  40189a:	f006 010f 	and.w	r1, r6, #15
  40189e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4018a2:	093a      	lsrs	r2, r7, #4
  4018a4:	461e      	mov	r6, r3
  4018a6:	4617      	mov	r7, r2
  4018a8:	5c43      	ldrb	r3, [r0, r1]
  4018aa:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  4018ae:	ea56 0307 	orrs.w	r3, r6, r7
  4018b2:	d1f1      	bne.n	401898 <_vfiprintf_r+0x4bc>
  4018b4:	eba9 030b 	sub.w	r3, r9, fp
  4018b8:	9305      	str	r3, [sp, #20]
  4018ba:	e6e1      	b.n	401680 <_vfiprintf_r+0x2a4>
  4018bc:	2800      	cmp	r0, #0
  4018be:	f040 83c0 	bne.w	402042 <_vfiprintf_r+0xc66>
  4018c2:	0699      	lsls	r1, r3, #26
  4018c4:	f100 8367 	bmi.w	401f96 <_vfiprintf_r+0xbba>
  4018c8:	06da      	lsls	r2, r3, #27
  4018ca:	f100 80f1 	bmi.w	401ab0 <_vfiprintf_r+0x6d4>
  4018ce:	065b      	lsls	r3, r3, #25
  4018d0:	f140 80ee 	bpl.w	401ab0 <_vfiprintf_r+0x6d4>
  4018d4:	9a07      	ldr	r2, [sp, #28]
  4018d6:	6813      	ldr	r3, [r2, #0]
  4018d8:	3204      	adds	r2, #4
  4018da:	9207      	str	r2, [sp, #28]
  4018dc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4018e0:	801a      	strh	r2, [r3, #0]
  4018e2:	e5b8      	b.n	401456 <_vfiprintf_r+0x7a>
  4018e4:	9807      	ldr	r0, [sp, #28]
  4018e6:	4a3d      	ldr	r2, [pc, #244]	; (4019dc <_vfiprintf_r+0x600>)
  4018e8:	9608      	str	r6, [sp, #32]
  4018ea:	920b      	str	r2, [sp, #44]	; 0x2c
  4018ec:	6806      	ldr	r6, [r0, #0]
  4018ee:	2278      	movs	r2, #120	; 0x78
  4018f0:	2130      	movs	r1, #48	; 0x30
  4018f2:	3004      	adds	r0, #4
  4018f4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4018f8:	f043 0302 	orr.w	r3, r3, #2
  4018fc:	9007      	str	r0, [sp, #28]
  4018fe:	2700      	movs	r7, #0
  401900:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  401904:	2202      	movs	r2, #2
  401906:	e69c      	b.n	401642 <_vfiprintf_r+0x266>
  401908:	9608      	str	r6, [sp, #32]
  40190a:	2800      	cmp	r0, #0
  40190c:	d099      	beq.n	401842 <_vfiprintf_r+0x466>
  40190e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401912:	e796      	b.n	401842 <_vfiprintf_r+0x466>
  401914:	f898 2000 	ldrb.w	r2, [r8]
  401918:	2d00      	cmp	r5, #0
  40191a:	f47f add1 	bne.w	4014c0 <_vfiprintf_r+0xe4>
  40191e:	2001      	movs	r0, #1
  401920:	2520      	movs	r5, #32
  401922:	e5cd      	b.n	4014c0 <_vfiprintf_r+0xe4>
  401924:	f043 0301 	orr.w	r3, r3, #1
  401928:	f898 2000 	ldrb.w	r2, [r8]
  40192c:	e5c8      	b.n	4014c0 <_vfiprintf_r+0xe4>
  40192e:	9608      	str	r6, [sp, #32]
  401930:	2800      	cmp	r0, #0
  401932:	f040 8393 	bne.w	40205c <_vfiprintf_r+0xc80>
  401936:	4929      	ldr	r1, [pc, #164]	; (4019dc <_vfiprintf_r+0x600>)
  401938:	910b      	str	r1, [sp, #44]	; 0x2c
  40193a:	069f      	lsls	r7, r3, #26
  40193c:	f100 82e8 	bmi.w	401f10 <_vfiprintf_r+0xb34>
  401940:	9807      	ldr	r0, [sp, #28]
  401942:	06de      	lsls	r6, r3, #27
  401944:	4601      	mov	r1, r0
  401946:	f100 8270 	bmi.w	401e2a <_vfiprintf_r+0xa4e>
  40194a:	065d      	lsls	r5, r3, #25
  40194c:	f140 826d 	bpl.w	401e2a <_vfiprintf_r+0xa4e>
  401950:	3104      	adds	r1, #4
  401952:	8806      	ldrh	r6, [r0, #0]
  401954:	9107      	str	r1, [sp, #28]
  401956:	2700      	movs	r7, #0
  401958:	07d8      	lsls	r0, r3, #31
  40195a:	f140 8222 	bpl.w	401da2 <_vfiprintf_r+0x9c6>
  40195e:	ea56 0107 	orrs.w	r1, r6, r7
  401962:	f000 821e 	beq.w	401da2 <_vfiprintf_r+0x9c6>
  401966:	2130      	movs	r1, #48	; 0x30
  401968:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40196c:	f043 0302 	orr.w	r3, r3, #2
  401970:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  401974:	2202      	movs	r2, #2
  401976:	e664      	b.n	401642 <_vfiprintf_r+0x266>
  401978:	9608      	str	r6, [sp, #32]
  40197a:	2800      	cmp	r0, #0
  40197c:	f040 836b 	bne.w	402056 <_vfiprintf_r+0xc7a>
  401980:	4917      	ldr	r1, [pc, #92]	; (4019e0 <_vfiprintf_r+0x604>)
  401982:	910b      	str	r1, [sp, #44]	; 0x2c
  401984:	e7d9      	b.n	40193a <_vfiprintf_r+0x55e>
  401986:	9907      	ldr	r1, [sp, #28]
  401988:	9608      	str	r6, [sp, #32]
  40198a:	680a      	ldr	r2, [r1, #0]
  40198c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  401990:	f04f 0000 	mov.w	r0, #0
  401994:	460a      	mov	r2, r1
  401996:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40199a:	3204      	adds	r2, #4
  40199c:	2001      	movs	r0, #1
  40199e:	9001      	str	r0, [sp, #4]
  4019a0:	9207      	str	r2, [sp, #28]
  4019a2:	9005      	str	r0, [sp, #20]
  4019a4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4019a8:	9302      	str	r3, [sp, #8]
  4019aa:	2400      	movs	r4, #0
  4019ac:	e670      	b.n	401690 <_vfiprintf_r+0x2b4>
  4019ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4019b2:	f898 2000 	ldrb.w	r2, [r8]
  4019b6:	e583      	b.n	4014c0 <_vfiprintf_r+0xe4>
  4019b8:	f898 2000 	ldrb.w	r2, [r8]
  4019bc:	2a6c      	cmp	r2, #108	; 0x6c
  4019be:	bf03      	ittte	eq
  4019c0:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  4019c4:	f043 0320 	orreq.w	r3, r3, #32
  4019c8:	f108 0801 	addeq.w	r8, r8, #1
  4019cc:	f043 0310 	orrne.w	r3, r3, #16
  4019d0:	e576      	b.n	4014c0 <_vfiprintf_r+0xe4>
  4019d2:	bf00      	nop
  4019d4:	00404364 	.word	0x00404364
  4019d8:	00404374 	.word	0x00404374
  4019dc:	00404348 	.word	0x00404348
  4019e0:	00404334 	.word	0x00404334
  4019e4:	9907      	ldr	r1, [sp, #28]
  4019e6:	680e      	ldr	r6, [r1, #0]
  4019e8:	460a      	mov	r2, r1
  4019ea:	2e00      	cmp	r6, #0
  4019ec:	f102 0204 	add.w	r2, r2, #4
  4019f0:	f6ff ae0f 	blt.w	401612 <_vfiprintf_r+0x236>
  4019f4:	9207      	str	r2, [sp, #28]
  4019f6:	f898 2000 	ldrb.w	r2, [r8]
  4019fa:	e561      	b.n	4014c0 <_vfiprintf_r+0xe4>
  4019fc:	f898 2000 	ldrb.w	r2, [r8]
  401a00:	2001      	movs	r0, #1
  401a02:	252b      	movs	r5, #43	; 0x2b
  401a04:	e55c      	b.n	4014c0 <_vfiprintf_r+0xe4>
  401a06:	9907      	ldr	r1, [sp, #28]
  401a08:	9608      	str	r6, [sp, #32]
  401a0a:	f8d1 b000 	ldr.w	fp, [r1]
  401a0e:	f04f 0200 	mov.w	r2, #0
  401a12:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  401a16:	1d0e      	adds	r6, r1, #4
  401a18:	f1bb 0f00 	cmp.w	fp, #0
  401a1c:	f000 82e5 	beq.w	401fea <_vfiprintf_r+0xc0e>
  401a20:	1c67      	adds	r7, r4, #1
  401a22:	f000 82c4 	beq.w	401fae <_vfiprintf_r+0xbd2>
  401a26:	4622      	mov	r2, r4
  401a28:	2100      	movs	r1, #0
  401a2a:	4658      	mov	r0, fp
  401a2c:	9301      	str	r3, [sp, #4]
  401a2e:	f001 fbd7 	bl	4031e0 <memchr>
  401a32:	9b01      	ldr	r3, [sp, #4]
  401a34:	2800      	cmp	r0, #0
  401a36:	f000 82e5 	beq.w	402004 <_vfiprintf_r+0xc28>
  401a3a:	eba0 020b 	sub.w	r2, r0, fp
  401a3e:	9205      	str	r2, [sp, #20]
  401a40:	9607      	str	r6, [sp, #28]
  401a42:	9302      	str	r3, [sp, #8]
  401a44:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401a48:	2400      	movs	r4, #0
  401a4a:	e619      	b.n	401680 <_vfiprintf_r+0x2a4>
  401a4c:	f898 2000 	ldrb.w	r2, [r8]
  401a50:	2a2a      	cmp	r2, #42	; 0x2a
  401a52:	f108 0701 	add.w	r7, r8, #1
  401a56:	f000 82e9 	beq.w	40202c <_vfiprintf_r+0xc50>
  401a5a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401a5e:	2909      	cmp	r1, #9
  401a60:	46b8      	mov	r8, r7
  401a62:	f04f 0400 	mov.w	r4, #0
  401a66:	f63f ad2d 	bhi.w	4014c4 <_vfiprintf_r+0xe8>
  401a6a:	f818 2b01 	ldrb.w	r2, [r8], #1
  401a6e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  401a72:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  401a76:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401a7a:	2909      	cmp	r1, #9
  401a7c:	d9f5      	bls.n	401a6a <_vfiprintf_r+0x68e>
  401a7e:	e521      	b.n	4014c4 <_vfiprintf_r+0xe8>
  401a80:	f043 0320 	orr.w	r3, r3, #32
  401a84:	f898 2000 	ldrb.w	r2, [r8]
  401a88:	e51a      	b.n	4014c0 <_vfiprintf_r+0xe4>
  401a8a:	9608      	str	r6, [sp, #32]
  401a8c:	2800      	cmp	r0, #0
  401a8e:	f040 82db 	bne.w	402048 <_vfiprintf_r+0xc6c>
  401a92:	2a00      	cmp	r2, #0
  401a94:	f000 80e7 	beq.w	401c66 <_vfiprintf_r+0x88a>
  401a98:	2101      	movs	r1, #1
  401a9a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  401a9e:	f04f 0200 	mov.w	r2, #0
  401aa2:	9101      	str	r1, [sp, #4]
  401aa4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  401aa8:	9105      	str	r1, [sp, #20]
  401aaa:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  401aae:	e77b      	b.n	4019a8 <_vfiprintf_r+0x5cc>
  401ab0:	9a07      	ldr	r2, [sp, #28]
  401ab2:	6813      	ldr	r3, [r2, #0]
  401ab4:	3204      	adds	r2, #4
  401ab6:	9207      	str	r2, [sp, #28]
  401ab8:	9a03      	ldr	r2, [sp, #12]
  401aba:	601a      	str	r2, [r3, #0]
  401abc:	e4cb      	b.n	401456 <_vfiprintf_r+0x7a>
  401abe:	aa0f      	add	r2, sp, #60	; 0x3c
  401ac0:	9904      	ldr	r1, [sp, #16]
  401ac2:	4620      	mov	r0, r4
  401ac4:	f7ff fc4a 	bl	40135c <__sprint_r.part.0>
  401ac8:	2800      	cmp	r0, #0
  401aca:	f040 8139 	bne.w	401d40 <_vfiprintf_r+0x964>
  401ace:	9910      	ldr	r1, [sp, #64]	; 0x40
  401ad0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401ad2:	f101 0c01 	add.w	ip, r1, #1
  401ad6:	46ce      	mov	lr, r9
  401ad8:	e5ff      	b.n	4016da <_vfiprintf_r+0x2fe>
  401ada:	9910      	ldr	r1, [sp, #64]	; 0x40
  401adc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401ade:	1c48      	adds	r0, r1, #1
  401ae0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401ae4:	2d00      	cmp	r5, #0
  401ae6:	f43f ae22 	beq.w	40172e <_vfiprintf_r+0x352>
  401aea:	3201      	adds	r2, #1
  401aec:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  401af0:	2101      	movs	r1, #1
  401af2:	2807      	cmp	r0, #7
  401af4:	9211      	str	r2, [sp, #68]	; 0x44
  401af6:	9010      	str	r0, [sp, #64]	; 0x40
  401af8:	f8ca 5000 	str.w	r5, [sl]
  401afc:	f8ca 1004 	str.w	r1, [sl, #4]
  401b00:	f340 8108 	ble.w	401d14 <_vfiprintf_r+0x938>
  401b04:	2a00      	cmp	r2, #0
  401b06:	f040 81bc 	bne.w	401e82 <_vfiprintf_r+0xaa6>
  401b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401b0c:	2b00      	cmp	r3, #0
  401b0e:	f43f ae1f 	beq.w	401750 <_vfiprintf_r+0x374>
  401b12:	ab0e      	add	r3, sp, #56	; 0x38
  401b14:	2202      	movs	r2, #2
  401b16:	4608      	mov	r0, r1
  401b18:	931c      	str	r3, [sp, #112]	; 0x70
  401b1a:	921d      	str	r2, [sp, #116]	; 0x74
  401b1c:	46ca      	mov	sl, r9
  401b1e:	4601      	mov	r1, r0
  401b20:	f10a 0a08 	add.w	sl, sl, #8
  401b24:	3001      	adds	r0, #1
  401b26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401b28:	2b80      	cmp	r3, #128	; 0x80
  401b2a:	f43f ae19 	beq.w	401760 <_vfiprintf_r+0x384>
  401b2e:	9b05      	ldr	r3, [sp, #20]
  401b30:	1ae4      	subs	r4, r4, r3
  401b32:	2c00      	cmp	r4, #0
  401b34:	dd2e      	ble.n	401b94 <_vfiprintf_r+0x7b8>
  401b36:	2c10      	cmp	r4, #16
  401b38:	4db3      	ldr	r5, [pc, #716]	; (401e08 <_vfiprintf_r+0xa2c>)
  401b3a:	dd1e      	ble.n	401b7a <_vfiprintf_r+0x79e>
  401b3c:	46d6      	mov	lr, sl
  401b3e:	2610      	movs	r6, #16
  401b40:	9f06      	ldr	r7, [sp, #24]
  401b42:	f8dd a010 	ldr.w	sl, [sp, #16]
  401b46:	e006      	b.n	401b56 <_vfiprintf_r+0x77a>
  401b48:	1c88      	adds	r0, r1, #2
  401b4a:	f10e 0e08 	add.w	lr, lr, #8
  401b4e:	4619      	mov	r1, r3
  401b50:	3c10      	subs	r4, #16
  401b52:	2c10      	cmp	r4, #16
  401b54:	dd10      	ble.n	401b78 <_vfiprintf_r+0x79c>
  401b56:	1c4b      	adds	r3, r1, #1
  401b58:	3210      	adds	r2, #16
  401b5a:	2b07      	cmp	r3, #7
  401b5c:	9211      	str	r2, [sp, #68]	; 0x44
  401b5e:	e88e 0060 	stmia.w	lr, {r5, r6}
  401b62:	9310      	str	r3, [sp, #64]	; 0x40
  401b64:	ddf0      	ble.n	401b48 <_vfiprintf_r+0x76c>
  401b66:	2a00      	cmp	r2, #0
  401b68:	d165      	bne.n	401c36 <_vfiprintf_r+0x85a>
  401b6a:	3c10      	subs	r4, #16
  401b6c:	2c10      	cmp	r4, #16
  401b6e:	f04f 0001 	mov.w	r0, #1
  401b72:	4611      	mov	r1, r2
  401b74:	46ce      	mov	lr, r9
  401b76:	dcee      	bgt.n	401b56 <_vfiprintf_r+0x77a>
  401b78:	46f2      	mov	sl, lr
  401b7a:	4422      	add	r2, r4
  401b7c:	2807      	cmp	r0, #7
  401b7e:	9211      	str	r2, [sp, #68]	; 0x44
  401b80:	f8ca 5000 	str.w	r5, [sl]
  401b84:	f8ca 4004 	str.w	r4, [sl, #4]
  401b88:	9010      	str	r0, [sp, #64]	; 0x40
  401b8a:	f300 8085 	bgt.w	401c98 <_vfiprintf_r+0x8bc>
  401b8e:	f10a 0a08 	add.w	sl, sl, #8
  401b92:	3001      	adds	r0, #1
  401b94:	9905      	ldr	r1, [sp, #20]
  401b96:	f8ca b000 	str.w	fp, [sl]
  401b9a:	440a      	add	r2, r1
  401b9c:	2807      	cmp	r0, #7
  401b9e:	9211      	str	r2, [sp, #68]	; 0x44
  401ba0:	f8ca 1004 	str.w	r1, [sl, #4]
  401ba4:	9010      	str	r0, [sp, #64]	; 0x40
  401ba6:	f340 8082 	ble.w	401cae <_vfiprintf_r+0x8d2>
  401baa:	2a00      	cmp	r2, #0
  401bac:	f040 8118 	bne.w	401de0 <_vfiprintf_r+0xa04>
  401bb0:	9b02      	ldr	r3, [sp, #8]
  401bb2:	9210      	str	r2, [sp, #64]	; 0x40
  401bb4:	0758      	lsls	r0, r3, #29
  401bb6:	d535      	bpl.n	401c24 <_vfiprintf_r+0x848>
  401bb8:	9b08      	ldr	r3, [sp, #32]
  401bba:	9901      	ldr	r1, [sp, #4]
  401bbc:	1a5c      	subs	r4, r3, r1
  401bbe:	2c00      	cmp	r4, #0
  401bc0:	f340 80e7 	ble.w	401d92 <_vfiprintf_r+0x9b6>
  401bc4:	46ca      	mov	sl, r9
  401bc6:	2c10      	cmp	r4, #16
  401bc8:	f340 8218 	ble.w	401ffc <_vfiprintf_r+0xc20>
  401bcc:	9910      	ldr	r1, [sp, #64]	; 0x40
  401bce:	4e8f      	ldr	r6, [pc, #572]	; (401e0c <_vfiprintf_r+0xa30>)
  401bd0:	9f06      	ldr	r7, [sp, #24]
  401bd2:	f8dd b010 	ldr.w	fp, [sp, #16]
  401bd6:	2510      	movs	r5, #16
  401bd8:	e006      	b.n	401be8 <_vfiprintf_r+0x80c>
  401bda:	1c88      	adds	r0, r1, #2
  401bdc:	f10a 0a08 	add.w	sl, sl, #8
  401be0:	4619      	mov	r1, r3
  401be2:	3c10      	subs	r4, #16
  401be4:	2c10      	cmp	r4, #16
  401be6:	dd11      	ble.n	401c0c <_vfiprintf_r+0x830>
  401be8:	1c4b      	adds	r3, r1, #1
  401bea:	3210      	adds	r2, #16
  401bec:	2b07      	cmp	r3, #7
  401bee:	9211      	str	r2, [sp, #68]	; 0x44
  401bf0:	f8ca 6000 	str.w	r6, [sl]
  401bf4:	f8ca 5004 	str.w	r5, [sl, #4]
  401bf8:	9310      	str	r3, [sp, #64]	; 0x40
  401bfa:	ddee      	ble.n	401bda <_vfiprintf_r+0x7fe>
  401bfc:	bb42      	cbnz	r2, 401c50 <_vfiprintf_r+0x874>
  401bfe:	3c10      	subs	r4, #16
  401c00:	2c10      	cmp	r4, #16
  401c02:	f04f 0001 	mov.w	r0, #1
  401c06:	4611      	mov	r1, r2
  401c08:	46ca      	mov	sl, r9
  401c0a:	dced      	bgt.n	401be8 <_vfiprintf_r+0x80c>
  401c0c:	4422      	add	r2, r4
  401c0e:	2807      	cmp	r0, #7
  401c10:	9211      	str	r2, [sp, #68]	; 0x44
  401c12:	f8ca 6000 	str.w	r6, [sl]
  401c16:	f8ca 4004 	str.w	r4, [sl, #4]
  401c1a:	9010      	str	r0, [sp, #64]	; 0x40
  401c1c:	dd51      	ble.n	401cc2 <_vfiprintf_r+0x8e6>
  401c1e:	2a00      	cmp	r2, #0
  401c20:	f040 819b 	bne.w	401f5a <_vfiprintf_r+0xb7e>
  401c24:	9b03      	ldr	r3, [sp, #12]
  401c26:	9a08      	ldr	r2, [sp, #32]
  401c28:	9901      	ldr	r1, [sp, #4]
  401c2a:	428a      	cmp	r2, r1
  401c2c:	bfac      	ite	ge
  401c2e:	189b      	addge	r3, r3, r2
  401c30:	185b      	addlt	r3, r3, r1
  401c32:	9303      	str	r3, [sp, #12]
  401c34:	e04e      	b.n	401cd4 <_vfiprintf_r+0x8f8>
  401c36:	aa0f      	add	r2, sp, #60	; 0x3c
  401c38:	4651      	mov	r1, sl
  401c3a:	4638      	mov	r0, r7
  401c3c:	f7ff fb8e 	bl	40135c <__sprint_r.part.0>
  401c40:	2800      	cmp	r0, #0
  401c42:	f040 813f 	bne.w	401ec4 <_vfiprintf_r+0xae8>
  401c46:	9910      	ldr	r1, [sp, #64]	; 0x40
  401c48:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401c4a:	1c48      	adds	r0, r1, #1
  401c4c:	46ce      	mov	lr, r9
  401c4e:	e77f      	b.n	401b50 <_vfiprintf_r+0x774>
  401c50:	aa0f      	add	r2, sp, #60	; 0x3c
  401c52:	4659      	mov	r1, fp
  401c54:	4638      	mov	r0, r7
  401c56:	f7ff fb81 	bl	40135c <__sprint_r.part.0>
  401c5a:	b960      	cbnz	r0, 401c76 <_vfiprintf_r+0x89a>
  401c5c:	9910      	ldr	r1, [sp, #64]	; 0x40
  401c5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401c60:	1c48      	adds	r0, r1, #1
  401c62:	46ca      	mov	sl, r9
  401c64:	e7bd      	b.n	401be2 <_vfiprintf_r+0x806>
  401c66:	9b11      	ldr	r3, [sp, #68]	; 0x44
  401c68:	f8dd b010 	ldr.w	fp, [sp, #16]
  401c6c:	2b00      	cmp	r3, #0
  401c6e:	f040 81d4 	bne.w	40201a <_vfiprintf_r+0xc3e>
  401c72:	2300      	movs	r3, #0
  401c74:	9310      	str	r3, [sp, #64]	; 0x40
  401c76:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401c7a:	f013 0f01 	tst.w	r3, #1
  401c7e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  401c82:	d102      	bne.n	401c8a <_vfiprintf_r+0x8ae>
  401c84:	059a      	lsls	r2, r3, #22
  401c86:	f140 80de 	bpl.w	401e46 <_vfiprintf_r+0xa6a>
  401c8a:	065b      	lsls	r3, r3, #25
  401c8c:	f53f acb2 	bmi.w	4015f4 <_vfiprintf_r+0x218>
  401c90:	9803      	ldr	r0, [sp, #12]
  401c92:	b02d      	add	sp, #180	; 0xb4
  401c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401c98:	2a00      	cmp	r2, #0
  401c9a:	f040 8106 	bne.w	401eaa <_vfiprintf_r+0xace>
  401c9e:	9a05      	ldr	r2, [sp, #20]
  401ca0:	921d      	str	r2, [sp, #116]	; 0x74
  401ca2:	2301      	movs	r3, #1
  401ca4:	9211      	str	r2, [sp, #68]	; 0x44
  401ca6:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  401caa:	9310      	str	r3, [sp, #64]	; 0x40
  401cac:	46ca      	mov	sl, r9
  401cae:	f10a 0a08 	add.w	sl, sl, #8
  401cb2:	9b02      	ldr	r3, [sp, #8]
  401cb4:	0759      	lsls	r1, r3, #29
  401cb6:	d504      	bpl.n	401cc2 <_vfiprintf_r+0x8e6>
  401cb8:	9b08      	ldr	r3, [sp, #32]
  401cba:	9901      	ldr	r1, [sp, #4]
  401cbc:	1a5c      	subs	r4, r3, r1
  401cbe:	2c00      	cmp	r4, #0
  401cc0:	dc81      	bgt.n	401bc6 <_vfiprintf_r+0x7ea>
  401cc2:	9b03      	ldr	r3, [sp, #12]
  401cc4:	9908      	ldr	r1, [sp, #32]
  401cc6:	9801      	ldr	r0, [sp, #4]
  401cc8:	4281      	cmp	r1, r0
  401cca:	bfac      	ite	ge
  401ccc:	185b      	addge	r3, r3, r1
  401cce:	181b      	addlt	r3, r3, r0
  401cd0:	9303      	str	r3, [sp, #12]
  401cd2:	bb72      	cbnz	r2, 401d32 <_vfiprintf_r+0x956>
  401cd4:	2300      	movs	r3, #0
  401cd6:	9310      	str	r3, [sp, #64]	; 0x40
  401cd8:	46ca      	mov	sl, r9
  401cda:	f7ff bbbc 	b.w	401456 <_vfiprintf_r+0x7a>
  401cde:	aa0f      	add	r2, sp, #60	; 0x3c
  401ce0:	9904      	ldr	r1, [sp, #16]
  401ce2:	4620      	mov	r0, r4
  401ce4:	f7ff fb3a 	bl	40135c <__sprint_r.part.0>
  401ce8:	bb50      	cbnz	r0, 401d40 <_vfiprintf_r+0x964>
  401cea:	9910      	ldr	r1, [sp, #64]	; 0x40
  401cec:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401cee:	f101 0e01 	add.w	lr, r1, #1
  401cf2:	46cc      	mov	ip, r9
  401cf4:	e548      	b.n	401788 <_vfiprintf_r+0x3ac>
  401cf6:	2a00      	cmp	r2, #0
  401cf8:	f040 8140 	bne.w	401f7c <_vfiprintf_r+0xba0>
  401cfc:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  401d00:	2900      	cmp	r1, #0
  401d02:	f000 811b 	beq.w	401f3c <_vfiprintf_r+0xb60>
  401d06:	2201      	movs	r2, #1
  401d08:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  401d0c:	4610      	mov	r0, r2
  401d0e:	921d      	str	r2, [sp, #116]	; 0x74
  401d10:	911c      	str	r1, [sp, #112]	; 0x70
  401d12:	46ca      	mov	sl, r9
  401d14:	4601      	mov	r1, r0
  401d16:	f10a 0a08 	add.w	sl, sl, #8
  401d1a:	3001      	adds	r0, #1
  401d1c:	e507      	b.n	40172e <_vfiprintf_r+0x352>
  401d1e:	9b02      	ldr	r3, [sp, #8]
  401d20:	2a01      	cmp	r2, #1
  401d22:	f000 8098 	beq.w	401e56 <_vfiprintf_r+0xa7a>
  401d26:	2a02      	cmp	r2, #2
  401d28:	d10d      	bne.n	401d46 <_vfiprintf_r+0x96a>
  401d2a:	9302      	str	r3, [sp, #8]
  401d2c:	2600      	movs	r6, #0
  401d2e:	2700      	movs	r7, #0
  401d30:	e5b0      	b.n	401894 <_vfiprintf_r+0x4b8>
  401d32:	aa0f      	add	r2, sp, #60	; 0x3c
  401d34:	9904      	ldr	r1, [sp, #16]
  401d36:	9806      	ldr	r0, [sp, #24]
  401d38:	f7ff fb10 	bl	40135c <__sprint_r.part.0>
  401d3c:	2800      	cmp	r0, #0
  401d3e:	d0c9      	beq.n	401cd4 <_vfiprintf_r+0x8f8>
  401d40:	f8dd b010 	ldr.w	fp, [sp, #16]
  401d44:	e797      	b.n	401c76 <_vfiprintf_r+0x89a>
  401d46:	9302      	str	r3, [sp, #8]
  401d48:	2600      	movs	r6, #0
  401d4a:	2700      	movs	r7, #0
  401d4c:	4649      	mov	r1, r9
  401d4e:	e000      	b.n	401d52 <_vfiprintf_r+0x976>
  401d50:	4659      	mov	r1, fp
  401d52:	08f2      	lsrs	r2, r6, #3
  401d54:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  401d58:	08f8      	lsrs	r0, r7, #3
  401d5a:	f006 0307 	and.w	r3, r6, #7
  401d5e:	4607      	mov	r7, r0
  401d60:	4616      	mov	r6, r2
  401d62:	3330      	adds	r3, #48	; 0x30
  401d64:	ea56 0207 	orrs.w	r2, r6, r7
  401d68:	f801 3c01 	strb.w	r3, [r1, #-1]
  401d6c:	f101 3bff 	add.w	fp, r1, #4294967295
  401d70:	d1ee      	bne.n	401d50 <_vfiprintf_r+0x974>
  401d72:	9a02      	ldr	r2, [sp, #8]
  401d74:	07d6      	lsls	r6, r2, #31
  401d76:	f57f ad9d 	bpl.w	4018b4 <_vfiprintf_r+0x4d8>
  401d7a:	2b30      	cmp	r3, #48	; 0x30
  401d7c:	f43f ad9a 	beq.w	4018b4 <_vfiprintf_r+0x4d8>
  401d80:	3902      	subs	r1, #2
  401d82:	2330      	movs	r3, #48	; 0x30
  401d84:	f80b 3c01 	strb.w	r3, [fp, #-1]
  401d88:	eba9 0301 	sub.w	r3, r9, r1
  401d8c:	9305      	str	r3, [sp, #20]
  401d8e:	468b      	mov	fp, r1
  401d90:	e476      	b.n	401680 <_vfiprintf_r+0x2a4>
  401d92:	9b03      	ldr	r3, [sp, #12]
  401d94:	9a08      	ldr	r2, [sp, #32]
  401d96:	428a      	cmp	r2, r1
  401d98:	bfac      	ite	ge
  401d9a:	189b      	addge	r3, r3, r2
  401d9c:	185b      	addlt	r3, r3, r1
  401d9e:	9303      	str	r3, [sp, #12]
  401da0:	e798      	b.n	401cd4 <_vfiprintf_r+0x8f8>
  401da2:	2202      	movs	r2, #2
  401da4:	e44d      	b.n	401642 <_vfiprintf_r+0x266>
  401da6:	2f00      	cmp	r7, #0
  401da8:	bf08      	it	eq
  401daa:	2e0a      	cmpeq	r6, #10
  401dac:	d352      	bcc.n	401e54 <_vfiprintf_r+0xa78>
  401dae:	46cb      	mov	fp, r9
  401db0:	4630      	mov	r0, r6
  401db2:	4639      	mov	r1, r7
  401db4:	220a      	movs	r2, #10
  401db6:	2300      	movs	r3, #0
  401db8:	f001 ff36 	bl	403c28 <__aeabi_uldivmod>
  401dbc:	3230      	adds	r2, #48	; 0x30
  401dbe:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  401dc2:	4630      	mov	r0, r6
  401dc4:	4639      	mov	r1, r7
  401dc6:	2300      	movs	r3, #0
  401dc8:	220a      	movs	r2, #10
  401dca:	f001 ff2d 	bl	403c28 <__aeabi_uldivmod>
  401dce:	4606      	mov	r6, r0
  401dd0:	460f      	mov	r7, r1
  401dd2:	ea56 0307 	orrs.w	r3, r6, r7
  401dd6:	d1eb      	bne.n	401db0 <_vfiprintf_r+0x9d4>
  401dd8:	e56c      	b.n	4018b4 <_vfiprintf_r+0x4d8>
  401dda:	9405      	str	r4, [sp, #20]
  401ddc:	46cb      	mov	fp, r9
  401dde:	e44f      	b.n	401680 <_vfiprintf_r+0x2a4>
  401de0:	aa0f      	add	r2, sp, #60	; 0x3c
  401de2:	9904      	ldr	r1, [sp, #16]
  401de4:	9806      	ldr	r0, [sp, #24]
  401de6:	f7ff fab9 	bl	40135c <__sprint_r.part.0>
  401dea:	2800      	cmp	r0, #0
  401dec:	d1a8      	bne.n	401d40 <_vfiprintf_r+0x964>
  401dee:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401df0:	46ca      	mov	sl, r9
  401df2:	e75e      	b.n	401cb2 <_vfiprintf_r+0x8d6>
  401df4:	aa0f      	add	r2, sp, #60	; 0x3c
  401df6:	9904      	ldr	r1, [sp, #16]
  401df8:	9806      	ldr	r0, [sp, #24]
  401dfa:	f7ff faaf 	bl	40135c <__sprint_r.part.0>
  401dfe:	2800      	cmp	r0, #0
  401e00:	d19e      	bne.n	401d40 <_vfiprintf_r+0x964>
  401e02:	46ca      	mov	sl, r9
  401e04:	f7ff bbc0 	b.w	401588 <_vfiprintf_r+0x1ac>
  401e08:	00404374 	.word	0x00404374
  401e0c:	00404364 	.word	0x00404364
  401e10:	3104      	adds	r1, #4
  401e12:	6816      	ldr	r6, [r2, #0]
  401e14:	9107      	str	r1, [sp, #28]
  401e16:	2201      	movs	r2, #1
  401e18:	2700      	movs	r7, #0
  401e1a:	e412      	b.n	401642 <_vfiprintf_r+0x266>
  401e1c:	9807      	ldr	r0, [sp, #28]
  401e1e:	4601      	mov	r1, r0
  401e20:	3104      	adds	r1, #4
  401e22:	6806      	ldr	r6, [r0, #0]
  401e24:	9107      	str	r1, [sp, #28]
  401e26:	2700      	movs	r7, #0
  401e28:	e40b      	b.n	401642 <_vfiprintf_r+0x266>
  401e2a:	680e      	ldr	r6, [r1, #0]
  401e2c:	3104      	adds	r1, #4
  401e2e:	9107      	str	r1, [sp, #28]
  401e30:	2700      	movs	r7, #0
  401e32:	e591      	b.n	401958 <_vfiprintf_r+0x57c>
  401e34:	9907      	ldr	r1, [sp, #28]
  401e36:	680e      	ldr	r6, [r1, #0]
  401e38:	460a      	mov	r2, r1
  401e3a:	17f7      	asrs	r7, r6, #31
  401e3c:	3204      	adds	r2, #4
  401e3e:	9207      	str	r2, [sp, #28]
  401e40:	4630      	mov	r0, r6
  401e42:	4639      	mov	r1, r7
  401e44:	e50f      	b.n	401866 <_vfiprintf_r+0x48a>
  401e46:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401e4a:	f000 fe7f 	bl	402b4c <__retarget_lock_release_recursive>
  401e4e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  401e52:	e71a      	b.n	401c8a <_vfiprintf_r+0x8ae>
  401e54:	9b02      	ldr	r3, [sp, #8]
  401e56:	9302      	str	r3, [sp, #8]
  401e58:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  401e5c:	3630      	adds	r6, #48	; 0x30
  401e5e:	2301      	movs	r3, #1
  401e60:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  401e64:	9305      	str	r3, [sp, #20]
  401e66:	e40b      	b.n	401680 <_vfiprintf_r+0x2a4>
  401e68:	aa0f      	add	r2, sp, #60	; 0x3c
  401e6a:	9904      	ldr	r1, [sp, #16]
  401e6c:	9806      	ldr	r0, [sp, #24]
  401e6e:	f7ff fa75 	bl	40135c <__sprint_r.part.0>
  401e72:	2800      	cmp	r0, #0
  401e74:	f47f af64 	bne.w	401d40 <_vfiprintf_r+0x964>
  401e78:	9910      	ldr	r1, [sp, #64]	; 0x40
  401e7a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401e7c:	1c48      	adds	r0, r1, #1
  401e7e:	46ca      	mov	sl, r9
  401e80:	e651      	b.n	401b26 <_vfiprintf_r+0x74a>
  401e82:	aa0f      	add	r2, sp, #60	; 0x3c
  401e84:	9904      	ldr	r1, [sp, #16]
  401e86:	9806      	ldr	r0, [sp, #24]
  401e88:	f7ff fa68 	bl	40135c <__sprint_r.part.0>
  401e8c:	2800      	cmp	r0, #0
  401e8e:	f47f af57 	bne.w	401d40 <_vfiprintf_r+0x964>
  401e92:	9910      	ldr	r1, [sp, #64]	; 0x40
  401e94:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401e96:	1c48      	adds	r0, r1, #1
  401e98:	46ca      	mov	sl, r9
  401e9a:	e448      	b.n	40172e <_vfiprintf_r+0x352>
  401e9c:	2a00      	cmp	r2, #0
  401e9e:	f040 8091 	bne.w	401fc4 <_vfiprintf_r+0xbe8>
  401ea2:	2001      	movs	r0, #1
  401ea4:	4611      	mov	r1, r2
  401ea6:	46ca      	mov	sl, r9
  401ea8:	e641      	b.n	401b2e <_vfiprintf_r+0x752>
  401eaa:	aa0f      	add	r2, sp, #60	; 0x3c
  401eac:	9904      	ldr	r1, [sp, #16]
  401eae:	9806      	ldr	r0, [sp, #24]
  401eb0:	f7ff fa54 	bl	40135c <__sprint_r.part.0>
  401eb4:	2800      	cmp	r0, #0
  401eb6:	f47f af43 	bne.w	401d40 <_vfiprintf_r+0x964>
  401eba:	9810      	ldr	r0, [sp, #64]	; 0x40
  401ebc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401ebe:	3001      	adds	r0, #1
  401ec0:	46ca      	mov	sl, r9
  401ec2:	e667      	b.n	401b94 <_vfiprintf_r+0x7b8>
  401ec4:	46d3      	mov	fp, sl
  401ec6:	e6d6      	b.n	401c76 <_vfiprintf_r+0x89a>
  401ec8:	9e07      	ldr	r6, [sp, #28]
  401eca:	3607      	adds	r6, #7
  401ecc:	f026 0207 	bic.w	r2, r6, #7
  401ed0:	f102 0108 	add.w	r1, r2, #8
  401ed4:	e9d2 6700 	ldrd	r6, r7, [r2]
  401ed8:	9107      	str	r1, [sp, #28]
  401eda:	2201      	movs	r2, #1
  401edc:	f7ff bbb1 	b.w	401642 <_vfiprintf_r+0x266>
  401ee0:	9e07      	ldr	r6, [sp, #28]
  401ee2:	3607      	adds	r6, #7
  401ee4:	f026 0607 	bic.w	r6, r6, #7
  401ee8:	e9d6 0100 	ldrd	r0, r1, [r6]
  401eec:	f106 0208 	add.w	r2, r6, #8
  401ef0:	9207      	str	r2, [sp, #28]
  401ef2:	4606      	mov	r6, r0
  401ef4:	460f      	mov	r7, r1
  401ef6:	e4b6      	b.n	401866 <_vfiprintf_r+0x48a>
  401ef8:	9e07      	ldr	r6, [sp, #28]
  401efa:	3607      	adds	r6, #7
  401efc:	f026 0207 	bic.w	r2, r6, #7
  401f00:	f102 0108 	add.w	r1, r2, #8
  401f04:	e9d2 6700 	ldrd	r6, r7, [r2]
  401f08:	9107      	str	r1, [sp, #28]
  401f0a:	2200      	movs	r2, #0
  401f0c:	f7ff bb99 	b.w	401642 <_vfiprintf_r+0x266>
  401f10:	9e07      	ldr	r6, [sp, #28]
  401f12:	3607      	adds	r6, #7
  401f14:	f026 0107 	bic.w	r1, r6, #7
  401f18:	f101 0008 	add.w	r0, r1, #8
  401f1c:	9007      	str	r0, [sp, #28]
  401f1e:	e9d1 6700 	ldrd	r6, r7, [r1]
  401f22:	e519      	b.n	401958 <_vfiprintf_r+0x57c>
  401f24:	46cb      	mov	fp, r9
  401f26:	f7ff bbab 	b.w	401680 <_vfiprintf_r+0x2a4>
  401f2a:	252d      	movs	r5, #45	; 0x2d
  401f2c:	4276      	negs	r6, r6
  401f2e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  401f32:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401f36:	2201      	movs	r2, #1
  401f38:	f7ff bb88 	b.w	40164c <_vfiprintf_r+0x270>
  401f3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401f3e:	b9b3      	cbnz	r3, 401f6e <_vfiprintf_r+0xb92>
  401f40:	4611      	mov	r1, r2
  401f42:	2001      	movs	r0, #1
  401f44:	46ca      	mov	sl, r9
  401f46:	e5f2      	b.n	401b2e <_vfiprintf_r+0x752>
  401f48:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401f4c:	f000 fdfe 	bl	402b4c <__retarget_lock_release_recursive>
  401f50:	f04f 33ff 	mov.w	r3, #4294967295
  401f54:	9303      	str	r3, [sp, #12]
  401f56:	f7ff bb50 	b.w	4015fa <_vfiprintf_r+0x21e>
  401f5a:	aa0f      	add	r2, sp, #60	; 0x3c
  401f5c:	9904      	ldr	r1, [sp, #16]
  401f5e:	9806      	ldr	r0, [sp, #24]
  401f60:	f7ff f9fc 	bl	40135c <__sprint_r.part.0>
  401f64:	2800      	cmp	r0, #0
  401f66:	f47f aeeb 	bne.w	401d40 <_vfiprintf_r+0x964>
  401f6a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401f6c:	e6a9      	b.n	401cc2 <_vfiprintf_r+0x8e6>
  401f6e:	ab0e      	add	r3, sp, #56	; 0x38
  401f70:	2202      	movs	r2, #2
  401f72:	931c      	str	r3, [sp, #112]	; 0x70
  401f74:	921d      	str	r2, [sp, #116]	; 0x74
  401f76:	2001      	movs	r0, #1
  401f78:	46ca      	mov	sl, r9
  401f7a:	e5d0      	b.n	401b1e <_vfiprintf_r+0x742>
  401f7c:	aa0f      	add	r2, sp, #60	; 0x3c
  401f7e:	9904      	ldr	r1, [sp, #16]
  401f80:	9806      	ldr	r0, [sp, #24]
  401f82:	f7ff f9eb 	bl	40135c <__sprint_r.part.0>
  401f86:	2800      	cmp	r0, #0
  401f88:	f47f aeda 	bne.w	401d40 <_vfiprintf_r+0x964>
  401f8c:	9910      	ldr	r1, [sp, #64]	; 0x40
  401f8e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401f90:	1c48      	adds	r0, r1, #1
  401f92:	46ca      	mov	sl, r9
  401f94:	e5a4      	b.n	401ae0 <_vfiprintf_r+0x704>
  401f96:	9a07      	ldr	r2, [sp, #28]
  401f98:	9903      	ldr	r1, [sp, #12]
  401f9a:	6813      	ldr	r3, [r2, #0]
  401f9c:	17cd      	asrs	r5, r1, #31
  401f9e:	4608      	mov	r0, r1
  401fa0:	3204      	adds	r2, #4
  401fa2:	4629      	mov	r1, r5
  401fa4:	9207      	str	r2, [sp, #28]
  401fa6:	e9c3 0100 	strd	r0, r1, [r3]
  401faa:	f7ff ba54 	b.w	401456 <_vfiprintf_r+0x7a>
  401fae:	4658      	mov	r0, fp
  401fb0:	9607      	str	r6, [sp, #28]
  401fb2:	9302      	str	r3, [sp, #8]
  401fb4:	f7ff f964 	bl	401280 <strlen>
  401fb8:	2400      	movs	r4, #0
  401fba:	9005      	str	r0, [sp, #20]
  401fbc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401fc0:	f7ff bb5e 	b.w	401680 <_vfiprintf_r+0x2a4>
  401fc4:	aa0f      	add	r2, sp, #60	; 0x3c
  401fc6:	9904      	ldr	r1, [sp, #16]
  401fc8:	9806      	ldr	r0, [sp, #24]
  401fca:	f7ff f9c7 	bl	40135c <__sprint_r.part.0>
  401fce:	2800      	cmp	r0, #0
  401fd0:	f47f aeb6 	bne.w	401d40 <_vfiprintf_r+0x964>
  401fd4:	9910      	ldr	r1, [sp, #64]	; 0x40
  401fd6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401fd8:	1c48      	adds	r0, r1, #1
  401fda:	46ca      	mov	sl, r9
  401fdc:	e5a7      	b.n	401b2e <_vfiprintf_r+0x752>
  401fde:	9910      	ldr	r1, [sp, #64]	; 0x40
  401fe0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401fe2:	4e20      	ldr	r6, [pc, #128]	; (402064 <_vfiprintf_r+0xc88>)
  401fe4:	3101      	adds	r1, #1
  401fe6:	f7ff bb90 	b.w	40170a <_vfiprintf_r+0x32e>
  401fea:	2c06      	cmp	r4, #6
  401fec:	bf28      	it	cs
  401fee:	2406      	movcs	r4, #6
  401ff0:	9405      	str	r4, [sp, #20]
  401ff2:	9607      	str	r6, [sp, #28]
  401ff4:	9401      	str	r4, [sp, #4]
  401ff6:	f8df b070 	ldr.w	fp, [pc, #112]	; 402068 <_vfiprintf_r+0xc8c>
  401ffa:	e4d5      	b.n	4019a8 <_vfiprintf_r+0x5cc>
  401ffc:	9810      	ldr	r0, [sp, #64]	; 0x40
  401ffe:	4e19      	ldr	r6, [pc, #100]	; (402064 <_vfiprintf_r+0xc88>)
  402000:	3001      	adds	r0, #1
  402002:	e603      	b.n	401c0c <_vfiprintf_r+0x830>
  402004:	9405      	str	r4, [sp, #20]
  402006:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40200a:	9607      	str	r6, [sp, #28]
  40200c:	9302      	str	r3, [sp, #8]
  40200e:	4604      	mov	r4, r0
  402010:	f7ff bb36 	b.w	401680 <_vfiprintf_r+0x2a4>
  402014:	4686      	mov	lr, r0
  402016:	f7ff bbce 	b.w	4017b6 <_vfiprintf_r+0x3da>
  40201a:	9806      	ldr	r0, [sp, #24]
  40201c:	aa0f      	add	r2, sp, #60	; 0x3c
  40201e:	4659      	mov	r1, fp
  402020:	f7ff f99c 	bl	40135c <__sprint_r.part.0>
  402024:	2800      	cmp	r0, #0
  402026:	f43f ae24 	beq.w	401c72 <_vfiprintf_r+0x896>
  40202a:	e624      	b.n	401c76 <_vfiprintf_r+0x89a>
  40202c:	9907      	ldr	r1, [sp, #28]
  40202e:	f898 2001 	ldrb.w	r2, [r8, #1]
  402032:	680c      	ldr	r4, [r1, #0]
  402034:	3104      	adds	r1, #4
  402036:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  40203a:	46b8      	mov	r8, r7
  40203c:	9107      	str	r1, [sp, #28]
  40203e:	f7ff ba3f 	b.w	4014c0 <_vfiprintf_r+0xe4>
  402042:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402046:	e43c      	b.n	4018c2 <_vfiprintf_r+0x4e6>
  402048:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40204c:	e521      	b.n	401a92 <_vfiprintf_r+0x6b6>
  40204e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402052:	f7ff bbf4 	b.w	40183e <_vfiprintf_r+0x462>
  402056:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40205a:	e491      	b.n	401980 <_vfiprintf_r+0x5a4>
  40205c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402060:	e469      	b.n	401936 <_vfiprintf_r+0x55a>
  402062:	bf00      	nop
  402064:	00404364 	.word	0x00404364
  402068:	0040435c 	.word	0x0040435c

0040206c <__sbprintf>:
  40206c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402070:	460c      	mov	r4, r1
  402072:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  402076:	8989      	ldrh	r1, [r1, #12]
  402078:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40207a:	89e5      	ldrh	r5, [r4, #14]
  40207c:	9619      	str	r6, [sp, #100]	; 0x64
  40207e:	f021 0102 	bic.w	r1, r1, #2
  402082:	4606      	mov	r6, r0
  402084:	69e0      	ldr	r0, [r4, #28]
  402086:	f8ad 100c 	strh.w	r1, [sp, #12]
  40208a:	4617      	mov	r7, r2
  40208c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  402090:	6a62      	ldr	r2, [r4, #36]	; 0x24
  402092:	f8ad 500e 	strh.w	r5, [sp, #14]
  402096:	4698      	mov	r8, r3
  402098:	ad1a      	add	r5, sp, #104	; 0x68
  40209a:	2300      	movs	r3, #0
  40209c:	9007      	str	r0, [sp, #28]
  40209e:	a816      	add	r0, sp, #88	; 0x58
  4020a0:	9209      	str	r2, [sp, #36]	; 0x24
  4020a2:	9306      	str	r3, [sp, #24]
  4020a4:	9500      	str	r5, [sp, #0]
  4020a6:	9504      	str	r5, [sp, #16]
  4020a8:	9102      	str	r1, [sp, #8]
  4020aa:	9105      	str	r1, [sp, #20]
  4020ac:	f000 fd48 	bl	402b40 <__retarget_lock_init_recursive>
  4020b0:	4643      	mov	r3, r8
  4020b2:	463a      	mov	r2, r7
  4020b4:	4669      	mov	r1, sp
  4020b6:	4630      	mov	r0, r6
  4020b8:	f7ff f990 	bl	4013dc <_vfiprintf_r>
  4020bc:	1e05      	subs	r5, r0, #0
  4020be:	db07      	blt.n	4020d0 <__sbprintf+0x64>
  4020c0:	4630      	mov	r0, r6
  4020c2:	4669      	mov	r1, sp
  4020c4:	f000 f928 	bl	402318 <_fflush_r>
  4020c8:	2800      	cmp	r0, #0
  4020ca:	bf18      	it	ne
  4020cc:	f04f 35ff 	movne.w	r5, #4294967295
  4020d0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4020d4:	065b      	lsls	r3, r3, #25
  4020d6:	d503      	bpl.n	4020e0 <__sbprintf+0x74>
  4020d8:	89a3      	ldrh	r3, [r4, #12]
  4020da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4020de:	81a3      	strh	r3, [r4, #12]
  4020e0:	9816      	ldr	r0, [sp, #88]	; 0x58
  4020e2:	f000 fd2f 	bl	402b44 <__retarget_lock_close_recursive>
  4020e6:	4628      	mov	r0, r5
  4020e8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4020ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004020f0 <__swsetup_r>:
  4020f0:	b538      	push	{r3, r4, r5, lr}
  4020f2:	4b30      	ldr	r3, [pc, #192]	; (4021b4 <__swsetup_r+0xc4>)
  4020f4:	681b      	ldr	r3, [r3, #0]
  4020f6:	4605      	mov	r5, r0
  4020f8:	460c      	mov	r4, r1
  4020fa:	b113      	cbz	r3, 402102 <__swsetup_r+0x12>
  4020fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4020fe:	2a00      	cmp	r2, #0
  402100:	d038      	beq.n	402174 <__swsetup_r+0x84>
  402102:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402106:	b293      	uxth	r3, r2
  402108:	0718      	lsls	r0, r3, #28
  40210a:	d50c      	bpl.n	402126 <__swsetup_r+0x36>
  40210c:	6920      	ldr	r0, [r4, #16]
  40210e:	b1a8      	cbz	r0, 40213c <__swsetup_r+0x4c>
  402110:	f013 0201 	ands.w	r2, r3, #1
  402114:	d01e      	beq.n	402154 <__swsetup_r+0x64>
  402116:	6963      	ldr	r3, [r4, #20]
  402118:	2200      	movs	r2, #0
  40211a:	425b      	negs	r3, r3
  40211c:	61a3      	str	r3, [r4, #24]
  40211e:	60a2      	str	r2, [r4, #8]
  402120:	b1f0      	cbz	r0, 402160 <__swsetup_r+0x70>
  402122:	2000      	movs	r0, #0
  402124:	bd38      	pop	{r3, r4, r5, pc}
  402126:	06d9      	lsls	r1, r3, #27
  402128:	d53c      	bpl.n	4021a4 <__swsetup_r+0xb4>
  40212a:	0758      	lsls	r0, r3, #29
  40212c:	d426      	bmi.n	40217c <__swsetup_r+0x8c>
  40212e:	6920      	ldr	r0, [r4, #16]
  402130:	f042 0308 	orr.w	r3, r2, #8
  402134:	81a3      	strh	r3, [r4, #12]
  402136:	b29b      	uxth	r3, r3
  402138:	2800      	cmp	r0, #0
  40213a:	d1e9      	bne.n	402110 <__swsetup_r+0x20>
  40213c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  402140:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  402144:	d0e4      	beq.n	402110 <__swsetup_r+0x20>
  402146:	4628      	mov	r0, r5
  402148:	4621      	mov	r1, r4
  40214a:	f000 fd2f 	bl	402bac <__smakebuf_r>
  40214e:	89a3      	ldrh	r3, [r4, #12]
  402150:	6920      	ldr	r0, [r4, #16]
  402152:	e7dd      	b.n	402110 <__swsetup_r+0x20>
  402154:	0799      	lsls	r1, r3, #30
  402156:	bf58      	it	pl
  402158:	6962      	ldrpl	r2, [r4, #20]
  40215a:	60a2      	str	r2, [r4, #8]
  40215c:	2800      	cmp	r0, #0
  40215e:	d1e0      	bne.n	402122 <__swsetup_r+0x32>
  402160:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402164:	061a      	lsls	r2, r3, #24
  402166:	d5dd      	bpl.n	402124 <__swsetup_r+0x34>
  402168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40216c:	81a3      	strh	r3, [r4, #12]
  40216e:	f04f 30ff 	mov.w	r0, #4294967295
  402172:	bd38      	pop	{r3, r4, r5, pc}
  402174:	4618      	mov	r0, r3
  402176:	f000 f927 	bl	4023c8 <__sinit>
  40217a:	e7c2      	b.n	402102 <__swsetup_r+0x12>
  40217c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40217e:	b151      	cbz	r1, 402196 <__swsetup_r+0xa6>
  402180:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402184:	4299      	cmp	r1, r3
  402186:	d004      	beq.n	402192 <__swsetup_r+0xa2>
  402188:	4628      	mov	r0, r5
  40218a:	f000 fa43 	bl	402614 <_free_r>
  40218e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402192:	2300      	movs	r3, #0
  402194:	6323      	str	r3, [r4, #48]	; 0x30
  402196:	2300      	movs	r3, #0
  402198:	6920      	ldr	r0, [r4, #16]
  40219a:	6063      	str	r3, [r4, #4]
  40219c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4021a0:	6020      	str	r0, [r4, #0]
  4021a2:	e7c5      	b.n	402130 <__swsetup_r+0x40>
  4021a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4021a8:	2309      	movs	r3, #9
  4021aa:	602b      	str	r3, [r5, #0]
  4021ac:	f04f 30ff 	mov.w	r0, #4294967295
  4021b0:	81a2      	strh	r2, [r4, #12]
  4021b2:	bd38      	pop	{r3, r4, r5, pc}
  4021b4:	20000008 	.word	0x20000008

004021b8 <register_fini>:
  4021b8:	4b02      	ldr	r3, [pc, #8]	; (4021c4 <register_fini+0xc>)
  4021ba:	b113      	cbz	r3, 4021c2 <register_fini+0xa>
  4021bc:	4802      	ldr	r0, [pc, #8]	; (4021c8 <register_fini+0x10>)
  4021be:	f000 b805 	b.w	4021cc <atexit>
  4021c2:	4770      	bx	lr
  4021c4:	00000000 	.word	0x00000000
  4021c8:	00402439 	.word	0x00402439

004021cc <atexit>:
  4021cc:	2300      	movs	r3, #0
  4021ce:	4601      	mov	r1, r0
  4021d0:	461a      	mov	r2, r3
  4021d2:	4618      	mov	r0, r3
  4021d4:	f001 bc00 	b.w	4039d8 <__register_exitproc>

004021d8 <__sflush_r>:
  4021d8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4021dc:	b29a      	uxth	r2, r3
  4021de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4021e2:	460d      	mov	r5, r1
  4021e4:	0711      	lsls	r1, r2, #28
  4021e6:	4680      	mov	r8, r0
  4021e8:	d43a      	bmi.n	402260 <__sflush_r+0x88>
  4021ea:	686a      	ldr	r2, [r5, #4]
  4021ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4021f0:	2a00      	cmp	r2, #0
  4021f2:	81ab      	strh	r3, [r5, #12]
  4021f4:	dd6f      	ble.n	4022d6 <__sflush_r+0xfe>
  4021f6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4021f8:	2c00      	cmp	r4, #0
  4021fa:	d049      	beq.n	402290 <__sflush_r+0xb8>
  4021fc:	2200      	movs	r2, #0
  4021fe:	b29b      	uxth	r3, r3
  402200:	f8d8 6000 	ldr.w	r6, [r8]
  402204:	f8c8 2000 	str.w	r2, [r8]
  402208:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40220c:	d067      	beq.n	4022de <__sflush_r+0x106>
  40220e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  402210:	075f      	lsls	r7, r3, #29
  402212:	d505      	bpl.n	402220 <__sflush_r+0x48>
  402214:	6869      	ldr	r1, [r5, #4]
  402216:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402218:	1a52      	subs	r2, r2, r1
  40221a:	b10b      	cbz	r3, 402220 <__sflush_r+0x48>
  40221c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40221e:	1ad2      	subs	r2, r2, r3
  402220:	2300      	movs	r3, #0
  402222:	69e9      	ldr	r1, [r5, #28]
  402224:	4640      	mov	r0, r8
  402226:	47a0      	blx	r4
  402228:	1c44      	adds	r4, r0, #1
  40222a:	d03c      	beq.n	4022a6 <__sflush_r+0xce>
  40222c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  402230:	692a      	ldr	r2, [r5, #16]
  402232:	602a      	str	r2, [r5, #0]
  402234:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402238:	2200      	movs	r2, #0
  40223a:	81ab      	strh	r3, [r5, #12]
  40223c:	04db      	lsls	r3, r3, #19
  40223e:	606a      	str	r2, [r5, #4]
  402240:	d447      	bmi.n	4022d2 <__sflush_r+0xfa>
  402242:	6b29      	ldr	r1, [r5, #48]	; 0x30
  402244:	f8c8 6000 	str.w	r6, [r8]
  402248:	b311      	cbz	r1, 402290 <__sflush_r+0xb8>
  40224a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40224e:	4299      	cmp	r1, r3
  402250:	d002      	beq.n	402258 <__sflush_r+0x80>
  402252:	4640      	mov	r0, r8
  402254:	f000 f9de 	bl	402614 <_free_r>
  402258:	2000      	movs	r0, #0
  40225a:	6328      	str	r0, [r5, #48]	; 0x30
  40225c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402260:	692e      	ldr	r6, [r5, #16]
  402262:	b1ae      	cbz	r6, 402290 <__sflush_r+0xb8>
  402264:	682c      	ldr	r4, [r5, #0]
  402266:	602e      	str	r6, [r5, #0]
  402268:	0791      	lsls	r1, r2, #30
  40226a:	bf0c      	ite	eq
  40226c:	696b      	ldreq	r3, [r5, #20]
  40226e:	2300      	movne	r3, #0
  402270:	1ba4      	subs	r4, r4, r6
  402272:	60ab      	str	r3, [r5, #8]
  402274:	e00a      	b.n	40228c <__sflush_r+0xb4>
  402276:	4623      	mov	r3, r4
  402278:	4632      	mov	r2, r6
  40227a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40227c:	69e9      	ldr	r1, [r5, #28]
  40227e:	4640      	mov	r0, r8
  402280:	47b8      	blx	r7
  402282:	2800      	cmp	r0, #0
  402284:	eba4 0400 	sub.w	r4, r4, r0
  402288:	4406      	add	r6, r0
  40228a:	dd04      	ble.n	402296 <__sflush_r+0xbe>
  40228c:	2c00      	cmp	r4, #0
  40228e:	dcf2      	bgt.n	402276 <__sflush_r+0x9e>
  402290:	2000      	movs	r0, #0
  402292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402296:	89ab      	ldrh	r3, [r5, #12]
  402298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40229c:	81ab      	strh	r3, [r5, #12]
  40229e:	f04f 30ff 	mov.w	r0, #4294967295
  4022a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4022a6:	f8d8 4000 	ldr.w	r4, [r8]
  4022aa:	2c1d      	cmp	r4, #29
  4022ac:	d8f3      	bhi.n	402296 <__sflush_r+0xbe>
  4022ae:	4b19      	ldr	r3, [pc, #100]	; (402314 <__sflush_r+0x13c>)
  4022b0:	40e3      	lsrs	r3, r4
  4022b2:	43db      	mvns	r3, r3
  4022b4:	f013 0301 	ands.w	r3, r3, #1
  4022b8:	d1ed      	bne.n	402296 <__sflush_r+0xbe>
  4022ba:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4022be:	606b      	str	r3, [r5, #4]
  4022c0:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  4022c4:	6929      	ldr	r1, [r5, #16]
  4022c6:	81ab      	strh	r3, [r5, #12]
  4022c8:	04da      	lsls	r2, r3, #19
  4022ca:	6029      	str	r1, [r5, #0]
  4022cc:	d5b9      	bpl.n	402242 <__sflush_r+0x6a>
  4022ce:	2c00      	cmp	r4, #0
  4022d0:	d1b7      	bne.n	402242 <__sflush_r+0x6a>
  4022d2:	6528      	str	r0, [r5, #80]	; 0x50
  4022d4:	e7b5      	b.n	402242 <__sflush_r+0x6a>
  4022d6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4022d8:	2a00      	cmp	r2, #0
  4022da:	dc8c      	bgt.n	4021f6 <__sflush_r+0x1e>
  4022dc:	e7d8      	b.n	402290 <__sflush_r+0xb8>
  4022de:	2301      	movs	r3, #1
  4022e0:	69e9      	ldr	r1, [r5, #28]
  4022e2:	4640      	mov	r0, r8
  4022e4:	47a0      	blx	r4
  4022e6:	1c43      	adds	r3, r0, #1
  4022e8:	4602      	mov	r2, r0
  4022ea:	d002      	beq.n	4022f2 <__sflush_r+0x11a>
  4022ec:	89ab      	ldrh	r3, [r5, #12]
  4022ee:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4022f0:	e78e      	b.n	402210 <__sflush_r+0x38>
  4022f2:	f8d8 3000 	ldr.w	r3, [r8]
  4022f6:	2b00      	cmp	r3, #0
  4022f8:	d0f8      	beq.n	4022ec <__sflush_r+0x114>
  4022fa:	2b1d      	cmp	r3, #29
  4022fc:	d001      	beq.n	402302 <__sflush_r+0x12a>
  4022fe:	2b16      	cmp	r3, #22
  402300:	d102      	bne.n	402308 <__sflush_r+0x130>
  402302:	f8c8 6000 	str.w	r6, [r8]
  402306:	e7c3      	b.n	402290 <__sflush_r+0xb8>
  402308:	89ab      	ldrh	r3, [r5, #12]
  40230a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40230e:	81ab      	strh	r3, [r5, #12]
  402310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402314:	20400001 	.word	0x20400001

00402318 <_fflush_r>:
  402318:	b538      	push	{r3, r4, r5, lr}
  40231a:	460d      	mov	r5, r1
  40231c:	4604      	mov	r4, r0
  40231e:	b108      	cbz	r0, 402324 <_fflush_r+0xc>
  402320:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402322:	b1bb      	cbz	r3, 402354 <_fflush_r+0x3c>
  402324:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  402328:	b188      	cbz	r0, 40234e <_fflush_r+0x36>
  40232a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40232c:	07db      	lsls	r3, r3, #31
  40232e:	d401      	bmi.n	402334 <_fflush_r+0x1c>
  402330:	0581      	lsls	r1, r0, #22
  402332:	d517      	bpl.n	402364 <_fflush_r+0x4c>
  402334:	4620      	mov	r0, r4
  402336:	4629      	mov	r1, r5
  402338:	f7ff ff4e 	bl	4021d8 <__sflush_r>
  40233c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40233e:	07da      	lsls	r2, r3, #31
  402340:	4604      	mov	r4, r0
  402342:	d402      	bmi.n	40234a <_fflush_r+0x32>
  402344:	89ab      	ldrh	r3, [r5, #12]
  402346:	059b      	lsls	r3, r3, #22
  402348:	d507      	bpl.n	40235a <_fflush_r+0x42>
  40234a:	4620      	mov	r0, r4
  40234c:	bd38      	pop	{r3, r4, r5, pc}
  40234e:	4604      	mov	r4, r0
  402350:	4620      	mov	r0, r4
  402352:	bd38      	pop	{r3, r4, r5, pc}
  402354:	f000 f838 	bl	4023c8 <__sinit>
  402358:	e7e4      	b.n	402324 <_fflush_r+0xc>
  40235a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40235c:	f000 fbf6 	bl	402b4c <__retarget_lock_release_recursive>
  402360:	4620      	mov	r0, r4
  402362:	bd38      	pop	{r3, r4, r5, pc}
  402364:	6da8      	ldr	r0, [r5, #88]	; 0x58
  402366:	f000 fbef 	bl	402b48 <__retarget_lock_acquire_recursive>
  40236a:	e7e3      	b.n	402334 <_fflush_r+0x1c>

0040236c <_cleanup_r>:
  40236c:	4901      	ldr	r1, [pc, #4]	; (402374 <_cleanup_r+0x8>)
  40236e:	f000 bbaf 	b.w	402ad0 <_fwalk_reent>
  402372:	bf00      	nop
  402374:	00403ac1 	.word	0x00403ac1

00402378 <std.isra.0>:
  402378:	b510      	push	{r4, lr}
  40237a:	2300      	movs	r3, #0
  40237c:	4604      	mov	r4, r0
  40237e:	8181      	strh	r1, [r0, #12]
  402380:	81c2      	strh	r2, [r0, #14]
  402382:	6003      	str	r3, [r0, #0]
  402384:	6043      	str	r3, [r0, #4]
  402386:	6083      	str	r3, [r0, #8]
  402388:	6643      	str	r3, [r0, #100]	; 0x64
  40238a:	6103      	str	r3, [r0, #16]
  40238c:	6143      	str	r3, [r0, #20]
  40238e:	6183      	str	r3, [r0, #24]
  402390:	4619      	mov	r1, r3
  402392:	2208      	movs	r2, #8
  402394:	305c      	adds	r0, #92	; 0x5c
  402396:	f7fe fdeb 	bl	400f70 <memset>
  40239a:	4807      	ldr	r0, [pc, #28]	; (4023b8 <std.isra.0+0x40>)
  40239c:	4907      	ldr	r1, [pc, #28]	; (4023bc <std.isra.0+0x44>)
  40239e:	4a08      	ldr	r2, [pc, #32]	; (4023c0 <std.isra.0+0x48>)
  4023a0:	4b08      	ldr	r3, [pc, #32]	; (4023c4 <std.isra.0+0x4c>)
  4023a2:	6220      	str	r0, [r4, #32]
  4023a4:	61e4      	str	r4, [r4, #28]
  4023a6:	6261      	str	r1, [r4, #36]	; 0x24
  4023a8:	62a2      	str	r2, [r4, #40]	; 0x28
  4023aa:	62e3      	str	r3, [r4, #44]	; 0x2c
  4023ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4023b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4023b4:	f000 bbc4 	b.w	402b40 <__retarget_lock_init_recursive>
  4023b8:	00403805 	.word	0x00403805
  4023bc:	00403829 	.word	0x00403829
  4023c0:	00403865 	.word	0x00403865
  4023c4:	00403885 	.word	0x00403885

004023c8 <__sinit>:
  4023c8:	b510      	push	{r4, lr}
  4023ca:	4604      	mov	r4, r0
  4023cc:	4812      	ldr	r0, [pc, #72]	; (402418 <__sinit+0x50>)
  4023ce:	f000 fbbb 	bl	402b48 <__retarget_lock_acquire_recursive>
  4023d2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4023d4:	b9d2      	cbnz	r2, 40240c <__sinit+0x44>
  4023d6:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  4023da:	4810      	ldr	r0, [pc, #64]	; (40241c <__sinit+0x54>)
  4023dc:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4023e0:	2103      	movs	r1, #3
  4023e2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4023e6:	63e0      	str	r0, [r4, #60]	; 0x3c
  4023e8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4023ec:	6860      	ldr	r0, [r4, #4]
  4023ee:	2104      	movs	r1, #4
  4023f0:	f7ff ffc2 	bl	402378 <std.isra.0>
  4023f4:	2201      	movs	r2, #1
  4023f6:	2109      	movs	r1, #9
  4023f8:	68a0      	ldr	r0, [r4, #8]
  4023fa:	f7ff ffbd 	bl	402378 <std.isra.0>
  4023fe:	2202      	movs	r2, #2
  402400:	2112      	movs	r1, #18
  402402:	68e0      	ldr	r0, [r4, #12]
  402404:	f7ff ffb8 	bl	402378 <std.isra.0>
  402408:	2301      	movs	r3, #1
  40240a:	63a3      	str	r3, [r4, #56]	; 0x38
  40240c:	4802      	ldr	r0, [pc, #8]	; (402418 <__sinit+0x50>)
  40240e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402412:	f000 bb9b 	b.w	402b4c <__retarget_lock_release_recursive>
  402416:	bf00      	nop
  402418:	20000a34 	.word	0x20000a34
  40241c:	0040236d 	.word	0x0040236d

00402420 <__sfp_lock_acquire>:
  402420:	4801      	ldr	r0, [pc, #4]	; (402428 <__sfp_lock_acquire+0x8>)
  402422:	f000 bb91 	b.w	402b48 <__retarget_lock_acquire_recursive>
  402426:	bf00      	nop
  402428:	20000a48 	.word	0x20000a48

0040242c <__sfp_lock_release>:
  40242c:	4801      	ldr	r0, [pc, #4]	; (402434 <__sfp_lock_release+0x8>)
  40242e:	f000 bb8d 	b.w	402b4c <__retarget_lock_release_recursive>
  402432:	bf00      	nop
  402434:	20000a48 	.word	0x20000a48

00402438 <__libc_fini_array>:
  402438:	b538      	push	{r3, r4, r5, lr}
  40243a:	4c0a      	ldr	r4, [pc, #40]	; (402464 <__libc_fini_array+0x2c>)
  40243c:	4d0a      	ldr	r5, [pc, #40]	; (402468 <__libc_fini_array+0x30>)
  40243e:	1b64      	subs	r4, r4, r5
  402440:	10a4      	asrs	r4, r4, #2
  402442:	d00a      	beq.n	40245a <__libc_fini_array+0x22>
  402444:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402448:	3b01      	subs	r3, #1
  40244a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40244e:	3c01      	subs	r4, #1
  402450:	f855 3904 	ldr.w	r3, [r5], #-4
  402454:	4798      	blx	r3
  402456:	2c00      	cmp	r4, #0
  402458:	d1f9      	bne.n	40244e <__libc_fini_array+0x16>
  40245a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40245e:	f002 b825 	b.w	4044ac <_fini>
  402462:	bf00      	nop
  402464:	004044bc 	.word	0x004044bc
  402468:	004044b8 	.word	0x004044b8

0040246c <__fputwc>:
  40246c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402470:	b082      	sub	sp, #8
  402472:	4680      	mov	r8, r0
  402474:	4689      	mov	r9, r1
  402476:	4614      	mov	r4, r2
  402478:	f000 fb54 	bl	402b24 <__locale_mb_cur_max>
  40247c:	2801      	cmp	r0, #1
  40247e:	d036      	beq.n	4024ee <__fputwc+0x82>
  402480:	464a      	mov	r2, r9
  402482:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  402486:	a901      	add	r1, sp, #4
  402488:	4640      	mov	r0, r8
  40248a:	f001 fa57 	bl	40393c <_wcrtomb_r>
  40248e:	1c42      	adds	r2, r0, #1
  402490:	4606      	mov	r6, r0
  402492:	d025      	beq.n	4024e0 <__fputwc+0x74>
  402494:	b3a8      	cbz	r0, 402502 <__fputwc+0x96>
  402496:	f89d e004 	ldrb.w	lr, [sp, #4]
  40249a:	2500      	movs	r5, #0
  40249c:	f10d 0a04 	add.w	sl, sp, #4
  4024a0:	e009      	b.n	4024b6 <__fputwc+0x4a>
  4024a2:	6823      	ldr	r3, [r4, #0]
  4024a4:	1c5a      	adds	r2, r3, #1
  4024a6:	6022      	str	r2, [r4, #0]
  4024a8:	f883 e000 	strb.w	lr, [r3]
  4024ac:	3501      	adds	r5, #1
  4024ae:	42b5      	cmp	r5, r6
  4024b0:	d227      	bcs.n	402502 <__fputwc+0x96>
  4024b2:	f815 e00a 	ldrb.w	lr, [r5, sl]
  4024b6:	68a3      	ldr	r3, [r4, #8]
  4024b8:	3b01      	subs	r3, #1
  4024ba:	2b00      	cmp	r3, #0
  4024bc:	60a3      	str	r3, [r4, #8]
  4024be:	daf0      	bge.n	4024a2 <__fputwc+0x36>
  4024c0:	69a7      	ldr	r7, [r4, #24]
  4024c2:	42bb      	cmp	r3, r7
  4024c4:	4671      	mov	r1, lr
  4024c6:	4622      	mov	r2, r4
  4024c8:	4640      	mov	r0, r8
  4024ca:	db02      	blt.n	4024d2 <__fputwc+0x66>
  4024cc:	f1be 0f0a 	cmp.w	lr, #10
  4024d0:	d1e7      	bne.n	4024a2 <__fputwc+0x36>
  4024d2:	f001 f9db 	bl	40388c <__swbuf_r>
  4024d6:	1c43      	adds	r3, r0, #1
  4024d8:	d1e8      	bne.n	4024ac <__fputwc+0x40>
  4024da:	b002      	add	sp, #8
  4024dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4024e0:	89a3      	ldrh	r3, [r4, #12]
  4024e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4024e6:	81a3      	strh	r3, [r4, #12]
  4024e8:	b002      	add	sp, #8
  4024ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4024ee:	f109 33ff 	add.w	r3, r9, #4294967295
  4024f2:	2bfe      	cmp	r3, #254	; 0xfe
  4024f4:	d8c4      	bhi.n	402480 <__fputwc+0x14>
  4024f6:	fa5f fe89 	uxtb.w	lr, r9
  4024fa:	4606      	mov	r6, r0
  4024fc:	f88d e004 	strb.w	lr, [sp, #4]
  402500:	e7cb      	b.n	40249a <__fputwc+0x2e>
  402502:	4648      	mov	r0, r9
  402504:	b002      	add	sp, #8
  402506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40250a:	bf00      	nop

0040250c <_fputwc_r>:
  40250c:	b530      	push	{r4, r5, lr}
  40250e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  402510:	f013 0f01 	tst.w	r3, #1
  402514:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  402518:	4614      	mov	r4, r2
  40251a:	b083      	sub	sp, #12
  40251c:	4605      	mov	r5, r0
  40251e:	b29a      	uxth	r2, r3
  402520:	d101      	bne.n	402526 <_fputwc_r+0x1a>
  402522:	0590      	lsls	r0, r2, #22
  402524:	d51c      	bpl.n	402560 <_fputwc_r+0x54>
  402526:	0490      	lsls	r0, r2, #18
  402528:	d406      	bmi.n	402538 <_fputwc_r+0x2c>
  40252a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40252c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  402530:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  402534:	81a3      	strh	r3, [r4, #12]
  402536:	6662      	str	r2, [r4, #100]	; 0x64
  402538:	4628      	mov	r0, r5
  40253a:	4622      	mov	r2, r4
  40253c:	f7ff ff96 	bl	40246c <__fputwc>
  402540:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402542:	07da      	lsls	r2, r3, #31
  402544:	4605      	mov	r5, r0
  402546:	d402      	bmi.n	40254e <_fputwc_r+0x42>
  402548:	89a3      	ldrh	r3, [r4, #12]
  40254a:	059b      	lsls	r3, r3, #22
  40254c:	d502      	bpl.n	402554 <_fputwc_r+0x48>
  40254e:	4628      	mov	r0, r5
  402550:	b003      	add	sp, #12
  402552:	bd30      	pop	{r4, r5, pc}
  402554:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402556:	f000 faf9 	bl	402b4c <__retarget_lock_release_recursive>
  40255a:	4628      	mov	r0, r5
  40255c:	b003      	add	sp, #12
  40255e:	bd30      	pop	{r4, r5, pc}
  402560:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402562:	9101      	str	r1, [sp, #4]
  402564:	f000 faf0 	bl	402b48 <__retarget_lock_acquire_recursive>
  402568:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40256c:	9901      	ldr	r1, [sp, #4]
  40256e:	b29a      	uxth	r2, r3
  402570:	e7d9      	b.n	402526 <_fputwc_r+0x1a>
  402572:	bf00      	nop

00402574 <_malloc_trim_r>:
  402574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402576:	4f24      	ldr	r7, [pc, #144]	; (402608 <_malloc_trim_r+0x94>)
  402578:	460c      	mov	r4, r1
  40257a:	4606      	mov	r6, r0
  40257c:	f000 ff7e 	bl	40347c <__malloc_lock>
  402580:	68bb      	ldr	r3, [r7, #8]
  402582:	685d      	ldr	r5, [r3, #4]
  402584:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  402588:	310f      	adds	r1, #15
  40258a:	f025 0503 	bic.w	r5, r5, #3
  40258e:	4429      	add	r1, r5
  402590:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  402594:	f021 010f 	bic.w	r1, r1, #15
  402598:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40259c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4025a0:	db07      	blt.n	4025b2 <_malloc_trim_r+0x3e>
  4025a2:	2100      	movs	r1, #0
  4025a4:	4630      	mov	r0, r6
  4025a6:	f001 f91b 	bl	4037e0 <_sbrk_r>
  4025aa:	68bb      	ldr	r3, [r7, #8]
  4025ac:	442b      	add	r3, r5
  4025ae:	4298      	cmp	r0, r3
  4025b0:	d004      	beq.n	4025bc <_malloc_trim_r+0x48>
  4025b2:	4630      	mov	r0, r6
  4025b4:	f000 ff68 	bl	403488 <__malloc_unlock>
  4025b8:	2000      	movs	r0, #0
  4025ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4025bc:	4261      	negs	r1, r4
  4025be:	4630      	mov	r0, r6
  4025c0:	f001 f90e 	bl	4037e0 <_sbrk_r>
  4025c4:	3001      	adds	r0, #1
  4025c6:	d00d      	beq.n	4025e4 <_malloc_trim_r+0x70>
  4025c8:	4b10      	ldr	r3, [pc, #64]	; (40260c <_malloc_trim_r+0x98>)
  4025ca:	68ba      	ldr	r2, [r7, #8]
  4025cc:	6819      	ldr	r1, [r3, #0]
  4025ce:	1b2d      	subs	r5, r5, r4
  4025d0:	f045 0501 	orr.w	r5, r5, #1
  4025d4:	4630      	mov	r0, r6
  4025d6:	1b09      	subs	r1, r1, r4
  4025d8:	6055      	str	r5, [r2, #4]
  4025da:	6019      	str	r1, [r3, #0]
  4025dc:	f000 ff54 	bl	403488 <__malloc_unlock>
  4025e0:	2001      	movs	r0, #1
  4025e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4025e4:	2100      	movs	r1, #0
  4025e6:	4630      	mov	r0, r6
  4025e8:	f001 f8fa 	bl	4037e0 <_sbrk_r>
  4025ec:	68ba      	ldr	r2, [r7, #8]
  4025ee:	1a83      	subs	r3, r0, r2
  4025f0:	2b0f      	cmp	r3, #15
  4025f2:	ddde      	ble.n	4025b2 <_malloc_trim_r+0x3e>
  4025f4:	4c06      	ldr	r4, [pc, #24]	; (402610 <_malloc_trim_r+0x9c>)
  4025f6:	4905      	ldr	r1, [pc, #20]	; (40260c <_malloc_trim_r+0x98>)
  4025f8:	6824      	ldr	r4, [r4, #0]
  4025fa:	f043 0301 	orr.w	r3, r3, #1
  4025fe:	1b00      	subs	r0, r0, r4
  402600:	6053      	str	r3, [r2, #4]
  402602:	6008      	str	r0, [r1, #0]
  402604:	e7d5      	b.n	4025b2 <_malloc_trim_r+0x3e>
  402606:	bf00      	nop
  402608:	200005a8 	.word	0x200005a8
  40260c:	200009e8 	.word	0x200009e8
  402610:	200009b0 	.word	0x200009b0

00402614 <_free_r>:
  402614:	2900      	cmp	r1, #0
  402616:	d044      	beq.n	4026a2 <_free_r+0x8e>
  402618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40261c:	460d      	mov	r5, r1
  40261e:	4680      	mov	r8, r0
  402620:	f000 ff2c 	bl	40347c <__malloc_lock>
  402624:	f855 7c04 	ldr.w	r7, [r5, #-4]
  402628:	4969      	ldr	r1, [pc, #420]	; (4027d0 <_free_r+0x1bc>)
  40262a:	f027 0301 	bic.w	r3, r7, #1
  40262e:	f1a5 0408 	sub.w	r4, r5, #8
  402632:	18e2      	adds	r2, r4, r3
  402634:	688e      	ldr	r6, [r1, #8]
  402636:	6850      	ldr	r0, [r2, #4]
  402638:	42b2      	cmp	r2, r6
  40263a:	f020 0003 	bic.w	r0, r0, #3
  40263e:	d05e      	beq.n	4026fe <_free_r+0xea>
  402640:	07fe      	lsls	r6, r7, #31
  402642:	6050      	str	r0, [r2, #4]
  402644:	d40b      	bmi.n	40265e <_free_r+0x4a>
  402646:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40264a:	1be4      	subs	r4, r4, r7
  40264c:	f101 0e08 	add.w	lr, r1, #8
  402650:	68a5      	ldr	r5, [r4, #8]
  402652:	4575      	cmp	r5, lr
  402654:	443b      	add	r3, r7
  402656:	d06d      	beq.n	402734 <_free_r+0x120>
  402658:	68e7      	ldr	r7, [r4, #12]
  40265a:	60ef      	str	r7, [r5, #12]
  40265c:	60bd      	str	r5, [r7, #8]
  40265e:	1815      	adds	r5, r2, r0
  402660:	686d      	ldr	r5, [r5, #4]
  402662:	07ed      	lsls	r5, r5, #31
  402664:	d53e      	bpl.n	4026e4 <_free_r+0xd0>
  402666:	f043 0201 	orr.w	r2, r3, #1
  40266a:	6062      	str	r2, [r4, #4]
  40266c:	50e3      	str	r3, [r4, r3]
  40266e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402672:	d217      	bcs.n	4026a4 <_free_r+0x90>
  402674:	08db      	lsrs	r3, r3, #3
  402676:	1c58      	adds	r0, r3, #1
  402678:	109a      	asrs	r2, r3, #2
  40267a:	684d      	ldr	r5, [r1, #4]
  40267c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  402680:	60a7      	str	r7, [r4, #8]
  402682:	2301      	movs	r3, #1
  402684:	4093      	lsls	r3, r2
  402686:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40268a:	432b      	orrs	r3, r5
  40268c:	3a08      	subs	r2, #8
  40268e:	60e2      	str	r2, [r4, #12]
  402690:	604b      	str	r3, [r1, #4]
  402692:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  402696:	60fc      	str	r4, [r7, #12]
  402698:	4640      	mov	r0, r8
  40269a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40269e:	f000 bef3 	b.w	403488 <__malloc_unlock>
  4026a2:	4770      	bx	lr
  4026a4:	0a5a      	lsrs	r2, r3, #9
  4026a6:	2a04      	cmp	r2, #4
  4026a8:	d852      	bhi.n	402750 <_free_r+0x13c>
  4026aa:	099a      	lsrs	r2, r3, #6
  4026ac:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4026b0:	00ff      	lsls	r7, r7, #3
  4026b2:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4026b6:	19c8      	adds	r0, r1, r7
  4026b8:	59ca      	ldr	r2, [r1, r7]
  4026ba:	3808      	subs	r0, #8
  4026bc:	4290      	cmp	r0, r2
  4026be:	d04f      	beq.n	402760 <_free_r+0x14c>
  4026c0:	6851      	ldr	r1, [r2, #4]
  4026c2:	f021 0103 	bic.w	r1, r1, #3
  4026c6:	428b      	cmp	r3, r1
  4026c8:	d232      	bcs.n	402730 <_free_r+0x11c>
  4026ca:	6892      	ldr	r2, [r2, #8]
  4026cc:	4290      	cmp	r0, r2
  4026ce:	d1f7      	bne.n	4026c0 <_free_r+0xac>
  4026d0:	68c3      	ldr	r3, [r0, #12]
  4026d2:	60a0      	str	r0, [r4, #8]
  4026d4:	60e3      	str	r3, [r4, #12]
  4026d6:	609c      	str	r4, [r3, #8]
  4026d8:	60c4      	str	r4, [r0, #12]
  4026da:	4640      	mov	r0, r8
  4026dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4026e0:	f000 bed2 	b.w	403488 <__malloc_unlock>
  4026e4:	6895      	ldr	r5, [r2, #8]
  4026e6:	4f3b      	ldr	r7, [pc, #236]	; (4027d4 <_free_r+0x1c0>)
  4026e8:	42bd      	cmp	r5, r7
  4026ea:	4403      	add	r3, r0
  4026ec:	d040      	beq.n	402770 <_free_r+0x15c>
  4026ee:	68d0      	ldr	r0, [r2, #12]
  4026f0:	60e8      	str	r0, [r5, #12]
  4026f2:	f043 0201 	orr.w	r2, r3, #1
  4026f6:	6085      	str	r5, [r0, #8]
  4026f8:	6062      	str	r2, [r4, #4]
  4026fa:	50e3      	str	r3, [r4, r3]
  4026fc:	e7b7      	b.n	40266e <_free_r+0x5a>
  4026fe:	07ff      	lsls	r7, r7, #31
  402700:	4403      	add	r3, r0
  402702:	d407      	bmi.n	402714 <_free_r+0x100>
  402704:	f855 2c08 	ldr.w	r2, [r5, #-8]
  402708:	1aa4      	subs	r4, r4, r2
  40270a:	4413      	add	r3, r2
  40270c:	68a0      	ldr	r0, [r4, #8]
  40270e:	68e2      	ldr	r2, [r4, #12]
  402710:	60c2      	str	r2, [r0, #12]
  402712:	6090      	str	r0, [r2, #8]
  402714:	4a30      	ldr	r2, [pc, #192]	; (4027d8 <_free_r+0x1c4>)
  402716:	6812      	ldr	r2, [r2, #0]
  402718:	f043 0001 	orr.w	r0, r3, #1
  40271c:	4293      	cmp	r3, r2
  40271e:	6060      	str	r0, [r4, #4]
  402720:	608c      	str	r4, [r1, #8]
  402722:	d3b9      	bcc.n	402698 <_free_r+0x84>
  402724:	4b2d      	ldr	r3, [pc, #180]	; (4027dc <_free_r+0x1c8>)
  402726:	4640      	mov	r0, r8
  402728:	6819      	ldr	r1, [r3, #0]
  40272a:	f7ff ff23 	bl	402574 <_malloc_trim_r>
  40272e:	e7b3      	b.n	402698 <_free_r+0x84>
  402730:	4610      	mov	r0, r2
  402732:	e7cd      	b.n	4026d0 <_free_r+0xbc>
  402734:	1811      	adds	r1, r2, r0
  402736:	6849      	ldr	r1, [r1, #4]
  402738:	07c9      	lsls	r1, r1, #31
  40273a:	d444      	bmi.n	4027c6 <_free_r+0x1b2>
  40273c:	6891      	ldr	r1, [r2, #8]
  40273e:	68d2      	ldr	r2, [r2, #12]
  402740:	60ca      	str	r2, [r1, #12]
  402742:	4403      	add	r3, r0
  402744:	f043 0001 	orr.w	r0, r3, #1
  402748:	6091      	str	r1, [r2, #8]
  40274a:	6060      	str	r0, [r4, #4]
  40274c:	50e3      	str	r3, [r4, r3]
  40274e:	e7a3      	b.n	402698 <_free_r+0x84>
  402750:	2a14      	cmp	r2, #20
  402752:	d816      	bhi.n	402782 <_free_r+0x16e>
  402754:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  402758:	00ff      	lsls	r7, r7, #3
  40275a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40275e:	e7aa      	b.n	4026b6 <_free_r+0xa2>
  402760:	10aa      	asrs	r2, r5, #2
  402762:	2301      	movs	r3, #1
  402764:	684d      	ldr	r5, [r1, #4]
  402766:	4093      	lsls	r3, r2
  402768:	432b      	orrs	r3, r5
  40276a:	604b      	str	r3, [r1, #4]
  40276c:	4603      	mov	r3, r0
  40276e:	e7b0      	b.n	4026d2 <_free_r+0xbe>
  402770:	f043 0201 	orr.w	r2, r3, #1
  402774:	614c      	str	r4, [r1, #20]
  402776:	610c      	str	r4, [r1, #16]
  402778:	60e5      	str	r5, [r4, #12]
  40277a:	60a5      	str	r5, [r4, #8]
  40277c:	6062      	str	r2, [r4, #4]
  40277e:	50e3      	str	r3, [r4, r3]
  402780:	e78a      	b.n	402698 <_free_r+0x84>
  402782:	2a54      	cmp	r2, #84	; 0x54
  402784:	d806      	bhi.n	402794 <_free_r+0x180>
  402786:	0b1a      	lsrs	r2, r3, #12
  402788:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40278c:	00ff      	lsls	r7, r7, #3
  40278e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  402792:	e790      	b.n	4026b6 <_free_r+0xa2>
  402794:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402798:	d806      	bhi.n	4027a8 <_free_r+0x194>
  40279a:	0bda      	lsrs	r2, r3, #15
  40279c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4027a0:	00ff      	lsls	r7, r7, #3
  4027a2:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4027a6:	e786      	b.n	4026b6 <_free_r+0xa2>
  4027a8:	f240 5054 	movw	r0, #1364	; 0x554
  4027ac:	4282      	cmp	r2, r0
  4027ae:	d806      	bhi.n	4027be <_free_r+0x1aa>
  4027b0:	0c9a      	lsrs	r2, r3, #18
  4027b2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4027b6:	00ff      	lsls	r7, r7, #3
  4027b8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4027bc:	e77b      	b.n	4026b6 <_free_r+0xa2>
  4027be:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4027c2:	257e      	movs	r5, #126	; 0x7e
  4027c4:	e777      	b.n	4026b6 <_free_r+0xa2>
  4027c6:	f043 0101 	orr.w	r1, r3, #1
  4027ca:	6061      	str	r1, [r4, #4]
  4027cc:	6013      	str	r3, [r2, #0]
  4027ce:	e763      	b.n	402698 <_free_r+0x84>
  4027d0:	200005a8 	.word	0x200005a8
  4027d4:	200005b0 	.word	0x200005b0
  4027d8:	200009b4 	.word	0x200009b4
  4027dc:	20000a18 	.word	0x20000a18

004027e0 <__sfvwrite_r>:
  4027e0:	6893      	ldr	r3, [r2, #8]
  4027e2:	2b00      	cmp	r3, #0
  4027e4:	d073      	beq.n	4028ce <__sfvwrite_r+0xee>
  4027e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4027ea:	898b      	ldrh	r3, [r1, #12]
  4027ec:	b083      	sub	sp, #12
  4027ee:	460c      	mov	r4, r1
  4027f0:	0719      	lsls	r1, r3, #28
  4027f2:	9000      	str	r0, [sp, #0]
  4027f4:	4616      	mov	r6, r2
  4027f6:	d526      	bpl.n	402846 <__sfvwrite_r+0x66>
  4027f8:	6922      	ldr	r2, [r4, #16]
  4027fa:	b322      	cbz	r2, 402846 <__sfvwrite_r+0x66>
  4027fc:	f013 0002 	ands.w	r0, r3, #2
  402800:	6835      	ldr	r5, [r6, #0]
  402802:	d02c      	beq.n	40285e <__sfvwrite_r+0x7e>
  402804:	f04f 0900 	mov.w	r9, #0
  402808:	4fb0      	ldr	r7, [pc, #704]	; (402acc <__sfvwrite_r+0x2ec>)
  40280a:	46c8      	mov	r8, r9
  40280c:	46b2      	mov	sl, r6
  40280e:	45b8      	cmp	r8, r7
  402810:	4643      	mov	r3, r8
  402812:	464a      	mov	r2, r9
  402814:	bf28      	it	cs
  402816:	463b      	movcs	r3, r7
  402818:	9800      	ldr	r0, [sp, #0]
  40281a:	f1b8 0f00 	cmp.w	r8, #0
  40281e:	d050      	beq.n	4028c2 <__sfvwrite_r+0xe2>
  402820:	69e1      	ldr	r1, [r4, #28]
  402822:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402824:	47b0      	blx	r6
  402826:	2800      	cmp	r0, #0
  402828:	dd58      	ble.n	4028dc <__sfvwrite_r+0xfc>
  40282a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40282e:	1a1b      	subs	r3, r3, r0
  402830:	4481      	add	r9, r0
  402832:	eba8 0800 	sub.w	r8, r8, r0
  402836:	f8ca 3008 	str.w	r3, [sl, #8]
  40283a:	2b00      	cmp	r3, #0
  40283c:	d1e7      	bne.n	40280e <__sfvwrite_r+0x2e>
  40283e:	2000      	movs	r0, #0
  402840:	b003      	add	sp, #12
  402842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402846:	4621      	mov	r1, r4
  402848:	9800      	ldr	r0, [sp, #0]
  40284a:	f7ff fc51 	bl	4020f0 <__swsetup_r>
  40284e:	2800      	cmp	r0, #0
  402850:	f040 8133 	bne.w	402aba <__sfvwrite_r+0x2da>
  402854:	89a3      	ldrh	r3, [r4, #12]
  402856:	6835      	ldr	r5, [r6, #0]
  402858:	f013 0002 	ands.w	r0, r3, #2
  40285c:	d1d2      	bne.n	402804 <__sfvwrite_r+0x24>
  40285e:	f013 0901 	ands.w	r9, r3, #1
  402862:	d145      	bne.n	4028f0 <__sfvwrite_r+0x110>
  402864:	464f      	mov	r7, r9
  402866:	9601      	str	r6, [sp, #4]
  402868:	b337      	cbz	r7, 4028b8 <__sfvwrite_r+0xd8>
  40286a:	059a      	lsls	r2, r3, #22
  40286c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  402870:	f140 8083 	bpl.w	40297a <__sfvwrite_r+0x19a>
  402874:	4547      	cmp	r7, r8
  402876:	46c3      	mov	fp, r8
  402878:	f0c0 80ab 	bcc.w	4029d2 <__sfvwrite_r+0x1f2>
  40287c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  402880:	f040 80ac 	bne.w	4029dc <__sfvwrite_r+0x1fc>
  402884:	6820      	ldr	r0, [r4, #0]
  402886:	46ba      	mov	sl, r7
  402888:	465a      	mov	r2, fp
  40288a:	4649      	mov	r1, r9
  40288c:	f000 fd92 	bl	4033b4 <memmove>
  402890:	68a2      	ldr	r2, [r4, #8]
  402892:	6823      	ldr	r3, [r4, #0]
  402894:	eba2 0208 	sub.w	r2, r2, r8
  402898:	445b      	add	r3, fp
  40289a:	60a2      	str	r2, [r4, #8]
  40289c:	6023      	str	r3, [r4, #0]
  40289e:	9a01      	ldr	r2, [sp, #4]
  4028a0:	6893      	ldr	r3, [r2, #8]
  4028a2:	eba3 030a 	sub.w	r3, r3, sl
  4028a6:	44d1      	add	r9, sl
  4028a8:	eba7 070a 	sub.w	r7, r7, sl
  4028ac:	6093      	str	r3, [r2, #8]
  4028ae:	2b00      	cmp	r3, #0
  4028b0:	d0c5      	beq.n	40283e <__sfvwrite_r+0x5e>
  4028b2:	89a3      	ldrh	r3, [r4, #12]
  4028b4:	2f00      	cmp	r7, #0
  4028b6:	d1d8      	bne.n	40286a <__sfvwrite_r+0x8a>
  4028b8:	f8d5 9000 	ldr.w	r9, [r5]
  4028bc:	686f      	ldr	r7, [r5, #4]
  4028be:	3508      	adds	r5, #8
  4028c0:	e7d2      	b.n	402868 <__sfvwrite_r+0x88>
  4028c2:	f8d5 9000 	ldr.w	r9, [r5]
  4028c6:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4028ca:	3508      	adds	r5, #8
  4028cc:	e79f      	b.n	40280e <__sfvwrite_r+0x2e>
  4028ce:	2000      	movs	r0, #0
  4028d0:	4770      	bx	lr
  4028d2:	4621      	mov	r1, r4
  4028d4:	9800      	ldr	r0, [sp, #0]
  4028d6:	f7ff fd1f 	bl	402318 <_fflush_r>
  4028da:	b370      	cbz	r0, 40293a <__sfvwrite_r+0x15a>
  4028dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4028e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4028e4:	f04f 30ff 	mov.w	r0, #4294967295
  4028e8:	81a3      	strh	r3, [r4, #12]
  4028ea:	b003      	add	sp, #12
  4028ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4028f0:	4681      	mov	r9, r0
  4028f2:	4633      	mov	r3, r6
  4028f4:	464e      	mov	r6, r9
  4028f6:	46a8      	mov	r8, r5
  4028f8:	469a      	mov	sl, r3
  4028fa:	464d      	mov	r5, r9
  4028fc:	b34e      	cbz	r6, 402952 <__sfvwrite_r+0x172>
  4028fe:	b380      	cbz	r0, 402962 <__sfvwrite_r+0x182>
  402900:	6820      	ldr	r0, [r4, #0]
  402902:	6923      	ldr	r3, [r4, #16]
  402904:	6962      	ldr	r2, [r4, #20]
  402906:	45b1      	cmp	r9, r6
  402908:	46cb      	mov	fp, r9
  40290a:	bf28      	it	cs
  40290c:	46b3      	movcs	fp, r6
  40290e:	4298      	cmp	r0, r3
  402910:	465f      	mov	r7, fp
  402912:	d904      	bls.n	40291e <__sfvwrite_r+0x13e>
  402914:	68a3      	ldr	r3, [r4, #8]
  402916:	4413      	add	r3, r2
  402918:	459b      	cmp	fp, r3
  40291a:	f300 80a6 	bgt.w	402a6a <__sfvwrite_r+0x28a>
  40291e:	4593      	cmp	fp, r2
  402920:	db4b      	blt.n	4029ba <__sfvwrite_r+0x1da>
  402922:	4613      	mov	r3, r2
  402924:	6a67      	ldr	r7, [r4, #36]	; 0x24
  402926:	69e1      	ldr	r1, [r4, #28]
  402928:	9800      	ldr	r0, [sp, #0]
  40292a:	462a      	mov	r2, r5
  40292c:	47b8      	blx	r7
  40292e:	1e07      	subs	r7, r0, #0
  402930:	ddd4      	ble.n	4028dc <__sfvwrite_r+0xfc>
  402932:	ebb9 0907 	subs.w	r9, r9, r7
  402936:	d0cc      	beq.n	4028d2 <__sfvwrite_r+0xf2>
  402938:	2001      	movs	r0, #1
  40293a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40293e:	1bdb      	subs	r3, r3, r7
  402940:	443d      	add	r5, r7
  402942:	1bf6      	subs	r6, r6, r7
  402944:	f8ca 3008 	str.w	r3, [sl, #8]
  402948:	2b00      	cmp	r3, #0
  40294a:	f43f af78 	beq.w	40283e <__sfvwrite_r+0x5e>
  40294e:	2e00      	cmp	r6, #0
  402950:	d1d5      	bne.n	4028fe <__sfvwrite_r+0x11e>
  402952:	f108 0308 	add.w	r3, r8, #8
  402956:	e913 0060 	ldmdb	r3, {r5, r6}
  40295a:	4698      	mov	r8, r3
  40295c:	3308      	adds	r3, #8
  40295e:	2e00      	cmp	r6, #0
  402960:	d0f9      	beq.n	402956 <__sfvwrite_r+0x176>
  402962:	4632      	mov	r2, r6
  402964:	210a      	movs	r1, #10
  402966:	4628      	mov	r0, r5
  402968:	f000 fc3a 	bl	4031e0 <memchr>
  40296c:	2800      	cmp	r0, #0
  40296e:	f000 80a1 	beq.w	402ab4 <__sfvwrite_r+0x2d4>
  402972:	3001      	adds	r0, #1
  402974:	eba0 0905 	sub.w	r9, r0, r5
  402978:	e7c2      	b.n	402900 <__sfvwrite_r+0x120>
  40297a:	6820      	ldr	r0, [r4, #0]
  40297c:	6923      	ldr	r3, [r4, #16]
  40297e:	4298      	cmp	r0, r3
  402980:	d802      	bhi.n	402988 <__sfvwrite_r+0x1a8>
  402982:	6963      	ldr	r3, [r4, #20]
  402984:	429f      	cmp	r7, r3
  402986:	d25d      	bcs.n	402a44 <__sfvwrite_r+0x264>
  402988:	45b8      	cmp	r8, r7
  40298a:	bf28      	it	cs
  40298c:	46b8      	movcs	r8, r7
  40298e:	4642      	mov	r2, r8
  402990:	4649      	mov	r1, r9
  402992:	f000 fd0f 	bl	4033b4 <memmove>
  402996:	68a3      	ldr	r3, [r4, #8]
  402998:	6822      	ldr	r2, [r4, #0]
  40299a:	eba3 0308 	sub.w	r3, r3, r8
  40299e:	4442      	add	r2, r8
  4029a0:	60a3      	str	r3, [r4, #8]
  4029a2:	6022      	str	r2, [r4, #0]
  4029a4:	b10b      	cbz	r3, 4029aa <__sfvwrite_r+0x1ca>
  4029a6:	46c2      	mov	sl, r8
  4029a8:	e779      	b.n	40289e <__sfvwrite_r+0xbe>
  4029aa:	4621      	mov	r1, r4
  4029ac:	9800      	ldr	r0, [sp, #0]
  4029ae:	f7ff fcb3 	bl	402318 <_fflush_r>
  4029b2:	2800      	cmp	r0, #0
  4029b4:	d192      	bne.n	4028dc <__sfvwrite_r+0xfc>
  4029b6:	46c2      	mov	sl, r8
  4029b8:	e771      	b.n	40289e <__sfvwrite_r+0xbe>
  4029ba:	465a      	mov	r2, fp
  4029bc:	4629      	mov	r1, r5
  4029be:	f000 fcf9 	bl	4033b4 <memmove>
  4029c2:	68a2      	ldr	r2, [r4, #8]
  4029c4:	6823      	ldr	r3, [r4, #0]
  4029c6:	eba2 020b 	sub.w	r2, r2, fp
  4029ca:	445b      	add	r3, fp
  4029cc:	60a2      	str	r2, [r4, #8]
  4029ce:	6023      	str	r3, [r4, #0]
  4029d0:	e7af      	b.n	402932 <__sfvwrite_r+0x152>
  4029d2:	6820      	ldr	r0, [r4, #0]
  4029d4:	46b8      	mov	r8, r7
  4029d6:	46ba      	mov	sl, r7
  4029d8:	46bb      	mov	fp, r7
  4029da:	e755      	b.n	402888 <__sfvwrite_r+0xa8>
  4029dc:	6962      	ldr	r2, [r4, #20]
  4029de:	6820      	ldr	r0, [r4, #0]
  4029e0:	6921      	ldr	r1, [r4, #16]
  4029e2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4029e6:	eba0 0a01 	sub.w	sl, r0, r1
  4029ea:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4029ee:	f10a 0001 	add.w	r0, sl, #1
  4029f2:	ea4f 0868 	mov.w	r8, r8, asr #1
  4029f6:	4438      	add	r0, r7
  4029f8:	4540      	cmp	r0, r8
  4029fa:	4642      	mov	r2, r8
  4029fc:	bf84      	itt	hi
  4029fe:	4680      	movhi	r8, r0
  402a00:	4642      	movhi	r2, r8
  402a02:	055b      	lsls	r3, r3, #21
  402a04:	d544      	bpl.n	402a90 <__sfvwrite_r+0x2b0>
  402a06:	4611      	mov	r1, r2
  402a08:	9800      	ldr	r0, [sp, #0]
  402a0a:	f000 f921 	bl	402c50 <_malloc_r>
  402a0e:	4683      	mov	fp, r0
  402a10:	2800      	cmp	r0, #0
  402a12:	d055      	beq.n	402ac0 <__sfvwrite_r+0x2e0>
  402a14:	4652      	mov	r2, sl
  402a16:	6921      	ldr	r1, [r4, #16]
  402a18:	f000 fc32 	bl	403280 <memcpy>
  402a1c:	89a3      	ldrh	r3, [r4, #12]
  402a1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  402a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402a26:	81a3      	strh	r3, [r4, #12]
  402a28:	eb0b 000a 	add.w	r0, fp, sl
  402a2c:	eba8 030a 	sub.w	r3, r8, sl
  402a30:	f8c4 b010 	str.w	fp, [r4, #16]
  402a34:	f8c4 8014 	str.w	r8, [r4, #20]
  402a38:	6020      	str	r0, [r4, #0]
  402a3a:	60a3      	str	r3, [r4, #8]
  402a3c:	46b8      	mov	r8, r7
  402a3e:	46ba      	mov	sl, r7
  402a40:	46bb      	mov	fp, r7
  402a42:	e721      	b.n	402888 <__sfvwrite_r+0xa8>
  402a44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  402a48:	42b9      	cmp	r1, r7
  402a4a:	bf28      	it	cs
  402a4c:	4639      	movcs	r1, r7
  402a4e:	464a      	mov	r2, r9
  402a50:	fb91 f1f3 	sdiv	r1, r1, r3
  402a54:	9800      	ldr	r0, [sp, #0]
  402a56:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402a58:	fb03 f301 	mul.w	r3, r3, r1
  402a5c:	69e1      	ldr	r1, [r4, #28]
  402a5e:	47b0      	blx	r6
  402a60:	f1b0 0a00 	subs.w	sl, r0, #0
  402a64:	f73f af1b 	bgt.w	40289e <__sfvwrite_r+0xbe>
  402a68:	e738      	b.n	4028dc <__sfvwrite_r+0xfc>
  402a6a:	461a      	mov	r2, r3
  402a6c:	4629      	mov	r1, r5
  402a6e:	9301      	str	r3, [sp, #4]
  402a70:	f000 fca0 	bl	4033b4 <memmove>
  402a74:	6822      	ldr	r2, [r4, #0]
  402a76:	9b01      	ldr	r3, [sp, #4]
  402a78:	9800      	ldr	r0, [sp, #0]
  402a7a:	441a      	add	r2, r3
  402a7c:	6022      	str	r2, [r4, #0]
  402a7e:	4621      	mov	r1, r4
  402a80:	f7ff fc4a 	bl	402318 <_fflush_r>
  402a84:	9b01      	ldr	r3, [sp, #4]
  402a86:	2800      	cmp	r0, #0
  402a88:	f47f af28 	bne.w	4028dc <__sfvwrite_r+0xfc>
  402a8c:	461f      	mov	r7, r3
  402a8e:	e750      	b.n	402932 <__sfvwrite_r+0x152>
  402a90:	9800      	ldr	r0, [sp, #0]
  402a92:	f000 fcff 	bl	403494 <_realloc_r>
  402a96:	4683      	mov	fp, r0
  402a98:	2800      	cmp	r0, #0
  402a9a:	d1c5      	bne.n	402a28 <__sfvwrite_r+0x248>
  402a9c:	9d00      	ldr	r5, [sp, #0]
  402a9e:	6921      	ldr	r1, [r4, #16]
  402aa0:	4628      	mov	r0, r5
  402aa2:	f7ff fdb7 	bl	402614 <_free_r>
  402aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402aaa:	220c      	movs	r2, #12
  402aac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  402ab0:	602a      	str	r2, [r5, #0]
  402ab2:	e715      	b.n	4028e0 <__sfvwrite_r+0x100>
  402ab4:	f106 0901 	add.w	r9, r6, #1
  402ab8:	e722      	b.n	402900 <__sfvwrite_r+0x120>
  402aba:	f04f 30ff 	mov.w	r0, #4294967295
  402abe:	e6bf      	b.n	402840 <__sfvwrite_r+0x60>
  402ac0:	9a00      	ldr	r2, [sp, #0]
  402ac2:	230c      	movs	r3, #12
  402ac4:	6013      	str	r3, [r2, #0]
  402ac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402aca:	e709      	b.n	4028e0 <__sfvwrite_r+0x100>
  402acc:	7ffffc00 	.word	0x7ffffc00

00402ad0 <_fwalk_reent>:
  402ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402ad4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  402ad8:	d01f      	beq.n	402b1a <_fwalk_reent+0x4a>
  402ada:	4688      	mov	r8, r1
  402adc:	4606      	mov	r6, r0
  402ade:	f04f 0900 	mov.w	r9, #0
  402ae2:	687d      	ldr	r5, [r7, #4]
  402ae4:	68bc      	ldr	r4, [r7, #8]
  402ae6:	3d01      	subs	r5, #1
  402ae8:	d411      	bmi.n	402b0e <_fwalk_reent+0x3e>
  402aea:	89a3      	ldrh	r3, [r4, #12]
  402aec:	2b01      	cmp	r3, #1
  402aee:	f105 35ff 	add.w	r5, r5, #4294967295
  402af2:	d908      	bls.n	402b06 <_fwalk_reent+0x36>
  402af4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  402af8:	3301      	adds	r3, #1
  402afa:	4621      	mov	r1, r4
  402afc:	4630      	mov	r0, r6
  402afe:	d002      	beq.n	402b06 <_fwalk_reent+0x36>
  402b00:	47c0      	blx	r8
  402b02:	ea49 0900 	orr.w	r9, r9, r0
  402b06:	1c6b      	adds	r3, r5, #1
  402b08:	f104 0468 	add.w	r4, r4, #104	; 0x68
  402b0c:	d1ed      	bne.n	402aea <_fwalk_reent+0x1a>
  402b0e:	683f      	ldr	r7, [r7, #0]
  402b10:	2f00      	cmp	r7, #0
  402b12:	d1e6      	bne.n	402ae2 <_fwalk_reent+0x12>
  402b14:	4648      	mov	r0, r9
  402b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402b1a:	46b9      	mov	r9, r7
  402b1c:	4648      	mov	r0, r9
  402b1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402b22:	bf00      	nop

00402b24 <__locale_mb_cur_max>:
  402b24:	4b04      	ldr	r3, [pc, #16]	; (402b38 <__locale_mb_cur_max+0x14>)
  402b26:	4a05      	ldr	r2, [pc, #20]	; (402b3c <__locale_mb_cur_max+0x18>)
  402b28:	681b      	ldr	r3, [r3, #0]
  402b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  402b2c:	2b00      	cmp	r3, #0
  402b2e:	bf08      	it	eq
  402b30:	4613      	moveq	r3, r2
  402b32:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  402b36:	4770      	bx	lr
  402b38:	20000008 	.word	0x20000008
  402b3c:	2000043c 	.word	0x2000043c

00402b40 <__retarget_lock_init_recursive>:
  402b40:	4770      	bx	lr
  402b42:	bf00      	nop

00402b44 <__retarget_lock_close_recursive>:
  402b44:	4770      	bx	lr
  402b46:	bf00      	nop

00402b48 <__retarget_lock_acquire_recursive>:
  402b48:	4770      	bx	lr
  402b4a:	bf00      	nop

00402b4c <__retarget_lock_release_recursive>:
  402b4c:	4770      	bx	lr
  402b4e:	bf00      	nop

00402b50 <__swhatbuf_r>:
  402b50:	b570      	push	{r4, r5, r6, lr}
  402b52:	460c      	mov	r4, r1
  402b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402b58:	2900      	cmp	r1, #0
  402b5a:	b090      	sub	sp, #64	; 0x40
  402b5c:	4615      	mov	r5, r2
  402b5e:	461e      	mov	r6, r3
  402b60:	db14      	blt.n	402b8c <__swhatbuf_r+0x3c>
  402b62:	aa01      	add	r2, sp, #4
  402b64:	f001 f80e 	bl	403b84 <_fstat_r>
  402b68:	2800      	cmp	r0, #0
  402b6a:	db0f      	blt.n	402b8c <__swhatbuf_r+0x3c>
  402b6c:	9a02      	ldr	r2, [sp, #8]
  402b6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  402b72:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  402b76:	fab2 f282 	clz	r2, r2
  402b7a:	0952      	lsrs	r2, r2, #5
  402b7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402b80:	f44f 6000 	mov.w	r0, #2048	; 0x800
  402b84:	6032      	str	r2, [r6, #0]
  402b86:	602b      	str	r3, [r5, #0]
  402b88:	b010      	add	sp, #64	; 0x40
  402b8a:	bd70      	pop	{r4, r5, r6, pc}
  402b8c:	89a2      	ldrh	r2, [r4, #12]
  402b8e:	2300      	movs	r3, #0
  402b90:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  402b94:	6033      	str	r3, [r6, #0]
  402b96:	d004      	beq.n	402ba2 <__swhatbuf_r+0x52>
  402b98:	2240      	movs	r2, #64	; 0x40
  402b9a:	4618      	mov	r0, r3
  402b9c:	602a      	str	r2, [r5, #0]
  402b9e:	b010      	add	sp, #64	; 0x40
  402ba0:	bd70      	pop	{r4, r5, r6, pc}
  402ba2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402ba6:	602b      	str	r3, [r5, #0]
  402ba8:	b010      	add	sp, #64	; 0x40
  402baa:	bd70      	pop	{r4, r5, r6, pc}

00402bac <__smakebuf_r>:
  402bac:	898a      	ldrh	r2, [r1, #12]
  402bae:	0792      	lsls	r2, r2, #30
  402bb0:	460b      	mov	r3, r1
  402bb2:	d506      	bpl.n	402bc2 <__smakebuf_r+0x16>
  402bb4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  402bb8:	2101      	movs	r1, #1
  402bba:	601a      	str	r2, [r3, #0]
  402bbc:	611a      	str	r2, [r3, #16]
  402bbe:	6159      	str	r1, [r3, #20]
  402bc0:	4770      	bx	lr
  402bc2:	b5f0      	push	{r4, r5, r6, r7, lr}
  402bc4:	b083      	sub	sp, #12
  402bc6:	ab01      	add	r3, sp, #4
  402bc8:	466a      	mov	r2, sp
  402bca:	460c      	mov	r4, r1
  402bcc:	4606      	mov	r6, r0
  402bce:	f7ff ffbf 	bl	402b50 <__swhatbuf_r>
  402bd2:	9900      	ldr	r1, [sp, #0]
  402bd4:	4605      	mov	r5, r0
  402bd6:	4630      	mov	r0, r6
  402bd8:	f000 f83a 	bl	402c50 <_malloc_r>
  402bdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402be0:	b1d8      	cbz	r0, 402c1a <__smakebuf_r+0x6e>
  402be2:	9a01      	ldr	r2, [sp, #4]
  402be4:	4f15      	ldr	r7, [pc, #84]	; (402c3c <__smakebuf_r+0x90>)
  402be6:	9900      	ldr	r1, [sp, #0]
  402be8:	63f7      	str	r7, [r6, #60]	; 0x3c
  402bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402bee:	81a3      	strh	r3, [r4, #12]
  402bf0:	6020      	str	r0, [r4, #0]
  402bf2:	6120      	str	r0, [r4, #16]
  402bf4:	6161      	str	r1, [r4, #20]
  402bf6:	b91a      	cbnz	r2, 402c00 <__smakebuf_r+0x54>
  402bf8:	432b      	orrs	r3, r5
  402bfa:	81a3      	strh	r3, [r4, #12]
  402bfc:	b003      	add	sp, #12
  402bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402c00:	4630      	mov	r0, r6
  402c02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402c06:	f000 ffd1 	bl	403bac <_isatty_r>
  402c0a:	b1a0      	cbz	r0, 402c36 <__smakebuf_r+0x8a>
  402c0c:	89a3      	ldrh	r3, [r4, #12]
  402c0e:	f023 0303 	bic.w	r3, r3, #3
  402c12:	f043 0301 	orr.w	r3, r3, #1
  402c16:	b21b      	sxth	r3, r3
  402c18:	e7ee      	b.n	402bf8 <__smakebuf_r+0x4c>
  402c1a:	059a      	lsls	r2, r3, #22
  402c1c:	d4ee      	bmi.n	402bfc <__smakebuf_r+0x50>
  402c1e:	f023 0303 	bic.w	r3, r3, #3
  402c22:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402c26:	f043 0302 	orr.w	r3, r3, #2
  402c2a:	2101      	movs	r1, #1
  402c2c:	81a3      	strh	r3, [r4, #12]
  402c2e:	6022      	str	r2, [r4, #0]
  402c30:	6122      	str	r2, [r4, #16]
  402c32:	6161      	str	r1, [r4, #20]
  402c34:	e7e2      	b.n	402bfc <__smakebuf_r+0x50>
  402c36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402c3a:	e7dd      	b.n	402bf8 <__smakebuf_r+0x4c>
  402c3c:	0040236d 	.word	0x0040236d

00402c40 <malloc>:
  402c40:	4b02      	ldr	r3, [pc, #8]	; (402c4c <malloc+0xc>)
  402c42:	4601      	mov	r1, r0
  402c44:	6818      	ldr	r0, [r3, #0]
  402c46:	f000 b803 	b.w	402c50 <_malloc_r>
  402c4a:	bf00      	nop
  402c4c:	20000008 	.word	0x20000008

00402c50 <_malloc_r>:
  402c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402c54:	f101 060b 	add.w	r6, r1, #11
  402c58:	2e16      	cmp	r6, #22
  402c5a:	b083      	sub	sp, #12
  402c5c:	4605      	mov	r5, r0
  402c5e:	f240 809e 	bls.w	402d9e <_malloc_r+0x14e>
  402c62:	f036 0607 	bics.w	r6, r6, #7
  402c66:	f100 80bd 	bmi.w	402de4 <_malloc_r+0x194>
  402c6a:	42b1      	cmp	r1, r6
  402c6c:	f200 80ba 	bhi.w	402de4 <_malloc_r+0x194>
  402c70:	f000 fc04 	bl	40347c <__malloc_lock>
  402c74:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  402c78:	f0c0 8293 	bcc.w	4031a2 <_malloc_r+0x552>
  402c7c:	0a73      	lsrs	r3, r6, #9
  402c7e:	f000 80b8 	beq.w	402df2 <_malloc_r+0x1a2>
  402c82:	2b04      	cmp	r3, #4
  402c84:	f200 8179 	bhi.w	402f7a <_malloc_r+0x32a>
  402c88:	09b3      	lsrs	r3, r6, #6
  402c8a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  402c8e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  402c92:	00c3      	lsls	r3, r0, #3
  402c94:	4fbf      	ldr	r7, [pc, #764]	; (402f94 <_malloc_r+0x344>)
  402c96:	443b      	add	r3, r7
  402c98:	f1a3 0108 	sub.w	r1, r3, #8
  402c9c:	685c      	ldr	r4, [r3, #4]
  402c9e:	42a1      	cmp	r1, r4
  402ca0:	d106      	bne.n	402cb0 <_malloc_r+0x60>
  402ca2:	e00c      	b.n	402cbe <_malloc_r+0x6e>
  402ca4:	2a00      	cmp	r2, #0
  402ca6:	f280 80aa 	bge.w	402dfe <_malloc_r+0x1ae>
  402caa:	68e4      	ldr	r4, [r4, #12]
  402cac:	42a1      	cmp	r1, r4
  402cae:	d006      	beq.n	402cbe <_malloc_r+0x6e>
  402cb0:	6863      	ldr	r3, [r4, #4]
  402cb2:	f023 0303 	bic.w	r3, r3, #3
  402cb6:	1b9a      	subs	r2, r3, r6
  402cb8:	2a0f      	cmp	r2, #15
  402cba:	ddf3      	ble.n	402ca4 <_malloc_r+0x54>
  402cbc:	4670      	mov	r0, lr
  402cbe:	693c      	ldr	r4, [r7, #16]
  402cc0:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 402fa8 <_malloc_r+0x358>
  402cc4:	4574      	cmp	r4, lr
  402cc6:	f000 81ab 	beq.w	403020 <_malloc_r+0x3d0>
  402cca:	6863      	ldr	r3, [r4, #4]
  402ccc:	f023 0303 	bic.w	r3, r3, #3
  402cd0:	1b9a      	subs	r2, r3, r6
  402cd2:	2a0f      	cmp	r2, #15
  402cd4:	f300 8190 	bgt.w	402ff8 <_malloc_r+0x3a8>
  402cd8:	2a00      	cmp	r2, #0
  402cda:	f8c7 e014 	str.w	lr, [r7, #20]
  402cde:	f8c7 e010 	str.w	lr, [r7, #16]
  402ce2:	f280 809d 	bge.w	402e20 <_malloc_r+0x1d0>
  402ce6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402cea:	f080 8161 	bcs.w	402fb0 <_malloc_r+0x360>
  402cee:	08db      	lsrs	r3, r3, #3
  402cf0:	f103 0c01 	add.w	ip, r3, #1
  402cf4:	1099      	asrs	r1, r3, #2
  402cf6:	687a      	ldr	r2, [r7, #4]
  402cf8:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  402cfc:	f8c4 8008 	str.w	r8, [r4, #8]
  402d00:	2301      	movs	r3, #1
  402d02:	408b      	lsls	r3, r1
  402d04:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  402d08:	4313      	orrs	r3, r2
  402d0a:	3908      	subs	r1, #8
  402d0c:	60e1      	str	r1, [r4, #12]
  402d0e:	607b      	str	r3, [r7, #4]
  402d10:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  402d14:	f8c8 400c 	str.w	r4, [r8, #12]
  402d18:	1082      	asrs	r2, r0, #2
  402d1a:	2401      	movs	r4, #1
  402d1c:	4094      	lsls	r4, r2
  402d1e:	429c      	cmp	r4, r3
  402d20:	f200 808b 	bhi.w	402e3a <_malloc_r+0x1ea>
  402d24:	421c      	tst	r4, r3
  402d26:	d106      	bne.n	402d36 <_malloc_r+0xe6>
  402d28:	f020 0003 	bic.w	r0, r0, #3
  402d2c:	0064      	lsls	r4, r4, #1
  402d2e:	421c      	tst	r4, r3
  402d30:	f100 0004 	add.w	r0, r0, #4
  402d34:	d0fa      	beq.n	402d2c <_malloc_r+0xdc>
  402d36:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  402d3a:	46cc      	mov	ip, r9
  402d3c:	4680      	mov	r8, r0
  402d3e:	f8dc 300c 	ldr.w	r3, [ip, #12]
  402d42:	459c      	cmp	ip, r3
  402d44:	d107      	bne.n	402d56 <_malloc_r+0x106>
  402d46:	e16d      	b.n	403024 <_malloc_r+0x3d4>
  402d48:	2a00      	cmp	r2, #0
  402d4a:	f280 817b 	bge.w	403044 <_malloc_r+0x3f4>
  402d4e:	68db      	ldr	r3, [r3, #12]
  402d50:	459c      	cmp	ip, r3
  402d52:	f000 8167 	beq.w	403024 <_malloc_r+0x3d4>
  402d56:	6859      	ldr	r1, [r3, #4]
  402d58:	f021 0103 	bic.w	r1, r1, #3
  402d5c:	1b8a      	subs	r2, r1, r6
  402d5e:	2a0f      	cmp	r2, #15
  402d60:	ddf2      	ble.n	402d48 <_malloc_r+0xf8>
  402d62:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  402d66:	f8d3 8008 	ldr.w	r8, [r3, #8]
  402d6a:	9300      	str	r3, [sp, #0]
  402d6c:	199c      	adds	r4, r3, r6
  402d6e:	4628      	mov	r0, r5
  402d70:	f046 0601 	orr.w	r6, r6, #1
  402d74:	f042 0501 	orr.w	r5, r2, #1
  402d78:	605e      	str	r6, [r3, #4]
  402d7a:	f8c8 c00c 	str.w	ip, [r8, #12]
  402d7e:	f8cc 8008 	str.w	r8, [ip, #8]
  402d82:	617c      	str	r4, [r7, #20]
  402d84:	613c      	str	r4, [r7, #16]
  402d86:	f8c4 e00c 	str.w	lr, [r4, #12]
  402d8a:	f8c4 e008 	str.w	lr, [r4, #8]
  402d8e:	6065      	str	r5, [r4, #4]
  402d90:	505a      	str	r2, [r3, r1]
  402d92:	f000 fb79 	bl	403488 <__malloc_unlock>
  402d96:	9b00      	ldr	r3, [sp, #0]
  402d98:	f103 0408 	add.w	r4, r3, #8
  402d9c:	e01e      	b.n	402ddc <_malloc_r+0x18c>
  402d9e:	2910      	cmp	r1, #16
  402da0:	d820      	bhi.n	402de4 <_malloc_r+0x194>
  402da2:	f000 fb6b 	bl	40347c <__malloc_lock>
  402da6:	2610      	movs	r6, #16
  402da8:	2318      	movs	r3, #24
  402daa:	2002      	movs	r0, #2
  402dac:	4f79      	ldr	r7, [pc, #484]	; (402f94 <_malloc_r+0x344>)
  402dae:	443b      	add	r3, r7
  402db0:	f1a3 0208 	sub.w	r2, r3, #8
  402db4:	685c      	ldr	r4, [r3, #4]
  402db6:	4294      	cmp	r4, r2
  402db8:	f000 813d 	beq.w	403036 <_malloc_r+0x3e6>
  402dbc:	6863      	ldr	r3, [r4, #4]
  402dbe:	68e1      	ldr	r1, [r4, #12]
  402dc0:	68a6      	ldr	r6, [r4, #8]
  402dc2:	f023 0303 	bic.w	r3, r3, #3
  402dc6:	4423      	add	r3, r4
  402dc8:	4628      	mov	r0, r5
  402dca:	685a      	ldr	r2, [r3, #4]
  402dcc:	60f1      	str	r1, [r6, #12]
  402dce:	f042 0201 	orr.w	r2, r2, #1
  402dd2:	608e      	str	r6, [r1, #8]
  402dd4:	605a      	str	r2, [r3, #4]
  402dd6:	f000 fb57 	bl	403488 <__malloc_unlock>
  402dda:	3408      	adds	r4, #8
  402ddc:	4620      	mov	r0, r4
  402dde:	b003      	add	sp, #12
  402de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402de4:	2400      	movs	r4, #0
  402de6:	230c      	movs	r3, #12
  402de8:	4620      	mov	r0, r4
  402dea:	602b      	str	r3, [r5, #0]
  402dec:	b003      	add	sp, #12
  402dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402df2:	2040      	movs	r0, #64	; 0x40
  402df4:	f44f 7300 	mov.w	r3, #512	; 0x200
  402df8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  402dfc:	e74a      	b.n	402c94 <_malloc_r+0x44>
  402dfe:	4423      	add	r3, r4
  402e00:	68e1      	ldr	r1, [r4, #12]
  402e02:	685a      	ldr	r2, [r3, #4]
  402e04:	68a6      	ldr	r6, [r4, #8]
  402e06:	f042 0201 	orr.w	r2, r2, #1
  402e0a:	60f1      	str	r1, [r6, #12]
  402e0c:	4628      	mov	r0, r5
  402e0e:	608e      	str	r6, [r1, #8]
  402e10:	605a      	str	r2, [r3, #4]
  402e12:	f000 fb39 	bl	403488 <__malloc_unlock>
  402e16:	3408      	adds	r4, #8
  402e18:	4620      	mov	r0, r4
  402e1a:	b003      	add	sp, #12
  402e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402e20:	4423      	add	r3, r4
  402e22:	4628      	mov	r0, r5
  402e24:	685a      	ldr	r2, [r3, #4]
  402e26:	f042 0201 	orr.w	r2, r2, #1
  402e2a:	605a      	str	r2, [r3, #4]
  402e2c:	f000 fb2c 	bl	403488 <__malloc_unlock>
  402e30:	3408      	adds	r4, #8
  402e32:	4620      	mov	r0, r4
  402e34:	b003      	add	sp, #12
  402e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402e3a:	68bc      	ldr	r4, [r7, #8]
  402e3c:	6863      	ldr	r3, [r4, #4]
  402e3e:	f023 0803 	bic.w	r8, r3, #3
  402e42:	45b0      	cmp	r8, r6
  402e44:	d304      	bcc.n	402e50 <_malloc_r+0x200>
  402e46:	eba8 0306 	sub.w	r3, r8, r6
  402e4a:	2b0f      	cmp	r3, #15
  402e4c:	f300 8085 	bgt.w	402f5a <_malloc_r+0x30a>
  402e50:	f8df 9158 	ldr.w	r9, [pc, #344]	; 402fac <_malloc_r+0x35c>
  402e54:	4b50      	ldr	r3, [pc, #320]	; (402f98 <_malloc_r+0x348>)
  402e56:	f8d9 2000 	ldr.w	r2, [r9]
  402e5a:	681b      	ldr	r3, [r3, #0]
  402e5c:	3201      	adds	r2, #1
  402e5e:	4433      	add	r3, r6
  402e60:	eb04 0a08 	add.w	sl, r4, r8
  402e64:	f000 8155 	beq.w	403112 <_malloc_r+0x4c2>
  402e68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  402e6c:	330f      	adds	r3, #15
  402e6e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  402e72:	f02b 0b0f 	bic.w	fp, fp, #15
  402e76:	4659      	mov	r1, fp
  402e78:	4628      	mov	r0, r5
  402e7a:	f000 fcb1 	bl	4037e0 <_sbrk_r>
  402e7e:	1c41      	adds	r1, r0, #1
  402e80:	4602      	mov	r2, r0
  402e82:	f000 80fc 	beq.w	40307e <_malloc_r+0x42e>
  402e86:	4582      	cmp	sl, r0
  402e88:	f200 80f7 	bhi.w	40307a <_malloc_r+0x42a>
  402e8c:	4b43      	ldr	r3, [pc, #268]	; (402f9c <_malloc_r+0x34c>)
  402e8e:	6819      	ldr	r1, [r3, #0]
  402e90:	4459      	add	r1, fp
  402e92:	6019      	str	r1, [r3, #0]
  402e94:	f000 814d 	beq.w	403132 <_malloc_r+0x4e2>
  402e98:	f8d9 0000 	ldr.w	r0, [r9]
  402e9c:	3001      	adds	r0, #1
  402e9e:	bf1b      	ittet	ne
  402ea0:	eba2 0a0a 	subne.w	sl, r2, sl
  402ea4:	4451      	addne	r1, sl
  402ea6:	f8c9 2000 	streq.w	r2, [r9]
  402eaa:	6019      	strne	r1, [r3, #0]
  402eac:	f012 0107 	ands.w	r1, r2, #7
  402eb0:	f000 8115 	beq.w	4030de <_malloc_r+0x48e>
  402eb4:	f1c1 0008 	rsb	r0, r1, #8
  402eb8:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  402ebc:	4402      	add	r2, r0
  402ebe:	3108      	adds	r1, #8
  402ec0:	eb02 090b 	add.w	r9, r2, fp
  402ec4:	f3c9 090b 	ubfx	r9, r9, #0, #12
  402ec8:	eba1 0909 	sub.w	r9, r1, r9
  402ecc:	4649      	mov	r1, r9
  402ece:	4628      	mov	r0, r5
  402ed0:	9301      	str	r3, [sp, #4]
  402ed2:	9200      	str	r2, [sp, #0]
  402ed4:	f000 fc84 	bl	4037e0 <_sbrk_r>
  402ed8:	1c43      	adds	r3, r0, #1
  402eda:	e89d 000c 	ldmia.w	sp, {r2, r3}
  402ede:	f000 8143 	beq.w	403168 <_malloc_r+0x518>
  402ee2:	1a80      	subs	r0, r0, r2
  402ee4:	4448      	add	r0, r9
  402ee6:	f040 0001 	orr.w	r0, r0, #1
  402eea:	6819      	ldr	r1, [r3, #0]
  402eec:	60ba      	str	r2, [r7, #8]
  402eee:	4449      	add	r1, r9
  402ef0:	42bc      	cmp	r4, r7
  402ef2:	6050      	str	r0, [r2, #4]
  402ef4:	6019      	str	r1, [r3, #0]
  402ef6:	d017      	beq.n	402f28 <_malloc_r+0x2d8>
  402ef8:	f1b8 0f0f 	cmp.w	r8, #15
  402efc:	f240 80fb 	bls.w	4030f6 <_malloc_r+0x4a6>
  402f00:	6860      	ldr	r0, [r4, #4]
  402f02:	f1a8 020c 	sub.w	r2, r8, #12
  402f06:	f022 0207 	bic.w	r2, r2, #7
  402f0a:	eb04 0e02 	add.w	lr, r4, r2
  402f0e:	f000 0001 	and.w	r0, r0, #1
  402f12:	f04f 0c05 	mov.w	ip, #5
  402f16:	4310      	orrs	r0, r2
  402f18:	2a0f      	cmp	r2, #15
  402f1a:	6060      	str	r0, [r4, #4]
  402f1c:	f8ce c004 	str.w	ip, [lr, #4]
  402f20:	f8ce c008 	str.w	ip, [lr, #8]
  402f24:	f200 8117 	bhi.w	403156 <_malloc_r+0x506>
  402f28:	4b1d      	ldr	r3, [pc, #116]	; (402fa0 <_malloc_r+0x350>)
  402f2a:	68bc      	ldr	r4, [r7, #8]
  402f2c:	681a      	ldr	r2, [r3, #0]
  402f2e:	4291      	cmp	r1, r2
  402f30:	bf88      	it	hi
  402f32:	6019      	strhi	r1, [r3, #0]
  402f34:	4b1b      	ldr	r3, [pc, #108]	; (402fa4 <_malloc_r+0x354>)
  402f36:	681a      	ldr	r2, [r3, #0]
  402f38:	4291      	cmp	r1, r2
  402f3a:	6862      	ldr	r2, [r4, #4]
  402f3c:	bf88      	it	hi
  402f3e:	6019      	strhi	r1, [r3, #0]
  402f40:	f022 0203 	bic.w	r2, r2, #3
  402f44:	4296      	cmp	r6, r2
  402f46:	eba2 0306 	sub.w	r3, r2, r6
  402f4a:	d801      	bhi.n	402f50 <_malloc_r+0x300>
  402f4c:	2b0f      	cmp	r3, #15
  402f4e:	dc04      	bgt.n	402f5a <_malloc_r+0x30a>
  402f50:	4628      	mov	r0, r5
  402f52:	f000 fa99 	bl	403488 <__malloc_unlock>
  402f56:	2400      	movs	r4, #0
  402f58:	e740      	b.n	402ddc <_malloc_r+0x18c>
  402f5a:	19a2      	adds	r2, r4, r6
  402f5c:	f043 0301 	orr.w	r3, r3, #1
  402f60:	f046 0601 	orr.w	r6, r6, #1
  402f64:	6066      	str	r6, [r4, #4]
  402f66:	4628      	mov	r0, r5
  402f68:	60ba      	str	r2, [r7, #8]
  402f6a:	6053      	str	r3, [r2, #4]
  402f6c:	f000 fa8c 	bl	403488 <__malloc_unlock>
  402f70:	3408      	adds	r4, #8
  402f72:	4620      	mov	r0, r4
  402f74:	b003      	add	sp, #12
  402f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402f7a:	2b14      	cmp	r3, #20
  402f7c:	d971      	bls.n	403062 <_malloc_r+0x412>
  402f7e:	2b54      	cmp	r3, #84	; 0x54
  402f80:	f200 80a3 	bhi.w	4030ca <_malloc_r+0x47a>
  402f84:	0b33      	lsrs	r3, r6, #12
  402f86:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  402f8a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  402f8e:	00c3      	lsls	r3, r0, #3
  402f90:	e680      	b.n	402c94 <_malloc_r+0x44>
  402f92:	bf00      	nop
  402f94:	200005a8 	.word	0x200005a8
  402f98:	20000a18 	.word	0x20000a18
  402f9c:	200009e8 	.word	0x200009e8
  402fa0:	20000a10 	.word	0x20000a10
  402fa4:	20000a14 	.word	0x20000a14
  402fa8:	200005b0 	.word	0x200005b0
  402fac:	200009b0 	.word	0x200009b0
  402fb0:	0a5a      	lsrs	r2, r3, #9
  402fb2:	2a04      	cmp	r2, #4
  402fb4:	d95b      	bls.n	40306e <_malloc_r+0x41e>
  402fb6:	2a14      	cmp	r2, #20
  402fb8:	f200 80ae 	bhi.w	403118 <_malloc_r+0x4c8>
  402fbc:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  402fc0:	00c9      	lsls	r1, r1, #3
  402fc2:	325b      	adds	r2, #91	; 0x5b
  402fc4:	eb07 0c01 	add.w	ip, r7, r1
  402fc8:	5879      	ldr	r1, [r7, r1]
  402fca:	f1ac 0c08 	sub.w	ip, ip, #8
  402fce:	458c      	cmp	ip, r1
  402fd0:	f000 8088 	beq.w	4030e4 <_malloc_r+0x494>
  402fd4:	684a      	ldr	r2, [r1, #4]
  402fd6:	f022 0203 	bic.w	r2, r2, #3
  402fda:	4293      	cmp	r3, r2
  402fdc:	d273      	bcs.n	4030c6 <_malloc_r+0x476>
  402fde:	6889      	ldr	r1, [r1, #8]
  402fe0:	458c      	cmp	ip, r1
  402fe2:	d1f7      	bne.n	402fd4 <_malloc_r+0x384>
  402fe4:	f8dc 200c 	ldr.w	r2, [ip, #12]
  402fe8:	687b      	ldr	r3, [r7, #4]
  402fea:	60e2      	str	r2, [r4, #12]
  402fec:	f8c4 c008 	str.w	ip, [r4, #8]
  402ff0:	6094      	str	r4, [r2, #8]
  402ff2:	f8cc 400c 	str.w	r4, [ip, #12]
  402ff6:	e68f      	b.n	402d18 <_malloc_r+0xc8>
  402ff8:	19a1      	adds	r1, r4, r6
  402ffa:	f046 0c01 	orr.w	ip, r6, #1
  402ffe:	f042 0601 	orr.w	r6, r2, #1
  403002:	f8c4 c004 	str.w	ip, [r4, #4]
  403006:	4628      	mov	r0, r5
  403008:	6179      	str	r1, [r7, #20]
  40300a:	6139      	str	r1, [r7, #16]
  40300c:	f8c1 e00c 	str.w	lr, [r1, #12]
  403010:	f8c1 e008 	str.w	lr, [r1, #8]
  403014:	604e      	str	r6, [r1, #4]
  403016:	50e2      	str	r2, [r4, r3]
  403018:	f000 fa36 	bl	403488 <__malloc_unlock>
  40301c:	3408      	adds	r4, #8
  40301e:	e6dd      	b.n	402ddc <_malloc_r+0x18c>
  403020:	687b      	ldr	r3, [r7, #4]
  403022:	e679      	b.n	402d18 <_malloc_r+0xc8>
  403024:	f108 0801 	add.w	r8, r8, #1
  403028:	f018 0f03 	tst.w	r8, #3
  40302c:	f10c 0c08 	add.w	ip, ip, #8
  403030:	f47f ae85 	bne.w	402d3e <_malloc_r+0xee>
  403034:	e02d      	b.n	403092 <_malloc_r+0x442>
  403036:	68dc      	ldr	r4, [r3, #12]
  403038:	42a3      	cmp	r3, r4
  40303a:	bf08      	it	eq
  40303c:	3002      	addeq	r0, #2
  40303e:	f43f ae3e 	beq.w	402cbe <_malloc_r+0x6e>
  403042:	e6bb      	b.n	402dbc <_malloc_r+0x16c>
  403044:	4419      	add	r1, r3
  403046:	461c      	mov	r4, r3
  403048:	684a      	ldr	r2, [r1, #4]
  40304a:	68db      	ldr	r3, [r3, #12]
  40304c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403050:	f042 0201 	orr.w	r2, r2, #1
  403054:	604a      	str	r2, [r1, #4]
  403056:	4628      	mov	r0, r5
  403058:	60f3      	str	r3, [r6, #12]
  40305a:	609e      	str	r6, [r3, #8]
  40305c:	f000 fa14 	bl	403488 <__malloc_unlock>
  403060:	e6bc      	b.n	402ddc <_malloc_r+0x18c>
  403062:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  403066:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40306a:	00c3      	lsls	r3, r0, #3
  40306c:	e612      	b.n	402c94 <_malloc_r+0x44>
  40306e:	099a      	lsrs	r2, r3, #6
  403070:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403074:	00c9      	lsls	r1, r1, #3
  403076:	3238      	adds	r2, #56	; 0x38
  403078:	e7a4      	b.n	402fc4 <_malloc_r+0x374>
  40307a:	42bc      	cmp	r4, r7
  40307c:	d054      	beq.n	403128 <_malloc_r+0x4d8>
  40307e:	68bc      	ldr	r4, [r7, #8]
  403080:	6862      	ldr	r2, [r4, #4]
  403082:	f022 0203 	bic.w	r2, r2, #3
  403086:	e75d      	b.n	402f44 <_malloc_r+0x2f4>
  403088:	f859 3908 	ldr.w	r3, [r9], #-8
  40308c:	4599      	cmp	r9, r3
  40308e:	f040 8086 	bne.w	40319e <_malloc_r+0x54e>
  403092:	f010 0f03 	tst.w	r0, #3
  403096:	f100 30ff 	add.w	r0, r0, #4294967295
  40309a:	d1f5      	bne.n	403088 <_malloc_r+0x438>
  40309c:	687b      	ldr	r3, [r7, #4]
  40309e:	ea23 0304 	bic.w	r3, r3, r4
  4030a2:	607b      	str	r3, [r7, #4]
  4030a4:	0064      	lsls	r4, r4, #1
  4030a6:	429c      	cmp	r4, r3
  4030a8:	f63f aec7 	bhi.w	402e3a <_malloc_r+0x1ea>
  4030ac:	2c00      	cmp	r4, #0
  4030ae:	f43f aec4 	beq.w	402e3a <_malloc_r+0x1ea>
  4030b2:	421c      	tst	r4, r3
  4030b4:	4640      	mov	r0, r8
  4030b6:	f47f ae3e 	bne.w	402d36 <_malloc_r+0xe6>
  4030ba:	0064      	lsls	r4, r4, #1
  4030bc:	421c      	tst	r4, r3
  4030be:	f100 0004 	add.w	r0, r0, #4
  4030c2:	d0fa      	beq.n	4030ba <_malloc_r+0x46a>
  4030c4:	e637      	b.n	402d36 <_malloc_r+0xe6>
  4030c6:	468c      	mov	ip, r1
  4030c8:	e78c      	b.n	402fe4 <_malloc_r+0x394>
  4030ca:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4030ce:	d815      	bhi.n	4030fc <_malloc_r+0x4ac>
  4030d0:	0bf3      	lsrs	r3, r6, #15
  4030d2:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4030d6:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4030da:	00c3      	lsls	r3, r0, #3
  4030dc:	e5da      	b.n	402c94 <_malloc_r+0x44>
  4030de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4030e2:	e6ed      	b.n	402ec0 <_malloc_r+0x270>
  4030e4:	687b      	ldr	r3, [r7, #4]
  4030e6:	1092      	asrs	r2, r2, #2
  4030e8:	2101      	movs	r1, #1
  4030ea:	fa01 f202 	lsl.w	r2, r1, r2
  4030ee:	4313      	orrs	r3, r2
  4030f0:	607b      	str	r3, [r7, #4]
  4030f2:	4662      	mov	r2, ip
  4030f4:	e779      	b.n	402fea <_malloc_r+0x39a>
  4030f6:	2301      	movs	r3, #1
  4030f8:	6053      	str	r3, [r2, #4]
  4030fa:	e729      	b.n	402f50 <_malloc_r+0x300>
  4030fc:	f240 5254 	movw	r2, #1364	; 0x554
  403100:	4293      	cmp	r3, r2
  403102:	d822      	bhi.n	40314a <_malloc_r+0x4fa>
  403104:	0cb3      	lsrs	r3, r6, #18
  403106:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40310a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40310e:	00c3      	lsls	r3, r0, #3
  403110:	e5c0      	b.n	402c94 <_malloc_r+0x44>
  403112:	f103 0b10 	add.w	fp, r3, #16
  403116:	e6ae      	b.n	402e76 <_malloc_r+0x226>
  403118:	2a54      	cmp	r2, #84	; 0x54
  40311a:	d829      	bhi.n	403170 <_malloc_r+0x520>
  40311c:	0b1a      	lsrs	r2, r3, #12
  40311e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403122:	00c9      	lsls	r1, r1, #3
  403124:	326e      	adds	r2, #110	; 0x6e
  403126:	e74d      	b.n	402fc4 <_malloc_r+0x374>
  403128:	4b20      	ldr	r3, [pc, #128]	; (4031ac <_malloc_r+0x55c>)
  40312a:	6819      	ldr	r1, [r3, #0]
  40312c:	4459      	add	r1, fp
  40312e:	6019      	str	r1, [r3, #0]
  403130:	e6b2      	b.n	402e98 <_malloc_r+0x248>
  403132:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403136:	2800      	cmp	r0, #0
  403138:	f47f aeae 	bne.w	402e98 <_malloc_r+0x248>
  40313c:	eb08 030b 	add.w	r3, r8, fp
  403140:	68ba      	ldr	r2, [r7, #8]
  403142:	f043 0301 	orr.w	r3, r3, #1
  403146:	6053      	str	r3, [r2, #4]
  403148:	e6ee      	b.n	402f28 <_malloc_r+0x2d8>
  40314a:	207f      	movs	r0, #127	; 0x7f
  40314c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403150:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403154:	e59e      	b.n	402c94 <_malloc_r+0x44>
  403156:	f104 0108 	add.w	r1, r4, #8
  40315a:	4628      	mov	r0, r5
  40315c:	9300      	str	r3, [sp, #0]
  40315e:	f7ff fa59 	bl	402614 <_free_r>
  403162:	9b00      	ldr	r3, [sp, #0]
  403164:	6819      	ldr	r1, [r3, #0]
  403166:	e6df      	b.n	402f28 <_malloc_r+0x2d8>
  403168:	2001      	movs	r0, #1
  40316a:	f04f 0900 	mov.w	r9, #0
  40316e:	e6bc      	b.n	402eea <_malloc_r+0x29a>
  403170:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403174:	d805      	bhi.n	403182 <_malloc_r+0x532>
  403176:	0bda      	lsrs	r2, r3, #15
  403178:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40317c:	00c9      	lsls	r1, r1, #3
  40317e:	3277      	adds	r2, #119	; 0x77
  403180:	e720      	b.n	402fc4 <_malloc_r+0x374>
  403182:	f240 5154 	movw	r1, #1364	; 0x554
  403186:	428a      	cmp	r2, r1
  403188:	d805      	bhi.n	403196 <_malloc_r+0x546>
  40318a:	0c9a      	lsrs	r2, r3, #18
  40318c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403190:	00c9      	lsls	r1, r1, #3
  403192:	327c      	adds	r2, #124	; 0x7c
  403194:	e716      	b.n	402fc4 <_malloc_r+0x374>
  403196:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40319a:	227e      	movs	r2, #126	; 0x7e
  40319c:	e712      	b.n	402fc4 <_malloc_r+0x374>
  40319e:	687b      	ldr	r3, [r7, #4]
  4031a0:	e780      	b.n	4030a4 <_malloc_r+0x454>
  4031a2:	08f0      	lsrs	r0, r6, #3
  4031a4:	f106 0308 	add.w	r3, r6, #8
  4031a8:	e600      	b.n	402dac <_malloc_r+0x15c>
  4031aa:	bf00      	nop
  4031ac:	200009e8 	.word	0x200009e8

004031b0 <__ascii_mbtowc>:
  4031b0:	b082      	sub	sp, #8
  4031b2:	b149      	cbz	r1, 4031c8 <__ascii_mbtowc+0x18>
  4031b4:	b15a      	cbz	r2, 4031ce <__ascii_mbtowc+0x1e>
  4031b6:	b16b      	cbz	r3, 4031d4 <__ascii_mbtowc+0x24>
  4031b8:	7813      	ldrb	r3, [r2, #0]
  4031ba:	600b      	str	r3, [r1, #0]
  4031bc:	7812      	ldrb	r2, [r2, #0]
  4031be:	1c10      	adds	r0, r2, #0
  4031c0:	bf18      	it	ne
  4031c2:	2001      	movne	r0, #1
  4031c4:	b002      	add	sp, #8
  4031c6:	4770      	bx	lr
  4031c8:	a901      	add	r1, sp, #4
  4031ca:	2a00      	cmp	r2, #0
  4031cc:	d1f3      	bne.n	4031b6 <__ascii_mbtowc+0x6>
  4031ce:	4610      	mov	r0, r2
  4031d0:	b002      	add	sp, #8
  4031d2:	4770      	bx	lr
  4031d4:	f06f 0001 	mvn.w	r0, #1
  4031d8:	e7f4      	b.n	4031c4 <__ascii_mbtowc+0x14>
  4031da:	bf00      	nop
  4031dc:	0000      	movs	r0, r0
	...

004031e0 <memchr>:
  4031e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4031e4:	2a10      	cmp	r2, #16
  4031e6:	db2b      	blt.n	403240 <memchr+0x60>
  4031e8:	f010 0f07 	tst.w	r0, #7
  4031ec:	d008      	beq.n	403200 <memchr+0x20>
  4031ee:	f810 3b01 	ldrb.w	r3, [r0], #1
  4031f2:	3a01      	subs	r2, #1
  4031f4:	428b      	cmp	r3, r1
  4031f6:	d02d      	beq.n	403254 <memchr+0x74>
  4031f8:	f010 0f07 	tst.w	r0, #7
  4031fc:	b342      	cbz	r2, 403250 <memchr+0x70>
  4031fe:	d1f6      	bne.n	4031ee <memchr+0xe>
  403200:	b4f0      	push	{r4, r5, r6, r7}
  403202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  403206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40320a:	f022 0407 	bic.w	r4, r2, #7
  40320e:	f07f 0700 	mvns.w	r7, #0
  403212:	2300      	movs	r3, #0
  403214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  403218:	3c08      	subs	r4, #8
  40321a:	ea85 0501 	eor.w	r5, r5, r1
  40321e:	ea86 0601 	eor.w	r6, r6, r1
  403222:	fa85 f547 	uadd8	r5, r5, r7
  403226:	faa3 f587 	sel	r5, r3, r7
  40322a:	fa86 f647 	uadd8	r6, r6, r7
  40322e:	faa5 f687 	sel	r6, r5, r7
  403232:	b98e      	cbnz	r6, 403258 <memchr+0x78>
  403234:	d1ee      	bne.n	403214 <memchr+0x34>
  403236:	bcf0      	pop	{r4, r5, r6, r7}
  403238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40323c:	f002 0207 	and.w	r2, r2, #7
  403240:	b132      	cbz	r2, 403250 <memchr+0x70>
  403242:	f810 3b01 	ldrb.w	r3, [r0], #1
  403246:	3a01      	subs	r2, #1
  403248:	ea83 0301 	eor.w	r3, r3, r1
  40324c:	b113      	cbz	r3, 403254 <memchr+0x74>
  40324e:	d1f8      	bne.n	403242 <memchr+0x62>
  403250:	2000      	movs	r0, #0
  403252:	4770      	bx	lr
  403254:	3801      	subs	r0, #1
  403256:	4770      	bx	lr
  403258:	2d00      	cmp	r5, #0
  40325a:	bf06      	itte	eq
  40325c:	4635      	moveq	r5, r6
  40325e:	3803      	subeq	r0, #3
  403260:	3807      	subne	r0, #7
  403262:	f015 0f01 	tst.w	r5, #1
  403266:	d107      	bne.n	403278 <memchr+0x98>
  403268:	3001      	adds	r0, #1
  40326a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40326e:	bf02      	ittt	eq
  403270:	3001      	addeq	r0, #1
  403272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  403276:	3001      	addeq	r0, #1
  403278:	bcf0      	pop	{r4, r5, r6, r7}
  40327a:	3801      	subs	r0, #1
  40327c:	4770      	bx	lr
  40327e:	bf00      	nop

00403280 <memcpy>:
  403280:	4684      	mov	ip, r0
  403282:	ea41 0300 	orr.w	r3, r1, r0
  403286:	f013 0303 	ands.w	r3, r3, #3
  40328a:	d16d      	bne.n	403368 <memcpy+0xe8>
  40328c:	3a40      	subs	r2, #64	; 0x40
  40328e:	d341      	bcc.n	403314 <memcpy+0x94>
  403290:	f851 3b04 	ldr.w	r3, [r1], #4
  403294:	f840 3b04 	str.w	r3, [r0], #4
  403298:	f851 3b04 	ldr.w	r3, [r1], #4
  40329c:	f840 3b04 	str.w	r3, [r0], #4
  4032a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4032a4:	f840 3b04 	str.w	r3, [r0], #4
  4032a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4032ac:	f840 3b04 	str.w	r3, [r0], #4
  4032b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4032b4:	f840 3b04 	str.w	r3, [r0], #4
  4032b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4032bc:	f840 3b04 	str.w	r3, [r0], #4
  4032c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4032c4:	f840 3b04 	str.w	r3, [r0], #4
  4032c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4032cc:	f840 3b04 	str.w	r3, [r0], #4
  4032d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4032d4:	f840 3b04 	str.w	r3, [r0], #4
  4032d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4032dc:	f840 3b04 	str.w	r3, [r0], #4
  4032e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4032e4:	f840 3b04 	str.w	r3, [r0], #4
  4032e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4032ec:	f840 3b04 	str.w	r3, [r0], #4
  4032f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4032f4:	f840 3b04 	str.w	r3, [r0], #4
  4032f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4032fc:	f840 3b04 	str.w	r3, [r0], #4
  403300:	f851 3b04 	ldr.w	r3, [r1], #4
  403304:	f840 3b04 	str.w	r3, [r0], #4
  403308:	f851 3b04 	ldr.w	r3, [r1], #4
  40330c:	f840 3b04 	str.w	r3, [r0], #4
  403310:	3a40      	subs	r2, #64	; 0x40
  403312:	d2bd      	bcs.n	403290 <memcpy+0x10>
  403314:	3230      	adds	r2, #48	; 0x30
  403316:	d311      	bcc.n	40333c <memcpy+0xbc>
  403318:	f851 3b04 	ldr.w	r3, [r1], #4
  40331c:	f840 3b04 	str.w	r3, [r0], #4
  403320:	f851 3b04 	ldr.w	r3, [r1], #4
  403324:	f840 3b04 	str.w	r3, [r0], #4
  403328:	f851 3b04 	ldr.w	r3, [r1], #4
  40332c:	f840 3b04 	str.w	r3, [r0], #4
  403330:	f851 3b04 	ldr.w	r3, [r1], #4
  403334:	f840 3b04 	str.w	r3, [r0], #4
  403338:	3a10      	subs	r2, #16
  40333a:	d2ed      	bcs.n	403318 <memcpy+0x98>
  40333c:	320c      	adds	r2, #12
  40333e:	d305      	bcc.n	40334c <memcpy+0xcc>
  403340:	f851 3b04 	ldr.w	r3, [r1], #4
  403344:	f840 3b04 	str.w	r3, [r0], #4
  403348:	3a04      	subs	r2, #4
  40334a:	d2f9      	bcs.n	403340 <memcpy+0xc0>
  40334c:	3204      	adds	r2, #4
  40334e:	d008      	beq.n	403362 <memcpy+0xe2>
  403350:	07d2      	lsls	r2, r2, #31
  403352:	bf1c      	itt	ne
  403354:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403358:	f800 3b01 	strbne.w	r3, [r0], #1
  40335c:	d301      	bcc.n	403362 <memcpy+0xe2>
  40335e:	880b      	ldrh	r3, [r1, #0]
  403360:	8003      	strh	r3, [r0, #0]
  403362:	4660      	mov	r0, ip
  403364:	4770      	bx	lr
  403366:	bf00      	nop
  403368:	2a08      	cmp	r2, #8
  40336a:	d313      	bcc.n	403394 <memcpy+0x114>
  40336c:	078b      	lsls	r3, r1, #30
  40336e:	d08d      	beq.n	40328c <memcpy+0xc>
  403370:	f010 0303 	ands.w	r3, r0, #3
  403374:	d08a      	beq.n	40328c <memcpy+0xc>
  403376:	f1c3 0304 	rsb	r3, r3, #4
  40337a:	1ad2      	subs	r2, r2, r3
  40337c:	07db      	lsls	r3, r3, #31
  40337e:	bf1c      	itt	ne
  403380:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403384:	f800 3b01 	strbne.w	r3, [r0], #1
  403388:	d380      	bcc.n	40328c <memcpy+0xc>
  40338a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40338e:	f820 3b02 	strh.w	r3, [r0], #2
  403392:	e77b      	b.n	40328c <memcpy+0xc>
  403394:	3a04      	subs	r2, #4
  403396:	d3d9      	bcc.n	40334c <memcpy+0xcc>
  403398:	3a01      	subs	r2, #1
  40339a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40339e:	f800 3b01 	strb.w	r3, [r0], #1
  4033a2:	d2f9      	bcs.n	403398 <memcpy+0x118>
  4033a4:	780b      	ldrb	r3, [r1, #0]
  4033a6:	7003      	strb	r3, [r0, #0]
  4033a8:	784b      	ldrb	r3, [r1, #1]
  4033aa:	7043      	strb	r3, [r0, #1]
  4033ac:	788b      	ldrb	r3, [r1, #2]
  4033ae:	7083      	strb	r3, [r0, #2]
  4033b0:	4660      	mov	r0, ip
  4033b2:	4770      	bx	lr

004033b4 <memmove>:
  4033b4:	4288      	cmp	r0, r1
  4033b6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4033b8:	d90d      	bls.n	4033d6 <memmove+0x22>
  4033ba:	188b      	adds	r3, r1, r2
  4033bc:	4298      	cmp	r0, r3
  4033be:	d20a      	bcs.n	4033d6 <memmove+0x22>
  4033c0:	1884      	adds	r4, r0, r2
  4033c2:	2a00      	cmp	r2, #0
  4033c4:	d051      	beq.n	40346a <memmove+0xb6>
  4033c6:	4622      	mov	r2, r4
  4033c8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4033cc:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4033d0:	4299      	cmp	r1, r3
  4033d2:	d1f9      	bne.n	4033c8 <memmove+0x14>
  4033d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4033d6:	2a0f      	cmp	r2, #15
  4033d8:	d948      	bls.n	40346c <memmove+0xb8>
  4033da:	ea41 0300 	orr.w	r3, r1, r0
  4033de:	079b      	lsls	r3, r3, #30
  4033e0:	d146      	bne.n	403470 <memmove+0xbc>
  4033e2:	f100 0410 	add.w	r4, r0, #16
  4033e6:	f101 0310 	add.w	r3, r1, #16
  4033ea:	4615      	mov	r5, r2
  4033ec:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4033f0:	f844 6c10 	str.w	r6, [r4, #-16]
  4033f4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4033f8:	f844 6c0c 	str.w	r6, [r4, #-12]
  4033fc:	f853 6c08 	ldr.w	r6, [r3, #-8]
  403400:	f844 6c08 	str.w	r6, [r4, #-8]
  403404:	3d10      	subs	r5, #16
  403406:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40340a:	f844 6c04 	str.w	r6, [r4, #-4]
  40340e:	2d0f      	cmp	r5, #15
  403410:	f103 0310 	add.w	r3, r3, #16
  403414:	f104 0410 	add.w	r4, r4, #16
  403418:	d8e8      	bhi.n	4033ec <memmove+0x38>
  40341a:	f1a2 0310 	sub.w	r3, r2, #16
  40341e:	f023 030f 	bic.w	r3, r3, #15
  403422:	f002 0e0f 	and.w	lr, r2, #15
  403426:	3310      	adds	r3, #16
  403428:	f1be 0f03 	cmp.w	lr, #3
  40342c:	4419      	add	r1, r3
  40342e:	4403      	add	r3, r0
  403430:	d921      	bls.n	403476 <memmove+0xc2>
  403432:	1f1e      	subs	r6, r3, #4
  403434:	460d      	mov	r5, r1
  403436:	4674      	mov	r4, lr
  403438:	3c04      	subs	r4, #4
  40343a:	f855 7b04 	ldr.w	r7, [r5], #4
  40343e:	f846 7f04 	str.w	r7, [r6, #4]!
  403442:	2c03      	cmp	r4, #3
  403444:	d8f8      	bhi.n	403438 <memmove+0x84>
  403446:	f1ae 0404 	sub.w	r4, lr, #4
  40344a:	f024 0403 	bic.w	r4, r4, #3
  40344e:	3404      	adds	r4, #4
  403450:	4421      	add	r1, r4
  403452:	4423      	add	r3, r4
  403454:	f002 0203 	and.w	r2, r2, #3
  403458:	b162      	cbz	r2, 403474 <memmove+0xc0>
  40345a:	3b01      	subs	r3, #1
  40345c:	440a      	add	r2, r1
  40345e:	f811 4b01 	ldrb.w	r4, [r1], #1
  403462:	f803 4f01 	strb.w	r4, [r3, #1]!
  403466:	428a      	cmp	r2, r1
  403468:	d1f9      	bne.n	40345e <memmove+0xaa>
  40346a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40346c:	4603      	mov	r3, r0
  40346e:	e7f3      	b.n	403458 <memmove+0xa4>
  403470:	4603      	mov	r3, r0
  403472:	e7f2      	b.n	40345a <memmove+0xa6>
  403474:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403476:	4672      	mov	r2, lr
  403478:	e7ee      	b.n	403458 <memmove+0xa4>
  40347a:	bf00      	nop

0040347c <__malloc_lock>:
  40347c:	4801      	ldr	r0, [pc, #4]	; (403484 <__malloc_lock+0x8>)
  40347e:	f7ff bb63 	b.w	402b48 <__retarget_lock_acquire_recursive>
  403482:	bf00      	nop
  403484:	20000a38 	.word	0x20000a38

00403488 <__malloc_unlock>:
  403488:	4801      	ldr	r0, [pc, #4]	; (403490 <__malloc_unlock+0x8>)
  40348a:	f7ff bb5f 	b.w	402b4c <__retarget_lock_release_recursive>
  40348e:	bf00      	nop
  403490:	20000a38 	.word	0x20000a38

00403494 <_realloc_r>:
  403494:	2900      	cmp	r1, #0
  403496:	f000 8095 	beq.w	4035c4 <_realloc_r+0x130>
  40349a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40349e:	460d      	mov	r5, r1
  4034a0:	4616      	mov	r6, r2
  4034a2:	b083      	sub	sp, #12
  4034a4:	4680      	mov	r8, r0
  4034a6:	f106 070b 	add.w	r7, r6, #11
  4034aa:	f7ff ffe7 	bl	40347c <__malloc_lock>
  4034ae:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4034b2:	2f16      	cmp	r7, #22
  4034b4:	f02e 0403 	bic.w	r4, lr, #3
  4034b8:	f1a5 0908 	sub.w	r9, r5, #8
  4034bc:	d83c      	bhi.n	403538 <_realloc_r+0xa4>
  4034be:	2210      	movs	r2, #16
  4034c0:	4617      	mov	r7, r2
  4034c2:	42be      	cmp	r6, r7
  4034c4:	d83d      	bhi.n	403542 <_realloc_r+0xae>
  4034c6:	4294      	cmp	r4, r2
  4034c8:	da43      	bge.n	403552 <_realloc_r+0xbe>
  4034ca:	4bc4      	ldr	r3, [pc, #784]	; (4037dc <_realloc_r+0x348>)
  4034cc:	6899      	ldr	r1, [r3, #8]
  4034ce:	eb09 0004 	add.w	r0, r9, r4
  4034d2:	4288      	cmp	r0, r1
  4034d4:	f000 80b4 	beq.w	403640 <_realloc_r+0x1ac>
  4034d8:	6843      	ldr	r3, [r0, #4]
  4034da:	f023 0101 	bic.w	r1, r3, #1
  4034de:	4401      	add	r1, r0
  4034e0:	6849      	ldr	r1, [r1, #4]
  4034e2:	07c9      	lsls	r1, r1, #31
  4034e4:	d54c      	bpl.n	403580 <_realloc_r+0xec>
  4034e6:	f01e 0f01 	tst.w	lr, #1
  4034ea:	f000 809b 	beq.w	403624 <_realloc_r+0x190>
  4034ee:	4631      	mov	r1, r6
  4034f0:	4640      	mov	r0, r8
  4034f2:	f7ff fbad 	bl	402c50 <_malloc_r>
  4034f6:	4606      	mov	r6, r0
  4034f8:	2800      	cmp	r0, #0
  4034fa:	d03a      	beq.n	403572 <_realloc_r+0xde>
  4034fc:	f855 3c04 	ldr.w	r3, [r5, #-4]
  403500:	f023 0301 	bic.w	r3, r3, #1
  403504:	444b      	add	r3, r9
  403506:	f1a0 0208 	sub.w	r2, r0, #8
  40350a:	429a      	cmp	r2, r3
  40350c:	f000 8121 	beq.w	403752 <_realloc_r+0x2be>
  403510:	1f22      	subs	r2, r4, #4
  403512:	2a24      	cmp	r2, #36	; 0x24
  403514:	f200 8107 	bhi.w	403726 <_realloc_r+0x292>
  403518:	2a13      	cmp	r2, #19
  40351a:	f200 80db 	bhi.w	4036d4 <_realloc_r+0x240>
  40351e:	4603      	mov	r3, r0
  403520:	462a      	mov	r2, r5
  403522:	6811      	ldr	r1, [r2, #0]
  403524:	6019      	str	r1, [r3, #0]
  403526:	6851      	ldr	r1, [r2, #4]
  403528:	6059      	str	r1, [r3, #4]
  40352a:	6892      	ldr	r2, [r2, #8]
  40352c:	609a      	str	r2, [r3, #8]
  40352e:	4629      	mov	r1, r5
  403530:	4640      	mov	r0, r8
  403532:	f7ff f86f 	bl	402614 <_free_r>
  403536:	e01c      	b.n	403572 <_realloc_r+0xde>
  403538:	f027 0707 	bic.w	r7, r7, #7
  40353c:	2f00      	cmp	r7, #0
  40353e:	463a      	mov	r2, r7
  403540:	dabf      	bge.n	4034c2 <_realloc_r+0x2e>
  403542:	2600      	movs	r6, #0
  403544:	230c      	movs	r3, #12
  403546:	4630      	mov	r0, r6
  403548:	f8c8 3000 	str.w	r3, [r8]
  40354c:	b003      	add	sp, #12
  40354e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403552:	462e      	mov	r6, r5
  403554:	1be3      	subs	r3, r4, r7
  403556:	2b0f      	cmp	r3, #15
  403558:	d81e      	bhi.n	403598 <_realloc_r+0x104>
  40355a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40355e:	f003 0301 	and.w	r3, r3, #1
  403562:	4323      	orrs	r3, r4
  403564:	444c      	add	r4, r9
  403566:	f8c9 3004 	str.w	r3, [r9, #4]
  40356a:	6863      	ldr	r3, [r4, #4]
  40356c:	f043 0301 	orr.w	r3, r3, #1
  403570:	6063      	str	r3, [r4, #4]
  403572:	4640      	mov	r0, r8
  403574:	f7ff ff88 	bl	403488 <__malloc_unlock>
  403578:	4630      	mov	r0, r6
  40357a:	b003      	add	sp, #12
  40357c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403580:	f023 0303 	bic.w	r3, r3, #3
  403584:	18e1      	adds	r1, r4, r3
  403586:	4291      	cmp	r1, r2
  403588:	db1f      	blt.n	4035ca <_realloc_r+0x136>
  40358a:	68c3      	ldr	r3, [r0, #12]
  40358c:	6882      	ldr	r2, [r0, #8]
  40358e:	462e      	mov	r6, r5
  403590:	60d3      	str	r3, [r2, #12]
  403592:	460c      	mov	r4, r1
  403594:	609a      	str	r2, [r3, #8]
  403596:	e7dd      	b.n	403554 <_realloc_r+0xc0>
  403598:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40359c:	eb09 0107 	add.w	r1, r9, r7
  4035a0:	f002 0201 	and.w	r2, r2, #1
  4035a4:	444c      	add	r4, r9
  4035a6:	f043 0301 	orr.w	r3, r3, #1
  4035aa:	4317      	orrs	r7, r2
  4035ac:	f8c9 7004 	str.w	r7, [r9, #4]
  4035b0:	604b      	str	r3, [r1, #4]
  4035b2:	6863      	ldr	r3, [r4, #4]
  4035b4:	f043 0301 	orr.w	r3, r3, #1
  4035b8:	3108      	adds	r1, #8
  4035ba:	6063      	str	r3, [r4, #4]
  4035bc:	4640      	mov	r0, r8
  4035be:	f7ff f829 	bl	402614 <_free_r>
  4035c2:	e7d6      	b.n	403572 <_realloc_r+0xde>
  4035c4:	4611      	mov	r1, r2
  4035c6:	f7ff bb43 	b.w	402c50 <_malloc_r>
  4035ca:	f01e 0f01 	tst.w	lr, #1
  4035ce:	d18e      	bne.n	4034ee <_realloc_r+0x5a>
  4035d0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4035d4:	eba9 0a01 	sub.w	sl, r9, r1
  4035d8:	f8da 1004 	ldr.w	r1, [sl, #4]
  4035dc:	f021 0103 	bic.w	r1, r1, #3
  4035e0:	440b      	add	r3, r1
  4035e2:	4423      	add	r3, r4
  4035e4:	4293      	cmp	r3, r2
  4035e6:	db25      	blt.n	403634 <_realloc_r+0x1a0>
  4035e8:	68c2      	ldr	r2, [r0, #12]
  4035ea:	6881      	ldr	r1, [r0, #8]
  4035ec:	4656      	mov	r6, sl
  4035ee:	60ca      	str	r2, [r1, #12]
  4035f0:	6091      	str	r1, [r2, #8]
  4035f2:	f8da 100c 	ldr.w	r1, [sl, #12]
  4035f6:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4035fa:	1f22      	subs	r2, r4, #4
  4035fc:	2a24      	cmp	r2, #36	; 0x24
  4035fe:	60c1      	str	r1, [r0, #12]
  403600:	6088      	str	r0, [r1, #8]
  403602:	f200 8094 	bhi.w	40372e <_realloc_r+0x29a>
  403606:	2a13      	cmp	r2, #19
  403608:	d96f      	bls.n	4036ea <_realloc_r+0x256>
  40360a:	6829      	ldr	r1, [r5, #0]
  40360c:	f8ca 1008 	str.w	r1, [sl, #8]
  403610:	6869      	ldr	r1, [r5, #4]
  403612:	f8ca 100c 	str.w	r1, [sl, #12]
  403616:	2a1b      	cmp	r2, #27
  403618:	f200 80a2 	bhi.w	403760 <_realloc_r+0x2cc>
  40361c:	3508      	adds	r5, #8
  40361e:	f10a 0210 	add.w	r2, sl, #16
  403622:	e063      	b.n	4036ec <_realloc_r+0x258>
  403624:	f855 3c08 	ldr.w	r3, [r5, #-8]
  403628:	eba9 0a03 	sub.w	sl, r9, r3
  40362c:	f8da 1004 	ldr.w	r1, [sl, #4]
  403630:	f021 0103 	bic.w	r1, r1, #3
  403634:	1863      	adds	r3, r4, r1
  403636:	4293      	cmp	r3, r2
  403638:	f6ff af59 	blt.w	4034ee <_realloc_r+0x5a>
  40363c:	4656      	mov	r6, sl
  40363e:	e7d8      	b.n	4035f2 <_realloc_r+0x15e>
  403640:	6841      	ldr	r1, [r0, #4]
  403642:	f021 0b03 	bic.w	fp, r1, #3
  403646:	44a3      	add	fp, r4
  403648:	f107 0010 	add.w	r0, r7, #16
  40364c:	4583      	cmp	fp, r0
  40364e:	da56      	bge.n	4036fe <_realloc_r+0x26a>
  403650:	f01e 0f01 	tst.w	lr, #1
  403654:	f47f af4b 	bne.w	4034ee <_realloc_r+0x5a>
  403658:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40365c:	eba9 0a01 	sub.w	sl, r9, r1
  403660:	f8da 1004 	ldr.w	r1, [sl, #4]
  403664:	f021 0103 	bic.w	r1, r1, #3
  403668:	448b      	add	fp, r1
  40366a:	4558      	cmp	r0, fp
  40366c:	dce2      	bgt.n	403634 <_realloc_r+0x1a0>
  40366e:	4656      	mov	r6, sl
  403670:	f8da 100c 	ldr.w	r1, [sl, #12]
  403674:	f856 0f08 	ldr.w	r0, [r6, #8]!
  403678:	1f22      	subs	r2, r4, #4
  40367a:	2a24      	cmp	r2, #36	; 0x24
  40367c:	60c1      	str	r1, [r0, #12]
  40367e:	6088      	str	r0, [r1, #8]
  403680:	f200 808f 	bhi.w	4037a2 <_realloc_r+0x30e>
  403684:	2a13      	cmp	r2, #19
  403686:	f240 808a 	bls.w	40379e <_realloc_r+0x30a>
  40368a:	6829      	ldr	r1, [r5, #0]
  40368c:	f8ca 1008 	str.w	r1, [sl, #8]
  403690:	6869      	ldr	r1, [r5, #4]
  403692:	f8ca 100c 	str.w	r1, [sl, #12]
  403696:	2a1b      	cmp	r2, #27
  403698:	f200 808a 	bhi.w	4037b0 <_realloc_r+0x31c>
  40369c:	3508      	adds	r5, #8
  40369e:	f10a 0210 	add.w	r2, sl, #16
  4036a2:	6829      	ldr	r1, [r5, #0]
  4036a4:	6011      	str	r1, [r2, #0]
  4036a6:	6869      	ldr	r1, [r5, #4]
  4036a8:	6051      	str	r1, [r2, #4]
  4036aa:	68a9      	ldr	r1, [r5, #8]
  4036ac:	6091      	str	r1, [r2, #8]
  4036ae:	eb0a 0107 	add.w	r1, sl, r7
  4036b2:	ebab 0207 	sub.w	r2, fp, r7
  4036b6:	f042 0201 	orr.w	r2, r2, #1
  4036ba:	6099      	str	r1, [r3, #8]
  4036bc:	604a      	str	r2, [r1, #4]
  4036be:	f8da 3004 	ldr.w	r3, [sl, #4]
  4036c2:	f003 0301 	and.w	r3, r3, #1
  4036c6:	431f      	orrs	r7, r3
  4036c8:	4640      	mov	r0, r8
  4036ca:	f8ca 7004 	str.w	r7, [sl, #4]
  4036ce:	f7ff fedb 	bl	403488 <__malloc_unlock>
  4036d2:	e751      	b.n	403578 <_realloc_r+0xe4>
  4036d4:	682b      	ldr	r3, [r5, #0]
  4036d6:	6003      	str	r3, [r0, #0]
  4036d8:	686b      	ldr	r3, [r5, #4]
  4036da:	6043      	str	r3, [r0, #4]
  4036dc:	2a1b      	cmp	r2, #27
  4036de:	d82d      	bhi.n	40373c <_realloc_r+0x2a8>
  4036e0:	f100 0308 	add.w	r3, r0, #8
  4036e4:	f105 0208 	add.w	r2, r5, #8
  4036e8:	e71b      	b.n	403522 <_realloc_r+0x8e>
  4036ea:	4632      	mov	r2, r6
  4036ec:	6829      	ldr	r1, [r5, #0]
  4036ee:	6011      	str	r1, [r2, #0]
  4036f0:	6869      	ldr	r1, [r5, #4]
  4036f2:	6051      	str	r1, [r2, #4]
  4036f4:	68a9      	ldr	r1, [r5, #8]
  4036f6:	6091      	str	r1, [r2, #8]
  4036f8:	461c      	mov	r4, r3
  4036fa:	46d1      	mov	r9, sl
  4036fc:	e72a      	b.n	403554 <_realloc_r+0xc0>
  4036fe:	eb09 0107 	add.w	r1, r9, r7
  403702:	ebab 0b07 	sub.w	fp, fp, r7
  403706:	f04b 0201 	orr.w	r2, fp, #1
  40370a:	6099      	str	r1, [r3, #8]
  40370c:	604a      	str	r2, [r1, #4]
  40370e:	f855 3c04 	ldr.w	r3, [r5, #-4]
  403712:	f003 0301 	and.w	r3, r3, #1
  403716:	431f      	orrs	r7, r3
  403718:	4640      	mov	r0, r8
  40371a:	f845 7c04 	str.w	r7, [r5, #-4]
  40371e:	f7ff feb3 	bl	403488 <__malloc_unlock>
  403722:	462e      	mov	r6, r5
  403724:	e728      	b.n	403578 <_realloc_r+0xe4>
  403726:	4629      	mov	r1, r5
  403728:	f7ff fe44 	bl	4033b4 <memmove>
  40372c:	e6ff      	b.n	40352e <_realloc_r+0x9a>
  40372e:	4629      	mov	r1, r5
  403730:	4630      	mov	r0, r6
  403732:	461c      	mov	r4, r3
  403734:	46d1      	mov	r9, sl
  403736:	f7ff fe3d 	bl	4033b4 <memmove>
  40373a:	e70b      	b.n	403554 <_realloc_r+0xc0>
  40373c:	68ab      	ldr	r3, [r5, #8]
  40373e:	6083      	str	r3, [r0, #8]
  403740:	68eb      	ldr	r3, [r5, #12]
  403742:	60c3      	str	r3, [r0, #12]
  403744:	2a24      	cmp	r2, #36	; 0x24
  403746:	d017      	beq.n	403778 <_realloc_r+0x2e4>
  403748:	f100 0310 	add.w	r3, r0, #16
  40374c:	f105 0210 	add.w	r2, r5, #16
  403750:	e6e7      	b.n	403522 <_realloc_r+0x8e>
  403752:	f850 3c04 	ldr.w	r3, [r0, #-4]
  403756:	f023 0303 	bic.w	r3, r3, #3
  40375a:	441c      	add	r4, r3
  40375c:	462e      	mov	r6, r5
  40375e:	e6f9      	b.n	403554 <_realloc_r+0xc0>
  403760:	68a9      	ldr	r1, [r5, #8]
  403762:	f8ca 1010 	str.w	r1, [sl, #16]
  403766:	68e9      	ldr	r1, [r5, #12]
  403768:	f8ca 1014 	str.w	r1, [sl, #20]
  40376c:	2a24      	cmp	r2, #36	; 0x24
  40376e:	d00c      	beq.n	40378a <_realloc_r+0x2f6>
  403770:	3510      	adds	r5, #16
  403772:	f10a 0218 	add.w	r2, sl, #24
  403776:	e7b9      	b.n	4036ec <_realloc_r+0x258>
  403778:	692b      	ldr	r3, [r5, #16]
  40377a:	6103      	str	r3, [r0, #16]
  40377c:	696b      	ldr	r3, [r5, #20]
  40377e:	6143      	str	r3, [r0, #20]
  403780:	f105 0218 	add.w	r2, r5, #24
  403784:	f100 0318 	add.w	r3, r0, #24
  403788:	e6cb      	b.n	403522 <_realloc_r+0x8e>
  40378a:	692a      	ldr	r2, [r5, #16]
  40378c:	f8ca 2018 	str.w	r2, [sl, #24]
  403790:	696a      	ldr	r2, [r5, #20]
  403792:	f8ca 201c 	str.w	r2, [sl, #28]
  403796:	3518      	adds	r5, #24
  403798:	f10a 0220 	add.w	r2, sl, #32
  40379c:	e7a6      	b.n	4036ec <_realloc_r+0x258>
  40379e:	4632      	mov	r2, r6
  4037a0:	e77f      	b.n	4036a2 <_realloc_r+0x20e>
  4037a2:	4629      	mov	r1, r5
  4037a4:	4630      	mov	r0, r6
  4037a6:	9301      	str	r3, [sp, #4]
  4037a8:	f7ff fe04 	bl	4033b4 <memmove>
  4037ac:	9b01      	ldr	r3, [sp, #4]
  4037ae:	e77e      	b.n	4036ae <_realloc_r+0x21a>
  4037b0:	68a9      	ldr	r1, [r5, #8]
  4037b2:	f8ca 1010 	str.w	r1, [sl, #16]
  4037b6:	68e9      	ldr	r1, [r5, #12]
  4037b8:	f8ca 1014 	str.w	r1, [sl, #20]
  4037bc:	2a24      	cmp	r2, #36	; 0x24
  4037be:	d003      	beq.n	4037c8 <_realloc_r+0x334>
  4037c0:	3510      	adds	r5, #16
  4037c2:	f10a 0218 	add.w	r2, sl, #24
  4037c6:	e76c      	b.n	4036a2 <_realloc_r+0x20e>
  4037c8:	692a      	ldr	r2, [r5, #16]
  4037ca:	f8ca 2018 	str.w	r2, [sl, #24]
  4037ce:	696a      	ldr	r2, [r5, #20]
  4037d0:	f8ca 201c 	str.w	r2, [sl, #28]
  4037d4:	3518      	adds	r5, #24
  4037d6:	f10a 0220 	add.w	r2, sl, #32
  4037da:	e762      	b.n	4036a2 <_realloc_r+0x20e>
  4037dc:	200005a8 	.word	0x200005a8

004037e0 <_sbrk_r>:
  4037e0:	b538      	push	{r3, r4, r5, lr}
  4037e2:	4c07      	ldr	r4, [pc, #28]	; (403800 <_sbrk_r+0x20>)
  4037e4:	2300      	movs	r3, #0
  4037e6:	4605      	mov	r5, r0
  4037e8:	4608      	mov	r0, r1
  4037ea:	6023      	str	r3, [r4, #0]
  4037ec:	f7fd f820 	bl	400830 <_sbrk>
  4037f0:	1c43      	adds	r3, r0, #1
  4037f2:	d000      	beq.n	4037f6 <_sbrk_r+0x16>
  4037f4:	bd38      	pop	{r3, r4, r5, pc}
  4037f6:	6823      	ldr	r3, [r4, #0]
  4037f8:	2b00      	cmp	r3, #0
  4037fa:	d0fb      	beq.n	4037f4 <_sbrk_r+0x14>
  4037fc:	602b      	str	r3, [r5, #0]
  4037fe:	bd38      	pop	{r3, r4, r5, pc}
  403800:	20000a4c 	.word	0x20000a4c

00403804 <__sread>:
  403804:	b510      	push	{r4, lr}
  403806:	460c      	mov	r4, r1
  403808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40380c:	f000 f9f6 	bl	403bfc <_read_r>
  403810:	2800      	cmp	r0, #0
  403812:	db03      	blt.n	40381c <__sread+0x18>
  403814:	6d23      	ldr	r3, [r4, #80]	; 0x50
  403816:	4403      	add	r3, r0
  403818:	6523      	str	r3, [r4, #80]	; 0x50
  40381a:	bd10      	pop	{r4, pc}
  40381c:	89a3      	ldrh	r3, [r4, #12]
  40381e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  403822:	81a3      	strh	r3, [r4, #12]
  403824:	bd10      	pop	{r4, pc}
  403826:	bf00      	nop

00403828 <__swrite>:
  403828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40382c:	4616      	mov	r6, r2
  40382e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  403832:	461f      	mov	r7, r3
  403834:	05d3      	lsls	r3, r2, #23
  403836:	460c      	mov	r4, r1
  403838:	4605      	mov	r5, r0
  40383a:	d507      	bpl.n	40384c <__swrite+0x24>
  40383c:	2200      	movs	r2, #0
  40383e:	2302      	movs	r3, #2
  403840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403844:	f000 f9c4 	bl	403bd0 <_lseek_r>
  403848:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40384c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403850:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  403854:	81a2      	strh	r2, [r4, #12]
  403856:	463b      	mov	r3, r7
  403858:	4632      	mov	r2, r6
  40385a:	4628      	mov	r0, r5
  40385c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403860:	f000 b8a4 	b.w	4039ac <_write_r>

00403864 <__sseek>:
  403864:	b510      	push	{r4, lr}
  403866:	460c      	mov	r4, r1
  403868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40386c:	f000 f9b0 	bl	403bd0 <_lseek_r>
  403870:	89a3      	ldrh	r3, [r4, #12]
  403872:	1c42      	adds	r2, r0, #1
  403874:	bf0e      	itee	eq
  403876:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40387a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40387e:	6520      	strne	r0, [r4, #80]	; 0x50
  403880:	81a3      	strh	r3, [r4, #12]
  403882:	bd10      	pop	{r4, pc}

00403884 <__sclose>:
  403884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403888:	f000 b908 	b.w	403a9c <_close_r>

0040388c <__swbuf_r>:
  40388c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40388e:	460d      	mov	r5, r1
  403890:	4614      	mov	r4, r2
  403892:	4606      	mov	r6, r0
  403894:	b110      	cbz	r0, 40389c <__swbuf_r+0x10>
  403896:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403898:	2b00      	cmp	r3, #0
  40389a:	d04b      	beq.n	403934 <__swbuf_r+0xa8>
  40389c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4038a0:	69a3      	ldr	r3, [r4, #24]
  4038a2:	60a3      	str	r3, [r4, #8]
  4038a4:	b291      	uxth	r1, r2
  4038a6:	0708      	lsls	r0, r1, #28
  4038a8:	d539      	bpl.n	40391e <__swbuf_r+0x92>
  4038aa:	6923      	ldr	r3, [r4, #16]
  4038ac:	2b00      	cmp	r3, #0
  4038ae:	d036      	beq.n	40391e <__swbuf_r+0x92>
  4038b0:	b2ed      	uxtb	r5, r5
  4038b2:	0489      	lsls	r1, r1, #18
  4038b4:	462f      	mov	r7, r5
  4038b6:	d515      	bpl.n	4038e4 <__swbuf_r+0x58>
  4038b8:	6822      	ldr	r2, [r4, #0]
  4038ba:	6961      	ldr	r1, [r4, #20]
  4038bc:	1ad3      	subs	r3, r2, r3
  4038be:	428b      	cmp	r3, r1
  4038c0:	da1c      	bge.n	4038fc <__swbuf_r+0x70>
  4038c2:	3301      	adds	r3, #1
  4038c4:	68a1      	ldr	r1, [r4, #8]
  4038c6:	1c50      	adds	r0, r2, #1
  4038c8:	3901      	subs	r1, #1
  4038ca:	60a1      	str	r1, [r4, #8]
  4038cc:	6020      	str	r0, [r4, #0]
  4038ce:	7015      	strb	r5, [r2, #0]
  4038d0:	6962      	ldr	r2, [r4, #20]
  4038d2:	429a      	cmp	r2, r3
  4038d4:	d01a      	beq.n	40390c <__swbuf_r+0x80>
  4038d6:	89a3      	ldrh	r3, [r4, #12]
  4038d8:	07db      	lsls	r3, r3, #31
  4038da:	d501      	bpl.n	4038e0 <__swbuf_r+0x54>
  4038dc:	2d0a      	cmp	r5, #10
  4038de:	d015      	beq.n	40390c <__swbuf_r+0x80>
  4038e0:	4638      	mov	r0, r7
  4038e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4038e4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4038e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4038ea:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4038ee:	81a2      	strh	r2, [r4, #12]
  4038f0:	6822      	ldr	r2, [r4, #0]
  4038f2:	6661      	str	r1, [r4, #100]	; 0x64
  4038f4:	6961      	ldr	r1, [r4, #20]
  4038f6:	1ad3      	subs	r3, r2, r3
  4038f8:	428b      	cmp	r3, r1
  4038fa:	dbe2      	blt.n	4038c2 <__swbuf_r+0x36>
  4038fc:	4621      	mov	r1, r4
  4038fe:	4630      	mov	r0, r6
  403900:	f7fe fd0a 	bl	402318 <_fflush_r>
  403904:	b940      	cbnz	r0, 403918 <__swbuf_r+0x8c>
  403906:	6822      	ldr	r2, [r4, #0]
  403908:	2301      	movs	r3, #1
  40390a:	e7db      	b.n	4038c4 <__swbuf_r+0x38>
  40390c:	4621      	mov	r1, r4
  40390e:	4630      	mov	r0, r6
  403910:	f7fe fd02 	bl	402318 <_fflush_r>
  403914:	2800      	cmp	r0, #0
  403916:	d0e3      	beq.n	4038e0 <__swbuf_r+0x54>
  403918:	f04f 37ff 	mov.w	r7, #4294967295
  40391c:	e7e0      	b.n	4038e0 <__swbuf_r+0x54>
  40391e:	4621      	mov	r1, r4
  403920:	4630      	mov	r0, r6
  403922:	f7fe fbe5 	bl	4020f0 <__swsetup_r>
  403926:	2800      	cmp	r0, #0
  403928:	d1f6      	bne.n	403918 <__swbuf_r+0x8c>
  40392a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40392e:	6923      	ldr	r3, [r4, #16]
  403930:	b291      	uxth	r1, r2
  403932:	e7bd      	b.n	4038b0 <__swbuf_r+0x24>
  403934:	f7fe fd48 	bl	4023c8 <__sinit>
  403938:	e7b0      	b.n	40389c <__swbuf_r+0x10>
  40393a:	bf00      	nop

0040393c <_wcrtomb_r>:
  40393c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40393e:	4606      	mov	r6, r0
  403940:	b085      	sub	sp, #20
  403942:	461f      	mov	r7, r3
  403944:	b189      	cbz	r1, 40396a <_wcrtomb_r+0x2e>
  403946:	4c10      	ldr	r4, [pc, #64]	; (403988 <_wcrtomb_r+0x4c>)
  403948:	4d10      	ldr	r5, [pc, #64]	; (40398c <_wcrtomb_r+0x50>)
  40394a:	6824      	ldr	r4, [r4, #0]
  40394c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40394e:	2c00      	cmp	r4, #0
  403950:	bf08      	it	eq
  403952:	462c      	moveq	r4, r5
  403954:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  403958:	47a0      	blx	r4
  40395a:	1c43      	adds	r3, r0, #1
  40395c:	d103      	bne.n	403966 <_wcrtomb_r+0x2a>
  40395e:	2200      	movs	r2, #0
  403960:	238a      	movs	r3, #138	; 0x8a
  403962:	603a      	str	r2, [r7, #0]
  403964:	6033      	str	r3, [r6, #0]
  403966:	b005      	add	sp, #20
  403968:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40396a:	460c      	mov	r4, r1
  40396c:	4906      	ldr	r1, [pc, #24]	; (403988 <_wcrtomb_r+0x4c>)
  40396e:	4a07      	ldr	r2, [pc, #28]	; (40398c <_wcrtomb_r+0x50>)
  403970:	6809      	ldr	r1, [r1, #0]
  403972:	6b49      	ldr	r1, [r1, #52]	; 0x34
  403974:	2900      	cmp	r1, #0
  403976:	bf08      	it	eq
  403978:	4611      	moveq	r1, r2
  40397a:	4622      	mov	r2, r4
  40397c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  403980:	a901      	add	r1, sp, #4
  403982:	47a0      	blx	r4
  403984:	e7e9      	b.n	40395a <_wcrtomb_r+0x1e>
  403986:	bf00      	nop
  403988:	20000008 	.word	0x20000008
  40398c:	2000043c 	.word	0x2000043c

00403990 <__ascii_wctomb>:
  403990:	b121      	cbz	r1, 40399c <__ascii_wctomb+0xc>
  403992:	2aff      	cmp	r2, #255	; 0xff
  403994:	d804      	bhi.n	4039a0 <__ascii_wctomb+0x10>
  403996:	700a      	strb	r2, [r1, #0]
  403998:	2001      	movs	r0, #1
  40399a:	4770      	bx	lr
  40399c:	4608      	mov	r0, r1
  40399e:	4770      	bx	lr
  4039a0:	238a      	movs	r3, #138	; 0x8a
  4039a2:	6003      	str	r3, [r0, #0]
  4039a4:	f04f 30ff 	mov.w	r0, #4294967295
  4039a8:	4770      	bx	lr
  4039aa:	bf00      	nop

004039ac <_write_r>:
  4039ac:	b570      	push	{r4, r5, r6, lr}
  4039ae:	460d      	mov	r5, r1
  4039b0:	4c08      	ldr	r4, [pc, #32]	; (4039d4 <_write_r+0x28>)
  4039b2:	4611      	mov	r1, r2
  4039b4:	4606      	mov	r6, r0
  4039b6:	461a      	mov	r2, r3
  4039b8:	4628      	mov	r0, r5
  4039ba:	2300      	movs	r3, #0
  4039bc:	6023      	str	r3, [r4, #0]
  4039be:	f7fc fc21 	bl	400204 <_write>
  4039c2:	1c43      	adds	r3, r0, #1
  4039c4:	d000      	beq.n	4039c8 <_write_r+0x1c>
  4039c6:	bd70      	pop	{r4, r5, r6, pc}
  4039c8:	6823      	ldr	r3, [r4, #0]
  4039ca:	2b00      	cmp	r3, #0
  4039cc:	d0fb      	beq.n	4039c6 <_write_r+0x1a>
  4039ce:	6033      	str	r3, [r6, #0]
  4039d0:	bd70      	pop	{r4, r5, r6, pc}
  4039d2:	bf00      	nop
  4039d4:	20000a4c 	.word	0x20000a4c

004039d8 <__register_exitproc>:
  4039d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4039dc:	4d2c      	ldr	r5, [pc, #176]	; (403a90 <__register_exitproc+0xb8>)
  4039de:	4606      	mov	r6, r0
  4039e0:	6828      	ldr	r0, [r5, #0]
  4039e2:	4698      	mov	r8, r3
  4039e4:	460f      	mov	r7, r1
  4039e6:	4691      	mov	r9, r2
  4039e8:	f7ff f8ae 	bl	402b48 <__retarget_lock_acquire_recursive>
  4039ec:	4b29      	ldr	r3, [pc, #164]	; (403a94 <__register_exitproc+0xbc>)
  4039ee:	681c      	ldr	r4, [r3, #0]
  4039f0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4039f4:	2b00      	cmp	r3, #0
  4039f6:	d03e      	beq.n	403a76 <__register_exitproc+0x9e>
  4039f8:	685a      	ldr	r2, [r3, #4]
  4039fa:	2a1f      	cmp	r2, #31
  4039fc:	dc1c      	bgt.n	403a38 <__register_exitproc+0x60>
  4039fe:	f102 0e01 	add.w	lr, r2, #1
  403a02:	b176      	cbz	r6, 403a22 <__register_exitproc+0x4a>
  403a04:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  403a08:	2401      	movs	r4, #1
  403a0a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  403a0e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  403a12:	4094      	lsls	r4, r2
  403a14:	4320      	orrs	r0, r4
  403a16:	2e02      	cmp	r6, #2
  403a18:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  403a1c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  403a20:	d023      	beq.n	403a6a <__register_exitproc+0x92>
  403a22:	3202      	adds	r2, #2
  403a24:	f8c3 e004 	str.w	lr, [r3, #4]
  403a28:	6828      	ldr	r0, [r5, #0]
  403a2a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  403a2e:	f7ff f88d 	bl	402b4c <__retarget_lock_release_recursive>
  403a32:	2000      	movs	r0, #0
  403a34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403a38:	4b17      	ldr	r3, [pc, #92]	; (403a98 <__register_exitproc+0xc0>)
  403a3a:	b30b      	cbz	r3, 403a80 <__register_exitproc+0xa8>
  403a3c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  403a40:	f7ff f8fe 	bl	402c40 <malloc>
  403a44:	4603      	mov	r3, r0
  403a46:	b1d8      	cbz	r0, 403a80 <__register_exitproc+0xa8>
  403a48:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  403a4c:	6002      	str	r2, [r0, #0]
  403a4e:	2100      	movs	r1, #0
  403a50:	6041      	str	r1, [r0, #4]
  403a52:	460a      	mov	r2, r1
  403a54:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  403a58:	f04f 0e01 	mov.w	lr, #1
  403a5c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  403a60:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  403a64:	2e00      	cmp	r6, #0
  403a66:	d0dc      	beq.n	403a22 <__register_exitproc+0x4a>
  403a68:	e7cc      	b.n	403a04 <__register_exitproc+0x2c>
  403a6a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  403a6e:	430c      	orrs	r4, r1
  403a70:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  403a74:	e7d5      	b.n	403a22 <__register_exitproc+0x4a>
  403a76:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  403a7a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  403a7e:	e7bb      	b.n	4039f8 <__register_exitproc+0x20>
  403a80:	6828      	ldr	r0, [r5, #0]
  403a82:	f7ff f863 	bl	402b4c <__retarget_lock_release_recursive>
  403a86:	f04f 30ff 	mov.w	r0, #4294967295
  403a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403a8e:	bf00      	nop
  403a90:	20000438 	.word	0x20000438
  403a94:	0040432c 	.word	0x0040432c
  403a98:	00402c41 	.word	0x00402c41

00403a9c <_close_r>:
  403a9c:	b538      	push	{r3, r4, r5, lr}
  403a9e:	4c07      	ldr	r4, [pc, #28]	; (403abc <_close_r+0x20>)
  403aa0:	2300      	movs	r3, #0
  403aa2:	4605      	mov	r5, r0
  403aa4:	4608      	mov	r0, r1
  403aa6:	6023      	str	r3, [r4, #0]
  403aa8:	f7fc fede 	bl	400868 <_close>
  403aac:	1c43      	adds	r3, r0, #1
  403aae:	d000      	beq.n	403ab2 <_close_r+0x16>
  403ab0:	bd38      	pop	{r3, r4, r5, pc}
  403ab2:	6823      	ldr	r3, [r4, #0]
  403ab4:	2b00      	cmp	r3, #0
  403ab6:	d0fb      	beq.n	403ab0 <_close_r+0x14>
  403ab8:	602b      	str	r3, [r5, #0]
  403aba:	bd38      	pop	{r3, r4, r5, pc}
  403abc:	20000a4c 	.word	0x20000a4c

00403ac0 <_fclose_r>:
  403ac0:	b570      	push	{r4, r5, r6, lr}
  403ac2:	b159      	cbz	r1, 403adc <_fclose_r+0x1c>
  403ac4:	4605      	mov	r5, r0
  403ac6:	460c      	mov	r4, r1
  403ac8:	b110      	cbz	r0, 403ad0 <_fclose_r+0x10>
  403aca:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403acc:	2b00      	cmp	r3, #0
  403ace:	d03c      	beq.n	403b4a <_fclose_r+0x8a>
  403ad0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403ad2:	07d8      	lsls	r0, r3, #31
  403ad4:	d505      	bpl.n	403ae2 <_fclose_r+0x22>
  403ad6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403ada:	b92b      	cbnz	r3, 403ae8 <_fclose_r+0x28>
  403adc:	2600      	movs	r6, #0
  403ade:	4630      	mov	r0, r6
  403ae0:	bd70      	pop	{r4, r5, r6, pc}
  403ae2:	89a3      	ldrh	r3, [r4, #12]
  403ae4:	0599      	lsls	r1, r3, #22
  403ae6:	d53c      	bpl.n	403b62 <_fclose_r+0xa2>
  403ae8:	4621      	mov	r1, r4
  403aea:	4628      	mov	r0, r5
  403aec:	f7fe fb74 	bl	4021d8 <__sflush_r>
  403af0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  403af2:	4606      	mov	r6, r0
  403af4:	b133      	cbz	r3, 403b04 <_fclose_r+0x44>
  403af6:	69e1      	ldr	r1, [r4, #28]
  403af8:	4628      	mov	r0, r5
  403afa:	4798      	blx	r3
  403afc:	2800      	cmp	r0, #0
  403afe:	bfb8      	it	lt
  403b00:	f04f 36ff 	movlt.w	r6, #4294967295
  403b04:	89a3      	ldrh	r3, [r4, #12]
  403b06:	061a      	lsls	r2, r3, #24
  403b08:	d422      	bmi.n	403b50 <_fclose_r+0x90>
  403b0a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403b0c:	b141      	cbz	r1, 403b20 <_fclose_r+0x60>
  403b0e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403b12:	4299      	cmp	r1, r3
  403b14:	d002      	beq.n	403b1c <_fclose_r+0x5c>
  403b16:	4628      	mov	r0, r5
  403b18:	f7fe fd7c 	bl	402614 <_free_r>
  403b1c:	2300      	movs	r3, #0
  403b1e:	6323      	str	r3, [r4, #48]	; 0x30
  403b20:	6c61      	ldr	r1, [r4, #68]	; 0x44
  403b22:	b121      	cbz	r1, 403b2e <_fclose_r+0x6e>
  403b24:	4628      	mov	r0, r5
  403b26:	f7fe fd75 	bl	402614 <_free_r>
  403b2a:	2300      	movs	r3, #0
  403b2c:	6463      	str	r3, [r4, #68]	; 0x44
  403b2e:	f7fe fc77 	bl	402420 <__sfp_lock_acquire>
  403b32:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403b34:	2200      	movs	r2, #0
  403b36:	07db      	lsls	r3, r3, #31
  403b38:	81a2      	strh	r2, [r4, #12]
  403b3a:	d50e      	bpl.n	403b5a <_fclose_r+0x9a>
  403b3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403b3e:	f7ff f801 	bl	402b44 <__retarget_lock_close_recursive>
  403b42:	f7fe fc73 	bl	40242c <__sfp_lock_release>
  403b46:	4630      	mov	r0, r6
  403b48:	bd70      	pop	{r4, r5, r6, pc}
  403b4a:	f7fe fc3d 	bl	4023c8 <__sinit>
  403b4e:	e7bf      	b.n	403ad0 <_fclose_r+0x10>
  403b50:	6921      	ldr	r1, [r4, #16]
  403b52:	4628      	mov	r0, r5
  403b54:	f7fe fd5e 	bl	402614 <_free_r>
  403b58:	e7d7      	b.n	403b0a <_fclose_r+0x4a>
  403b5a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403b5c:	f7fe fff6 	bl	402b4c <__retarget_lock_release_recursive>
  403b60:	e7ec      	b.n	403b3c <_fclose_r+0x7c>
  403b62:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403b64:	f7fe fff0 	bl	402b48 <__retarget_lock_acquire_recursive>
  403b68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403b6c:	2b00      	cmp	r3, #0
  403b6e:	d1bb      	bne.n	403ae8 <_fclose_r+0x28>
  403b70:	6e66      	ldr	r6, [r4, #100]	; 0x64
  403b72:	f016 0601 	ands.w	r6, r6, #1
  403b76:	d1b1      	bne.n	403adc <_fclose_r+0x1c>
  403b78:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403b7a:	f7fe ffe7 	bl	402b4c <__retarget_lock_release_recursive>
  403b7e:	4630      	mov	r0, r6
  403b80:	bd70      	pop	{r4, r5, r6, pc}
  403b82:	bf00      	nop

00403b84 <_fstat_r>:
  403b84:	b538      	push	{r3, r4, r5, lr}
  403b86:	460b      	mov	r3, r1
  403b88:	4c07      	ldr	r4, [pc, #28]	; (403ba8 <_fstat_r+0x24>)
  403b8a:	4605      	mov	r5, r0
  403b8c:	4611      	mov	r1, r2
  403b8e:	4618      	mov	r0, r3
  403b90:	2300      	movs	r3, #0
  403b92:	6023      	str	r3, [r4, #0]
  403b94:	f7fc fe6b 	bl	40086e <_fstat>
  403b98:	1c43      	adds	r3, r0, #1
  403b9a:	d000      	beq.n	403b9e <_fstat_r+0x1a>
  403b9c:	bd38      	pop	{r3, r4, r5, pc}
  403b9e:	6823      	ldr	r3, [r4, #0]
  403ba0:	2b00      	cmp	r3, #0
  403ba2:	d0fb      	beq.n	403b9c <_fstat_r+0x18>
  403ba4:	602b      	str	r3, [r5, #0]
  403ba6:	bd38      	pop	{r3, r4, r5, pc}
  403ba8:	20000a4c 	.word	0x20000a4c

00403bac <_isatty_r>:
  403bac:	b538      	push	{r3, r4, r5, lr}
  403bae:	4c07      	ldr	r4, [pc, #28]	; (403bcc <_isatty_r+0x20>)
  403bb0:	2300      	movs	r3, #0
  403bb2:	4605      	mov	r5, r0
  403bb4:	4608      	mov	r0, r1
  403bb6:	6023      	str	r3, [r4, #0]
  403bb8:	f7fc fe5e 	bl	400878 <_isatty>
  403bbc:	1c43      	adds	r3, r0, #1
  403bbe:	d000      	beq.n	403bc2 <_isatty_r+0x16>
  403bc0:	bd38      	pop	{r3, r4, r5, pc}
  403bc2:	6823      	ldr	r3, [r4, #0]
  403bc4:	2b00      	cmp	r3, #0
  403bc6:	d0fb      	beq.n	403bc0 <_isatty_r+0x14>
  403bc8:	602b      	str	r3, [r5, #0]
  403bca:	bd38      	pop	{r3, r4, r5, pc}
  403bcc:	20000a4c 	.word	0x20000a4c

00403bd0 <_lseek_r>:
  403bd0:	b570      	push	{r4, r5, r6, lr}
  403bd2:	460d      	mov	r5, r1
  403bd4:	4c08      	ldr	r4, [pc, #32]	; (403bf8 <_lseek_r+0x28>)
  403bd6:	4611      	mov	r1, r2
  403bd8:	4606      	mov	r6, r0
  403bda:	461a      	mov	r2, r3
  403bdc:	4628      	mov	r0, r5
  403bde:	2300      	movs	r3, #0
  403be0:	6023      	str	r3, [r4, #0]
  403be2:	f7fc fe4b 	bl	40087c <_lseek>
  403be6:	1c43      	adds	r3, r0, #1
  403be8:	d000      	beq.n	403bec <_lseek_r+0x1c>
  403bea:	bd70      	pop	{r4, r5, r6, pc}
  403bec:	6823      	ldr	r3, [r4, #0]
  403bee:	2b00      	cmp	r3, #0
  403bf0:	d0fb      	beq.n	403bea <_lseek_r+0x1a>
  403bf2:	6033      	str	r3, [r6, #0]
  403bf4:	bd70      	pop	{r4, r5, r6, pc}
  403bf6:	bf00      	nop
  403bf8:	20000a4c 	.word	0x20000a4c

00403bfc <_read_r>:
  403bfc:	b570      	push	{r4, r5, r6, lr}
  403bfe:	460d      	mov	r5, r1
  403c00:	4c08      	ldr	r4, [pc, #32]	; (403c24 <_read_r+0x28>)
  403c02:	4611      	mov	r1, r2
  403c04:	4606      	mov	r6, r0
  403c06:	461a      	mov	r2, r3
  403c08:	4628      	mov	r0, r5
  403c0a:	2300      	movs	r3, #0
  403c0c:	6023      	str	r3, [r4, #0]
  403c0e:	f7fc fadb 	bl	4001c8 <_read>
  403c12:	1c43      	adds	r3, r0, #1
  403c14:	d000      	beq.n	403c18 <_read_r+0x1c>
  403c16:	bd70      	pop	{r4, r5, r6, pc}
  403c18:	6823      	ldr	r3, [r4, #0]
  403c1a:	2b00      	cmp	r3, #0
  403c1c:	d0fb      	beq.n	403c16 <_read_r+0x1a>
  403c1e:	6033      	str	r3, [r6, #0]
  403c20:	bd70      	pop	{r4, r5, r6, pc}
  403c22:	bf00      	nop
  403c24:	20000a4c 	.word	0x20000a4c

00403c28 <__aeabi_uldivmod>:
  403c28:	b953      	cbnz	r3, 403c40 <__aeabi_uldivmod+0x18>
  403c2a:	b94a      	cbnz	r2, 403c40 <__aeabi_uldivmod+0x18>
  403c2c:	2900      	cmp	r1, #0
  403c2e:	bf08      	it	eq
  403c30:	2800      	cmpeq	r0, #0
  403c32:	bf1c      	itt	ne
  403c34:	f04f 31ff 	movne.w	r1, #4294967295
  403c38:	f04f 30ff 	movne.w	r0, #4294967295
  403c3c:	f000 b97a 	b.w	403f34 <__aeabi_idiv0>
  403c40:	f1ad 0c08 	sub.w	ip, sp, #8
  403c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  403c48:	f000 f806 	bl	403c58 <__udivmoddi4>
  403c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
  403c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403c54:	b004      	add	sp, #16
  403c56:	4770      	bx	lr

00403c58 <__udivmoddi4>:
  403c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403c5c:	468c      	mov	ip, r1
  403c5e:	460d      	mov	r5, r1
  403c60:	4604      	mov	r4, r0
  403c62:	9e08      	ldr	r6, [sp, #32]
  403c64:	2b00      	cmp	r3, #0
  403c66:	d151      	bne.n	403d0c <__udivmoddi4+0xb4>
  403c68:	428a      	cmp	r2, r1
  403c6a:	4617      	mov	r7, r2
  403c6c:	d96d      	bls.n	403d4a <__udivmoddi4+0xf2>
  403c6e:	fab2 fe82 	clz	lr, r2
  403c72:	f1be 0f00 	cmp.w	lr, #0
  403c76:	d00b      	beq.n	403c90 <__udivmoddi4+0x38>
  403c78:	f1ce 0c20 	rsb	ip, lr, #32
  403c7c:	fa01 f50e 	lsl.w	r5, r1, lr
  403c80:	fa20 fc0c 	lsr.w	ip, r0, ip
  403c84:	fa02 f70e 	lsl.w	r7, r2, lr
  403c88:	ea4c 0c05 	orr.w	ip, ip, r5
  403c8c:	fa00 f40e 	lsl.w	r4, r0, lr
  403c90:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  403c94:	0c25      	lsrs	r5, r4, #16
  403c96:	fbbc f8fa 	udiv	r8, ip, sl
  403c9a:	fa1f f987 	uxth.w	r9, r7
  403c9e:	fb0a cc18 	mls	ip, sl, r8, ip
  403ca2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  403ca6:	fb08 f309 	mul.w	r3, r8, r9
  403caa:	42ab      	cmp	r3, r5
  403cac:	d90a      	bls.n	403cc4 <__udivmoddi4+0x6c>
  403cae:	19ed      	adds	r5, r5, r7
  403cb0:	f108 32ff 	add.w	r2, r8, #4294967295
  403cb4:	f080 8123 	bcs.w	403efe <__udivmoddi4+0x2a6>
  403cb8:	42ab      	cmp	r3, r5
  403cba:	f240 8120 	bls.w	403efe <__udivmoddi4+0x2a6>
  403cbe:	f1a8 0802 	sub.w	r8, r8, #2
  403cc2:	443d      	add	r5, r7
  403cc4:	1aed      	subs	r5, r5, r3
  403cc6:	b2a4      	uxth	r4, r4
  403cc8:	fbb5 f0fa 	udiv	r0, r5, sl
  403ccc:	fb0a 5510 	mls	r5, sl, r0, r5
  403cd0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  403cd4:	fb00 f909 	mul.w	r9, r0, r9
  403cd8:	45a1      	cmp	r9, r4
  403cda:	d909      	bls.n	403cf0 <__udivmoddi4+0x98>
  403cdc:	19e4      	adds	r4, r4, r7
  403cde:	f100 33ff 	add.w	r3, r0, #4294967295
  403ce2:	f080 810a 	bcs.w	403efa <__udivmoddi4+0x2a2>
  403ce6:	45a1      	cmp	r9, r4
  403ce8:	f240 8107 	bls.w	403efa <__udivmoddi4+0x2a2>
  403cec:	3802      	subs	r0, #2
  403cee:	443c      	add	r4, r7
  403cf0:	eba4 0409 	sub.w	r4, r4, r9
  403cf4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403cf8:	2100      	movs	r1, #0
  403cfa:	2e00      	cmp	r6, #0
  403cfc:	d061      	beq.n	403dc2 <__udivmoddi4+0x16a>
  403cfe:	fa24 f40e 	lsr.w	r4, r4, lr
  403d02:	2300      	movs	r3, #0
  403d04:	6034      	str	r4, [r6, #0]
  403d06:	6073      	str	r3, [r6, #4]
  403d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403d0c:	428b      	cmp	r3, r1
  403d0e:	d907      	bls.n	403d20 <__udivmoddi4+0xc8>
  403d10:	2e00      	cmp	r6, #0
  403d12:	d054      	beq.n	403dbe <__udivmoddi4+0x166>
  403d14:	2100      	movs	r1, #0
  403d16:	e886 0021 	stmia.w	r6, {r0, r5}
  403d1a:	4608      	mov	r0, r1
  403d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403d20:	fab3 f183 	clz	r1, r3
  403d24:	2900      	cmp	r1, #0
  403d26:	f040 808e 	bne.w	403e46 <__udivmoddi4+0x1ee>
  403d2a:	42ab      	cmp	r3, r5
  403d2c:	d302      	bcc.n	403d34 <__udivmoddi4+0xdc>
  403d2e:	4282      	cmp	r2, r0
  403d30:	f200 80fa 	bhi.w	403f28 <__udivmoddi4+0x2d0>
  403d34:	1a84      	subs	r4, r0, r2
  403d36:	eb65 0503 	sbc.w	r5, r5, r3
  403d3a:	2001      	movs	r0, #1
  403d3c:	46ac      	mov	ip, r5
  403d3e:	2e00      	cmp	r6, #0
  403d40:	d03f      	beq.n	403dc2 <__udivmoddi4+0x16a>
  403d42:	e886 1010 	stmia.w	r6, {r4, ip}
  403d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403d4a:	b912      	cbnz	r2, 403d52 <__udivmoddi4+0xfa>
  403d4c:	2701      	movs	r7, #1
  403d4e:	fbb7 f7f2 	udiv	r7, r7, r2
  403d52:	fab7 fe87 	clz	lr, r7
  403d56:	f1be 0f00 	cmp.w	lr, #0
  403d5a:	d134      	bne.n	403dc6 <__udivmoddi4+0x16e>
  403d5c:	1beb      	subs	r3, r5, r7
  403d5e:	0c3a      	lsrs	r2, r7, #16
  403d60:	fa1f fc87 	uxth.w	ip, r7
  403d64:	2101      	movs	r1, #1
  403d66:	fbb3 f8f2 	udiv	r8, r3, r2
  403d6a:	0c25      	lsrs	r5, r4, #16
  403d6c:	fb02 3318 	mls	r3, r2, r8, r3
  403d70:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403d74:	fb0c f308 	mul.w	r3, ip, r8
  403d78:	42ab      	cmp	r3, r5
  403d7a:	d907      	bls.n	403d8c <__udivmoddi4+0x134>
  403d7c:	19ed      	adds	r5, r5, r7
  403d7e:	f108 30ff 	add.w	r0, r8, #4294967295
  403d82:	d202      	bcs.n	403d8a <__udivmoddi4+0x132>
  403d84:	42ab      	cmp	r3, r5
  403d86:	f200 80d1 	bhi.w	403f2c <__udivmoddi4+0x2d4>
  403d8a:	4680      	mov	r8, r0
  403d8c:	1aed      	subs	r5, r5, r3
  403d8e:	b2a3      	uxth	r3, r4
  403d90:	fbb5 f0f2 	udiv	r0, r5, r2
  403d94:	fb02 5510 	mls	r5, r2, r0, r5
  403d98:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  403d9c:	fb0c fc00 	mul.w	ip, ip, r0
  403da0:	45a4      	cmp	ip, r4
  403da2:	d907      	bls.n	403db4 <__udivmoddi4+0x15c>
  403da4:	19e4      	adds	r4, r4, r7
  403da6:	f100 33ff 	add.w	r3, r0, #4294967295
  403daa:	d202      	bcs.n	403db2 <__udivmoddi4+0x15a>
  403dac:	45a4      	cmp	ip, r4
  403dae:	f200 80b8 	bhi.w	403f22 <__udivmoddi4+0x2ca>
  403db2:	4618      	mov	r0, r3
  403db4:	eba4 040c 	sub.w	r4, r4, ip
  403db8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403dbc:	e79d      	b.n	403cfa <__udivmoddi4+0xa2>
  403dbe:	4631      	mov	r1, r6
  403dc0:	4630      	mov	r0, r6
  403dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403dc6:	f1ce 0420 	rsb	r4, lr, #32
  403dca:	fa05 f30e 	lsl.w	r3, r5, lr
  403dce:	fa07 f70e 	lsl.w	r7, r7, lr
  403dd2:	fa20 f804 	lsr.w	r8, r0, r4
  403dd6:	0c3a      	lsrs	r2, r7, #16
  403dd8:	fa25 f404 	lsr.w	r4, r5, r4
  403ddc:	ea48 0803 	orr.w	r8, r8, r3
  403de0:	fbb4 f1f2 	udiv	r1, r4, r2
  403de4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  403de8:	fb02 4411 	mls	r4, r2, r1, r4
  403dec:	fa1f fc87 	uxth.w	ip, r7
  403df0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  403df4:	fb01 f30c 	mul.w	r3, r1, ip
  403df8:	42ab      	cmp	r3, r5
  403dfa:	fa00 f40e 	lsl.w	r4, r0, lr
  403dfe:	d909      	bls.n	403e14 <__udivmoddi4+0x1bc>
  403e00:	19ed      	adds	r5, r5, r7
  403e02:	f101 30ff 	add.w	r0, r1, #4294967295
  403e06:	f080 808a 	bcs.w	403f1e <__udivmoddi4+0x2c6>
  403e0a:	42ab      	cmp	r3, r5
  403e0c:	f240 8087 	bls.w	403f1e <__udivmoddi4+0x2c6>
  403e10:	3902      	subs	r1, #2
  403e12:	443d      	add	r5, r7
  403e14:	1aeb      	subs	r3, r5, r3
  403e16:	fa1f f588 	uxth.w	r5, r8
  403e1a:	fbb3 f0f2 	udiv	r0, r3, r2
  403e1e:	fb02 3310 	mls	r3, r2, r0, r3
  403e22:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403e26:	fb00 f30c 	mul.w	r3, r0, ip
  403e2a:	42ab      	cmp	r3, r5
  403e2c:	d907      	bls.n	403e3e <__udivmoddi4+0x1e6>
  403e2e:	19ed      	adds	r5, r5, r7
  403e30:	f100 38ff 	add.w	r8, r0, #4294967295
  403e34:	d26f      	bcs.n	403f16 <__udivmoddi4+0x2be>
  403e36:	42ab      	cmp	r3, r5
  403e38:	d96d      	bls.n	403f16 <__udivmoddi4+0x2be>
  403e3a:	3802      	subs	r0, #2
  403e3c:	443d      	add	r5, r7
  403e3e:	1aeb      	subs	r3, r5, r3
  403e40:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  403e44:	e78f      	b.n	403d66 <__udivmoddi4+0x10e>
  403e46:	f1c1 0720 	rsb	r7, r1, #32
  403e4a:	fa22 f807 	lsr.w	r8, r2, r7
  403e4e:	408b      	lsls	r3, r1
  403e50:	fa05 f401 	lsl.w	r4, r5, r1
  403e54:	ea48 0303 	orr.w	r3, r8, r3
  403e58:	fa20 fe07 	lsr.w	lr, r0, r7
  403e5c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  403e60:	40fd      	lsrs	r5, r7
  403e62:	ea4e 0e04 	orr.w	lr, lr, r4
  403e66:	fbb5 f9fc 	udiv	r9, r5, ip
  403e6a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  403e6e:	fb0c 5519 	mls	r5, ip, r9, r5
  403e72:	fa1f f883 	uxth.w	r8, r3
  403e76:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  403e7a:	fb09 f408 	mul.w	r4, r9, r8
  403e7e:	42ac      	cmp	r4, r5
  403e80:	fa02 f201 	lsl.w	r2, r2, r1
  403e84:	fa00 fa01 	lsl.w	sl, r0, r1
  403e88:	d908      	bls.n	403e9c <__udivmoddi4+0x244>
  403e8a:	18ed      	adds	r5, r5, r3
  403e8c:	f109 30ff 	add.w	r0, r9, #4294967295
  403e90:	d243      	bcs.n	403f1a <__udivmoddi4+0x2c2>
  403e92:	42ac      	cmp	r4, r5
  403e94:	d941      	bls.n	403f1a <__udivmoddi4+0x2c2>
  403e96:	f1a9 0902 	sub.w	r9, r9, #2
  403e9a:	441d      	add	r5, r3
  403e9c:	1b2d      	subs	r5, r5, r4
  403e9e:	fa1f fe8e 	uxth.w	lr, lr
  403ea2:	fbb5 f0fc 	udiv	r0, r5, ip
  403ea6:	fb0c 5510 	mls	r5, ip, r0, r5
  403eaa:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  403eae:	fb00 f808 	mul.w	r8, r0, r8
  403eb2:	45a0      	cmp	r8, r4
  403eb4:	d907      	bls.n	403ec6 <__udivmoddi4+0x26e>
  403eb6:	18e4      	adds	r4, r4, r3
  403eb8:	f100 35ff 	add.w	r5, r0, #4294967295
  403ebc:	d229      	bcs.n	403f12 <__udivmoddi4+0x2ba>
  403ebe:	45a0      	cmp	r8, r4
  403ec0:	d927      	bls.n	403f12 <__udivmoddi4+0x2ba>
  403ec2:	3802      	subs	r0, #2
  403ec4:	441c      	add	r4, r3
  403ec6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  403eca:	eba4 0408 	sub.w	r4, r4, r8
  403ece:	fba0 8902 	umull	r8, r9, r0, r2
  403ed2:	454c      	cmp	r4, r9
  403ed4:	46c6      	mov	lr, r8
  403ed6:	464d      	mov	r5, r9
  403ed8:	d315      	bcc.n	403f06 <__udivmoddi4+0x2ae>
  403eda:	d012      	beq.n	403f02 <__udivmoddi4+0x2aa>
  403edc:	b156      	cbz	r6, 403ef4 <__udivmoddi4+0x29c>
  403ede:	ebba 030e 	subs.w	r3, sl, lr
  403ee2:	eb64 0405 	sbc.w	r4, r4, r5
  403ee6:	fa04 f707 	lsl.w	r7, r4, r7
  403eea:	40cb      	lsrs	r3, r1
  403eec:	431f      	orrs	r7, r3
  403eee:	40cc      	lsrs	r4, r1
  403ef0:	6037      	str	r7, [r6, #0]
  403ef2:	6074      	str	r4, [r6, #4]
  403ef4:	2100      	movs	r1, #0
  403ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403efa:	4618      	mov	r0, r3
  403efc:	e6f8      	b.n	403cf0 <__udivmoddi4+0x98>
  403efe:	4690      	mov	r8, r2
  403f00:	e6e0      	b.n	403cc4 <__udivmoddi4+0x6c>
  403f02:	45c2      	cmp	sl, r8
  403f04:	d2ea      	bcs.n	403edc <__udivmoddi4+0x284>
  403f06:	ebb8 0e02 	subs.w	lr, r8, r2
  403f0a:	eb69 0503 	sbc.w	r5, r9, r3
  403f0e:	3801      	subs	r0, #1
  403f10:	e7e4      	b.n	403edc <__udivmoddi4+0x284>
  403f12:	4628      	mov	r0, r5
  403f14:	e7d7      	b.n	403ec6 <__udivmoddi4+0x26e>
  403f16:	4640      	mov	r0, r8
  403f18:	e791      	b.n	403e3e <__udivmoddi4+0x1e6>
  403f1a:	4681      	mov	r9, r0
  403f1c:	e7be      	b.n	403e9c <__udivmoddi4+0x244>
  403f1e:	4601      	mov	r1, r0
  403f20:	e778      	b.n	403e14 <__udivmoddi4+0x1bc>
  403f22:	3802      	subs	r0, #2
  403f24:	443c      	add	r4, r7
  403f26:	e745      	b.n	403db4 <__udivmoddi4+0x15c>
  403f28:	4608      	mov	r0, r1
  403f2a:	e708      	b.n	403d3e <__udivmoddi4+0xe6>
  403f2c:	f1a8 0802 	sub.w	r8, r8, #2
  403f30:	443d      	add	r5, r7
  403f32:	e72b      	b.n	403d8c <__udivmoddi4+0x134>

00403f34 <__aeabi_idiv0>:
  403f34:	4770      	bx	lr
  403f36:	bf00      	nop
  403f38:	41555153 	.word	0x41555153
  403f3c:	00004552 	.word	0x00004552
  403f40:	454e4953 	.word	0x454e4953
  403f44:	00000000 	.word	0x00000000
  403f48:	3d3d3d3d 	.word	0x3d3d3d3d
  403f4c:	3d3d3d3d 	.word	0x3d3d3d3d
  403f50:	6e654d20 	.word	0x6e654d20
  403f54:	68432075 	.word	0x68432075
  403f58:	6563696f 	.word	0x6563696f
  403f5c:	6f662073 	.word	0x6f662073
  403f60:	68742072 	.word	0x68742072
  403f64:	65207369 	.word	0x65207369
  403f68:	706d6178 	.word	0x706d6178
  403f6c:	3d20656c 	.word	0x3d20656c
  403f70:	3d3d3d3d 	.word	0x3d3d3d3d
  403f74:	0d3d3d3d 	.word	0x0d3d3d3d
  403f78:	00000000 	.word	0x00000000
  403f7c:	30202d2d 	.word	0x30202d2d
  403f80:	6553203a 	.word	0x6553203a
  403f84:	72662074 	.word	0x72662074
  403f88:	65757165 	.word	0x65757165
  403f8c:	2879636e 	.word	0x2879636e
  403f90:	7a486425 	.word	0x7a486425
  403f94:	6b64252d 	.word	0x6b64252d
  403f98:	2e297a48 	.word	0x2e297a48
  403f9c:	00000d0a 	.word	0x00000d0a
  403fa0:	31202d2d 	.word	0x31202d2d
  403fa4:	6553203a 	.word	0x6553203a
  403fa8:	6d612074 	.word	0x6d612074
  403fac:	74696c70 	.word	0x74696c70
  403fb0:	28656475 	.word	0x28656475
  403fb4:	252d6425 	.word	0x252d6425
  403fb8:	0a2e2964 	.word	0x0a2e2964
  403fbc:	0000000d 	.word	0x0000000d
  403fc0:	69202d2d 	.word	0x69202d2d
  403fc4:	6944203a 	.word	0x6944203a
  403fc8:	616c7073 	.word	0x616c7073
  403fcc:	72702079 	.word	0x72702079
  403fd0:	6e657365 	.word	0x6e657365
  403fd4:	72662074 	.word	0x72662074
  403fd8:	65757165 	.word	0x65757165
  403fdc:	2079636e 	.word	0x2079636e
  403fe0:	20646e61 	.word	0x20646e61
  403fe4:	6c706d61 	.word	0x6c706d61
  403fe8:	64757469 	.word	0x64757469
  403fec:	0d0a2e65 	.word	0x0d0a2e65
  403ff0:	77202d2d 	.word	0x77202d2d
  403ff4:	7753203a 	.word	0x7753203a
  403ff8:	68637469 	.word	0x68637469
  403ffc:	206f7420 	.word	0x206f7420
  404000:	6c6c7566 	.word	0x6c6c7566
  404004:	706d6120 	.word	0x706d6120
  404008:	7574696c 	.word	0x7574696c
  40400c:	73206564 	.word	0x73206564
  404010:	72617571 	.word	0x72617571
  404014:	61772065 	.word	0x61772065
  404018:	6f206576 	.word	0x6f206576
  40401c:	61622072 	.word	0x61622072
  404020:	0a2e6b63 	.word	0x0a2e6b63
  404024:	202d2d0d 	.word	0x202d2d0d
  404028:	44203a6d 	.word	0x44203a6d
  40402c:	6c707369 	.word	0x6c707369
  404030:	74207961 	.word	0x74207961
  404034:	20736968 	.word	0x20736968
  404038:	756e656d 	.word	0x756e656d
  40403c:	2d0d0a2e 	.word	0x2d0d0a2e
  404040:	2d2d2d2d 	.word	0x2d2d2d2d
  404044:	2d2d2d2d 	.word	0x2d2d2d2d
  404048:	202d2d2d 	.word	0x202d2d2d
  40404c:	72727543 	.word	0x72727543
  404050:	20746e65 	.word	0x20746e65
  404054:	666e6f63 	.word	0x666e6f63
  404058:	72756769 	.word	0x72756769
  40405c:	6f697461 	.word	0x6f697461
  404060:	2d2d206e 	.word	0x2d2d206e
  404064:	2d2d2d2d 	.word	0x2d2d2d2d
  404068:	2d2d2d2d 	.word	0x2d2d2d2d
  40406c:	000d2d2d 	.word	0x000d2d2d
  404070:	44202d2d 	.word	0x44202d2d
  404074:	20434341 	.word	0x20434341
  404078:	6e616863 	.word	0x6e616863
  40407c:	3a6c656e 	.word	0x3a6c656e
  404080:	0a642509 	.word	0x0a642509
  404084:	0000000d 	.word	0x0000000d
  404088:	41202d2d 	.word	0x41202d2d
  40408c:	696c706d 	.word	0x696c706d
  404090:	65647574 	.word	0x65647574
  404094:	3a202020 	.word	0x3a202020
  404098:	646c2509 	.word	0x646c2509
  40409c:	00000d0a 	.word	0x00000d0a
  4040a0:	46202d2d 	.word	0x46202d2d
  4040a4:	75716572 	.word	0x75716572
  4040a8:	79636e65 	.word	0x79636e65
  4040ac:	3a202020 	.word	0x3a202020
  4040b0:	756c2509 	.word	0x756c2509
  4040b4:	00000d0a 	.word	0x00000d0a
  4040b8:	57202d2d 	.word	0x57202d2d
  4040bc:	20657661 	.word	0x20657661
  4040c0:	20202020 	.word	0x20202020
  4040c4:	3a202020 	.word	0x3a202020
  4040c8:	0a732509 	.word	0x0a732509
  4040cc:	0000000d 	.word	0x0000000d
  4040d0:	3d3d3d3d 	.word	0x3d3d3d3d
  4040d4:	3d3d3d3d 	.word	0x3d3d3d3d
  4040d8:	3d3d3d3d 	.word	0x3d3d3d3d
  4040dc:	3d3d3d3d 	.word	0x3d3d3d3d
  4040e0:	3d3d3d3d 	.word	0x3d3d3d3d
  4040e4:	3d3d3d3d 	.word	0x3d3d3d3d
  4040e8:	3d3d3d3d 	.word	0x3d3d3d3d
  4040ec:	3d3d3d3d 	.word	0x3d3d3d3d
  4040f0:	3d3d3d3d 	.word	0x3d3d3d3d
  4040f4:	3d3d3d3d 	.word	0x3d3d3d3d
  4040f8:	3d3d3d3d 	.word	0x3d3d3d3d
  4040fc:	0d3d3d3d 	.word	0x0d3d3d3d
  404100:	00000000 	.word	0x00000000

00404104 <gc_us_sine_data>:
  404104:	00800000 017f0100 027801fd 036702f1     ..........x...g.
  404114:	044903da 051904b3 05d40579 06780629     ..I.....y...).x.
  404124:	070206c0 076f073c 07bf079b 07ef07db     ....<.o.........
  404134:	07ff07fb 07ef07fb 07bf07db 076f079b     ..............o.
  404144:	0702073c 067806c0 05d40629 05190579     <.....x.)...y...
  404154:	044904b3 036703da 027802f1 017f01fd     ..I...g...x.....
  404164:	00800100 ff800000 fe81ff00 fd88fe03     ................
  404174:	fc99fd0f fbb7fc26 fae7fb4d fa2cfa87     ....&...M.....,.
  404184:	f988f9d7 f8fef940 f891f8c4 f841f865     ....@.......e.A.
  404194:	f811f825 f801f805 f811f805 f841f825     %...........%.A.
  4041a4:	f891f865 f8fef8c4 f988f940 fa2cf9d7     e.......@.....,.
  4041b4:	fae7fa87 fbb7fb4d fc99fc26 fd88fd0f     ....M...&.......
  4041c4:	fe81fe03 ff80ff00 00006325 462d0d0a     ........%c....-F
  4041d4:	6e49202d 20747570 756c6176 73692065     - Input value is
  4041e4:	766e6920 64696c61 00000021 6c6c7546      invalid!...Full
  4041f4:	706d4120 7574696c 53206564 52415551      Amplitude SQUAR
  404204:	00000045 44202d2d 53204341 77656e69     E...-- DAC Sinew
  404214:	20657661 6d617845 20656c70 0a0d2d2d     ave Example --..
  404224:	53202d2d 45344d41 204b452d 0a0d2d2d     -- SAM4E-EK --..
  404234:	43202d2d 69706d6f 3a64656c 79614d20     -- Compiled: May
  404244:	20343220 39313032 3a303120 333a3135      24 2019 10:51:3
  404254:	2d2d2034 0000000d 71657246 636e6575     4 --....Frequenc
  404264:	00093a79 00000a0d 20746553 71657266     y:......Set freq
  404274:	636e6575 6f742079 25203a20 7a48756c     uency to : %luHz
  404284:	00000d0a 6c706d41 64757469 00093a65     ....Amplitude:..
  404294:	20746553 6c706d61 64757469 6f742065     Set amplitude to
  4042a4:	25203a20 0d0a756c 00000000 202d492d      : %lu......-I- 
  4042b4:	71657246 636e6575 203a2079 20756c25     Frequency : %lu 
  4042c4:	41207a48 696c706d 65647574 25203a20     Hz Amplitude : %
  4042d4:	0d0a646c 00000000 202d492d 74697753     ld......-I- Swit
  4042e4:	77206863 20657661 3a206f74 0a732520     ch wave to : %s.
  4042f4:	0000000d 73657250 6d272073 726f2027     ....Press 'm' or
  404304:	274d2720 206f7420 70736964 2079616c      'M' to display 
  404314:	20656874 6e69616d 6e656d20 67612075     the main menu ag
  404324:	216e6961 0000000d                       ain!....

0040432c <_global_impure_ptr>:
  40432c:	20000010 0000000a 33323130 37363534     ... ....01234567
  40433c:	42413938 46454443 00000000 33323130     89ABCDEF....0123
  40434c:	37363534 62613938 66656463 00000000     456789abcdef....
  40435c:	6c756e28 0000296c                       (null)..

00404364 <blanks.7217>:
  404364:	20202020 20202020 20202020 20202020                     

00404374 <zeroes.7218>:
  404374:	30303030 30303030 30303030 30303030     0000000000000000
  404384:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00404394 <_ctype_>:
  404394:	20202000 20202020 28282020 20282828     .         ((((( 
  4043a4:	20202020 20202020 20202020 20202020                     
  4043b4:	10108820 10101010 10101010 10101010      ...............
  4043c4:	04040410 04040404 10040404 10101010     ................
  4043d4:	41411010 41414141 01010101 01010101     ..AAAAAA........
  4043e4:	01010101 01010101 01010101 10101010     ................
  4043f4:	42421010 42424242 02020202 02020202     ..BBBBBB........
  404404:	02020202 02020202 02020202 10101010     ................
  404414:	00000020 00000000 00000000 00000000      ...............
	...

00404498 <_init>:
  404498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40449a:	bf00      	nop
  40449c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40449e:	bc08      	pop	{r3}
  4044a0:	469e      	mov	lr, r3
  4044a2:	4770      	bx	lr

004044a4 <__init_array_start>:
  4044a4:	004021b9 	.word	0x004021b9

004044a8 <__frame_dummy_init_array_entry>:
  4044a8:	0040011d                                ..@.

004044ac <_fini>:
  4044ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4044ae:	bf00      	nop
  4044b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4044b2:	bc08      	pop	{r3}
  4044b4:	469e      	mov	lr, r3
  4044b6:	4770      	bx	lr

004044b8 <__fini_array_start>:
  4044b8:	004000f9 	.word	0x004000f9
