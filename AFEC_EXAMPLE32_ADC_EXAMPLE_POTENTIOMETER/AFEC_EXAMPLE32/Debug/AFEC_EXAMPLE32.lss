
AFEC_EXAMPLE32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004074  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00404074  00404074  00014074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20000000  0040407c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000014c  200009c0  00404a3c  000209c0  2**2
                  ALLOC
  4 .stack        00003004  20000b0c  00404b88  000209c0  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000209ee  2**0
                  CONTENTS, READONLY
  7 .debug_info   00011379  00000000  00000000  00020a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000282f  00000000  00000000  00031dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00002ef2  00000000  00000000  000345ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000768  00000000  00000000  000374e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000690  00000000  00000000  00037c49  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000177d1  00000000  00000000  000382d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000a121  00000000  00000000  0004faaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00062fab  00000000  00000000  00059bcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001c0c  00000000  00000000  000bcb78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	10 3b 00 20 81 0b 40 00 7f 0b 40 00 7f 0b 40 00     .;. ..@...@...@.
  400010:	7f 0b 40 00 7f 0b 40 00 7f 0b 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	7f 0b 40 00 7f 0b 40 00 00 00 00 00 7f 0b 40 00     ..@...@.......@.
  40003c:	7f 0b 40 00 7f 0b 40 00 7f 0b 40 00 7f 0b 40 00     ..@...@...@...@.
  40004c:	7f 0b 40 00 7f 0b 40 00 7f 0b 40 00 7f 0b 40 00     ..@...@...@...@.
  40005c:	7f 0b 40 00 7f 0b 40 00 7f 0b 40 00 7f 0b 40 00     ..@...@...@...@.
  40006c:	7f 0b 40 00 7f 0b 40 00 7f 0b 40 00 7f 0b 40 00     ..@...@...@...@.
  40007c:	7f 0b 40 00 7f 0b 40 00 7f 0b 40 00 7f 0b 40 00     ..@...@...@...@.
  40008c:	7f 0b 40 00 7f 0b 40 00 7f 0b 40 00 7f 0b 40 00     ..@...@...@...@.
  40009c:	7f 0b 40 00 7f 0b 40 00 7f 0b 40 00 7f 0b 40 00     ..@...@...@...@.
  4000ac:	7f 0b 40 00 7f 0b 40 00 7f 0b 40 00 31 09 40 00     ..@...@...@.1.@.
  4000bc:	45 09 40 00 7f 0b 40 00 7f 0b 40 00 7f 0b 40 00     E.@...@...@...@.
  4000cc:	7f 0b 40 00 7f 0b 40 00 7f 0b 40 00 7f 0b 40 00     ..@...@...@...@.
  4000dc:	7f 0b 40 00 7f 0b 40 00 7f 0b 40 00 7f 0b 40 00     ..@...@...@...@.
  4000ec:	7f 0b 40 00 7f 0b 40 00 7f 0b 40 00                 ..@...@...@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	200009c0 	.word	0x200009c0
  400114:	00000000 	.word	0x00000000
  400118:	0040407c 	.word	0x0040407c

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	0040407c 	.word	0x0040407c
  400158:	200009c4 	.word	0x200009c4
  40015c:	0040407c 	.word	0x0040407c
  400160:	00000000 	.word	0x00000000

00400164 <afec_print_comp_result>:

/**
 * \brief Callback function for AFEC enter compasion window interrupt.
 */
static void afec_print_comp_result(void)
{
  400164:	b570      	push	{r4, r5, r6, lr}
	uint16_t us_adc;

	/* Disable Compare Interrupt. */
	afec_disable_interrupt(AFEC0, AFEC_INTERRUPT_COMP_ERROR);
  400166:	4c16      	ldr	r4, [pc, #88]	; (4001c0 <afec_print_comp_result+0x5c>)
  400168:	2112      	movs	r1, #18
  40016a:	4620      	mov	r0, r4
  40016c:	4b15      	ldr	r3, [pc, #84]	; (4001c4 <afec_print_comp_result+0x60>)
  40016e:	4798      	blx	r3
static inline uint32_t afec_channel_get_value(Afec *const afec,
		enum afec_channel_num afec_ch)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  400170:	2305      	movs	r3, #5
  400172:	6663      	str	r3, [r4, #100]	; 0x64
	return afec->AFEC_CDR;
  400174:	6ea6      	ldr	r6, [r4, #104]	; 0x68

	printf("-ISR-:Potentiometer voltage %d mv is in the comparison "
			"window:%d -%d mv!\n\r",
			(int)(us_adc * VOLT_REF / MAX_DIGITAL),
			(int)(gs_us_low_threshold * VOLT_REF / MAX_DIGITAL),
			(int)(gs_us_high_threshold * VOLT_REF / MAX_DIGITAL));
  400176:	4b14      	ldr	r3, [pc, #80]	; (4001c8 <afec_print_comp_result+0x64>)
  400178:	881a      	ldrh	r2, [r3, #0]
  40017a:	f640 40e4 	movw	r0, #3300	; 0xce4
  40017e:	fb00 f202 	mul.w	r2, r0, r2
  400182:	4912      	ldr	r1, [pc, #72]	; (4001cc <afec_print_comp_result+0x68>)
  400184:	fba1 4302 	umull	r4, r3, r1, r2
  400188:	1ad2      	subs	r2, r2, r3
  40018a:	eb03 0252 	add.w	r2, r3, r2, lsr #1
			(int)(gs_us_low_threshold * VOLT_REF / MAX_DIGITAL),
  40018e:	4b10      	ldr	r3, [pc, #64]	; (4001d0 <afec_print_comp_result+0x6c>)
  400190:	881c      	ldrh	r4, [r3, #0]
  400192:	fb00 f404 	mul.w	r4, r0, r4
  400196:	fba1 3504 	umull	r3, r5, r1, r4
  40019a:	1b64      	subs	r4, r4, r5
  40019c:	eb05 0454 	add.w	r4, r5, r4, lsr #1
			(int)(us_adc * VOLT_REF / MAX_DIGITAL),
  4001a0:	b2b5      	uxth	r5, r6
  4001a2:	fb00 f005 	mul.w	r0, r0, r5
  4001a6:	fba1 3100 	umull	r3, r1, r1, r0
  4001aa:	1a40      	subs	r0, r0, r1
  4001ac:	eb01 0150 	add.w	r1, r1, r0, lsr #1
	printf("-ISR-:Potentiometer voltage %d mv is in the comparison "
  4001b0:	0ad3      	lsrs	r3, r2, #11
  4001b2:	0ae2      	lsrs	r2, r4, #11
  4001b4:	0ac9      	lsrs	r1, r1, #11
  4001b6:	4807      	ldr	r0, [pc, #28]	; (4001d4 <afec_print_comp_result+0x70>)
  4001b8:	4c07      	ldr	r4, [pc, #28]	; (4001d8 <afec_print_comp_result+0x74>)
  4001ba:	47a0      	blx	r4
  4001bc:	bd70      	pop	{r4, r5, r6, pc}
  4001be:	bf00      	nop
  4001c0:	400b0000 	.word	0x400b0000
  4001c4:	004008f9 	.word	0x004008f9
  4001c8:	200009dc 	.word	0x200009dc
  4001cc:	00100101 	.word	0x00100101
  4001d0:	200009de 	.word	0x200009de
  4001d4:	00403e38 	.word	0x00403e38
  4001d8:	00400e69 	.word	0x00400e69

004001dc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4001dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4001de:	b083      	sub	sp, #12
  4001e0:	4605      	mov	r5, r0
  4001e2:	460c      	mov	r4, r1
	uint32_t val = 0;
  4001e4:	2300      	movs	r3, #0
  4001e6:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4001e8:	4b18      	ldr	r3, [pc, #96]	; (40024c <usart_serial_getchar+0x70>)
  4001ea:	4298      	cmp	r0, r3
  4001ec:	d00a      	beq.n	400204 <usart_serial_getchar+0x28>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4001ee:	4b18      	ldr	r3, [pc, #96]	; (400250 <usart_serial_getchar+0x74>)
  4001f0:	4298      	cmp	r0, r3
  4001f2:	d00f      	beq.n	400214 <usart_serial_getchar+0x38>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4001f4:	4b17      	ldr	r3, [pc, #92]	; (400254 <usart_serial_getchar+0x78>)
  4001f6:	4298      	cmp	r0, r3
  4001f8:	d014      	beq.n	400224 <usart_serial_getchar+0x48>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4001fa:	4b17      	ldr	r3, [pc, #92]	; (400258 <usart_serial_getchar+0x7c>)
  4001fc:	429d      	cmp	r5, r3
  4001fe:	d01b      	beq.n	400238 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400200:	b003      	add	sp, #12
  400202:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  400204:	461f      	mov	r7, r3
  400206:	4e15      	ldr	r6, [pc, #84]	; (40025c <usart_serial_getchar+0x80>)
  400208:	4621      	mov	r1, r4
  40020a:	4638      	mov	r0, r7
  40020c:	47b0      	blx	r6
  40020e:	2800      	cmp	r0, #0
  400210:	d1fa      	bne.n	400208 <usart_serial_getchar+0x2c>
  400212:	e7f2      	b.n	4001fa <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  400214:	461e      	mov	r6, r3
  400216:	4d11      	ldr	r5, [pc, #68]	; (40025c <usart_serial_getchar+0x80>)
  400218:	4621      	mov	r1, r4
  40021a:	4630      	mov	r0, r6
  40021c:	47a8      	blx	r5
  40021e:	2800      	cmp	r0, #0
  400220:	d1fa      	bne.n	400218 <usart_serial_getchar+0x3c>
  400222:	e7ed      	b.n	400200 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  400224:	461e      	mov	r6, r3
  400226:	4d0e      	ldr	r5, [pc, #56]	; (400260 <usart_serial_getchar+0x84>)
  400228:	a901      	add	r1, sp, #4
  40022a:	4630      	mov	r0, r6
  40022c:	47a8      	blx	r5
  40022e:	2800      	cmp	r0, #0
  400230:	d1fa      	bne.n	400228 <usart_serial_getchar+0x4c>
		*data = (uint8_t)(val & 0xFF);
  400232:	9b01      	ldr	r3, [sp, #4]
  400234:	7023      	strb	r3, [r4, #0]
  400236:	e7e3      	b.n	400200 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  400238:	461e      	mov	r6, r3
  40023a:	4d09      	ldr	r5, [pc, #36]	; (400260 <usart_serial_getchar+0x84>)
  40023c:	a901      	add	r1, sp, #4
  40023e:	4630      	mov	r0, r6
  400240:	47a8      	blx	r5
  400242:	2800      	cmp	r0, #0
  400244:	d1fa      	bne.n	40023c <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
  400246:	9b01      	ldr	r3, [sp, #4]
  400248:	7023      	strb	r3, [r4, #0]
}
  40024a:	e7d9      	b.n	400200 <usart_serial_getchar+0x24>
  40024c:	400e0600 	.word	0x400e0600
  400250:	40060600 	.word	0x40060600
  400254:	400a0000 	.word	0x400a0000
  400258:	400a4000 	.word	0x400a4000
  40025c:	00400b41 	.word	0x00400b41
  400260:	00400b67 	.word	0x00400b67

00400264 <usart_serial_putchar>:
{
  400264:	b570      	push	{r4, r5, r6, lr}
  400266:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  400268:	4b18      	ldr	r3, [pc, #96]	; (4002cc <usart_serial_putchar+0x68>)
  40026a:	4298      	cmp	r0, r3
  40026c:	d00a      	beq.n	400284 <usart_serial_putchar+0x20>
	if (UART1 == (Uart*)p_usart) {
  40026e:	4b18      	ldr	r3, [pc, #96]	; (4002d0 <usart_serial_putchar+0x6c>)
  400270:	4298      	cmp	r0, r3
  400272:	d010      	beq.n	400296 <usart_serial_putchar+0x32>
	if (USART0 == p_usart) {
  400274:	4b17      	ldr	r3, [pc, #92]	; (4002d4 <usart_serial_putchar+0x70>)
  400276:	4298      	cmp	r0, r3
  400278:	d016      	beq.n	4002a8 <usart_serial_putchar+0x44>
	if (USART1 == p_usart) {
  40027a:	4b17      	ldr	r3, [pc, #92]	; (4002d8 <usart_serial_putchar+0x74>)
  40027c:	4298      	cmp	r0, r3
  40027e:	d01c      	beq.n	4002ba <usart_serial_putchar+0x56>
	return 0;
  400280:	2000      	movs	r0, #0
}
  400282:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400284:	461e      	mov	r6, r3
  400286:	4d15      	ldr	r5, [pc, #84]	; (4002dc <usart_serial_putchar+0x78>)
  400288:	4621      	mov	r1, r4
  40028a:	4630      	mov	r0, r6
  40028c:	47a8      	blx	r5
  40028e:	2800      	cmp	r0, #0
  400290:	d1fa      	bne.n	400288 <usart_serial_putchar+0x24>
		return 1;
  400292:	2001      	movs	r0, #1
  400294:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400296:	461e      	mov	r6, r3
  400298:	4d10      	ldr	r5, [pc, #64]	; (4002dc <usart_serial_putchar+0x78>)
  40029a:	4621      	mov	r1, r4
  40029c:	4630      	mov	r0, r6
  40029e:	47a8      	blx	r5
  4002a0:	2800      	cmp	r0, #0
  4002a2:	d1fa      	bne.n	40029a <usart_serial_putchar+0x36>
		return 1;
  4002a4:	2001      	movs	r0, #1
  4002a6:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4002a8:	461e      	mov	r6, r3
  4002aa:	4d0d      	ldr	r5, [pc, #52]	; (4002e0 <usart_serial_putchar+0x7c>)
  4002ac:	4621      	mov	r1, r4
  4002ae:	4630      	mov	r0, r6
  4002b0:	47a8      	blx	r5
  4002b2:	2800      	cmp	r0, #0
  4002b4:	d1fa      	bne.n	4002ac <usart_serial_putchar+0x48>
		return 1;
  4002b6:	2001      	movs	r0, #1
  4002b8:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4002ba:	461e      	mov	r6, r3
  4002bc:	4d08      	ldr	r5, [pc, #32]	; (4002e0 <usart_serial_putchar+0x7c>)
  4002be:	4621      	mov	r1, r4
  4002c0:	4630      	mov	r0, r6
  4002c2:	47a8      	blx	r5
  4002c4:	2800      	cmp	r0, #0
  4002c6:	d1fa      	bne.n	4002be <usart_serial_putchar+0x5a>
		return 1;
  4002c8:	2001      	movs	r0, #1
  4002ca:	bd70      	pop	{r4, r5, r6, pc}
  4002cc:	400e0600 	.word	0x400e0600
  4002d0:	40060600 	.word	0x40060600
  4002d4:	400a0000 	.word	0x400a0000
  4002d8:	400a4000 	.word	0x400a4000
  4002dc:	00400b31 	.word	0x00400b31
  4002e0:	00400b53 	.word	0x00400b53

004002e4 <main>:
 * \brief Application entry point.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
  4002e4:	b580      	push	{r7, lr}
  4002e6:	b08c      	sub	sp, #48	; 0x30
	/* Initialize the SAM system. */
	sysclk_init();
  4002e8:	4b35      	ldr	r3, [pc, #212]	; (4003c0 <main+0xdc>)
  4002ea:	4798      	blx	r3
	board_init();
  4002ec:	4b35      	ldr	r3, [pc, #212]	; (4003c4 <main+0xe0>)
  4002ee:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4002f0:	2007      	movs	r0, #7
  4002f2:	4d35      	ldr	r5, [pc, #212]	; (4003c8 <main+0xe4>)
  4002f4:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  4002f6:	4c35      	ldr	r4, [pc, #212]	; (4003cc <main+0xe8>)
  4002f8:	4b35      	ldr	r3, [pc, #212]	; (4003d0 <main+0xec>)
  4002fa:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4002fc:	4a35      	ldr	r2, [pc, #212]	; (4003d4 <main+0xf0>)
  4002fe:	4b36      	ldr	r3, [pc, #216]	; (4003d8 <main+0xf4>)
  400300:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400302:	4a36      	ldr	r2, [pc, #216]	; (4003dc <main+0xf8>)
  400304:	4b36      	ldr	r3, [pc, #216]	; (4003e0 <main+0xfc>)
  400306:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400308:	4b36      	ldr	r3, [pc, #216]	; (4003e4 <main+0x100>)
  40030a:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
  40030c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400310:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
  400312:	f44f 6900 	mov.w	r9, #2048	; 0x800
  400316:	f8cd 900c 	str.w	r9, [sp, #12]
  40031a:	2007      	movs	r0, #7
  40031c:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
  40031e:	a901      	add	r1, sp, #4
  400320:	4620      	mov	r0, r4
  400322:	4b31      	ldr	r3, [pc, #196]	; (4003e8 <main+0x104>)
  400324:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400326:	4d31      	ldr	r5, [pc, #196]	; (4003ec <main+0x108>)
  400328:	682b      	ldr	r3, [r5, #0]
  40032a:	2100      	movs	r1, #0
  40032c:	6898      	ldr	r0, [r3, #8]
  40032e:	4c30      	ldr	r4, [pc, #192]	; (4003f0 <main+0x10c>)
  400330:	47a0      	blx	r4
	setbuf(stdin, NULL);
  400332:	682b      	ldr	r3, [r5, #0]
  400334:	2100      	movs	r1, #0
  400336:	6858      	ldr	r0, [r3, #4]
  400338:	47a0      	blx	r4

	configure_console();

	/* Output example information. */
	puts(STRING_HEADER);
  40033a:	482e      	ldr	r0, [pc, #184]	; (4003f4 <main+0x110>)
  40033c:	4b2e      	ldr	r3, [pc, #184]	; (4003f8 <main+0x114>)
  40033e:	4798      	blx	r3

	gs_us_low_threshold = 0x0;
  400340:	4e2e      	ldr	r6, [pc, #184]	; (4003fc <main+0x118>)
  400342:	f04f 0800 	mov.w	r8, #0
  400346:	f8a6 8000 	strh.w	r8, [r6]
	gs_us_high_threshold = 0x7FF;
  40034a:	4f2d      	ldr	r7, [pc, #180]	; (400400 <main+0x11c>)
  40034c:	f240 73ff 	movw	r3, #2047	; 0x7ff
  400350:	803b      	strh	r3, [r7, #0]

	afec_enable(AFEC0);
  400352:	4c2c      	ldr	r4, [pc, #176]	; (400404 <main+0x120>)
  400354:	4620      	mov	r0, r4
  400356:	4b2c      	ldr	r3, [pc, #176]	; (400408 <main+0x124>)
  400358:	4798      	blx	r3

	struct afec_config afec_cfg;

	afec_get_config_defaults(&afec_cfg);
  40035a:	a805      	add	r0, sp, #20
  40035c:	4b2b      	ldr	r3, [pc, #172]	; (40040c <main+0x128>)
  40035e:	4798      	blx	r3
	afec_init(AFEC0, &afec_cfg);
  400360:	a905      	add	r1, sp, #20
  400362:	4620      	mov	r0, r4
  400364:	4b2a      	ldr	r3, [pc, #168]	; (400410 <main+0x12c>)
  400366:	4798      	blx	r3

	struct afec_ch_config afec_ch_cfg;
	afec_ch_get_config_defaults(&afec_ch_cfg);
  400368:	a804      	add	r0, sp, #16
  40036a:	4b2a      	ldr	r3, [pc, #168]	; (400414 <main+0x130>)
  40036c:	4798      	blx	r3
static inline void afec_channel_set_analog_offset(Afec *const afec,
		enum afec_channel_num afec_ch, uint16_t aoffset)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  40036e:	2505      	movs	r5, #5
  400370:	6665      	str	r5, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  400372:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
	 * down to 0.
	 */
	afec_channel_set_analog_offset(AFEC0, AFEC_CHANNEL_POTENTIOMETER, 0x800);
#endif

	afec_ch_set_config(AFEC0, AFEC_CHANNEL_POTENTIOMETER, &afec_ch_cfg);
  400376:	aa04      	add	r2, sp, #16
  400378:	4629      	mov	r1, r5
  40037a:	4620      	mov	r0, r4
  40037c:	4b26      	ldr	r3, [pc, #152]	; (400418 <main+0x134>)
  40037e:	4798      	blx	r3
	reg = afec->AFEC_MR;
  400380:	6863      	ldr	r3, [r4, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  400382:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
	afec->AFEC_MR = reg;
  400386:	6063      	str	r3, [r4, #4]
	afec_set_trigger(AFEC0, AFEC_TRIG_SW);

	afec_set_comparison_mode(AFEC0, AFEC_CMP_MODE_2, AFEC_CHANNEL_POTENTIOMETER, 0);
  400388:	4643      	mov	r3, r8
  40038a:	462a      	mov	r2, r5
  40038c:	2102      	movs	r1, #2
  40038e:	4620      	mov	r0, r4
  400390:	4d22      	ldr	r5, [pc, #136]	; (40041c <main+0x138>)
  400392:	47a8      	blx	r5
			AFEC_CWR_HIGHTHRES(us_high_threshold);
  400394:	883a      	ldrh	r2, [r7, #0]
	afec->AFEC_CWR = AFEC_CWR_LOWTHRES(us_low_threshold) |
  400396:	8833      	ldrh	r3, [r6, #0]
  400398:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40039c:	6523      	str	r3, [r4, #80]	; 0x50
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  40039e:	2320      	movs	r3, #32
  4003a0:	6163      	str	r3, [r4, #20]
	afec_set_comparison_window(AFEC0, gs_us_low_threshold, gs_us_high_threshold);

	/* Enable channel for potentiometer. */
	afec_channel_enable(AFEC0, AFEC_CHANNEL_POTENTIOMETER);

	afec_set_callback(AFEC0, AFEC_INTERRUPT_COMP_ERROR, afec_print_comp_result, 1);
  4003a2:	2301      	movs	r3, #1
  4003a4:	4a1e      	ldr	r2, [pc, #120]	; (400420 <main+0x13c>)
  4003a6:	2112      	movs	r1, #18
  4003a8:	4620      	mov	r0, r4
  4003aa:	4c1e      	ldr	r4, [pc, #120]	; (400424 <main+0x140>)
  4003ac:	47a0      	blx	r4
	afec->AFEC_CR = AFEC_CR_START;
  4003ae:	4f15      	ldr	r7, [pc, #84]	; (400404 <main+0x120>)
  4003b0:	2602      	movs	r6, #2

	while (1) {
		afec_start_software_conversion(AFEC0);
		delay_ms(1000);
  4003b2:	4d1d      	ldr	r5, [pc, #116]	; (400428 <main+0x144>)
  4003b4:	4c1d      	ldr	r4, [pc, #116]	; (40042c <main+0x148>)
  4003b6:	603e      	str	r6, [r7, #0]
  4003b8:	4628      	mov	r0, r5
  4003ba:	47a0      	blx	r4
  4003bc:	e7fb      	b.n	4003b6 <main+0xd2>
  4003be:	bf00      	nop
  4003c0:	00400431 	.word	0x00400431
  4003c4:	00400521 	.word	0x00400521
  4003c8:	00400aa5 	.word	0x00400aa5
  4003cc:	400e0600 	.word	0x400e0600
  4003d0:	20000a28 	.word	0x20000a28
  4003d4:	00400265 	.word	0x00400265
  4003d8:	20000a24 	.word	0x20000a24
  4003dc:	004001dd 	.word	0x004001dd
  4003e0:	20000a20 	.word	0x20000a20
  4003e4:	07270e00 	.word	0x07270e00
  4003e8:	00400af9 	.word	0x00400af9
  4003ec:	20000010 	.word	0x20000010
  4003f0:	00400fd9 	.word	0x00400fd9
  4003f4:	00403e84 	.word	0x00403e84
  4003f8:	00400fc9 	.word	0x00400fc9
  4003fc:	200009de 	.word	0x200009de
  400400:	200009dc 	.word	0x200009dc
  400404:	400b0000 	.word	0x400b0000
  400408:	00400959 	.word	0x00400959
  40040c:	00400729 	.word	0x00400729
  400410:	00400765 	.word	0x00400765
  400414:	00400759 	.word	0x00400759
  400418:	004006f9 	.word	0x004006f9
  40041c:	00400839 	.word	0x00400839
  400420:	00400165 	.word	0x00400165
  400424:	004008a1 	.word	0x004008a1
  400428:	0082ca25 	.word	0x0082ca25
  40042c:	20000001 	.word	0x20000001

00400430 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400430:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400432:	480e      	ldr	r0, [pc, #56]	; (40046c <sysclk_init+0x3c>)
  400434:	4b0e      	ldr	r3, [pc, #56]	; (400470 <sysclk_init+0x40>)
  400436:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400438:	213e      	movs	r1, #62	; 0x3e
  40043a:	2000      	movs	r0, #0
  40043c:	4b0d      	ldr	r3, [pc, #52]	; (400474 <sysclk_init+0x44>)
  40043e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400440:	4c0d      	ldr	r4, [pc, #52]	; (400478 <sysclk_init+0x48>)
  400442:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400444:	2800      	cmp	r0, #0
  400446:	d0fc      	beq.n	400442 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400448:	4b0c      	ldr	r3, [pc, #48]	; (40047c <sysclk_init+0x4c>)
  40044a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  40044c:	4a0c      	ldr	r2, [pc, #48]	; (400480 <sysclk_init+0x50>)
  40044e:	4b0d      	ldr	r3, [pc, #52]	; (400484 <sysclk_init+0x54>)
  400450:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  400452:	4c0d      	ldr	r4, [pc, #52]	; (400488 <sysclk_init+0x58>)
  400454:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400456:	2800      	cmp	r0, #0
  400458:	d0fc      	beq.n	400454 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40045a:	2010      	movs	r0, #16
  40045c:	4b0b      	ldr	r3, [pc, #44]	; (40048c <sysclk_init+0x5c>)
  40045e:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400460:	4b0b      	ldr	r3, [pc, #44]	; (400490 <sysclk_init+0x60>)
  400462:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400464:	4801      	ldr	r0, [pc, #4]	; (40046c <sysclk_init+0x3c>)
  400466:	4b02      	ldr	r3, [pc, #8]	; (400470 <sysclk_init+0x40>)
  400468:	4798      	blx	r3
  40046a:	bd10      	pop	{r4, pc}
  40046c:	07270e00 	.word	0x07270e00
  400470:	00400d55 	.word	0x00400d55
  400474:	00400a21 	.word	0x00400a21
  400478:	00400a75 	.word	0x00400a75
  40047c:	00400a85 	.word	0x00400a85
  400480:	20133f01 	.word	0x20133f01
  400484:	400e0400 	.word	0x400e0400
  400488:	00400a95 	.word	0x00400a95
  40048c:	004009bd 	.word	0x004009bd
  400490:	00400c49 	.word	0x00400c49

00400494 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400498:	b980      	cbnz	r0, 4004bc <_read+0x28>
  40049a:	460c      	mov	r4, r1
  40049c:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  40049e:	2a00      	cmp	r2, #0
  4004a0:	dd0f      	ble.n	4004c2 <_read+0x2e>
  4004a2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4004a4:	4e08      	ldr	r6, [pc, #32]	; (4004c8 <_read+0x34>)
  4004a6:	4d09      	ldr	r5, [pc, #36]	; (4004cc <_read+0x38>)
  4004a8:	6830      	ldr	r0, [r6, #0]
  4004aa:	4621      	mov	r1, r4
  4004ac:	682b      	ldr	r3, [r5, #0]
  4004ae:	4798      	blx	r3
		ptr++;
  4004b0:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  4004b2:	42bc      	cmp	r4, r7
  4004b4:	d1f8      	bne.n	4004a8 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  4004b6:	4640      	mov	r0, r8
  4004b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4004bc:	f04f 38ff 	mov.w	r8, #4294967295
  4004c0:	e7f9      	b.n	4004b6 <_read+0x22>
	for (; len > 0; --len) {
  4004c2:	4680      	mov	r8, r0
  4004c4:	e7f7      	b.n	4004b6 <_read+0x22>
  4004c6:	bf00      	nop
  4004c8:	20000a28 	.word	0x20000a28
  4004cc:	20000a20 	.word	0x20000a20

004004d0 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4004d0:	3801      	subs	r0, #1
  4004d2:	2802      	cmp	r0, #2
  4004d4:	d815      	bhi.n	400502 <_write+0x32>
{
  4004d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4004da:	460e      	mov	r6, r1
  4004dc:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  4004de:	b19a      	cbz	r2, 400508 <_write+0x38>
  4004e0:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4004e2:	f8df 8038 	ldr.w	r8, [pc, #56]	; 40051c <_write+0x4c>
  4004e6:	4f0c      	ldr	r7, [pc, #48]	; (400518 <_write+0x48>)
  4004e8:	f8d8 0000 	ldr.w	r0, [r8]
  4004ec:	f815 1b01 	ldrb.w	r1, [r5], #1
  4004f0:	683b      	ldr	r3, [r7, #0]
  4004f2:	4798      	blx	r3
  4004f4:	2800      	cmp	r0, #0
  4004f6:	db0a      	blt.n	40050e <_write+0x3e>
  4004f8:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  4004fa:	3c01      	subs	r4, #1
  4004fc:	d1f4      	bne.n	4004e8 <_write+0x18>
  4004fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400502:	f04f 30ff 	mov.w	r0, #4294967295
  400506:	4770      	bx	lr
	for (; len != 0; --len) {
  400508:	4610      	mov	r0, r2
  40050a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  40050e:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400516:	bf00      	nop
  400518:	20000a24 	.word	0x20000a24
  40051c:	20000a28 	.word	0x20000a28

00400520 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  400520:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400522:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400526:	4b49      	ldr	r3, [pc, #292]	; (40064c <board_init+0x12c>)
  400528:	605a      	str	r2, [r3, #4]
  40052a:	2009      	movs	r0, #9
  40052c:	4c48      	ldr	r4, [pc, #288]	; (400650 <board_init+0x130>)
  40052e:	47a0      	blx	r4
  400530:	200a      	movs	r0, #10
  400532:	47a0      	blx	r4
  400534:	200b      	movs	r0, #11
  400536:	47a0      	blx	r4
  400538:	200c      	movs	r0, #12
  40053a:	47a0      	blx	r4
  40053c:	200d      	movs	r0, #13
  40053e:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400540:	4b44      	ldr	r3, [pc, #272]	; (400654 <board_init+0x134>)
  400542:	2201      	movs	r2, #1
  400544:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400546:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40054a:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40054c:	4942      	ldr	r1, [pc, #264]	; (400658 <board_init+0x138>)
  40054e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400552:	610a      	str	r2, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400554:	f8c1 20a0 	str.w	r2, [r1, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400558:	630a      	str	r2, [r1, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40055a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  40055e:	6108      	str	r0, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400560:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400564:	6308      	str	r0, [r1, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400566:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  40056a:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40056c:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400570:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400572:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400576:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400578:	6219      	str	r1, [r3, #32]
		base->PIO_IFSCER = mask;
  40057a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  40057e:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400580:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
  400584:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400586:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400588:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
  40058c:	6758      	str	r0, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  40058e:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400592:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400596:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40059a:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40059c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4005a0:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4005a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4005a6:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4005a8:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4005aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4005ae:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4005b0:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
  4005b4:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4005b6:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4005b8:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
  4005bc:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  4005be:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  4005c2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	base->PIO_AIMER = mask;
  4005c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4005ca:	2202      	movs	r2, #2
  4005cc:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4005ce:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4005d2:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4005d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4005d8:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4005da:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4005dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4005e0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4005e2:	f021 0102 	bic.w	r1, r1, #2
  4005e6:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4005e8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4005ea:	f021 0102 	bic.w	r1, r1, #2
  4005ee:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_AIMDR = mask;
  4005f0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4005f4:	2204      	movs	r2, #4
  4005f6:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4005f8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4005fc:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4005fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400602:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400604:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400606:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  40060a:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40060c:	f021 0104 	bic.w	r1, r1, #4
  400610:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400612:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400614:	f021 0104 	bic.w	r1, r1, #4
  400618:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  40061a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40061e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	base->PIO_AIMER = mask;
  400622:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400626:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  40062a:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40062c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400630:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400632:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400634:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400638:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40063a:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  40063e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400640:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400642:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  400646:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400648:	605a      	str	r2, [r3, #4]
  40064a:	bd10      	pop	{r4, pc}
  40064c:	400e1850 	.word	0x400e1850
  400650:	00400aa5 	.word	0x00400aa5
  400654:	400e0e00 	.word	0x400e0e00
  400658:	400e1400 	.word	0x400e1400

0040065c <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  40065c:	b570      	push	{r4, r5, r6, lr}
  40065e:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  400660:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  400662:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  400664:	4013      	ands	r3, r2
  400666:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400668:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  40066a:	4d21      	ldr	r5, [pc, #132]	; (4006f0 <afec_process_callback+0x94>)
  40066c:	42a8      	cmp	r0, r5
  40066e:	bf14      	ite	ne
  400670:	2500      	movne	r5, #0
  400672:	2501      	moveq	r5, #1
  400674:	006e      	lsls	r6, r5, #1
  400676:	442e      	add	r6, r5
  400678:	e00b      	b.n	400692 <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  40067a:	2c14      	cmp	r4, #20
  40067c:	d824      	bhi.n	4006c8 <afec_process_callback+0x6c>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  40067e:	9a01      	ldr	r2, [sp, #4]
  400680:	f104 0108 	add.w	r1, r4, #8
  400684:	2301      	movs	r3, #1
  400686:	408b      	lsls	r3, r1
  400688:	4213      	tst	r3, r2
  40068a:	d113      	bne.n	4006b4 <afec_process_callback+0x58>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  40068c:	3401      	adds	r4, #1
  40068e:	2c17      	cmp	r4, #23
  400690:	d02b      	beq.n	4006ea <afec_process_callback+0x8e>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  400692:	2c0f      	cmp	r4, #15
  400694:	d8f1      	bhi.n	40067a <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  400696:	9a01      	ldr	r2, [sp, #4]
  400698:	2301      	movs	r3, #1
  40069a:	40a3      	lsls	r3, r4
  40069c:	4213      	tst	r3, r2
  40069e:	d0f5      	beq.n	40068c <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4006a0:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  4006a4:	4423      	add	r3, r4
  4006a6:	4a13      	ldr	r2, [pc, #76]	; (4006f4 <afec_process_callback+0x98>)
  4006a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4006ac:	2b00      	cmp	r3, #0
  4006ae:	d0ed      	beq.n	40068c <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4006b0:	4798      	blx	r3
  4006b2:	e7eb      	b.n	40068c <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4006b4:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  4006b8:	4423      	add	r3, r4
  4006ba:	4a0e      	ldr	r2, [pc, #56]	; (4006f4 <afec_process_callback+0x98>)
  4006bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4006c0:	2b00      	cmp	r3, #0
  4006c2:	d0e3      	beq.n	40068c <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4006c4:	4798      	blx	r3
  4006c6:	e7e1      	b.n	40068c <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  4006c8:	9a01      	ldr	r2, [sp, #4]
  4006ca:	f104 0109 	add.w	r1, r4, #9
  4006ce:	2301      	movs	r3, #1
  4006d0:	408b      	lsls	r3, r1
  4006d2:	4213      	tst	r3, r2
  4006d4:	d0da      	beq.n	40068c <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4006d6:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  4006da:	4423      	add	r3, r4
  4006dc:	4a05      	ldr	r2, [pc, #20]	; (4006f4 <afec_process_callback+0x98>)
  4006de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4006e2:	2b00      	cmp	r3, #0
  4006e4:	d0d2      	beq.n	40068c <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4006e6:	4798      	blx	r3
  4006e8:	e7d0      	b.n	40068c <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  4006ea:	b002      	add	sp, #8
  4006ec:	bd70      	pop	{r4, r5, r6, pc}
  4006ee:	bf00      	nop
  4006f0:	400b4000 	.word	0x400b4000
  4006f4:	20000a2c 	.word	0x20000a2c

004006f8 <afec_ch_set_config>:
{
  4006f8:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  4006fa:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  4006fc:	2301      	movs	r3, #1
  4006fe:	408b      	lsls	r3, r1
  400700:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  400704:	7815      	ldrb	r5, [r2, #0]
  400706:	2d00      	cmp	r5, #0
  400708:	bf08      	it	eq
  40070a:	2300      	moveq	r3, #0
  40070c:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  40070e:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  400710:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  400712:	004b      	lsls	r3, r1, #1
  400714:	2103      	movs	r1, #3
  400716:	4099      	lsls	r1, r3
  400718:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  40071c:	7851      	ldrb	r1, [r2, #1]
  40071e:	4099      	lsls	r1, r3
  400720:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  400722:	6541      	str	r1, [r0, #84]	; 0x54
}
  400724:	bc30      	pop	{r4, r5}
  400726:	4770      	bx	lr

00400728 <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  400728:	2200      	movs	r2, #0
  40072a:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  40072c:	4b08      	ldr	r3, [pc, #32]	; (400750 <afec_get_config_defaults+0x28>)
  40072e:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  400730:	4b08      	ldr	r3, [pc, #32]	; (400754 <afec_get_config_defaults+0x2c>)
  400732:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400734:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  400738:	60c3      	str	r3, [r0, #12]
		cfg->settling_time = AFEC_SETTLING_TIME_0;
  40073a:	6102      	str	r2, [r0, #16]
		cfg->tracktim = 2;
  40073c:	2302      	movs	r3, #2
  40073e:	7503      	strb	r3, [r0, #20]
		cfg->transfer = 1;
  400740:	2301      	movs	r3, #1
  400742:	7543      	strb	r3, [r0, #21]
		cfg->anach = true;
  400744:	7583      	strb	r3, [r0, #22]
		cfg->useq = false;
  400746:	75c2      	strb	r2, [r0, #23]
		cfg->tag = true;
  400748:	7603      	strb	r3, [r0, #24]
		cfg->stm = true;
  40074a:	7643      	strb	r3, [r0, #25]
		cfg->ibctl = 1;
  40074c:	7683      	strb	r3, [r0, #26]
  40074e:	4770      	bx	lr
  400750:	07270e00 	.word	0x07270e00
  400754:	005b8d80 	.word	0x005b8d80

00400758 <afec_ch_get_config_defaults>:
	cfg->diff = false;
  400758:	2300      	movs	r3, #0
  40075a:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  40075c:	2301      	movs	r3, #1
  40075e:	7043      	strb	r3, [r0, #1]
  400760:	4770      	bx	lr
	...

00400764 <afec_init>:
	return afec->AFEC_ISR;
  400764:	6b03      	ldr	r3, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  400766:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40076a:	d001      	beq.n	400770 <afec_init+0xc>
		return STATUS_ERR_BUSY;
  40076c:	2019      	movs	r0, #25
  40076e:	4770      	bx	lr
{
  400770:	b470      	push	{r4, r5, r6}
	afec->AFEC_CR = AFEC_CR_SWRST;
  400772:	2301      	movs	r3, #1
  400774:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400776:	7dcb      	ldrb	r3, [r1, #23]
  400778:	2b00      	cmp	r3, #0
  40077a:	bf14      	ite	ne
  40077c:	f04f 4500 	movne.w	r5, #2147483648	; 0x80000000
  400780:	2500      	moveq	r5, #0
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
  400782:	7d8b      	ldrb	r3, [r1, #22]
  400784:	2b00      	cmp	r3, #0
  400786:	bf14      	ite	ne
  400788:	f44f 0400 	movne.w	r4, #8388608	; 0x800000
  40078c:	2400      	moveq	r4, #0
			AFEC_MR_TRACKTIM(config->tracktim) |
  40078e:	7d0b      	ldrb	r3, [r1, #20]
  400790:	061b      	lsls	r3, r3, #24
  400792:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400796:	690a      	ldr	r2, [r1, #16]
  400798:	68ce      	ldr	r6, [r1, #12]
  40079a:	4332      	orrs	r2, r6
  40079c:	4313      	orrs	r3, r2
			AFEC_MR_TRANSFER(config->transfer) |
  40079e:	7d4a      	ldrb	r2, [r1, #21]
  4007a0:	0712      	lsls	r2, r2, #28
  4007a2:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4007a6:	4313      	orrs	r3, r2
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
  4007a8:	688a      	ldr	r2, [r1, #8]
  4007aa:	0056      	lsls	r6, r2, #1
  4007ac:	684a      	ldr	r2, [r1, #4]
  4007ae:	fbb2 f2f6 	udiv	r2, r2, r6
  4007b2:	3a01      	subs	r2, #1
  4007b4:	0212      	lsls	r2, r2, #8
  4007b6:	b292      	uxth	r2, r2
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4007b8:	4313      	orrs	r3, r2
  4007ba:	432b      	orrs	r3, r5
  4007bc:	4323      	orrs	r3, r4
	afec->AFEC_MR = reg;
  4007be:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4007c0:	7e0b      	ldrb	r3, [r1, #24]
  4007c2:	2b00      	cmp	r3, #0
  4007c4:	bf14      	ite	ne
  4007c6:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  4007ca:	2300      	moveq	r3, #0
  4007cc:	680a      	ldr	r2, [r1, #0]
  4007ce:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  4007d0:	7e4a      	ldrb	r2, [r1, #25]
  4007d2:	2a00      	cmp	r2, #0
  4007d4:	bf14      	ite	ne
  4007d6:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  4007da:	2200      	moveq	r2, #0
			(config->resolution) |
  4007dc:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4007de:	6083      	str	r3, [r0, #8]
    afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl);
  4007e0:	7e8b      	ldrb	r3, [r1, #26]
  4007e2:	021b      	lsls	r3, r3, #8
  4007e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
  4007e8:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  4007ec:	4b0e      	ldr	r3, [pc, #56]	; (400828 <afec_init+0xc4>)
  4007ee:	4298      	cmp	r0, r3
  4007f0:	d005      	beq.n	4007fe <afec_init+0x9a>
	if(afec == AFEC1) {
  4007f2:	4b0e      	ldr	r3, [pc, #56]	; (40082c <afec_init+0xc8>)
  4007f4:	4298      	cmp	r0, r3
  4007f6:	d00c      	beq.n	400812 <afec_init+0xae>
	return STATUS_OK;
  4007f8:	2000      	movs	r0, #0
}
  4007fa:	bc70      	pop	{r4, r5, r6}
  4007fc:	4770      	bx	lr
  4007fe:	4b0c      	ldr	r3, [pc, #48]	; (400830 <afec_init+0xcc>)
  400800:	f103 015c 	add.w	r1, r3, #92	; 0x5c
			afec_callback_pointer[0][i] = 0;
  400804:	2200      	movs	r2, #0
  400806:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  40080a:	428b      	cmp	r3, r1
  40080c:	d1fb      	bne.n	400806 <afec_init+0xa2>
	return STATUS_OK;
  40080e:	2000      	movs	r0, #0
  400810:	e7f3      	b.n	4007fa <afec_init+0x96>
  400812:	4b08      	ldr	r3, [pc, #32]	; (400834 <afec_init+0xd0>)
  400814:	f103 015c 	add.w	r1, r3, #92	; 0x5c
			afec_callback_pointer[1][i] = 0;
  400818:	2200      	movs	r2, #0
  40081a:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  40081e:	428b      	cmp	r3, r1
  400820:	d1fb      	bne.n	40081a <afec_init+0xb6>
	return STATUS_OK;
  400822:	2000      	movs	r0, #0
  400824:	e7e9      	b.n	4007fa <afec_init+0x96>
  400826:	bf00      	nop
  400828:	400b0000 	.word	0x400b0000
  40082c:	400b4000 	.word	0x400b4000
  400830:	20000a28 	.word	0x20000a28
  400834:	20000a84 	.word	0x20000a84

00400838 <afec_set_comparison_mode>:
{
  400838:	b430      	push	{r4, r5}
	reg = afec->AFEC_EMR;
  40083a:	6884      	ldr	r4, [r0, #8]
	reg &= ~(AFEC_EMR_CMPSEL_Msk |
  40083c:	f424 5443 	bic.w	r4, r4, #12480	; 0x30c0
  400840:	f024 043b 	bic.w	r4, r4, #59	; 0x3b
			: AFEC_EMR_CMPSEL(channel)) |
  400844:	f64f 75ff 	movw	r5, #65535	; 0xffff
  400848:	42aa      	cmp	r2, r5
  40084a:	bf1a      	itte	ne
  40084c:	00d2      	lslne	r2, r2, #3
  40084e:	b2d2      	uxtbne	r2, r2
  400850:	f44f 7200 	moveq.w	r2, #512	; 0x200
			AFEC_EMR_CMPFILTER(cmp_filter);
  400854:	031b      	lsls	r3, r3, #12
  400856:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
  40085a:	4323      	orrs	r3, r4
  40085c:	4319      	orrs	r1, r3
	reg |= mode |
  40085e:	4311      	orrs	r1, r2
	afec->AFEC_EMR = reg;
  400860:	6081      	str	r1, [r0, #8]
}
  400862:	bc30      	pop	{r4, r5}
  400864:	4770      	bx	lr
	...

00400868 <afec_enable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  400868:	4b0c      	ldr	r3, [pc, #48]	; (40089c <afec_enable_interrupt+0x34>)
  40086a:	4299      	cmp	r1, r3
  40086c:	d007      	beq.n	40087e <afec_enable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  40086e:	290f      	cmp	r1, #15
  400870:	d80b      	bhi.n	40088a <afec_enable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_15) {
  400872:	d006      	beq.n	400882 <afec_enable_interrupt+0x1a>
			afec->AFEC_IER = 1 << interrupt_source;
  400874:	2301      	movs	r3, #1
  400876:	fa03 f101 	lsl.w	r1, r3, r1
  40087a:	6241      	str	r1, [r0, #36]	; 0x24
  40087c:	4770      	bx	lr
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  40087e:	6243      	str	r3, [r0, #36]	; 0x24
		return;
  400880:	4770      	bx	lr
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;	  
  400882:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400886:	6243      	str	r3, [r0, #36]	; 0x24
  400888:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  40088a:	2914      	cmp	r1, #20
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  40088c:	bf94      	ite	ls
  40088e:	3108      	addls	r1, #8
				+ AFEC_INTERRUPT_GAP2);
  400890:	3109      	addhi	r1, #9
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  400892:	2301      	movs	r3, #1
  400894:	fa03 f101 	lsl.w	r1, r3, r1
  400898:	6241      	str	r1, [r0, #36]	; 0x24
  40089a:	4770      	bx	lr
  40089c:	df00ffff 	.word	0xdf00ffff

004008a0 <afec_set_callback>:
{
  4008a0:	b538      	push	{r3, r4, r5, lr}
	if (afec == AFEC1) {
  4008a2:	4c11      	ldr	r4, [pc, #68]	; (4008e8 <afec_set_callback+0x48>)
  4008a4:	42a0      	cmp	r0, r4
	afec_callback_pointer[i][source] = callback;
  4008a6:	bf0c      	ite	eq
  4008a8:	2417      	moveq	r4, #23
  4008aa:	2400      	movne	r4, #0
  4008ac:	440c      	add	r4, r1
  4008ae:	4d0f      	ldr	r5, [pc, #60]	; (4008ec <afec_set_callback+0x4c>)
  4008b0:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
	if (!i) {
  4008b4:	d10a      	bne.n	4008cc <afec_set_callback+0x2c>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4008b6:	4a0e      	ldr	r2, [pc, #56]	; (4008f0 <afec_set_callback+0x50>)
  4008b8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
  4008bc:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  4008c0:	011b      	lsls	r3, r3, #4
  4008c2:	b2db      	uxtb	r3, r3
  4008c4:	f882 331f 	strb.w	r3, [r2, #799]	; 0x31f
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4008c8:	6014      	str	r4, [r2, #0]
  4008ca:	e009      	b.n	4008e0 <afec_set_callback+0x40>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4008cc:	4a08      	ldr	r2, [pc, #32]	; (4008f0 <afec_set_callback+0x50>)
  4008ce:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  4008d2:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  4008d6:	011b      	lsls	r3, r3, #4
  4008d8:	b2db      	uxtb	r3, r3
  4008da:	f882 331e 	strb.w	r3, [r2, #798]	; 0x31e
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4008de:	6014      	str	r4, [r2, #0]
	afec_enable_interrupt(afec, source);
  4008e0:	4b04      	ldr	r3, [pc, #16]	; (4008f4 <afec_set_callback+0x54>)
  4008e2:	4798      	blx	r3
  4008e4:	bd38      	pop	{r3, r4, r5, pc}
  4008e6:	bf00      	nop
  4008e8:	400b4000 	.word	0x400b4000
  4008ec:	20000a2c 	.word	0x20000a2c
  4008f0:	e000e100 	.word	0xe000e100
  4008f4:	00400869 	.word	0x00400869

004008f8 <afec_disable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  4008f8:	4b0c      	ldr	r3, [pc, #48]	; (40092c <afec_disable_interrupt+0x34>)
  4008fa:	4299      	cmp	r1, r3
  4008fc:	d007      	beq.n	40090e <afec_disable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  4008fe:	290f      	cmp	r1, #15
  400900:	d80b      	bhi.n	40091a <afec_disable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_15) {
  400902:	d006      	beq.n	400912 <afec_disable_interrupt+0x1a>
			afec->AFEC_IDR = 1 << interrupt_source;
  400904:	2301      	movs	r3, #1
  400906:	fa03 f101 	lsl.w	r1, r3, r1
  40090a:	6281      	str	r1, [r0, #40]	; 0x28
  40090c:	4770      	bx	lr
		afec->AFEC_IDR = AFEC_INTERRUPT_ALL;
  40090e:	6283      	str	r3, [r0, #40]	; 0x28
		return;
  400910:	4770      	bx	lr
			afec->AFEC_IDR = 1 << AFEC_TEMP_INT_SOURCE_NUM;	  
  400912:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400916:	6283      	str	r3, [r0, #40]	; 0x28
  400918:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  40091a:	2914      	cmp	r1, #20
		afec->AFEC_IDR = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  40091c:	bf94      	ite	ls
  40091e:	3108      	addls	r1, #8
				+ AFEC_INTERRUPT_GAP2);
  400920:	3109      	addhi	r1, #9
		afec->AFEC_IDR = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  400922:	2301      	movs	r3, #1
  400924:	fa03 f101 	lsl.w	r1, r3, r1
  400928:	6281      	str	r1, [r0, #40]	; 0x28
  40092a:	4770      	bx	lr
  40092c:	df00ffff 	.word	0xdf00ffff

00400930 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  400930:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  400932:	4802      	ldr	r0, [pc, #8]	; (40093c <AFEC0_Handler+0xc>)
  400934:	4b02      	ldr	r3, [pc, #8]	; (400940 <AFEC0_Handler+0x10>)
  400936:	4798      	blx	r3
  400938:	bd08      	pop	{r3, pc}
  40093a:	bf00      	nop
  40093c:	400b0000 	.word	0x400b0000
  400940:	0040065d 	.word	0x0040065d

00400944 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  400944:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  400946:	4802      	ldr	r0, [pc, #8]	; (400950 <AFEC1_Handler+0xc>)
  400948:	4b02      	ldr	r3, [pc, #8]	; (400954 <AFEC1_Handler+0x10>)
  40094a:	4798      	blx	r3
  40094c:	bd08      	pop	{r3, pc}
  40094e:	bf00      	nop
  400950:	400b4000 	.word	0x400b4000
  400954:	0040065d 	.word	0x0040065d

00400958 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  400958:	b500      	push	{lr}
  40095a:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  40095c:	4b13      	ldr	r3, [pc, #76]	; (4009ac <afec_enable+0x54>)
  40095e:	4298      	cmp	r0, r3
  400960:	bf0c      	ite	eq
  400962:	201f      	moveq	r0, #31
  400964:	201e      	movne	r0, #30
  400966:	4b12      	ldr	r3, [pc, #72]	; (4009b0 <afec_enable+0x58>)
  400968:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  40096a:	4b12      	ldr	r3, [pc, #72]	; (4009b4 <afec_enable+0x5c>)
  40096c:	789b      	ldrb	r3, [r3, #2]
  40096e:	2bff      	cmp	r3, #255	; 0xff
  400970:	d01a      	beq.n	4009a8 <afec_enable+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400972:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400976:	fab3 f383 	clz	r3, r3
  40097a:	095b      	lsrs	r3, r3, #5
  40097c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40097e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400980:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400984:	2200      	movs	r2, #0
  400986:	4b0c      	ldr	r3, [pc, #48]	; (4009b8 <afec_enable+0x60>)
  400988:	701a      	strb	r2, [r3, #0]
	return flags;
  40098a:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  40098c:	4a09      	ldr	r2, [pc, #36]	; (4009b4 <afec_enable+0x5c>)
  40098e:	7893      	ldrb	r3, [r2, #2]
  400990:	3301      	adds	r3, #1
  400992:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400994:	b129      	cbz	r1, 4009a2 <afec_enable+0x4a>
		cpu_irq_enable();
  400996:	2201      	movs	r2, #1
  400998:	4b07      	ldr	r3, [pc, #28]	; (4009b8 <afec_enable+0x60>)
  40099a:	701a      	strb	r2, [r3, #0]
  40099c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4009a0:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  4009a2:	b003      	add	sp, #12
  4009a4:	f85d fb04 	ldr.w	pc, [sp], #4
  4009a8:	e7fe      	b.n	4009a8 <afec_enable+0x50>
  4009aa:	bf00      	nop
  4009ac:	400b4000 	.word	0x400b4000
  4009b0:	00400aa5 	.word	0x00400aa5
  4009b4:	20000a18 	.word	0x20000a18
  4009b8:	2000000a 	.word	0x2000000a

004009bc <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4009bc:	4a17      	ldr	r2, [pc, #92]	; (400a1c <pmc_switch_mck_to_pllack+0x60>)
  4009be:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4009c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4009c4:	4318      	orrs	r0, r3
  4009c6:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4009c8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4009ca:	f013 0f08 	tst.w	r3, #8
  4009ce:	d10a      	bne.n	4009e6 <pmc_switch_mck_to_pllack+0x2a>
  4009d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4009d4:	4911      	ldr	r1, [pc, #68]	; (400a1c <pmc_switch_mck_to_pllack+0x60>)
  4009d6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4009d8:	f012 0f08 	tst.w	r2, #8
  4009dc:	d103      	bne.n	4009e6 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4009de:	3b01      	subs	r3, #1
  4009e0:	d1f9      	bne.n	4009d6 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4009e2:	2001      	movs	r0, #1
  4009e4:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4009e6:	4a0d      	ldr	r2, [pc, #52]	; (400a1c <pmc_switch_mck_to_pllack+0x60>)
  4009e8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4009ea:	f023 0303 	bic.w	r3, r3, #3
  4009ee:	f043 0302 	orr.w	r3, r3, #2
  4009f2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4009f4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4009f6:	f013 0f08 	tst.w	r3, #8
  4009fa:	d10a      	bne.n	400a12 <pmc_switch_mck_to_pllack+0x56>
  4009fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400a00:	4906      	ldr	r1, [pc, #24]	; (400a1c <pmc_switch_mck_to_pllack+0x60>)
  400a02:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400a04:	f012 0f08 	tst.w	r2, #8
  400a08:	d105      	bne.n	400a16 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400a0a:	3b01      	subs	r3, #1
  400a0c:	d1f9      	bne.n	400a02 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400a0e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400a10:	4770      	bx	lr
	return 0;
  400a12:	2000      	movs	r0, #0
  400a14:	4770      	bx	lr
  400a16:	2000      	movs	r0, #0
  400a18:	4770      	bx	lr
  400a1a:	bf00      	nop
  400a1c:	400e0400 	.word	0x400e0400

00400a20 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400a20:	b9c8      	cbnz	r0, 400a56 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400a22:	4a11      	ldr	r2, [pc, #68]	; (400a68 <pmc_switch_mainck_to_xtal+0x48>)
  400a24:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400a26:	0209      	lsls	r1, r1, #8
  400a28:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400a2a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400a2e:	f023 0303 	bic.w	r3, r3, #3
  400a32:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400a36:	f043 0301 	orr.w	r3, r3, #1
  400a3a:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400a3c:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400a3e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400a40:	f013 0f01 	tst.w	r3, #1
  400a44:	d0fb      	beq.n	400a3e <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400a46:	4a08      	ldr	r2, [pc, #32]	; (400a68 <pmc_switch_mainck_to_xtal+0x48>)
  400a48:	6a13      	ldr	r3, [r2, #32]
  400a4a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400a52:	6213      	str	r3, [r2, #32]
  400a54:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400a56:	4904      	ldr	r1, [pc, #16]	; (400a68 <pmc_switch_mainck_to_xtal+0x48>)
  400a58:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400a5a:	4a04      	ldr	r2, [pc, #16]	; (400a6c <pmc_switch_mainck_to_xtal+0x4c>)
  400a5c:	401a      	ands	r2, r3
  400a5e:	4b04      	ldr	r3, [pc, #16]	; (400a70 <pmc_switch_mainck_to_xtal+0x50>)
  400a60:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400a62:	620b      	str	r3, [r1, #32]
  400a64:	4770      	bx	lr
  400a66:	bf00      	nop
  400a68:	400e0400 	.word	0x400e0400
  400a6c:	fec8fffc 	.word	0xfec8fffc
  400a70:	01370002 	.word	0x01370002

00400a74 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400a74:	4b02      	ldr	r3, [pc, #8]	; (400a80 <pmc_osc_is_ready_mainck+0xc>)
  400a76:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400a78:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400a7c:	4770      	bx	lr
  400a7e:	bf00      	nop
  400a80:	400e0400 	.word	0x400e0400

00400a84 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400a84:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400a88:	4b01      	ldr	r3, [pc, #4]	; (400a90 <pmc_disable_pllack+0xc>)
  400a8a:	629a      	str	r2, [r3, #40]	; 0x28
  400a8c:	4770      	bx	lr
  400a8e:	bf00      	nop
  400a90:	400e0400 	.word	0x400e0400

00400a94 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400a94:	4b02      	ldr	r3, [pc, #8]	; (400aa0 <pmc_is_locked_pllack+0xc>)
  400a96:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400a98:	f000 0002 	and.w	r0, r0, #2
  400a9c:	4770      	bx	lr
  400a9e:	bf00      	nop
  400aa0:	400e0400 	.word	0x400e0400

00400aa4 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  400aa4:	282f      	cmp	r0, #47	; 0x2f
  400aa6:	d81e      	bhi.n	400ae6 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400aa8:	281f      	cmp	r0, #31
  400aaa:	d80c      	bhi.n	400ac6 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400aac:	4b11      	ldr	r3, [pc, #68]	; (400af4 <pmc_enable_periph_clk+0x50>)
  400aae:	699a      	ldr	r2, [r3, #24]
  400ab0:	2301      	movs	r3, #1
  400ab2:	4083      	lsls	r3, r0
  400ab4:	4393      	bics	r3, r2
  400ab6:	d018      	beq.n	400aea <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400ab8:	2301      	movs	r3, #1
  400aba:	fa03 f000 	lsl.w	r0, r3, r0
  400abe:	4b0d      	ldr	r3, [pc, #52]	; (400af4 <pmc_enable_periph_clk+0x50>)
  400ac0:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400ac2:	2000      	movs	r0, #0
  400ac4:	4770      	bx	lr
		ul_id -= 32;
  400ac6:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400ac8:	4b0a      	ldr	r3, [pc, #40]	; (400af4 <pmc_enable_periph_clk+0x50>)
  400aca:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400ace:	2301      	movs	r3, #1
  400ad0:	4083      	lsls	r3, r0
  400ad2:	4393      	bics	r3, r2
  400ad4:	d00b      	beq.n	400aee <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400ad6:	2301      	movs	r3, #1
  400ad8:	fa03 f000 	lsl.w	r0, r3, r0
  400adc:	4b05      	ldr	r3, [pc, #20]	; (400af4 <pmc_enable_periph_clk+0x50>)
  400ade:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  400ae2:	2000      	movs	r0, #0
  400ae4:	4770      	bx	lr
		return 1;
  400ae6:	2001      	movs	r0, #1
  400ae8:	4770      	bx	lr
	return 0;
  400aea:	2000      	movs	r0, #0
  400aec:	4770      	bx	lr
  400aee:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  400af0:	4770      	bx	lr
  400af2:	bf00      	nop
  400af4:	400e0400 	.word	0x400e0400

00400af8 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  400af8:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  400afa:	23ac      	movs	r3, #172	; 0xac
  400afc:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  400afe:	680b      	ldr	r3, [r1, #0]
  400b00:	684a      	ldr	r2, [r1, #4]
  400b02:	fbb3 f3f2 	udiv	r3, r3, r2
  400b06:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  400b08:	1e5c      	subs	r4, r3, #1
  400b0a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  400b0e:	4294      	cmp	r4, r2
  400b10:	d80c      	bhi.n	400b2c <uart_init+0x34>
		return 1;

	p_uart->UART_BRGR = cd;
  400b12:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  400b14:	688b      	ldr	r3, [r1, #8]
  400b16:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  400b18:	f240 2302 	movw	r3, #514	; 0x202
  400b1c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400b20:	2350      	movs	r3, #80	; 0x50
  400b22:	6003      	str	r3, [r0, #0]

	return 0;
  400b24:	2000      	movs	r0, #0
}
  400b26:	f85d 4b04 	ldr.w	r4, [sp], #4
  400b2a:	4770      	bx	lr
		return 1;
  400b2c:	2001      	movs	r0, #1
  400b2e:	e7fa      	b.n	400b26 <uart_init+0x2e>

00400b30 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400b30:	6943      	ldr	r3, [r0, #20]
  400b32:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400b36:	bf1a      	itte	ne
  400b38:	61c1      	strne	r1, [r0, #28]
	return 0;
  400b3a:	2000      	movne	r0, #0
		return 1;
  400b3c:	2001      	moveq	r0, #1
}
  400b3e:	4770      	bx	lr

00400b40 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400b40:	6943      	ldr	r3, [r0, #20]
  400b42:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400b46:	bf1d      	ittte	ne
  400b48:	6983      	ldrne	r3, [r0, #24]
  400b4a:	700b      	strbne	r3, [r1, #0]
	return 0;
  400b4c:	2000      	movne	r0, #0
		return 1;
  400b4e:	2001      	moveq	r0, #1
}
  400b50:	4770      	bx	lr

00400b52 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400b52:	6943      	ldr	r3, [r0, #20]
  400b54:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400b58:	bf1d      	ittte	ne
  400b5a:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  400b5e:	61c1      	strne	r1, [r0, #28]
	return 0;
  400b60:	2000      	movne	r0, #0
		return 1;
  400b62:	2001      	moveq	r0, #1
}
  400b64:	4770      	bx	lr

00400b66 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400b66:	6943      	ldr	r3, [r0, #20]
  400b68:	f013 0f01 	tst.w	r3, #1
  400b6c:	d005      	beq.n	400b7a <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400b6e:	6983      	ldr	r3, [r0, #24]
  400b70:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400b74:	600b      	str	r3, [r1, #0]

	return 0;
  400b76:	2000      	movs	r0, #0
  400b78:	4770      	bx	lr
		return 1;
  400b7a:	2001      	movs	r0, #1
}
  400b7c:	4770      	bx	lr

00400b7e <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400b7e:	e7fe      	b.n	400b7e <Dummy_Handler>

00400b80 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400b80:	b500      	push	{lr}
  400b82:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  400b84:	4b25      	ldr	r3, [pc, #148]	; (400c1c <Reset_Handler+0x9c>)
  400b86:	4a26      	ldr	r2, [pc, #152]	; (400c20 <Reset_Handler+0xa0>)
  400b88:	429a      	cmp	r2, r3
  400b8a:	d010      	beq.n	400bae <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
  400b8c:	4b25      	ldr	r3, [pc, #148]	; (400c24 <Reset_Handler+0xa4>)
  400b8e:	4a23      	ldr	r2, [pc, #140]	; (400c1c <Reset_Handler+0x9c>)
  400b90:	429a      	cmp	r2, r3
  400b92:	d20c      	bcs.n	400bae <Reset_Handler+0x2e>
  400b94:	3b01      	subs	r3, #1
  400b96:	1a9b      	subs	r3, r3, r2
  400b98:	f023 0303 	bic.w	r3, r3, #3
  400b9c:	3304      	adds	r3, #4
  400b9e:	4413      	add	r3, r2
  400ba0:	491f      	ldr	r1, [pc, #124]	; (400c20 <Reset_Handler+0xa0>)
			*pDest++ = *pSrc++;
  400ba2:	f851 0b04 	ldr.w	r0, [r1], #4
  400ba6:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  400baa:	429a      	cmp	r2, r3
  400bac:	d1f9      	bne.n	400ba2 <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400bae:	4b1e      	ldr	r3, [pc, #120]	; (400c28 <Reset_Handler+0xa8>)
  400bb0:	4a1e      	ldr	r2, [pc, #120]	; (400c2c <Reset_Handler+0xac>)
  400bb2:	429a      	cmp	r2, r3
  400bb4:	d20a      	bcs.n	400bcc <Reset_Handler+0x4c>
  400bb6:	3b01      	subs	r3, #1
  400bb8:	1a9b      	subs	r3, r3, r2
  400bba:	f023 0303 	bic.w	r3, r3, #3
  400bbe:	3304      	adds	r3, #4
  400bc0:	4413      	add	r3, r2
		*pDest++ = 0;
  400bc2:	2100      	movs	r1, #0
  400bc4:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  400bc8:	4293      	cmp	r3, r2
  400bca:	d1fb      	bne.n	400bc4 <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400bcc:	4a18      	ldr	r2, [pc, #96]	; (400c30 <Reset_Handler+0xb0>)
  400bce:	4b19      	ldr	r3, [pc, #100]	; (400c34 <Reset_Handler+0xb4>)
  400bd0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400bd4:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400bd6:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400bda:	fab3 f383 	clz	r3, r3
  400bde:	095b      	lsrs	r3, r3, #5
  400be0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400be2:	b672      	cpsid	i
  400be4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400be8:	2200      	movs	r2, #0
  400bea:	4b13      	ldr	r3, [pc, #76]	; (400c38 <Reset_Handler+0xb8>)
  400bec:	701a      	strb	r2, [r3, #0]
	return flags;
  400bee:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400bf0:	4a12      	ldr	r2, [pc, #72]	; (400c3c <Reset_Handler+0xbc>)
  400bf2:	6813      	ldr	r3, [r2, #0]
  400bf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400bf8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  400bfa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400bfe:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  400c02:	b129      	cbz	r1, 400c10 <Reset_Handler+0x90>
		cpu_irq_enable();
  400c04:	2201      	movs	r2, #1
  400c06:	4b0c      	ldr	r3, [pc, #48]	; (400c38 <Reset_Handler+0xb8>)
  400c08:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  400c0a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400c0e:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  400c10:	4b0b      	ldr	r3, [pc, #44]	; (400c40 <Reset_Handler+0xc0>)
  400c12:	4798      	blx	r3

	/* Branch to main function */
	main();
  400c14:	4b0b      	ldr	r3, [pc, #44]	; (400c44 <Reset_Handler+0xc4>)
  400c16:	4798      	blx	r3
  400c18:	e7fe      	b.n	400c18 <Reset_Handler+0x98>
  400c1a:	bf00      	nop
  400c1c:	20000000 	.word	0x20000000
  400c20:	0040407c 	.word	0x0040407c
  400c24:	200009c0 	.word	0x200009c0
  400c28:	20000b0c 	.word	0x20000b0c
  400c2c:	200009c0 	.word	0x200009c0
  400c30:	e000ed00 	.word	0xe000ed00
  400c34:	00400000 	.word	0x00400000
  400c38:	2000000a 	.word	0x2000000a
  400c3c:	e000ed88 	.word	0xe000ed88
  400c40:	00400e19 	.word	0x00400e19
  400c44:	004002e5 	.word	0x004002e5

00400c48 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  400c48:	4b3b      	ldr	r3, [pc, #236]	; (400d38 <SystemCoreClockUpdate+0xf0>)
  400c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400c4c:	f003 0303 	and.w	r3, r3, #3
  400c50:	2b01      	cmp	r3, #1
  400c52:	d01d      	beq.n	400c90 <SystemCoreClockUpdate+0x48>
  400c54:	b183      	cbz	r3, 400c78 <SystemCoreClockUpdate+0x30>
  400c56:	2b02      	cmp	r3, #2
  400c58:	d036      	beq.n	400cc8 <SystemCoreClockUpdate+0x80>

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  400c5a:	4b37      	ldr	r3, [pc, #220]	; (400d38 <SystemCoreClockUpdate+0xf0>)
  400c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400c5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400c62:	2b70      	cmp	r3, #112	; 0x70
  400c64:	d05f      	beq.n	400d26 <SystemCoreClockUpdate+0xde>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  400c66:	4b34      	ldr	r3, [pc, #208]	; (400d38 <SystemCoreClockUpdate+0xf0>)
  400c68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400c6a:	4934      	ldr	r1, [pc, #208]	; (400d3c <SystemCoreClockUpdate+0xf4>)
  400c6c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400c70:	680b      	ldr	r3, [r1, #0]
  400c72:	40d3      	lsrs	r3, r2
  400c74:	600b      	str	r3, [r1, #0]
  400c76:	4770      	bx	lr
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400c78:	4b31      	ldr	r3, [pc, #196]	; (400d40 <SystemCoreClockUpdate+0xf8>)
  400c7a:	695b      	ldr	r3, [r3, #20]
  400c7c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400c80:	bf14      	ite	ne
  400c82:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400c86:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400c8a:	4b2c      	ldr	r3, [pc, #176]	; (400d3c <SystemCoreClockUpdate+0xf4>)
  400c8c:	601a      	str	r2, [r3, #0]
  400c8e:	e7e4      	b.n	400c5a <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400c90:	4b29      	ldr	r3, [pc, #164]	; (400d38 <SystemCoreClockUpdate+0xf0>)
  400c92:	6a1b      	ldr	r3, [r3, #32]
  400c94:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400c98:	d003      	beq.n	400ca2 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400c9a:	4a2a      	ldr	r2, [pc, #168]	; (400d44 <SystemCoreClockUpdate+0xfc>)
  400c9c:	4b27      	ldr	r3, [pc, #156]	; (400d3c <SystemCoreClockUpdate+0xf4>)
  400c9e:	601a      	str	r2, [r3, #0]
  400ca0:	e7db      	b.n	400c5a <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400ca2:	4a29      	ldr	r2, [pc, #164]	; (400d48 <SystemCoreClockUpdate+0x100>)
  400ca4:	4b25      	ldr	r3, [pc, #148]	; (400d3c <SystemCoreClockUpdate+0xf4>)
  400ca6:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400ca8:	4b23      	ldr	r3, [pc, #140]	; (400d38 <SystemCoreClockUpdate+0xf0>)
  400caa:	6a1b      	ldr	r3, [r3, #32]
  400cac:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400cb0:	2b10      	cmp	r3, #16
  400cb2:	d005      	beq.n	400cc0 <SystemCoreClockUpdate+0x78>
  400cb4:	2b20      	cmp	r3, #32
  400cb6:	d1d0      	bne.n	400c5a <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  400cb8:	4a22      	ldr	r2, [pc, #136]	; (400d44 <SystemCoreClockUpdate+0xfc>)
  400cba:	4b20      	ldr	r3, [pc, #128]	; (400d3c <SystemCoreClockUpdate+0xf4>)
  400cbc:	601a      	str	r2, [r3, #0]
				break;
  400cbe:	e7cc      	b.n	400c5a <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  400cc0:	4a22      	ldr	r2, [pc, #136]	; (400d4c <SystemCoreClockUpdate+0x104>)
  400cc2:	4b1e      	ldr	r3, [pc, #120]	; (400d3c <SystemCoreClockUpdate+0xf4>)
  400cc4:	601a      	str	r2, [r3, #0]
				break;
  400cc6:	e7c8      	b.n	400c5a <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400cc8:	4b1b      	ldr	r3, [pc, #108]	; (400d38 <SystemCoreClockUpdate+0xf0>)
  400cca:	6a1b      	ldr	r3, [r3, #32]
  400ccc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400cd0:	d016      	beq.n	400d00 <SystemCoreClockUpdate+0xb8>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400cd2:	4a1c      	ldr	r2, [pc, #112]	; (400d44 <SystemCoreClockUpdate+0xfc>)
  400cd4:	4b19      	ldr	r3, [pc, #100]	; (400d3c <SystemCoreClockUpdate+0xf4>)
  400cd6:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  400cd8:	4b17      	ldr	r3, [pc, #92]	; (400d38 <SystemCoreClockUpdate+0xf0>)
  400cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400cdc:	f003 0303 	and.w	r3, r3, #3
  400ce0:	2b02      	cmp	r3, #2
  400ce2:	d1ba      	bne.n	400c5a <SystemCoreClockUpdate+0x12>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400ce4:	4a14      	ldr	r2, [pc, #80]	; (400d38 <SystemCoreClockUpdate+0xf0>)
  400ce6:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400ce8:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400cea:	4814      	ldr	r0, [pc, #80]	; (400d3c <SystemCoreClockUpdate+0xf4>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400cec:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400cf0:	6803      	ldr	r3, [r0, #0]
  400cf2:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400cf6:	b2d2      	uxtb	r2, r2
  400cf8:	fbb3 f3f2 	udiv	r3, r3, r2
  400cfc:	6003      	str	r3, [r0, #0]
  400cfe:	e7ac      	b.n	400c5a <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400d00:	4a11      	ldr	r2, [pc, #68]	; (400d48 <SystemCoreClockUpdate+0x100>)
  400d02:	4b0e      	ldr	r3, [pc, #56]	; (400d3c <SystemCoreClockUpdate+0xf4>)
  400d04:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400d06:	4b0c      	ldr	r3, [pc, #48]	; (400d38 <SystemCoreClockUpdate+0xf0>)
  400d08:	6a1b      	ldr	r3, [r3, #32]
  400d0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400d0e:	2b10      	cmp	r3, #16
  400d10:	d005      	beq.n	400d1e <SystemCoreClockUpdate+0xd6>
  400d12:	2b20      	cmp	r3, #32
  400d14:	d1e0      	bne.n	400cd8 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
  400d16:	4a0b      	ldr	r2, [pc, #44]	; (400d44 <SystemCoreClockUpdate+0xfc>)
  400d18:	4b08      	ldr	r3, [pc, #32]	; (400d3c <SystemCoreClockUpdate+0xf4>)
  400d1a:	601a      	str	r2, [r3, #0]
				break;
  400d1c:	e7dc      	b.n	400cd8 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
  400d1e:	4a0b      	ldr	r2, [pc, #44]	; (400d4c <SystemCoreClockUpdate+0x104>)
  400d20:	4b06      	ldr	r3, [pc, #24]	; (400d3c <SystemCoreClockUpdate+0xf4>)
  400d22:	601a      	str	r2, [r3, #0]
				break;
  400d24:	e7d8      	b.n	400cd8 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  400d26:	4a05      	ldr	r2, [pc, #20]	; (400d3c <SystemCoreClockUpdate+0xf4>)
  400d28:	6813      	ldr	r3, [r2, #0]
  400d2a:	4909      	ldr	r1, [pc, #36]	; (400d50 <SystemCoreClockUpdate+0x108>)
  400d2c:	fba1 1303 	umull	r1, r3, r1, r3
  400d30:	085b      	lsrs	r3, r3, #1
  400d32:	6013      	str	r3, [r2, #0]
  400d34:	4770      	bx	lr
  400d36:	bf00      	nop
  400d38:	400e0400 	.word	0x400e0400
  400d3c:	2000000c 	.word	0x2000000c
  400d40:	400e1810 	.word	0x400e1810
  400d44:	00b71b00 	.word	0x00b71b00
  400d48:	003d0900 	.word	0x003d0900
  400d4c:	007a1200 	.word	0x007a1200
  400d50:	aaaaaaab 	.word	0xaaaaaaab

00400d54 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400d54:	4b12      	ldr	r3, [pc, #72]	; (400da0 <system_init_flash+0x4c>)
  400d56:	4298      	cmp	r0, r3
  400d58:	d911      	bls.n	400d7e <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  400d5a:	4b12      	ldr	r3, [pc, #72]	; (400da4 <system_init_flash+0x50>)
  400d5c:	4298      	cmp	r0, r3
  400d5e:	d913      	bls.n	400d88 <system_init_flash+0x34>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  400d60:	4b11      	ldr	r3, [pc, #68]	; (400da8 <system_init_flash+0x54>)
  400d62:	4298      	cmp	r0, r3
  400d64:	d914      	bls.n	400d90 <system_init_flash+0x3c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400d66:	4b11      	ldr	r3, [pc, #68]	; (400dac <system_init_flash+0x58>)
  400d68:	4298      	cmp	r0, r3
  400d6a:	d915      	bls.n	400d98 <system_init_flash+0x44>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400d6c:	4b10      	ldr	r3, [pc, #64]	; (400db0 <system_init_flash+0x5c>)
  400d6e:	4298      	cmp	r0, r3
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400d70:	bf94      	ite	ls
  400d72:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400d76:	4a0f      	ldrhi	r2, [pc, #60]	; (400db4 <system_init_flash+0x60>)
  400d78:	4b0f      	ldr	r3, [pc, #60]	; (400db8 <system_init_flash+0x64>)
  400d7a:	601a      	str	r2, [r3, #0]
  400d7c:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400d7e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400d82:	4b0d      	ldr	r3, [pc, #52]	; (400db8 <system_init_flash+0x64>)
  400d84:	601a      	str	r2, [r3, #0]
  400d86:	4770      	bx	lr
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400d88:	4a0c      	ldr	r2, [pc, #48]	; (400dbc <system_init_flash+0x68>)
  400d8a:	4b0b      	ldr	r3, [pc, #44]	; (400db8 <system_init_flash+0x64>)
  400d8c:	601a      	str	r2, [r3, #0]
  400d8e:	4770      	bx	lr
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400d90:	4a0b      	ldr	r2, [pc, #44]	; (400dc0 <system_init_flash+0x6c>)
  400d92:	4b09      	ldr	r3, [pc, #36]	; (400db8 <system_init_flash+0x64>)
  400d94:	601a      	str	r2, [r3, #0]
  400d96:	4770      	bx	lr
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400d98:	4a0a      	ldr	r2, [pc, #40]	; (400dc4 <system_init_flash+0x70>)
  400d9a:	4b07      	ldr	r3, [pc, #28]	; (400db8 <system_init_flash+0x64>)
  400d9c:	601a      	str	r2, [r3, #0]
  400d9e:	4770      	bx	lr
  400da0:	01312cff 	.word	0x01312cff
  400da4:	026259ff 	.word	0x026259ff
  400da8:	039386ff 	.word	0x039386ff
  400dac:	04c4b3ff 	.word	0x04c4b3ff
  400db0:	05f5e0ff 	.word	0x05f5e0ff
  400db4:	04000500 	.word	0x04000500
  400db8:	400e0a00 	.word	0x400e0a00
  400dbc:	04000100 	.word	0x04000100
  400dc0:	04000200 	.word	0x04000200
  400dc4:	04000300 	.word	0x04000300

00400dc8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400dc8:	4b0a      	ldr	r3, [pc, #40]	; (400df4 <_sbrk+0x2c>)
  400dca:	681b      	ldr	r3, [r3, #0]
  400dcc:	b153      	cbz	r3, 400de4 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400dce:	4b09      	ldr	r3, [pc, #36]	; (400df4 <_sbrk+0x2c>)
  400dd0:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400dd2:	181a      	adds	r2, r3, r0
  400dd4:	4908      	ldr	r1, [pc, #32]	; (400df8 <_sbrk+0x30>)
  400dd6:	4291      	cmp	r1, r2
  400dd8:	db08      	blt.n	400dec <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  400dda:	4610      	mov	r0, r2
  400ddc:	4a05      	ldr	r2, [pc, #20]	; (400df4 <_sbrk+0x2c>)
  400dde:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400de0:	4618      	mov	r0, r3
  400de2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400de4:	4a05      	ldr	r2, [pc, #20]	; (400dfc <_sbrk+0x34>)
  400de6:	4b03      	ldr	r3, [pc, #12]	; (400df4 <_sbrk+0x2c>)
  400de8:	601a      	str	r2, [r3, #0]
  400dea:	e7f0      	b.n	400dce <_sbrk+0x6>
		return (caddr_t) -1;	
  400dec:	f04f 30ff 	mov.w	r0, #4294967295
}
  400df0:	4770      	bx	lr
  400df2:	bf00      	nop
  400df4:	200009e0 	.word	0x200009e0
  400df8:	2001fffc 	.word	0x2001fffc
  400dfc:	20003b10 	.word	0x20003b10

00400e00 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400e00:	f04f 30ff 	mov.w	r0, #4294967295
  400e04:	4770      	bx	lr

00400e06 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400e06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400e0a:	604b      	str	r3, [r1, #4]

	return 0;
}
  400e0c:	2000      	movs	r0, #0
  400e0e:	4770      	bx	lr

00400e10 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400e10:	2001      	movs	r0, #1
  400e12:	4770      	bx	lr

00400e14 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400e14:	2000      	movs	r0, #0
  400e16:	4770      	bx	lr

00400e18 <__libc_init_array>:
  400e18:	b570      	push	{r4, r5, r6, lr}
  400e1a:	4e0f      	ldr	r6, [pc, #60]	; (400e58 <__libc_init_array+0x40>)
  400e1c:	4d0f      	ldr	r5, [pc, #60]	; (400e5c <__libc_init_array+0x44>)
  400e1e:	1b76      	subs	r6, r6, r5
  400e20:	10b6      	asrs	r6, r6, #2
  400e22:	bf18      	it	ne
  400e24:	2400      	movne	r4, #0
  400e26:	d005      	beq.n	400e34 <__libc_init_array+0x1c>
  400e28:	3401      	adds	r4, #1
  400e2a:	f855 3b04 	ldr.w	r3, [r5], #4
  400e2e:	4798      	blx	r3
  400e30:	42a6      	cmp	r6, r4
  400e32:	d1f9      	bne.n	400e28 <__libc_init_array+0x10>
  400e34:	4e0a      	ldr	r6, [pc, #40]	; (400e60 <__libc_init_array+0x48>)
  400e36:	4d0b      	ldr	r5, [pc, #44]	; (400e64 <__libc_init_array+0x4c>)
  400e38:	1b76      	subs	r6, r6, r5
  400e3a:	f003 f909 	bl	404050 <_init>
  400e3e:	10b6      	asrs	r6, r6, #2
  400e40:	bf18      	it	ne
  400e42:	2400      	movne	r4, #0
  400e44:	d006      	beq.n	400e54 <__libc_init_array+0x3c>
  400e46:	3401      	adds	r4, #1
  400e48:	f855 3b04 	ldr.w	r3, [r5], #4
  400e4c:	4798      	blx	r3
  400e4e:	42a6      	cmp	r6, r4
  400e50:	d1f9      	bne.n	400e46 <__libc_init_array+0x2e>
  400e52:	bd70      	pop	{r4, r5, r6, pc}
  400e54:	bd70      	pop	{r4, r5, r6, pc}
  400e56:	bf00      	nop
  400e58:	0040405c 	.word	0x0040405c
  400e5c:	0040405c 	.word	0x0040405c
  400e60:	00404064 	.word	0x00404064
  400e64:	0040405c 	.word	0x0040405c

00400e68 <iprintf>:
  400e68:	b40f      	push	{r0, r1, r2, r3}
  400e6a:	b500      	push	{lr}
  400e6c:	4907      	ldr	r1, [pc, #28]	; (400e8c <iprintf+0x24>)
  400e6e:	b083      	sub	sp, #12
  400e70:	ab04      	add	r3, sp, #16
  400e72:	6808      	ldr	r0, [r1, #0]
  400e74:	f853 2b04 	ldr.w	r2, [r3], #4
  400e78:	6881      	ldr	r1, [r0, #8]
  400e7a:	9301      	str	r3, [sp, #4]
  400e7c:	f000 fa2e 	bl	4012dc <_vfiprintf_r>
  400e80:	b003      	add	sp, #12
  400e82:	f85d eb04 	ldr.w	lr, [sp], #4
  400e86:	b004      	add	sp, #16
  400e88:	4770      	bx	lr
  400e8a:	bf00      	nop
  400e8c:	20000010 	.word	0x20000010

00400e90 <memset>:
  400e90:	b470      	push	{r4, r5, r6}
  400e92:	0786      	lsls	r6, r0, #30
  400e94:	d046      	beq.n	400f24 <memset+0x94>
  400e96:	1e54      	subs	r4, r2, #1
  400e98:	2a00      	cmp	r2, #0
  400e9a:	d041      	beq.n	400f20 <memset+0x90>
  400e9c:	b2ca      	uxtb	r2, r1
  400e9e:	4603      	mov	r3, r0
  400ea0:	e002      	b.n	400ea8 <memset+0x18>
  400ea2:	f114 34ff 	adds.w	r4, r4, #4294967295
  400ea6:	d33b      	bcc.n	400f20 <memset+0x90>
  400ea8:	f803 2b01 	strb.w	r2, [r3], #1
  400eac:	079d      	lsls	r5, r3, #30
  400eae:	d1f8      	bne.n	400ea2 <memset+0x12>
  400eb0:	2c03      	cmp	r4, #3
  400eb2:	d92e      	bls.n	400f12 <memset+0x82>
  400eb4:	b2cd      	uxtb	r5, r1
  400eb6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  400eba:	2c0f      	cmp	r4, #15
  400ebc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  400ec0:	d919      	bls.n	400ef6 <memset+0x66>
  400ec2:	f103 0210 	add.w	r2, r3, #16
  400ec6:	4626      	mov	r6, r4
  400ec8:	3e10      	subs	r6, #16
  400eca:	2e0f      	cmp	r6, #15
  400ecc:	f842 5c10 	str.w	r5, [r2, #-16]
  400ed0:	f842 5c0c 	str.w	r5, [r2, #-12]
  400ed4:	f842 5c08 	str.w	r5, [r2, #-8]
  400ed8:	f842 5c04 	str.w	r5, [r2, #-4]
  400edc:	f102 0210 	add.w	r2, r2, #16
  400ee0:	d8f2      	bhi.n	400ec8 <memset+0x38>
  400ee2:	f1a4 0210 	sub.w	r2, r4, #16
  400ee6:	f022 020f 	bic.w	r2, r2, #15
  400eea:	f004 040f 	and.w	r4, r4, #15
  400eee:	3210      	adds	r2, #16
  400ef0:	2c03      	cmp	r4, #3
  400ef2:	4413      	add	r3, r2
  400ef4:	d90d      	bls.n	400f12 <memset+0x82>
  400ef6:	461e      	mov	r6, r3
  400ef8:	4622      	mov	r2, r4
  400efa:	3a04      	subs	r2, #4
  400efc:	2a03      	cmp	r2, #3
  400efe:	f846 5b04 	str.w	r5, [r6], #4
  400f02:	d8fa      	bhi.n	400efa <memset+0x6a>
  400f04:	1f22      	subs	r2, r4, #4
  400f06:	f022 0203 	bic.w	r2, r2, #3
  400f0a:	3204      	adds	r2, #4
  400f0c:	4413      	add	r3, r2
  400f0e:	f004 0403 	and.w	r4, r4, #3
  400f12:	b12c      	cbz	r4, 400f20 <memset+0x90>
  400f14:	b2c9      	uxtb	r1, r1
  400f16:	441c      	add	r4, r3
  400f18:	f803 1b01 	strb.w	r1, [r3], #1
  400f1c:	429c      	cmp	r4, r3
  400f1e:	d1fb      	bne.n	400f18 <memset+0x88>
  400f20:	bc70      	pop	{r4, r5, r6}
  400f22:	4770      	bx	lr
  400f24:	4614      	mov	r4, r2
  400f26:	4603      	mov	r3, r0
  400f28:	e7c2      	b.n	400eb0 <memset+0x20>
  400f2a:	bf00      	nop

00400f2c <_puts_r>:
  400f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
  400f2e:	4605      	mov	r5, r0
  400f30:	b089      	sub	sp, #36	; 0x24
  400f32:	4608      	mov	r0, r1
  400f34:	460c      	mov	r4, r1
  400f36:	f000 f923 	bl	401180 <strlen>
  400f3a:	6bab      	ldr	r3, [r5, #56]	; 0x38
  400f3c:	4f21      	ldr	r7, [pc, #132]	; (400fc4 <_puts_r+0x98>)
  400f3e:	9404      	str	r4, [sp, #16]
  400f40:	2601      	movs	r6, #1
  400f42:	1c44      	adds	r4, r0, #1
  400f44:	a904      	add	r1, sp, #16
  400f46:	2202      	movs	r2, #2
  400f48:	9403      	str	r4, [sp, #12]
  400f4a:	9005      	str	r0, [sp, #20]
  400f4c:	68ac      	ldr	r4, [r5, #8]
  400f4e:	9706      	str	r7, [sp, #24]
  400f50:	9607      	str	r6, [sp, #28]
  400f52:	9101      	str	r1, [sp, #4]
  400f54:	9202      	str	r2, [sp, #8]
  400f56:	b353      	cbz	r3, 400fae <_puts_r+0x82>
  400f58:	6e63      	ldr	r3, [r4, #100]	; 0x64
  400f5a:	f013 0f01 	tst.w	r3, #1
  400f5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  400f62:	b29a      	uxth	r2, r3
  400f64:	d101      	bne.n	400f6a <_puts_r+0x3e>
  400f66:	0590      	lsls	r0, r2, #22
  400f68:	d525      	bpl.n	400fb6 <_puts_r+0x8a>
  400f6a:	0491      	lsls	r1, r2, #18
  400f6c:	d406      	bmi.n	400f7c <_puts_r+0x50>
  400f6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
  400f70:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  400f74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  400f78:	81a3      	strh	r3, [r4, #12]
  400f7a:	6662      	str	r2, [r4, #100]	; 0x64
  400f7c:	4628      	mov	r0, r5
  400f7e:	aa01      	add	r2, sp, #4
  400f80:	4621      	mov	r1, r4
  400f82:	f001 fbad 	bl	4026e0 <__sfvwrite_r>
  400f86:	6e63      	ldr	r3, [r4, #100]	; 0x64
  400f88:	2800      	cmp	r0, #0
  400f8a:	bf0c      	ite	eq
  400f8c:	250a      	moveq	r5, #10
  400f8e:	f04f 35ff 	movne.w	r5, #4294967295
  400f92:	07da      	lsls	r2, r3, #31
  400f94:	d402      	bmi.n	400f9c <_puts_r+0x70>
  400f96:	89a3      	ldrh	r3, [r4, #12]
  400f98:	059b      	lsls	r3, r3, #22
  400f9a:	d502      	bpl.n	400fa2 <_puts_r+0x76>
  400f9c:	4628      	mov	r0, r5
  400f9e:	b009      	add	sp, #36	; 0x24
  400fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400fa2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  400fa4:	f001 fd52 	bl	402a4c <__retarget_lock_release_recursive>
  400fa8:	4628      	mov	r0, r5
  400faa:	b009      	add	sp, #36	; 0x24
  400fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400fae:	4628      	mov	r0, r5
  400fb0:	f001 f98a 	bl	4022c8 <__sinit>
  400fb4:	e7d0      	b.n	400f58 <_puts_r+0x2c>
  400fb6:	6da0      	ldr	r0, [r4, #88]	; 0x58
  400fb8:	f001 fd46 	bl	402a48 <__retarget_lock_acquire_recursive>
  400fbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  400fc0:	b29a      	uxth	r2, r3
  400fc2:	e7d2      	b.n	400f6a <_puts_r+0x3e>
  400fc4:	00403ee8 	.word	0x00403ee8

00400fc8 <puts>:
  400fc8:	4b02      	ldr	r3, [pc, #8]	; (400fd4 <puts+0xc>)
  400fca:	4601      	mov	r1, r0
  400fcc:	6818      	ldr	r0, [r3, #0]
  400fce:	f7ff bfad 	b.w	400f2c <_puts_r>
  400fd2:	bf00      	nop
  400fd4:	20000010 	.word	0x20000010

00400fd8 <setbuf>:
  400fd8:	2900      	cmp	r1, #0
  400fda:	bf0c      	ite	eq
  400fdc:	2202      	moveq	r2, #2
  400fde:	2200      	movne	r2, #0
  400fe0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  400fe4:	f000 b800 	b.w	400fe8 <setvbuf>

00400fe8 <setvbuf>:
  400fe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400fec:	4c61      	ldr	r4, [pc, #388]	; (401174 <setvbuf+0x18c>)
  400fee:	6825      	ldr	r5, [r4, #0]
  400ff0:	b083      	sub	sp, #12
  400ff2:	4604      	mov	r4, r0
  400ff4:	460f      	mov	r7, r1
  400ff6:	4690      	mov	r8, r2
  400ff8:	461e      	mov	r6, r3
  400ffa:	b115      	cbz	r5, 401002 <setvbuf+0x1a>
  400ffc:	6bab      	ldr	r3, [r5, #56]	; 0x38
  400ffe:	2b00      	cmp	r3, #0
  401000:	d064      	beq.n	4010cc <setvbuf+0xe4>
  401002:	f1b8 0f02 	cmp.w	r8, #2
  401006:	d006      	beq.n	401016 <setvbuf+0x2e>
  401008:	f1b8 0f01 	cmp.w	r8, #1
  40100c:	f200 809f 	bhi.w	40114e <setvbuf+0x166>
  401010:	2e00      	cmp	r6, #0
  401012:	f2c0 809c 	blt.w	40114e <setvbuf+0x166>
  401016:	6e63      	ldr	r3, [r4, #100]	; 0x64
  401018:	07d8      	lsls	r0, r3, #31
  40101a:	d534      	bpl.n	401086 <setvbuf+0x9e>
  40101c:	4621      	mov	r1, r4
  40101e:	4628      	mov	r0, r5
  401020:	f001 f8fa 	bl	402218 <_fflush_r>
  401024:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401026:	b141      	cbz	r1, 40103a <setvbuf+0x52>
  401028:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40102c:	4299      	cmp	r1, r3
  40102e:	d002      	beq.n	401036 <setvbuf+0x4e>
  401030:	4628      	mov	r0, r5
  401032:	f001 fa6f 	bl	402514 <_free_r>
  401036:	2300      	movs	r3, #0
  401038:	6323      	str	r3, [r4, #48]	; 0x30
  40103a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40103e:	2200      	movs	r2, #0
  401040:	61a2      	str	r2, [r4, #24]
  401042:	6062      	str	r2, [r4, #4]
  401044:	061a      	lsls	r2, r3, #24
  401046:	d43a      	bmi.n	4010be <setvbuf+0xd6>
  401048:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  40104c:	f023 0303 	bic.w	r3, r3, #3
  401050:	f1b8 0f02 	cmp.w	r8, #2
  401054:	81a3      	strh	r3, [r4, #12]
  401056:	d01d      	beq.n	401094 <setvbuf+0xac>
  401058:	ab01      	add	r3, sp, #4
  40105a:	466a      	mov	r2, sp
  40105c:	4621      	mov	r1, r4
  40105e:	4628      	mov	r0, r5
  401060:	f001 fcf6 	bl	402a50 <__swhatbuf_r>
  401064:	89a3      	ldrh	r3, [r4, #12]
  401066:	4318      	orrs	r0, r3
  401068:	81a0      	strh	r0, [r4, #12]
  40106a:	2e00      	cmp	r6, #0
  40106c:	d132      	bne.n	4010d4 <setvbuf+0xec>
  40106e:	9e00      	ldr	r6, [sp, #0]
  401070:	4630      	mov	r0, r6
  401072:	f001 fd65 	bl	402b40 <malloc>
  401076:	4607      	mov	r7, r0
  401078:	2800      	cmp	r0, #0
  40107a:	d06b      	beq.n	401154 <setvbuf+0x16c>
  40107c:	89a3      	ldrh	r3, [r4, #12]
  40107e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401082:	81a3      	strh	r3, [r4, #12]
  401084:	e028      	b.n	4010d8 <setvbuf+0xf0>
  401086:	89a3      	ldrh	r3, [r4, #12]
  401088:	0599      	lsls	r1, r3, #22
  40108a:	d4c7      	bmi.n	40101c <setvbuf+0x34>
  40108c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40108e:	f001 fcdb 	bl	402a48 <__retarget_lock_acquire_recursive>
  401092:	e7c3      	b.n	40101c <setvbuf+0x34>
  401094:	2500      	movs	r5, #0
  401096:	6e61      	ldr	r1, [r4, #100]	; 0x64
  401098:	2600      	movs	r6, #0
  40109a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40109e:	f043 0302 	orr.w	r3, r3, #2
  4010a2:	2001      	movs	r0, #1
  4010a4:	60a6      	str	r6, [r4, #8]
  4010a6:	07ce      	lsls	r6, r1, #31
  4010a8:	81a3      	strh	r3, [r4, #12]
  4010aa:	6022      	str	r2, [r4, #0]
  4010ac:	6122      	str	r2, [r4, #16]
  4010ae:	6160      	str	r0, [r4, #20]
  4010b0:	d401      	bmi.n	4010b6 <setvbuf+0xce>
  4010b2:	0598      	lsls	r0, r3, #22
  4010b4:	d53e      	bpl.n	401134 <setvbuf+0x14c>
  4010b6:	4628      	mov	r0, r5
  4010b8:	b003      	add	sp, #12
  4010ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4010be:	6921      	ldr	r1, [r4, #16]
  4010c0:	4628      	mov	r0, r5
  4010c2:	f001 fa27 	bl	402514 <_free_r>
  4010c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4010ca:	e7bd      	b.n	401048 <setvbuf+0x60>
  4010cc:	4628      	mov	r0, r5
  4010ce:	f001 f8fb 	bl	4022c8 <__sinit>
  4010d2:	e796      	b.n	401002 <setvbuf+0x1a>
  4010d4:	2f00      	cmp	r7, #0
  4010d6:	d0cb      	beq.n	401070 <setvbuf+0x88>
  4010d8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4010da:	2b00      	cmp	r3, #0
  4010dc:	d033      	beq.n	401146 <setvbuf+0x15e>
  4010de:	9b00      	ldr	r3, [sp, #0]
  4010e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4010e4:	6027      	str	r7, [r4, #0]
  4010e6:	429e      	cmp	r6, r3
  4010e8:	bf1c      	itt	ne
  4010ea:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  4010ee:	81a2      	strhne	r2, [r4, #12]
  4010f0:	f1b8 0f01 	cmp.w	r8, #1
  4010f4:	bf04      	itt	eq
  4010f6:	f042 0201 	orreq.w	r2, r2, #1
  4010fa:	81a2      	strheq	r2, [r4, #12]
  4010fc:	b292      	uxth	r2, r2
  4010fe:	f012 0308 	ands.w	r3, r2, #8
  401102:	6127      	str	r7, [r4, #16]
  401104:	6166      	str	r6, [r4, #20]
  401106:	d00e      	beq.n	401126 <setvbuf+0x13e>
  401108:	07d1      	lsls	r1, r2, #31
  40110a:	d51a      	bpl.n	401142 <setvbuf+0x15a>
  40110c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40110e:	4276      	negs	r6, r6
  401110:	2300      	movs	r3, #0
  401112:	f015 0501 	ands.w	r5, r5, #1
  401116:	61a6      	str	r6, [r4, #24]
  401118:	60a3      	str	r3, [r4, #8]
  40111a:	d009      	beq.n	401130 <setvbuf+0x148>
  40111c:	2500      	movs	r5, #0
  40111e:	4628      	mov	r0, r5
  401120:	b003      	add	sp, #12
  401122:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401126:	60a3      	str	r3, [r4, #8]
  401128:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40112a:	f015 0501 	ands.w	r5, r5, #1
  40112e:	d1f5      	bne.n	40111c <setvbuf+0x134>
  401130:	0593      	lsls	r3, r2, #22
  401132:	d4c0      	bmi.n	4010b6 <setvbuf+0xce>
  401134:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401136:	f001 fc89 	bl	402a4c <__retarget_lock_release_recursive>
  40113a:	4628      	mov	r0, r5
  40113c:	b003      	add	sp, #12
  40113e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401142:	60a6      	str	r6, [r4, #8]
  401144:	e7f0      	b.n	401128 <setvbuf+0x140>
  401146:	4628      	mov	r0, r5
  401148:	f001 f8be 	bl	4022c8 <__sinit>
  40114c:	e7c7      	b.n	4010de <setvbuf+0xf6>
  40114e:	f04f 35ff 	mov.w	r5, #4294967295
  401152:	e7b0      	b.n	4010b6 <setvbuf+0xce>
  401154:	f8dd 9000 	ldr.w	r9, [sp]
  401158:	45b1      	cmp	r9, r6
  40115a:	d004      	beq.n	401166 <setvbuf+0x17e>
  40115c:	4648      	mov	r0, r9
  40115e:	f001 fcef 	bl	402b40 <malloc>
  401162:	4607      	mov	r7, r0
  401164:	b920      	cbnz	r0, 401170 <setvbuf+0x188>
  401166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40116a:	f04f 35ff 	mov.w	r5, #4294967295
  40116e:	e792      	b.n	401096 <setvbuf+0xae>
  401170:	464e      	mov	r6, r9
  401172:	e783      	b.n	40107c <setvbuf+0x94>
  401174:	20000010 	.word	0x20000010
	...

00401180 <strlen>:
  401180:	f890 f000 	pld	[r0]
  401184:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  401188:	f020 0107 	bic.w	r1, r0, #7
  40118c:	f06f 0c00 	mvn.w	ip, #0
  401190:	f010 0407 	ands.w	r4, r0, #7
  401194:	f891 f020 	pld	[r1, #32]
  401198:	f040 8049 	bne.w	40122e <strlen+0xae>
  40119c:	f04f 0400 	mov.w	r4, #0
  4011a0:	f06f 0007 	mvn.w	r0, #7
  4011a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4011a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4011ac:	f100 0008 	add.w	r0, r0, #8
  4011b0:	fa82 f24c 	uadd8	r2, r2, ip
  4011b4:	faa4 f28c 	sel	r2, r4, ip
  4011b8:	fa83 f34c 	uadd8	r3, r3, ip
  4011bc:	faa2 f38c 	sel	r3, r2, ip
  4011c0:	bb4b      	cbnz	r3, 401216 <strlen+0x96>
  4011c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4011c6:	fa82 f24c 	uadd8	r2, r2, ip
  4011ca:	f100 0008 	add.w	r0, r0, #8
  4011ce:	faa4 f28c 	sel	r2, r4, ip
  4011d2:	fa83 f34c 	uadd8	r3, r3, ip
  4011d6:	faa2 f38c 	sel	r3, r2, ip
  4011da:	b9e3      	cbnz	r3, 401216 <strlen+0x96>
  4011dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4011e0:	fa82 f24c 	uadd8	r2, r2, ip
  4011e4:	f100 0008 	add.w	r0, r0, #8
  4011e8:	faa4 f28c 	sel	r2, r4, ip
  4011ec:	fa83 f34c 	uadd8	r3, r3, ip
  4011f0:	faa2 f38c 	sel	r3, r2, ip
  4011f4:	b97b      	cbnz	r3, 401216 <strlen+0x96>
  4011f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4011fa:	f101 0120 	add.w	r1, r1, #32
  4011fe:	fa82 f24c 	uadd8	r2, r2, ip
  401202:	f100 0008 	add.w	r0, r0, #8
  401206:	faa4 f28c 	sel	r2, r4, ip
  40120a:	fa83 f34c 	uadd8	r3, r3, ip
  40120e:	faa2 f38c 	sel	r3, r2, ip
  401212:	2b00      	cmp	r3, #0
  401214:	d0c6      	beq.n	4011a4 <strlen+0x24>
  401216:	2a00      	cmp	r2, #0
  401218:	bf04      	itt	eq
  40121a:	3004      	addeq	r0, #4
  40121c:	461a      	moveq	r2, r3
  40121e:	ba12      	rev	r2, r2
  401220:	fab2 f282 	clz	r2, r2
  401224:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  401228:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40122c:	4770      	bx	lr
  40122e:	e9d1 2300 	ldrd	r2, r3, [r1]
  401232:	f004 0503 	and.w	r5, r4, #3
  401236:	f1c4 0000 	rsb	r0, r4, #0
  40123a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40123e:	f014 0f04 	tst.w	r4, #4
  401242:	f891 f040 	pld	[r1, #64]	; 0x40
  401246:	fa0c f505 	lsl.w	r5, ip, r5
  40124a:	ea62 0205 	orn	r2, r2, r5
  40124e:	bf1c      	itt	ne
  401250:	ea63 0305 	ornne	r3, r3, r5
  401254:	4662      	movne	r2, ip
  401256:	f04f 0400 	mov.w	r4, #0
  40125a:	e7a9      	b.n	4011b0 <strlen+0x30>

0040125c <__sprint_r.part.0>:
  40125c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401260:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  401262:	049c      	lsls	r4, r3, #18
  401264:	4693      	mov	fp, r2
  401266:	d52f      	bpl.n	4012c8 <__sprint_r.part.0+0x6c>
  401268:	6893      	ldr	r3, [r2, #8]
  40126a:	6812      	ldr	r2, [r2, #0]
  40126c:	b353      	cbz	r3, 4012c4 <__sprint_r.part.0+0x68>
  40126e:	460e      	mov	r6, r1
  401270:	4607      	mov	r7, r0
  401272:	f102 0908 	add.w	r9, r2, #8
  401276:	e919 0420 	ldmdb	r9, {r5, sl}
  40127a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40127e:	d017      	beq.n	4012b0 <__sprint_r.part.0+0x54>
  401280:	3d04      	subs	r5, #4
  401282:	2400      	movs	r4, #0
  401284:	e001      	b.n	40128a <__sprint_r.part.0+0x2e>
  401286:	45a0      	cmp	r8, r4
  401288:	d010      	beq.n	4012ac <__sprint_r.part.0+0x50>
  40128a:	4632      	mov	r2, r6
  40128c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  401290:	4638      	mov	r0, r7
  401292:	f001 f8bb 	bl	40240c <_fputwc_r>
  401296:	1c43      	adds	r3, r0, #1
  401298:	f104 0401 	add.w	r4, r4, #1
  40129c:	d1f3      	bne.n	401286 <__sprint_r.part.0+0x2a>
  40129e:	2300      	movs	r3, #0
  4012a0:	f8cb 3008 	str.w	r3, [fp, #8]
  4012a4:	f8cb 3004 	str.w	r3, [fp, #4]
  4012a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4012ac:	f8db 3008 	ldr.w	r3, [fp, #8]
  4012b0:	f02a 0a03 	bic.w	sl, sl, #3
  4012b4:	eba3 030a 	sub.w	r3, r3, sl
  4012b8:	f8cb 3008 	str.w	r3, [fp, #8]
  4012bc:	f109 0908 	add.w	r9, r9, #8
  4012c0:	2b00      	cmp	r3, #0
  4012c2:	d1d8      	bne.n	401276 <__sprint_r.part.0+0x1a>
  4012c4:	2000      	movs	r0, #0
  4012c6:	e7ea      	b.n	40129e <__sprint_r.part.0+0x42>
  4012c8:	f001 fa0a 	bl	4026e0 <__sfvwrite_r>
  4012cc:	2300      	movs	r3, #0
  4012ce:	f8cb 3008 	str.w	r3, [fp, #8]
  4012d2:	f8cb 3004 	str.w	r3, [fp, #4]
  4012d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4012da:	bf00      	nop

004012dc <_vfiprintf_r>:
  4012dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4012e0:	b0ad      	sub	sp, #180	; 0xb4
  4012e2:	461d      	mov	r5, r3
  4012e4:	468b      	mov	fp, r1
  4012e6:	4690      	mov	r8, r2
  4012e8:	9307      	str	r3, [sp, #28]
  4012ea:	9006      	str	r0, [sp, #24]
  4012ec:	b118      	cbz	r0, 4012f6 <_vfiprintf_r+0x1a>
  4012ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4012f0:	2b00      	cmp	r3, #0
  4012f2:	f000 80f3 	beq.w	4014dc <_vfiprintf_r+0x200>
  4012f6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4012fa:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4012fe:	07df      	lsls	r7, r3, #31
  401300:	b281      	uxth	r1, r0
  401302:	d402      	bmi.n	40130a <_vfiprintf_r+0x2e>
  401304:	058e      	lsls	r6, r1, #22
  401306:	f140 80fc 	bpl.w	401502 <_vfiprintf_r+0x226>
  40130a:	048c      	lsls	r4, r1, #18
  40130c:	d40a      	bmi.n	401324 <_vfiprintf_r+0x48>
  40130e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401312:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  401316:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40131a:	f8ab 100c 	strh.w	r1, [fp, #12]
  40131e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  401322:	b289      	uxth	r1, r1
  401324:	0708      	lsls	r0, r1, #28
  401326:	f140 80b3 	bpl.w	401490 <_vfiprintf_r+0x1b4>
  40132a:	f8db 3010 	ldr.w	r3, [fp, #16]
  40132e:	2b00      	cmp	r3, #0
  401330:	f000 80ae 	beq.w	401490 <_vfiprintf_r+0x1b4>
  401334:	f001 031a 	and.w	r3, r1, #26
  401338:	2b0a      	cmp	r3, #10
  40133a:	f000 80b5 	beq.w	4014a8 <_vfiprintf_r+0x1cc>
  40133e:	2300      	movs	r3, #0
  401340:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  401344:	930b      	str	r3, [sp, #44]	; 0x2c
  401346:	9311      	str	r3, [sp, #68]	; 0x44
  401348:	9310      	str	r3, [sp, #64]	; 0x40
  40134a:	9303      	str	r3, [sp, #12]
  40134c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  401350:	46ca      	mov	sl, r9
  401352:	f8cd b010 	str.w	fp, [sp, #16]
  401356:	f898 3000 	ldrb.w	r3, [r8]
  40135a:	4644      	mov	r4, r8
  40135c:	b1fb      	cbz	r3, 40139e <_vfiprintf_r+0xc2>
  40135e:	2b25      	cmp	r3, #37	; 0x25
  401360:	d102      	bne.n	401368 <_vfiprintf_r+0x8c>
  401362:	e01c      	b.n	40139e <_vfiprintf_r+0xc2>
  401364:	2b25      	cmp	r3, #37	; 0x25
  401366:	d003      	beq.n	401370 <_vfiprintf_r+0x94>
  401368:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40136c:	2b00      	cmp	r3, #0
  40136e:	d1f9      	bne.n	401364 <_vfiprintf_r+0x88>
  401370:	eba4 0508 	sub.w	r5, r4, r8
  401374:	b19d      	cbz	r5, 40139e <_vfiprintf_r+0xc2>
  401376:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401378:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40137a:	f8ca 8000 	str.w	r8, [sl]
  40137e:	3301      	adds	r3, #1
  401380:	442a      	add	r2, r5
  401382:	2b07      	cmp	r3, #7
  401384:	f8ca 5004 	str.w	r5, [sl, #4]
  401388:	9211      	str	r2, [sp, #68]	; 0x44
  40138a:	9310      	str	r3, [sp, #64]	; 0x40
  40138c:	dd7a      	ble.n	401484 <_vfiprintf_r+0x1a8>
  40138e:	2a00      	cmp	r2, #0
  401390:	f040 84b0 	bne.w	401cf4 <_vfiprintf_r+0xa18>
  401394:	9b03      	ldr	r3, [sp, #12]
  401396:	9210      	str	r2, [sp, #64]	; 0x40
  401398:	442b      	add	r3, r5
  40139a:	46ca      	mov	sl, r9
  40139c:	9303      	str	r3, [sp, #12]
  40139e:	7823      	ldrb	r3, [r4, #0]
  4013a0:	2b00      	cmp	r3, #0
  4013a2:	f000 83e0 	beq.w	401b66 <_vfiprintf_r+0x88a>
  4013a6:	2000      	movs	r0, #0
  4013a8:	f04f 0300 	mov.w	r3, #0
  4013ac:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  4013b0:	f104 0801 	add.w	r8, r4, #1
  4013b4:	7862      	ldrb	r2, [r4, #1]
  4013b6:	4605      	mov	r5, r0
  4013b8:	4606      	mov	r6, r0
  4013ba:	4603      	mov	r3, r0
  4013bc:	f04f 34ff 	mov.w	r4, #4294967295
  4013c0:	f108 0801 	add.w	r8, r8, #1
  4013c4:	f1a2 0120 	sub.w	r1, r2, #32
  4013c8:	2958      	cmp	r1, #88	; 0x58
  4013ca:	f200 82de 	bhi.w	40198a <_vfiprintf_r+0x6ae>
  4013ce:	e8df f011 	tbh	[pc, r1, lsl #1]
  4013d2:	0221      	.short	0x0221
  4013d4:	02dc02dc 	.word	0x02dc02dc
  4013d8:	02dc0229 	.word	0x02dc0229
  4013dc:	02dc02dc 	.word	0x02dc02dc
  4013e0:	02dc02dc 	.word	0x02dc02dc
  4013e4:	028902dc 	.word	0x028902dc
  4013e8:	02dc0295 	.word	0x02dc0295
  4013ec:	02bd00a2 	.word	0x02bd00a2
  4013f0:	019f02dc 	.word	0x019f02dc
  4013f4:	01a401a4 	.word	0x01a401a4
  4013f8:	01a401a4 	.word	0x01a401a4
  4013fc:	01a401a4 	.word	0x01a401a4
  401400:	01a401a4 	.word	0x01a401a4
  401404:	02dc01a4 	.word	0x02dc01a4
  401408:	02dc02dc 	.word	0x02dc02dc
  40140c:	02dc02dc 	.word	0x02dc02dc
  401410:	02dc02dc 	.word	0x02dc02dc
  401414:	02dc02dc 	.word	0x02dc02dc
  401418:	01b202dc 	.word	0x01b202dc
  40141c:	02dc02dc 	.word	0x02dc02dc
  401420:	02dc02dc 	.word	0x02dc02dc
  401424:	02dc02dc 	.word	0x02dc02dc
  401428:	02dc02dc 	.word	0x02dc02dc
  40142c:	02dc02dc 	.word	0x02dc02dc
  401430:	02dc0197 	.word	0x02dc0197
  401434:	02dc02dc 	.word	0x02dc02dc
  401438:	02dc02dc 	.word	0x02dc02dc
  40143c:	02dc019b 	.word	0x02dc019b
  401440:	025302dc 	.word	0x025302dc
  401444:	02dc02dc 	.word	0x02dc02dc
  401448:	02dc02dc 	.word	0x02dc02dc
  40144c:	02dc02dc 	.word	0x02dc02dc
  401450:	02dc02dc 	.word	0x02dc02dc
  401454:	02dc02dc 	.word	0x02dc02dc
  401458:	021b025a 	.word	0x021b025a
  40145c:	02dc02dc 	.word	0x02dc02dc
  401460:	026e02dc 	.word	0x026e02dc
  401464:	02dc021b 	.word	0x02dc021b
  401468:	027302dc 	.word	0x027302dc
  40146c:	01f502dc 	.word	0x01f502dc
  401470:	02090182 	.word	0x02090182
  401474:	02dc02d7 	.word	0x02dc02d7
  401478:	02dc029a 	.word	0x02dc029a
  40147c:	02dc00a7 	.word	0x02dc00a7
  401480:	022e02dc 	.word	0x022e02dc
  401484:	f10a 0a08 	add.w	sl, sl, #8
  401488:	9b03      	ldr	r3, [sp, #12]
  40148a:	442b      	add	r3, r5
  40148c:	9303      	str	r3, [sp, #12]
  40148e:	e786      	b.n	40139e <_vfiprintf_r+0xc2>
  401490:	4659      	mov	r1, fp
  401492:	9806      	ldr	r0, [sp, #24]
  401494:	f000 fdac 	bl	401ff0 <__swsetup_r>
  401498:	bb18      	cbnz	r0, 4014e2 <_vfiprintf_r+0x206>
  40149a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40149e:	f001 031a 	and.w	r3, r1, #26
  4014a2:	2b0a      	cmp	r3, #10
  4014a4:	f47f af4b 	bne.w	40133e <_vfiprintf_r+0x62>
  4014a8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  4014ac:	2b00      	cmp	r3, #0
  4014ae:	f6ff af46 	blt.w	40133e <_vfiprintf_r+0x62>
  4014b2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4014b6:	07db      	lsls	r3, r3, #31
  4014b8:	d405      	bmi.n	4014c6 <_vfiprintf_r+0x1ea>
  4014ba:	058f      	lsls	r7, r1, #22
  4014bc:	d403      	bmi.n	4014c6 <_vfiprintf_r+0x1ea>
  4014be:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4014c2:	f001 fac3 	bl	402a4c <__retarget_lock_release_recursive>
  4014c6:	462b      	mov	r3, r5
  4014c8:	4642      	mov	r2, r8
  4014ca:	4659      	mov	r1, fp
  4014cc:	9806      	ldr	r0, [sp, #24]
  4014ce:	f000 fd4d 	bl	401f6c <__sbprintf>
  4014d2:	9003      	str	r0, [sp, #12]
  4014d4:	9803      	ldr	r0, [sp, #12]
  4014d6:	b02d      	add	sp, #180	; 0xb4
  4014d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4014dc:	f000 fef4 	bl	4022c8 <__sinit>
  4014e0:	e709      	b.n	4012f6 <_vfiprintf_r+0x1a>
  4014e2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4014e6:	07d9      	lsls	r1, r3, #31
  4014e8:	d404      	bmi.n	4014f4 <_vfiprintf_r+0x218>
  4014ea:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4014ee:	059a      	lsls	r2, r3, #22
  4014f0:	f140 84aa 	bpl.w	401e48 <_vfiprintf_r+0xb6c>
  4014f4:	f04f 33ff 	mov.w	r3, #4294967295
  4014f8:	9303      	str	r3, [sp, #12]
  4014fa:	9803      	ldr	r0, [sp, #12]
  4014fc:	b02d      	add	sp, #180	; 0xb4
  4014fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401502:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401506:	f001 fa9f 	bl	402a48 <__retarget_lock_acquire_recursive>
  40150a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40150e:	b281      	uxth	r1, r0
  401510:	e6fb      	b.n	40130a <_vfiprintf_r+0x2e>
  401512:	4276      	negs	r6, r6
  401514:	9207      	str	r2, [sp, #28]
  401516:	f043 0304 	orr.w	r3, r3, #4
  40151a:	f898 2000 	ldrb.w	r2, [r8]
  40151e:	e74f      	b.n	4013c0 <_vfiprintf_r+0xe4>
  401520:	9608      	str	r6, [sp, #32]
  401522:	069e      	lsls	r6, r3, #26
  401524:	f100 8450 	bmi.w	401dc8 <_vfiprintf_r+0xaec>
  401528:	9907      	ldr	r1, [sp, #28]
  40152a:	06dd      	lsls	r5, r3, #27
  40152c:	460a      	mov	r2, r1
  40152e:	f100 83ef 	bmi.w	401d10 <_vfiprintf_r+0xa34>
  401532:	0658      	lsls	r0, r3, #25
  401534:	f140 83ec 	bpl.w	401d10 <_vfiprintf_r+0xa34>
  401538:	880e      	ldrh	r6, [r1, #0]
  40153a:	3104      	adds	r1, #4
  40153c:	2700      	movs	r7, #0
  40153e:	2201      	movs	r2, #1
  401540:	9107      	str	r1, [sp, #28]
  401542:	f04f 0100 	mov.w	r1, #0
  401546:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40154a:	2500      	movs	r5, #0
  40154c:	1c61      	adds	r1, r4, #1
  40154e:	f000 8116 	beq.w	40177e <_vfiprintf_r+0x4a2>
  401552:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  401556:	9102      	str	r1, [sp, #8]
  401558:	ea56 0107 	orrs.w	r1, r6, r7
  40155c:	f040 8114 	bne.w	401788 <_vfiprintf_r+0x4ac>
  401560:	2c00      	cmp	r4, #0
  401562:	f040 835c 	bne.w	401c1e <_vfiprintf_r+0x942>
  401566:	2a00      	cmp	r2, #0
  401568:	f040 83b7 	bne.w	401cda <_vfiprintf_r+0x9fe>
  40156c:	f013 0301 	ands.w	r3, r3, #1
  401570:	9305      	str	r3, [sp, #20]
  401572:	f000 8457 	beq.w	401e24 <_vfiprintf_r+0xb48>
  401576:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40157a:	2330      	movs	r3, #48	; 0x30
  40157c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  401580:	9b05      	ldr	r3, [sp, #20]
  401582:	42a3      	cmp	r3, r4
  401584:	bfb8      	it	lt
  401586:	4623      	movlt	r3, r4
  401588:	9301      	str	r3, [sp, #4]
  40158a:	b10d      	cbz	r5, 401590 <_vfiprintf_r+0x2b4>
  40158c:	3301      	adds	r3, #1
  40158e:	9301      	str	r3, [sp, #4]
  401590:	9b02      	ldr	r3, [sp, #8]
  401592:	f013 0302 	ands.w	r3, r3, #2
  401596:	9309      	str	r3, [sp, #36]	; 0x24
  401598:	d002      	beq.n	4015a0 <_vfiprintf_r+0x2c4>
  40159a:	9b01      	ldr	r3, [sp, #4]
  40159c:	3302      	adds	r3, #2
  40159e:	9301      	str	r3, [sp, #4]
  4015a0:	9b02      	ldr	r3, [sp, #8]
  4015a2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  4015a6:	930a      	str	r3, [sp, #40]	; 0x28
  4015a8:	f040 8217 	bne.w	4019da <_vfiprintf_r+0x6fe>
  4015ac:	9b08      	ldr	r3, [sp, #32]
  4015ae:	9a01      	ldr	r2, [sp, #4]
  4015b0:	1a9d      	subs	r5, r3, r2
  4015b2:	2d00      	cmp	r5, #0
  4015b4:	f340 8211 	ble.w	4019da <_vfiprintf_r+0x6fe>
  4015b8:	2d10      	cmp	r5, #16
  4015ba:	f340 8490 	ble.w	401ede <_vfiprintf_r+0xc02>
  4015be:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4015c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4015c2:	4ec4      	ldr	r6, [pc, #784]	; (4018d4 <_vfiprintf_r+0x5f8>)
  4015c4:	46d6      	mov	lr, sl
  4015c6:	2710      	movs	r7, #16
  4015c8:	46a2      	mov	sl, r4
  4015ca:	4619      	mov	r1, r3
  4015cc:	9c06      	ldr	r4, [sp, #24]
  4015ce:	e007      	b.n	4015e0 <_vfiprintf_r+0x304>
  4015d0:	f101 0c02 	add.w	ip, r1, #2
  4015d4:	f10e 0e08 	add.w	lr, lr, #8
  4015d8:	4601      	mov	r1, r0
  4015da:	3d10      	subs	r5, #16
  4015dc:	2d10      	cmp	r5, #16
  4015de:	dd11      	ble.n	401604 <_vfiprintf_r+0x328>
  4015e0:	1c48      	adds	r0, r1, #1
  4015e2:	3210      	adds	r2, #16
  4015e4:	2807      	cmp	r0, #7
  4015e6:	9211      	str	r2, [sp, #68]	; 0x44
  4015e8:	e88e 00c0 	stmia.w	lr, {r6, r7}
  4015ec:	9010      	str	r0, [sp, #64]	; 0x40
  4015ee:	ddef      	ble.n	4015d0 <_vfiprintf_r+0x2f4>
  4015f0:	2a00      	cmp	r2, #0
  4015f2:	f040 81e4 	bne.w	4019be <_vfiprintf_r+0x6e2>
  4015f6:	3d10      	subs	r5, #16
  4015f8:	2d10      	cmp	r5, #16
  4015fa:	4611      	mov	r1, r2
  4015fc:	f04f 0c01 	mov.w	ip, #1
  401600:	46ce      	mov	lr, r9
  401602:	dced      	bgt.n	4015e0 <_vfiprintf_r+0x304>
  401604:	4654      	mov	r4, sl
  401606:	4661      	mov	r1, ip
  401608:	46f2      	mov	sl, lr
  40160a:	442a      	add	r2, r5
  40160c:	2907      	cmp	r1, #7
  40160e:	9211      	str	r2, [sp, #68]	; 0x44
  401610:	f8ca 6000 	str.w	r6, [sl]
  401614:	f8ca 5004 	str.w	r5, [sl, #4]
  401618:	9110      	str	r1, [sp, #64]	; 0x40
  40161a:	f300 82ec 	bgt.w	401bf6 <_vfiprintf_r+0x91a>
  40161e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401622:	f10a 0a08 	add.w	sl, sl, #8
  401626:	1c48      	adds	r0, r1, #1
  401628:	2d00      	cmp	r5, #0
  40162a:	f040 81de 	bne.w	4019ea <_vfiprintf_r+0x70e>
  40162e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401630:	2b00      	cmp	r3, #0
  401632:	f000 81f8 	beq.w	401a26 <_vfiprintf_r+0x74a>
  401636:	3202      	adds	r2, #2
  401638:	a90e      	add	r1, sp, #56	; 0x38
  40163a:	2302      	movs	r3, #2
  40163c:	2807      	cmp	r0, #7
  40163e:	9211      	str	r2, [sp, #68]	; 0x44
  401640:	9010      	str	r0, [sp, #64]	; 0x40
  401642:	e88a 000a 	stmia.w	sl, {r1, r3}
  401646:	f340 81ea 	ble.w	401a1e <_vfiprintf_r+0x742>
  40164a:	2a00      	cmp	r2, #0
  40164c:	f040 838c 	bne.w	401d68 <_vfiprintf_r+0xa8c>
  401650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401652:	2b80      	cmp	r3, #128	; 0x80
  401654:	f04f 0001 	mov.w	r0, #1
  401658:	4611      	mov	r1, r2
  40165a:	46ca      	mov	sl, r9
  40165c:	f040 81e7 	bne.w	401a2e <_vfiprintf_r+0x752>
  401660:	9b08      	ldr	r3, [sp, #32]
  401662:	9d01      	ldr	r5, [sp, #4]
  401664:	1b5e      	subs	r6, r3, r5
  401666:	2e00      	cmp	r6, #0
  401668:	f340 81e1 	ble.w	401a2e <_vfiprintf_r+0x752>
  40166c:	2e10      	cmp	r6, #16
  40166e:	4d9a      	ldr	r5, [pc, #616]	; (4018d8 <_vfiprintf_r+0x5fc>)
  401670:	f340 8450 	ble.w	401f14 <_vfiprintf_r+0xc38>
  401674:	46d4      	mov	ip, sl
  401676:	2710      	movs	r7, #16
  401678:	46a2      	mov	sl, r4
  40167a:	9c06      	ldr	r4, [sp, #24]
  40167c:	e007      	b.n	40168e <_vfiprintf_r+0x3b2>
  40167e:	f101 0e02 	add.w	lr, r1, #2
  401682:	f10c 0c08 	add.w	ip, ip, #8
  401686:	4601      	mov	r1, r0
  401688:	3e10      	subs	r6, #16
  40168a:	2e10      	cmp	r6, #16
  40168c:	dd11      	ble.n	4016b2 <_vfiprintf_r+0x3d6>
  40168e:	1c48      	adds	r0, r1, #1
  401690:	3210      	adds	r2, #16
  401692:	2807      	cmp	r0, #7
  401694:	9211      	str	r2, [sp, #68]	; 0x44
  401696:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40169a:	9010      	str	r0, [sp, #64]	; 0x40
  40169c:	ddef      	ble.n	40167e <_vfiprintf_r+0x3a2>
  40169e:	2a00      	cmp	r2, #0
  4016a0:	f040 829d 	bne.w	401bde <_vfiprintf_r+0x902>
  4016a4:	3e10      	subs	r6, #16
  4016a6:	2e10      	cmp	r6, #16
  4016a8:	f04f 0e01 	mov.w	lr, #1
  4016ac:	4611      	mov	r1, r2
  4016ae:	46cc      	mov	ip, r9
  4016b0:	dced      	bgt.n	40168e <_vfiprintf_r+0x3b2>
  4016b2:	4654      	mov	r4, sl
  4016b4:	46e2      	mov	sl, ip
  4016b6:	4432      	add	r2, r6
  4016b8:	f1be 0f07 	cmp.w	lr, #7
  4016bc:	9211      	str	r2, [sp, #68]	; 0x44
  4016be:	e88a 0060 	stmia.w	sl, {r5, r6}
  4016c2:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  4016c6:	f300 8369 	bgt.w	401d9c <_vfiprintf_r+0xac0>
  4016ca:	f10a 0a08 	add.w	sl, sl, #8
  4016ce:	f10e 0001 	add.w	r0, lr, #1
  4016d2:	4671      	mov	r1, lr
  4016d4:	e1ab      	b.n	401a2e <_vfiprintf_r+0x752>
  4016d6:	9608      	str	r6, [sp, #32]
  4016d8:	f013 0220 	ands.w	r2, r3, #32
  4016dc:	f040 838c 	bne.w	401df8 <_vfiprintf_r+0xb1c>
  4016e0:	f013 0110 	ands.w	r1, r3, #16
  4016e4:	f040 831a 	bne.w	401d1c <_vfiprintf_r+0xa40>
  4016e8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4016ec:	f000 8316 	beq.w	401d1c <_vfiprintf_r+0xa40>
  4016f0:	9807      	ldr	r0, [sp, #28]
  4016f2:	460a      	mov	r2, r1
  4016f4:	4601      	mov	r1, r0
  4016f6:	3104      	adds	r1, #4
  4016f8:	8806      	ldrh	r6, [r0, #0]
  4016fa:	9107      	str	r1, [sp, #28]
  4016fc:	2700      	movs	r7, #0
  4016fe:	e720      	b.n	401542 <_vfiprintf_r+0x266>
  401700:	9608      	str	r6, [sp, #32]
  401702:	f043 0310 	orr.w	r3, r3, #16
  401706:	e7e7      	b.n	4016d8 <_vfiprintf_r+0x3fc>
  401708:	9608      	str	r6, [sp, #32]
  40170a:	f043 0310 	orr.w	r3, r3, #16
  40170e:	e708      	b.n	401522 <_vfiprintf_r+0x246>
  401710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401714:	f898 2000 	ldrb.w	r2, [r8]
  401718:	e652      	b.n	4013c0 <_vfiprintf_r+0xe4>
  40171a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40171e:	2600      	movs	r6, #0
  401720:	f818 2b01 	ldrb.w	r2, [r8], #1
  401724:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  401728:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  40172c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401730:	2909      	cmp	r1, #9
  401732:	d9f5      	bls.n	401720 <_vfiprintf_r+0x444>
  401734:	e646      	b.n	4013c4 <_vfiprintf_r+0xe8>
  401736:	9608      	str	r6, [sp, #32]
  401738:	2800      	cmp	r0, #0
  40173a:	f040 8408 	bne.w	401f4e <_vfiprintf_r+0xc72>
  40173e:	f043 0310 	orr.w	r3, r3, #16
  401742:	069e      	lsls	r6, r3, #26
  401744:	f100 834c 	bmi.w	401de0 <_vfiprintf_r+0xb04>
  401748:	06dd      	lsls	r5, r3, #27
  40174a:	f100 82f3 	bmi.w	401d34 <_vfiprintf_r+0xa58>
  40174e:	0658      	lsls	r0, r3, #25
  401750:	f140 82f0 	bpl.w	401d34 <_vfiprintf_r+0xa58>
  401754:	9d07      	ldr	r5, [sp, #28]
  401756:	f9b5 6000 	ldrsh.w	r6, [r5]
  40175a:	462a      	mov	r2, r5
  40175c:	17f7      	asrs	r7, r6, #31
  40175e:	3204      	adds	r2, #4
  401760:	4630      	mov	r0, r6
  401762:	4639      	mov	r1, r7
  401764:	9207      	str	r2, [sp, #28]
  401766:	2800      	cmp	r0, #0
  401768:	f171 0200 	sbcs.w	r2, r1, #0
  40176c:	f2c0 835d 	blt.w	401e2a <_vfiprintf_r+0xb4e>
  401770:	1c61      	adds	r1, r4, #1
  401772:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401776:	f04f 0201 	mov.w	r2, #1
  40177a:	f47f aeea 	bne.w	401552 <_vfiprintf_r+0x276>
  40177e:	ea56 0107 	orrs.w	r1, r6, r7
  401782:	f000 824d 	beq.w	401c20 <_vfiprintf_r+0x944>
  401786:	9302      	str	r3, [sp, #8]
  401788:	2a01      	cmp	r2, #1
  40178a:	f000 828c 	beq.w	401ca6 <_vfiprintf_r+0x9ca>
  40178e:	2a02      	cmp	r2, #2
  401790:	f040 825c 	bne.w	401c4c <_vfiprintf_r+0x970>
  401794:	980b      	ldr	r0, [sp, #44]	; 0x2c
  401796:	46cb      	mov	fp, r9
  401798:	0933      	lsrs	r3, r6, #4
  40179a:	f006 010f 	and.w	r1, r6, #15
  40179e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4017a2:	093a      	lsrs	r2, r7, #4
  4017a4:	461e      	mov	r6, r3
  4017a6:	4617      	mov	r7, r2
  4017a8:	5c43      	ldrb	r3, [r0, r1]
  4017aa:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  4017ae:	ea56 0307 	orrs.w	r3, r6, r7
  4017b2:	d1f1      	bne.n	401798 <_vfiprintf_r+0x4bc>
  4017b4:	eba9 030b 	sub.w	r3, r9, fp
  4017b8:	9305      	str	r3, [sp, #20]
  4017ba:	e6e1      	b.n	401580 <_vfiprintf_r+0x2a4>
  4017bc:	2800      	cmp	r0, #0
  4017be:	f040 83c0 	bne.w	401f42 <_vfiprintf_r+0xc66>
  4017c2:	0699      	lsls	r1, r3, #26
  4017c4:	f100 8367 	bmi.w	401e96 <_vfiprintf_r+0xbba>
  4017c8:	06da      	lsls	r2, r3, #27
  4017ca:	f100 80f1 	bmi.w	4019b0 <_vfiprintf_r+0x6d4>
  4017ce:	065b      	lsls	r3, r3, #25
  4017d0:	f140 80ee 	bpl.w	4019b0 <_vfiprintf_r+0x6d4>
  4017d4:	9a07      	ldr	r2, [sp, #28]
  4017d6:	6813      	ldr	r3, [r2, #0]
  4017d8:	3204      	adds	r2, #4
  4017da:	9207      	str	r2, [sp, #28]
  4017dc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4017e0:	801a      	strh	r2, [r3, #0]
  4017e2:	e5b8      	b.n	401356 <_vfiprintf_r+0x7a>
  4017e4:	9807      	ldr	r0, [sp, #28]
  4017e6:	4a3d      	ldr	r2, [pc, #244]	; (4018dc <_vfiprintf_r+0x600>)
  4017e8:	9608      	str	r6, [sp, #32]
  4017ea:	920b      	str	r2, [sp, #44]	; 0x2c
  4017ec:	6806      	ldr	r6, [r0, #0]
  4017ee:	2278      	movs	r2, #120	; 0x78
  4017f0:	2130      	movs	r1, #48	; 0x30
  4017f2:	3004      	adds	r0, #4
  4017f4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4017f8:	f043 0302 	orr.w	r3, r3, #2
  4017fc:	9007      	str	r0, [sp, #28]
  4017fe:	2700      	movs	r7, #0
  401800:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  401804:	2202      	movs	r2, #2
  401806:	e69c      	b.n	401542 <_vfiprintf_r+0x266>
  401808:	9608      	str	r6, [sp, #32]
  40180a:	2800      	cmp	r0, #0
  40180c:	d099      	beq.n	401742 <_vfiprintf_r+0x466>
  40180e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401812:	e796      	b.n	401742 <_vfiprintf_r+0x466>
  401814:	f898 2000 	ldrb.w	r2, [r8]
  401818:	2d00      	cmp	r5, #0
  40181a:	f47f add1 	bne.w	4013c0 <_vfiprintf_r+0xe4>
  40181e:	2001      	movs	r0, #1
  401820:	2520      	movs	r5, #32
  401822:	e5cd      	b.n	4013c0 <_vfiprintf_r+0xe4>
  401824:	f043 0301 	orr.w	r3, r3, #1
  401828:	f898 2000 	ldrb.w	r2, [r8]
  40182c:	e5c8      	b.n	4013c0 <_vfiprintf_r+0xe4>
  40182e:	9608      	str	r6, [sp, #32]
  401830:	2800      	cmp	r0, #0
  401832:	f040 8393 	bne.w	401f5c <_vfiprintf_r+0xc80>
  401836:	4929      	ldr	r1, [pc, #164]	; (4018dc <_vfiprintf_r+0x600>)
  401838:	910b      	str	r1, [sp, #44]	; 0x2c
  40183a:	069f      	lsls	r7, r3, #26
  40183c:	f100 82e8 	bmi.w	401e10 <_vfiprintf_r+0xb34>
  401840:	9807      	ldr	r0, [sp, #28]
  401842:	06de      	lsls	r6, r3, #27
  401844:	4601      	mov	r1, r0
  401846:	f100 8270 	bmi.w	401d2a <_vfiprintf_r+0xa4e>
  40184a:	065d      	lsls	r5, r3, #25
  40184c:	f140 826d 	bpl.w	401d2a <_vfiprintf_r+0xa4e>
  401850:	3104      	adds	r1, #4
  401852:	8806      	ldrh	r6, [r0, #0]
  401854:	9107      	str	r1, [sp, #28]
  401856:	2700      	movs	r7, #0
  401858:	07d8      	lsls	r0, r3, #31
  40185a:	f140 8222 	bpl.w	401ca2 <_vfiprintf_r+0x9c6>
  40185e:	ea56 0107 	orrs.w	r1, r6, r7
  401862:	f000 821e 	beq.w	401ca2 <_vfiprintf_r+0x9c6>
  401866:	2130      	movs	r1, #48	; 0x30
  401868:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40186c:	f043 0302 	orr.w	r3, r3, #2
  401870:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  401874:	2202      	movs	r2, #2
  401876:	e664      	b.n	401542 <_vfiprintf_r+0x266>
  401878:	9608      	str	r6, [sp, #32]
  40187a:	2800      	cmp	r0, #0
  40187c:	f040 836b 	bne.w	401f56 <_vfiprintf_r+0xc7a>
  401880:	4917      	ldr	r1, [pc, #92]	; (4018e0 <_vfiprintf_r+0x604>)
  401882:	910b      	str	r1, [sp, #44]	; 0x2c
  401884:	e7d9      	b.n	40183a <_vfiprintf_r+0x55e>
  401886:	9907      	ldr	r1, [sp, #28]
  401888:	9608      	str	r6, [sp, #32]
  40188a:	680a      	ldr	r2, [r1, #0]
  40188c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  401890:	f04f 0000 	mov.w	r0, #0
  401894:	460a      	mov	r2, r1
  401896:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40189a:	3204      	adds	r2, #4
  40189c:	2001      	movs	r0, #1
  40189e:	9001      	str	r0, [sp, #4]
  4018a0:	9207      	str	r2, [sp, #28]
  4018a2:	9005      	str	r0, [sp, #20]
  4018a4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4018a8:	9302      	str	r3, [sp, #8]
  4018aa:	2400      	movs	r4, #0
  4018ac:	e670      	b.n	401590 <_vfiprintf_r+0x2b4>
  4018ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4018b2:	f898 2000 	ldrb.w	r2, [r8]
  4018b6:	e583      	b.n	4013c0 <_vfiprintf_r+0xe4>
  4018b8:	f898 2000 	ldrb.w	r2, [r8]
  4018bc:	2a6c      	cmp	r2, #108	; 0x6c
  4018be:	bf03      	ittte	eq
  4018c0:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  4018c4:	f043 0320 	orreq.w	r3, r3, #32
  4018c8:	f108 0801 	addeq.w	r8, r8, #1
  4018cc:	f043 0310 	orrne.w	r3, r3, #16
  4018d0:	e576      	b.n	4013c0 <_vfiprintf_r+0xe4>
  4018d2:	bf00      	nop
  4018d4:	00403f1c 	.word	0x00403f1c
  4018d8:	00403f2c 	.word	0x00403f2c
  4018dc:	00403f00 	.word	0x00403f00
  4018e0:	00403eec 	.word	0x00403eec
  4018e4:	9907      	ldr	r1, [sp, #28]
  4018e6:	680e      	ldr	r6, [r1, #0]
  4018e8:	460a      	mov	r2, r1
  4018ea:	2e00      	cmp	r6, #0
  4018ec:	f102 0204 	add.w	r2, r2, #4
  4018f0:	f6ff ae0f 	blt.w	401512 <_vfiprintf_r+0x236>
  4018f4:	9207      	str	r2, [sp, #28]
  4018f6:	f898 2000 	ldrb.w	r2, [r8]
  4018fa:	e561      	b.n	4013c0 <_vfiprintf_r+0xe4>
  4018fc:	f898 2000 	ldrb.w	r2, [r8]
  401900:	2001      	movs	r0, #1
  401902:	252b      	movs	r5, #43	; 0x2b
  401904:	e55c      	b.n	4013c0 <_vfiprintf_r+0xe4>
  401906:	9907      	ldr	r1, [sp, #28]
  401908:	9608      	str	r6, [sp, #32]
  40190a:	f8d1 b000 	ldr.w	fp, [r1]
  40190e:	f04f 0200 	mov.w	r2, #0
  401912:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  401916:	1d0e      	adds	r6, r1, #4
  401918:	f1bb 0f00 	cmp.w	fp, #0
  40191c:	f000 82e5 	beq.w	401eea <_vfiprintf_r+0xc0e>
  401920:	1c67      	adds	r7, r4, #1
  401922:	f000 82c4 	beq.w	401eae <_vfiprintf_r+0xbd2>
  401926:	4622      	mov	r2, r4
  401928:	2100      	movs	r1, #0
  40192a:	4658      	mov	r0, fp
  40192c:	9301      	str	r3, [sp, #4]
  40192e:	f001 fbd7 	bl	4030e0 <memchr>
  401932:	9b01      	ldr	r3, [sp, #4]
  401934:	2800      	cmp	r0, #0
  401936:	f000 82e5 	beq.w	401f04 <_vfiprintf_r+0xc28>
  40193a:	eba0 020b 	sub.w	r2, r0, fp
  40193e:	9205      	str	r2, [sp, #20]
  401940:	9607      	str	r6, [sp, #28]
  401942:	9302      	str	r3, [sp, #8]
  401944:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401948:	2400      	movs	r4, #0
  40194a:	e619      	b.n	401580 <_vfiprintf_r+0x2a4>
  40194c:	f898 2000 	ldrb.w	r2, [r8]
  401950:	2a2a      	cmp	r2, #42	; 0x2a
  401952:	f108 0701 	add.w	r7, r8, #1
  401956:	f000 82e9 	beq.w	401f2c <_vfiprintf_r+0xc50>
  40195a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40195e:	2909      	cmp	r1, #9
  401960:	46b8      	mov	r8, r7
  401962:	f04f 0400 	mov.w	r4, #0
  401966:	f63f ad2d 	bhi.w	4013c4 <_vfiprintf_r+0xe8>
  40196a:	f818 2b01 	ldrb.w	r2, [r8], #1
  40196e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  401972:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  401976:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40197a:	2909      	cmp	r1, #9
  40197c:	d9f5      	bls.n	40196a <_vfiprintf_r+0x68e>
  40197e:	e521      	b.n	4013c4 <_vfiprintf_r+0xe8>
  401980:	f043 0320 	orr.w	r3, r3, #32
  401984:	f898 2000 	ldrb.w	r2, [r8]
  401988:	e51a      	b.n	4013c0 <_vfiprintf_r+0xe4>
  40198a:	9608      	str	r6, [sp, #32]
  40198c:	2800      	cmp	r0, #0
  40198e:	f040 82db 	bne.w	401f48 <_vfiprintf_r+0xc6c>
  401992:	2a00      	cmp	r2, #0
  401994:	f000 80e7 	beq.w	401b66 <_vfiprintf_r+0x88a>
  401998:	2101      	movs	r1, #1
  40199a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40199e:	f04f 0200 	mov.w	r2, #0
  4019a2:	9101      	str	r1, [sp, #4]
  4019a4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4019a8:	9105      	str	r1, [sp, #20]
  4019aa:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4019ae:	e77b      	b.n	4018a8 <_vfiprintf_r+0x5cc>
  4019b0:	9a07      	ldr	r2, [sp, #28]
  4019b2:	6813      	ldr	r3, [r2, #0]
  4019b4:	3204      	adds	r2, #4
  4019b6:	9207      	str	r2, [sp, #28]
  4019b8:	9a03      	ldr	r2, [sp, #12]
  4019ba:	601a      	str	r2, [r3, #0]
  4019bc:	e4cb      	b.n	401356 <_vfiprintf_r+0x7a>
  4019be:	aa0f      	add	r2, sp, #60	; 0x3c
  4019c0:	9904      	ldr	r1, [sp, #16]
  4019c2:	4620      	mov	r0, r4
  4019c4:	f7ff fc4a 	bl	40125c <__sprint_r.part.0>
  4019c8:	2800      	cmp	r0, #0
  4019ca:	f040 8139 	bne.w	401c40 <_vfiprintf_r+0x964>
  4019ce:	9910      	ldr	r1, [sp, #64]	; 0x40
  4019d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4019d2:	f101 0c01 	add.w	ip, r1, #1
  4019d6:	46ce      	mov	lr, r9
  4019d8:	e5ff      	b.n	4015da <_vfiprintf_r+0x2fe>
  4019da:	9910      	ldr	r1, [sp, #64]	; 0x40
  4019dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4019de:	1c48      	adds	r0, r1, #1
  4019e0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4019e4:	2d00      	cmp	r5, #0
  4019e6:	f43f ae22 	beq.w	40162e <_vfiprintf_r+0x352>
  4019ea:	3201      	adds	r2, #1
  4019ec:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  4019f0:	2101      	movs	r1, #1
  4019f2:	2807      	cmp	r0, #7
  4019f4:	9211      	str	r2, [sp, #68]	; 0x44
  4019f6:	9010      	str	r0, [sp, #64]	; 0x40
  4019f8:	f8ca 5000 	str.w	r5, [sl]
  4019fc:	f8ca 1004 	str.w	r1, [sl, #4]
  401a00:	f340 8108 	ble.w	401c14 <_vfiprintf_r+0x938>
  401a04:	2a00      	cmp	r2, #0
  401a06:	f040 81bc 	bne.w	401d82 <_vfiprintf_r+0xaa6>
  401a0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401a0c:	2b00      	cmp	r3, #0
  401a0e:	f43f ae1f 	beq.w	401650 <_vfiprintf_r+0x374>
  401a12:	ab0e      	add	r3, sp, #56	; 0x38
  401a14:	2202      	movs	r2, #2
  401a16:	4608      	mov	r0, r1
  401a18:	931c      	str	r3, [sp, #112]	; 0x70
  401a1a:	921d      	str	r2, [sp, #116]	; 0x74
  401a1c:	46ca      	mov	sl, r9
  401a1e:	4601      	mov	r1, r0
  401a20:	f10a 0a08 	add.w	sl, sl, #8
  401a24:	3001      	adds	r0, #1
  401a26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401a28:	2b80      	cmp	r3, #128	; 0x80
  401a2a:	f43f ae19 	beq.w	401660 <_vfiprintf_r+0x384>
  401a2e:	9b05      	ldr	r3, [sp, #20]
  401a30:	1ae4      	subs	r4, r4, r3
  401a32:	2c00      	cmp	r4, #0
  401a34:	dd2e      	ble.n	401a94 <_vfiprintf_r+0x7b8>
  401a36:	2c10      	cmp	r4, #16
  401a38:	4db3      	ldr	r5, [pc, #716]	; (401d08 <_vfiprintf_r+0xa2c>)
  401a3a:	dd1e      	ble.n	401a7a <_vfiprintf_r+0x79e>
  401a3c:	46d6      	mov	lr, sl
  401a3e:	2610      	movs	r6, #16
  401a40:	9f06      	ldr	r7, [sp, #24]
  401a42:	f8dd a010 	ldr.w	sl, [sp, #16]
  401a46:	e006      	b.n	401a56 <_vfiprintf_r+0x77a>
  401a48:	1c88      	adds	r0, r1, #2
  401a4a:	f10e 0e08 	add.w	lr, lr, #8
  401a4e:	4619      	mov	r1, r3
  401a50:	3c10      	subs	r4, #16
  401a52:	2c10      	cmp	r4, #16
  401a54:	dd10      	ble.n	401a78 <_vfiprintf_r+0x79c>
  401a56:	1c4b      	adds	r3, r1, #1
  401a58:	3210      	adds	r2, #16
  401a5a:	2b07      	cmp	r3, #7
  401a5c:	9211      	str	r2, [sp, #68]	; 0x44
  401a5e:	e88e 0060 	stmia.w	lr, {r5, r6}
  401a62:	9310      	str	r3, [sp, #64]	; 0x40
  401a64:	ddf0      	ble.n	401a48 <_vfiprintf_r+0x76c>
  401a66:	2a00      	cmp	r2, #0
  401a68:	d165      	bne.n	401b36 <_vfiprintf_r+0x85a>
  401a6a:	3c10      	subs	r4, #16
  401a6c:	2c10      	cmp	r4, #16
  401a6e:	f04f 0001 	mov.w	r0, #1
  401a72:	4611      	mov	r1, r2
  401a74:	46ce      	mov	lr, r9
  401a76:	dcee      	bgt.n	401a56 <_vfiprintf_r+0x77a>
  401a78:	46f2      	mov	sl, lr
  401a7a:	4422      	add	r2, r4
  401a7c:	2807      	cmp	r0, #7
  401a7e:	9211      	str	r2, [sp, #68]	; 0x44
  401a80:	f8ca 5000 	str.w	r5, [sl]
  401a84:	f8ca 4004 	str.w	r4, [sl, #4]
  401a88:	9010      	str	r0, [sp, #64]	; 0x40
  401a8a:	f300 8085 	bgt.w	401b98 <_vfiprintf_r+0x8bc>
  401a8e:	f10a 0a08 	add.w	sl, sl, #8
  401a92:	3001      	adds	r0, #1
  401a94:	9905      	ldr	r1, [sp, #20]
  401a96:	f8ca b000 	str.w	fp, [sl]
  401a9a:	440a      	add	r2, r1
  401a9c:	2807      	cmp	r0, #7
  401a9e:	9211      	str	r2, [sp, #68]	; 0x44
  401aa0:	f8ca 1004 	str.w	r1, [sl, #4]
  401aa4:	9010      	str	r0, [sp, #64]	; 0x40
  401aa6:	f340 8082 	ble.w	401bae <_vfiprintf_r+0x8d2>
  401aaa:	2a00      	cmp	r2, #0
  401aac:	f040 8118 	bne.w	401ce0 <_vfiprintf_r+0xa04>
  401ab0:	9b02      	ldr	r3, [sp, #8]
  401ab2:	9210      	str	r2, [sp, #64]	; 0x40
  401ab4:	0758      	lsls	r0, r3, #29
  401ab6:	d535      	bpl.n	401b24 <_vfiprintf_r+0x848>
  401ab8:	9b08      	ldr	r3, [sp, #32]
  401aba:	9901      	ldr	r1, [sp, #4]
  401abc:	1a5c      	subs	r4, r3, r1
  401abe:	2c00      	cmp	r4, #0
  401ac0:	f340 80e7 	ble.w	401c92 <_vfiprintf_r+0x9b6>
  401ac4:	46ca      	mov	sl, r9
  401ac6:	2c10      	cmp	r4, #16
  401ac8:	f340 8218 	ble.w	401efc <_vfiprintf_r+0xc20>
  401acc:	9910      	ldr	r1, [sp, #64]	; 0x40
  401ace:	4e8f      	ldr	r6, [pc, #572]	; (401d0c <_vfiprintf_r+0xa30>)
  401ad0:	9f06      	ldr	r7, [sp, #24]
  401ad2:	f8dd b010 	ldr.w	fp, [sp, #16]
  401ad6:	2510      	movs	r5, #16
  401ad8:	e006      	b.n	401ae8 <_vfiprintf_r+0x80c>
  401ada:	1c88      	adds	r0, r1, #2
  401adc:	f10a 0a08 	add.w	sl, sl, #8
  401ae0:	4619      	mov	r1, r3
  401ae2:	3c10      	subs	r4, #16
  401ae4:	2c10      	cmp	r4, #16
  401ae6:	dd11      	ble.n	401b0c <_vfiprintf_r+0x830>
  401ae8:	1c4b      	adds	r3, r1, #1
  401aea:	3210      	adds	r2, #16
  401aec:	2b07      	cmp	r3, #7
  401aee:	9211      	str	r2, [sp, #68]	; 0x44
  401af0:	f8ca 6000 	str.w	r6, [sl]
  401af4:	f8ca 5004 	str.w	r5, [sl, #4]
  401af8:	9310      	str	r3, [sp, #64]	; 0x40
  401afa:	ddee      	ble.n	401ada <_vfiprintf_r+0x7fe>
  401afc:	bb42      	cbnz	r2, 401b50 <_vfiprintf_r+0x874>
  401afe:	3c10      	subs	r4, #16
  401b00:	2c10      	cmp	r4, #16
  401b02:	f04f 0001 	mov.w	r0, #1
  401b06:	4611      	mov	r1, r2
  401b08:	46ca      	mov	sl, r9
  401b0a:	dced      	bgt.n	401ae8 <_vfiprintf_r+0x80c>
  401b0c:	4422      	add	r2, r4
  401b0e:	2807      	cmp	r0, #7
  401b10:	9211      	str	r2, [sp, #68]	; 0x44
  401b12:	f8ca 6000 	str.w	r6, [sl]
  401b16:	f8ca 4004 	str.w	r4, [sl, #4]
  401b1a:	9010      	str	r0, [sp, #64]	; 0x40
  401b1c:	dd51      	ble.n	401bc2 <_vfiprintf_r+0x8e6>
  401b1e:	2a00      	cmp	r2, #0
  401b20:	f040 819b 	bne.w	401e5a <_vfiprintf_r+0xb7e>
  401b24:	9b03      	ldr	r3, [sp, #12]
  401b26:	9a08      	ldr	r2, [sp, #32]
  401b28:	9901      	ldr	r1, [sp, #4]
  401b2a:	428a      	cmp	r2, r1
  401b2c:	bfac      	ite	ge
  401b2e:	189b      	addge	r3, r3, r2
  401b30:	185b      	addlt	r3, r3, r1
  401b32:	9303      	str	r3, [sp, #12]
  401b34:	e04e      	b.n	401bd4 <_vfiprintf_r+0x8f8>
  401b36:	aa0f      	add	r2, sp, #60	; 0x3c
  401b38:	4651      	mov	r1, sl
  401b3a:	4638      	mov	r0, r7
  401b3c:	f7ff fb8e 	bl	40125c <__sprint_r.part.0>
  401b40:	2800      	cmp	r0, #0
  401b42:	f040 813f 	bne.w	401dc4 <_vfiprintf_r+0xae8>
  401b46:	9910      	ldr	r1, [sp, #64]	; 0x40
  401b48:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401b4a:	1c48      	adds	r0, r1, #1
  401b4c:	46ce      	mov	lr, r9
  401b4e:	e77f      	b.n	401a50 <_vfiprintf_r+0x774>
  401b50:	aa0f      	add	r2, sp, #60	; 0x3c
  401b52:	4659      	mov	r1, fp
  401b54:	4638      	mov	r0, r7
  401b56:	f7ff fb81 	bl	40125c <__sprint_r.part.0>
  401b5a:	b960      	cbnz	r0, 401b76 <_vfiprintf_r+0x89a>
  401b5c:	9910      	ldr	r1, [sp, #64]	; 0x40
  401b5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401b60:	1c48      	adds	r0, r1, #1
  401b62:	46ca      	mov	sl, r9
  401b64:	e7bd      	b.n	401ae2 <_vfiprintf_r+0x806>
  401b66:	9b11      	ldr	r3, [sp, #68]	; 0x44
  401b68:	f8dd b010 	ldr.w	fp, [sp, #16]
  401b6c:	2b00      	cmp	r3, #0
  401b6e:	f040 81d4 	bne.w	401f1a <_vfiprintf_r+0xc3e>
  401b72:	2300      	movs	r3, #0
  401b74:	9310      	str	r3, [sp, #64]	; 0x40
  401b76:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401b7a:	f013 0f01 	tst.w	r3, #1
  401b7e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  401b82:	d102      	bne.n	401b8a <_vfiprintf_r+0x8ae>
  401b84:	059a      	lsls	r2, r3, #22
  401b86:	f140 80de 	bpl.w	401d46 <_vfiprintf_r+0xa6a>
  401b8a:	065b      	lsls	r3, r3, #25
  401b8c:	f53f acb2 	bmi.w	4014f4 <_vfiprintf_r+0x218>
  401b90:	9803      	ldr	r0, [sp, #12]
  401b92:	b02d      	add	sp, #180	; 0xb4
  401b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401b98:	2a00      	cmp	r2, #0
  401b9a:	f040 8106 	bne.w	401daa <_vfiprintf_r+0xace>
  401b9e:	9a05      	ldr	r2, [sp, #20]
  401ba0:	921d      	str	r2, [sp, #116]	; 0x74
  401ba2:	2301      	movs	r3, #1
  401ba4:	9211      	str	r2, [sp, #68]	; 0x44
  401ba6:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  401baa:	9310      	str	r3, [sp, #64]	; 0x40
  401bac:	46ca      	mov	sl, r9
  401bae:	f10a 0a08 	add.w	sl, sl, #8
  401bb2:	9b02      	ldr	r3, [sp, #8]
  401bb4:	0759      	lsls	r1, r3, #29
  401bb6:	d504      	bpl.n	401bc2 <_vfiprintf_r+0x8e6>
  401bb8:	9b08      	ldr	r3, [sp, #32]
  401bba:	9901      	ldr	r1, [sp, #4]
  401bbc:	1a5c      	subs	r4, r3, r1
  401bbe:	2c00      	cmp	r4, #0
  401bc0:	dc81      	bgt.n	401ac6 <_vfiprintf_r+0x7ea>
  401bc2:	9b03      	ldr	r3, [sp, #12]
  401bc4:	9908      	ldr	r1, [sp, #32]
  401bc6:	9801      	ldr	r0, [sp, #4]
  401bc8:	4281      	cmp	r1, r0
  401bca:	bfac      	ite	ge
  401bcc:	185b      	addge	r3, r3, r1
  401bce:	181b      	addlt	r3, r3, r0
  401bd0:	9303      	str	r3, [sp, #12]
  401bd2:	bb72      	cbnz	r2, 401c32 <_vfiprintf_r+0x956>
  401bd4:	2300      	movs	r3, #0
  401bd6:	9310      	str	r3, [sp, #64]	; 0x40
  401bd8:	46ca      	mov	sl, r9
  401bda:	f7ff bbbc 	b.w	401356 <_vfiprintf_r+0x7a>
  401bde:	aa0f      	add	r2, sp, #60	; 0x3c
  401be0:	9904      	ldr	r1, [sp, #16]
  401be2:	4620      	mov	r0, r4
  401be4:	f7ff fb3a 	bl	40125c <__sprint_r.part.0>
  401be8:	bb50      	cbnz	r0, 401c40 <_vfiprintf_r+0x964>
  401bea:	9910      	ldr	r1, [sp, #64]	; 0x40
  401bec:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401bee:	f101 0e01 	add.w	lr, r1, #1
  401bf2:	46cc      	mov	ip, r9
  401bf4:	e548      	b.n	401688 <_vfiprintf_r+0x3ac>
  401bf6:	2a00      	cmp	r2, #0
  401bf8:	f040 8140 	bne.w	401e7c <_vfiprintf_r+0xba0>
  401bfc:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  401c00:	2900      	cmp	r1, #0
  401c02:	f000 811b 	beq.w	401e3c <_vfiprintf_r+0xb60>
  401c06:	2201      	movs	r2, #1
  401c08:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  401c0c:	4610      	mov	r0, r2
  401c0e:	921d      	str	r2, [sp, #116]	; 0x74
  401c10:	911c      	str	r1, [sp, #112]	; 0x70
  401c12:	46ca      	mov	sl, r9
  401c14:	4601      	mov	r1, r0
  401c16:	f10a 0a08 	add.w	sl, sl, #8
  401c1a:	3001      	adds	r0, #1
  401c1c:	e507      	b.n	40162e <_vfiprintf_r+0x352>
  401c1e:	9b02      	ldr	r3, [sp, #8]
  401c20:	2a01      	cmp	r2, #1
  401c22:	f000 8098 	beq.w	401d56 <_vfiprintf_r+0xa7a>
  401c26:	2a02      	cmp	r2, #2
  401c28:	d10d      	bne.n	401c46 <_vfiprintf_r+0x96a>
  401c2a:	9302      	str	r3, [sp, #8]
  401c2c:	2600      	movs	r6, #0
  401c2e:	2700      	movs	r7, #0
  401c30:	e5b0      	b.n	401794 <_vfiprintf_r+0x4b8>
  401c32:	aa0f      	add	r2, sp, #60	; 0x3c
  401c34:	9904      	ldr	r1, [sp, #16]
  401c36:	9806      	ldr	r0, [sp, #24]
  401c38:	f7ff fb10 	bl	40125c <__sprint_r.part.0>
  401c3c:	2800      	cmp	r0, #0
  401c3e:	d0c9      	beq.n	401bd4 <_vfiprintf_r+0x8f8>
  401c40:	f8dd b010 	ldr.w	fp, [sp, #16]
  401c44:	e797      	b.n	401b76 <_vfiprintf_r+0x89a>
  401c46:	9302      	str	r3, [sp, #8]
  401c48:	2600      	movs	r6, #0
  401c4a:	2700      	movs	r7, #0
  401c4c:	4649      	mov	r1, r9
  401c4e:	e000      	b.n	401c52 <_vfiprintf_r+0x976>
  401c50:	4659      	mov	r1, fp
  401c52:	08f2      	lsrs	r2, r6, #3
  401c54:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  401c58:	08f8      	lsrs	r0, r7, #3
  401c5a:	f006 0307 	and.w	r3, r6, #7
  401c5e:	4607      	mov	r7, r0
  401c60:	4616      	mov	r6, r2
  401c62:	3330      	adds	r3, #48	; 0x30
  401c64:	ea56 0207 	orrs.w	r2, r6, r7
  401c68:	f801 3c01 	strb.w	r3, [r1, #-1]
  401c6c:	f101 3bff 	add.w	fp, r1, #4294967295
  401c70:	d1ee      	bne.n	401c50 <_vfiprintf_r+0x974>
  401c72:	9a02      	ldr	r2, [sp, #8]
  401c74:	07d6      	lsls	r6, r2, #31
  401c76:	f57f ad9d 	bpl.w	4017b4 <_vfiprintf_r+0x4d8>
  401c7a:	2b30      	cmp	r3, #48	; 0x30
  401c7c:	f43f ad9a 	beq.w	4017b4 <_vfiprintf_r+0x4d8>
  401c80:	3902      	subs	r1, #2
  401c82:	2330      	movs	r3, #48	; 0x30
  401c84:	f80b 3c01 	strb.w	r3, [fp, #-1]
  401c88:	eba9 0301 	sub.w	r3, r9, r1
  401c8c:	9305      	str	r3, [sp, #20]
  401c8e:	468b      	mov	fp, r1
  401c90:	e476      	b.n	401580 <_vfiprintf_r+0x2a4>
  401c92:	9b03      	ldr	r3, [sp, #12]
  401c94:	9a08      	ldr	r2, [sp, #32]
  401c96:	428a      	cmp	r2, r1
  401c98:	bfac      	ite	ge
  401c9a:	189b      	addge	r3, r3, r2
  401c9c:	185b      	addlt	r3, r3, r1
  401c9e:	9303      	str	r3, [sp, #12]
  401ca0:	e798      	b.n	401bd4 <_vfiprintf_r+0x8f8>
  401ca2:	2202      	movs	r2, #2
  401ca4:	e44d      	b.n	401542 <_vfiprintf_r+0x266>
  401ca6:	2f00      	cmp	r7, #0
  401ca8:	bf08      	it	eq
  401caa:	2e0a      	cmpeq	r6, #10
  401cac:	d352      	bcc.n	401d54 <_vfiprintf_r+0xa78>
  401cae:	46cb      	mov	fp, r9
  401cb0:	4630      	mov	r0, r6
  401cb2:	4639      	mov	r1, r7
  401cb4:	220a      	movs	r2, #10
  401cb6:	2300      	movs	r3, #0
  401cb8:	f001 ff36 	bl	403b28 <__aeabi_uldivmod>
  401cbc:	3230      	adds	r2, #48	; 0x30
  401cbe:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  401cc2:	4630      	mov	r0, r6
  401cc4:	4639      	mov	r1, r7
  401cc6:	2300      	movs	r3, #0
  401cc8:	220a      	movs	r2, #10
  401cca:	f001 ff2d 	bl	403b28 <__aeabi_uldivmod>
  401cce:	4606      	mov	r6, r0
  401cd0:	460f      	mov	r7, r1
  401cd2:	ea56 0307 	orrs.w	r3, r6, r7
  401cd6:	d1eb      	bne.n	401cb0 <_vfiprintf_r+0x9d4>
  401cd8:	e56c      	b.n	4017b4 <_vfiprintf_r+0x4d8>
  401cda:	9405      	str	r4, [sp, #20]
  401cdc:	46cb      	mov	fp, r9
  401cde:	e44f      	b.n	401580 <_vfiprintf_r+0x2a4>
  401ce0:	aa0f      	add	r2, sp, #60	; 0x3c
  401ce2:	9904      	ldr	r1, [sp, #16]
  401ce4:	9806      	ldr	r0, [sp, #24]
  401ce6:	f7ff fab9 	bl	40125c <__sprint_r.part.0>
  401cea:	2800      	cmp	r0, #0
  401cec:	d1a8      	bne.n	401c40 <_vfiprintf_r+0x964>
  401cee:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401cf0:	46ca      	mov	sl, r9
  401cf2:	e75e      	b.n	401bb2 <_vfiprintf_r+0x8d6>
  401cf4:	aa0f      	add	r2, sp, #60	; 0x3c
  401cf6:	9904      	ldr	r1, [sp, #16]
  401cf8:	9806      	ldr	r0, [sp, #24]
  401cfa:	f7ff faaf 	bl	40125c <__sprint_r.part.0>
  401cfe:	2800      	cmp	r0, #0
  401d00:	d19e      	bne.n	401c40 <_vfiprintf_r+0x964>
  401d02:	46ca      	mov	sl, r9
  401d04:	f7ff bbc0 	b.w	401488 <_vfiprintf_r+0x1ac>
  401d08:	00403f2c 	.word	0x00403f2c
  401d0c:	00403f1c 	.word	0x00403f1c
  401d10:	3104      	adds	r1, #4
  401d12:	6816      	ldr	r6, [r2, #0]
  401d14:	9107      	str	r1, [sp, #28]
  401d16:	2201      	movs	r2, #1
  401d18:	2700      	movs	r7, #0
  401d1a:	e412      	b.n	401542 <_vfiprintf_r+0x266>
  401d1c:	9807      	ldr	r0, [sp, #28]
  401d1e:	4601      	mov	r1, r0
  401d20:	3104      	adds	r1, #4
  401d22:	6806      	ldr	r6, [r0, #0]
  401d24:	9107      	str	r1, [sp, #28]
  401d26:	2700      	movs	r7, #0
  401d28:	e40b      	b.n	401542 <_vfiprintf_r+0x266>
  401d2a:	680e      	ldr	r6, [r1, #0]
  401d2c:	3104      	adds	r1, #4
  401d2e:	9107      	str	r1, [sp, #28]
  401d30:	2700      	movs	r7, #0
  401d32:	e591      	b.n	401858 <_vfiprintf_r+0x57c>
  401d34:	9907      	ldr	r1, [sp, #28]
  401d36:	680e      	ldr	r6, [r1, #0]
  401d38:	460a      	mov	r2, r1
  401d3a:	17f7      	asrs	r7, r6, #31
  401d3c:	3204      	adds	r2, #4
  401d3e:	9207      	str	r2, [sp, #28]
  401d40:	4630      	mov	r0, r6
  401d42:	4639      	mov	r1, r7
  401d44:	e50f      	b.n	401766 <_vfiprintf_r+0x48a>
  401d46:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401d4a:	f000 fe7f 	bl	402a4c <__retarget_lock_release_recursive>
  401d4e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  401d52:	e71a      	b.n	401b8a <_vfiprintf_r+0x8ae>
  401d54:	9b02      	ldr	r3, [sp, #8]
  401d56:	9302      	str	r3, [sp, #8]
  401d58:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  401d5c:	3630      	adds	r6, #48	; 0x30
  401d5e:	2301      	movs	r3, #1
  401d60:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  401d64:	9305      	str	r3, [sp, #20]
  401d66:	e40b      	b.n	401580 <_vfiprintf_r+0x2a4>
  401d68:	aa0f      	add	r2, sp, #60	; 0x3c
  401d6a:	9904      	ldr	r1, [sp, #16]
  401d6c:	9806      	ldr	r0, [sp, #24]
  401d6e:	f7ff fa75 	bl	40125c <__sprint_r.part.0>
  401d72:	2800      	cmp	r0, #0
  401d74:	f47f af64 	bne.w	401c40 <_vfiprintf_r+0x964>
  401d78:	9910      	ldr	r1, [sp, #64]	; 0x40
  401d7a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401d7c:	1c48      	adds	r0, r1, #1
  401d7e:	46ca      	mov	sl, r9
  401d80:	e651      	b.n	401a26 <_vfiprintf_r+0x74a>
  401d82:	aa0f      	add	r2, sp, #60	; 0x3c
  401d84:	9904      	ldr	r1, [sp, #16]
  401d86:	9806      	ldr	r0, [sp, #24]
  401d88:	f7ff fa68 	bl	40125c <__sprint_r.part.0>
  401d8c:	2800      	cmp	r0, #0
  401d8e:	f47f af57 	bne.w	401c40 <_vfiprintf_r+0x964>
  401d92:	9910      	ldr	r1, [sp, #64]	; 0x40
  401d94:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401d96:	1c48      	adds	r0, r1, #1
  401d98:	46ca      	mov	sl, r9
  401d9a:	e448      	b.n	40162e <_vfiprintf_r+0x352>
  401d9c:	2a00      	cmp	r2, #0
  401d9e:	f040 8091 	bne.w	401ec4 <_vfiprintf_r+0xbe8>
  401da2:	2001      	movs	r0, #1
  401da4:	4611      	mov	r1, r2
  401da6:	46ca      	mov	sl, r9
  401da8:	e641      	b.n	401a2e <_vfiprintf_r+0x752>
  401daa:	aa0f      	add	r2, sp, #60	; 0x3c
  401dac:	9904      	ldr	r1, [sp, #16]
  401dae:	9806      	ldr	r0, [sp, #24]
  401db0:	f7ff fa54 	bl	40125c <__sprint_r.part.0>
  401db4:	2800      	cmp	r0, #0
  401db6:	f47f af43 	bne.w	401c40 <_vfiprintf_r+0x964>
  401dba:	9810      	ldr	r0, [sp, #64]	; 0x40
  401dbc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401dbe:	3001      	adds	r0, #1
  401dc0:	46ca      	mov	sl, r9
  401dc2:	e667      	b.n	401a94 <_vfiprintf_r+0x7b8>
  401dc4:	46d3      	mov	fp, sl
  401dc6:	e6d6      	b.n	401b76 <_vfiprintf_r+0x89a>
  401dc8:	9e07      	ldr	r6, [sp, #28]
  401dca:	3607      	adds	r6, #7
  401dcc:	f026 0207 	bic.w	r2, r6, #7
  401dd0:	f102 0108 	add.w	r1, r2, #8
  401dd4:	e9d2 6700 	ldrd	r6, r7, [r2]
  401dd8:	9107      	str	r1, [sp, #28]
  401dda:	2201      	movs	r2, #1
  401ddc:	f7ff bbb1 	b.w	401542 <_vfiprintf_r+0x266>
  401de0:	9e07      	ldr	r6, [sp, #28]
  401de2:	3607      	adds	r6, #7
  401de4:	f026 0607 	bic.w	r6, r6, #7
  401de8:	e9d6 0100 	ldrd	r0, r1, [r6]
  401dec:	f106 0208 	add.w	r2, r6, #8
  401df0:	9207      	str	r2, [sp, #28]
  401df2:	4606      	mov	r6, r0
  401df4:	460f      	mov	r7, r1
  401df6:	e4b6      	b.n	401766 <_vfiprintf_r+0x48a>
  401df8:	9e07      	ldr	r6, [sp, #28]
  401dfa:	3607      	adds	r6, #7
  401dfc:	f026 0207 	bic.w	r2, r6, #7
  401e00:	f102 0108 	add.w	r1, r2, #8
  401e04:	e9d2 6700 	ldrd	r6, r7, [r2]
  401e08:	9107      	str	r1, [sp, #28]
  401e0a:	2200      	movs	r2, #0
  401e0c:	f7ff bb99 	b.w	401542 <_vfiprintf_r+0x266>
  401e10:	9e07      	ldr	r6, [sp, #28]
  401e12:	3607      	adds	r6, #7
  401e14:	f026 0107 	bic.w	r1, r6, #7
  401e18:	f101 0008 	add.w	r0, r1, #8
  401e1c:	9007      	str	r0, [sp, #28]
  401e1e:	e9d1 6700 	ldrd	r6, r7, [r1]
  401e22:	e519      	b.n	401858 <_vfiprintf_r+0x57c>
  401e24:	46cb      	mov	fp, r9
  401e26:	f7ff bbab 	b.w	401580 <_vfiprintf_r+0x2a4>
  401e2a:	252d      	movs	r5, #45	; 0x2d
  401e2c:	4276      	negs	r6, r6
  401e2e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  401e32:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401e36:	2201      	movs	r2, #1
  401e38:	f7ff bb88 	b.w	40154c <_vfiprintf_r+0x270>
  401e3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401e3e:	b9b3      	cbnz	r3, 401e6e <_vfiprintf_r+0xb92>
  401e40:	4611      	mov	r1, r2
  401e42:	2001      	movs	r0, #1
  401e44:	46ca      	mov	sl, r9
  401e46:	e5f2      	b.n	401a2e <_vfiprintf_r+0x752>
  401e48:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401e4c:	f000 fdfe 	bl	402a4c <__retarget_lock_release_recursive>
  401e50:	f04f 33ff 	mov.w	r3, #4294967295
  401e54:	9303      	str	r3, [sp, #12]
  401e56:	f7ff bb50 	b.w	4014fa <_vfiprintf_r+0x21e>
  401e5a:	aa0f      	add	r2, sp, #60	; 0x3c
  401e5c:	9904      	ldr	r1, [sp, #16]
  401e5e:	9806      	ldr	r0, [sp, #24]
  401e60:	f7ff f9fc 	bl	40125c <__sprint_r.part.0>
  401e64:	2800      	cmp	r0, #0
  401e66:	f47f aeeb 	bne.w	401c40 <_vfiprintf_r+0x964>
  401e6a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401e6c:	e6a9      	b.n	401bc2 <_vfiprintf_r+0x8e6>
  401e6e:	ab0e      	add	r3, sp, #56	; 0x38
  401e70:	2202      	movs	r2, #2
  401e72:	931c      	str	r3, [sp, #112]	; 0x70
  401e74:	921d      	str	r2, [sp, #116]	; 0x74
  401e76:	2001      	movs	r0, #1
  401e78:	46ca      	mov	sl, r9
  401e7a:	e5d0      	b.n	401a1e <_vfiprintf_r+0x742>
  401e7c:	aa0f      	add	r2, sp, #60	; 0x3c
  401e7e:	9904      	ldr	r1, [sp, #16]
  401e80:	9806      	ldr	r0, [sp, #24]
  401e82:	f7ff f9eb 	bl	40125c <__sprint_r.part.0>
  401e86:	2800      	cmp	r0, #0
  401e88:	f47f aeda 	bne.w	401c40 <_vfiprintf_r+0x964>
  401e8c:	9910      	ldr	r1, [sp, #64]	; 0x40
  401e8e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401e90:	1c48      	adds	r0, r1, #1
  401e92:	46ca      	mov	sl, r9
  401e94:	e5a4      	b.n	4019e0 <_vfiprintf_r+0x704>
  401e96:	9a07      	ldr	r2, [sp, #28]
  401e98:	9903      	ldr	r1, [sp, #12]
  401e9a:	6813      	ldr	r3, [r2, #0]
  401e9c:	17cd      	asrs	r5, r1, #31
  401e9e:	4608      	mov	r0, r1
  401ea0:	3204      	adds	r2, #4
  401ea2:	4629      	mov	r1, r5
  401ea4:	9207      	str	r2, [sp, #28]
  401ea6:	e9c3 0100 	strd	r0, r1, [r3]
  401eaa:	f7ff ba54 	b.w	401356 <_vfiprintf_r+0x7a>
  401eae:	4658      	mov	r0, fp
  401eb0:	9607      	str	r6, [sp, #28]
  401eb2:	9302      	str	r3, [sp, #8]
  401eb4:	f7ff f964 	bl	401180 <strlen>
  401eb8:	2400      	movs	r4, #0
  401eba:	9005      	str	r0, [sp, #20]
  401ebc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401ec0:	f7ff bb5e 	b.w	401580 <_vfiprintf_r+0x2a4>
  401ec4:	aa0f      	add	r2, sp, #60	; 0x3c
  401ec6:	9904      	ldr	r1, [sp, #16]
  401ec8:	9806      	ldr	r0, [sp, #24]
  401eca:	f7ff f9c7 	bl	40125c <__sprint_r.part.0>
  401ece:	2800      	cmp	r0, #0
  401ed0:	f47f aeb6 	bne.w	401c40 <_vfiprintf_r+0x964>
  401ed4:	9910      	ldr	r1, [sp, #64]	; 0x40
  401ed6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401ed8:	1c48      	adds	r0, r1, #1
  401eda:	46ca      	mov	sl, r9
  401edc:	e5a7      	b.n	401a2e <_vfiprintf_r+0x752>
  401ede:	9910      	ldr	r1, [sp, #64]	; 0x40
  401ee0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401ee2:	4e20      	ldr	r6, [pc, #128]	; (401f64 <_vfiprintf_r+0xc88>)
  401ee4:	3101      	adds	r1, #1
  401ee6:	f7ff bb90 	b.w	40160a <_vfiprintf_r+0x32e>
  401eea:	2c06      	cmp	r4, #6
  401eec:	bf28      	it	cs
  401eee:	2406      	movcs	r4, #6
  401ef0:	9405      	str	r4, [sp, #20]
  401ef2:	9607      	str	r6, [sp, #28]
  401ef4:	9401      	str	r4, [sp, #4]
  401ef6:	f8df b070 	ldr.w	fp, [pc, #112]	; 401f68 <_vfiprintf_r+0xc8c>
  401efa:	e4d5      	b.n	4018a8 <_vfiprintf_r+0x5cc>
  401efc:	9810      	ldr	r0, [sp, #64]	; 0x40
  401efe:	4e19      	ldr	r6, [pc, #100]	; (401f64 <_vfiprintf_r+0xc88>)
  401f00:	3001      	adds	r0, #1
  401f02:	e603      	b.n	401b0c <_vfiprintf_r+0x830>
  401f04:	9405      	str	r4, [sp, #20]
  401f06:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401f0a:	9607      	str	r6, [sp, #28]
  401f0c:	9302      	str	r3, [sp, #8]
  401f0e:	4604      	mov	r4, r0
  401f10:	f7ff bb36 	b.w	401580 <_vfiprintf_r+0x2a4>
  401f14:	4686      	mov	lr, r0
  401f16:	f7ff bbce 	b.w	4016b6 <_vfiprintf_r+0x3da>
  401f1a:	9806      	ldr	r0, [sp, #24]
  401f1c:	aa0f      	add	r2, sp, #60	; 0x3c
  401f1e:	4659      	mov	r1, fp
  401f20:	f7ff f99c 	bl	40125c <__sprint_r.part.0>
  401f24:	2800      	cmp	r0, #0
  401f26:	f43f ae24 	beq.w	401b72 <_vfiprintf_r+0x896>
  401f2a:	e624      	b.n	401b76 <_vfiprintf_r+0x89a>
  401f2c:	9907      	ldr	r1, [sp, #28]
  401f2e:	f898 2001 	ldrb.w	r2, [r8, #1]
  401f32:	680c      	ldr	r4, [r1, #0]
  401f34:	3104      	adds	r1, #4
  401f36:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  401f3a:	46b8      	mov	r8, r7
  401f3c:	9107      	str	r1, [sp, #28]
  401f3e:	f7ff ba3f 	b.w	4013c0 <_vfiprintf_r+0xe4>
  401f42:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401f46:	e43c      	b.n	4017c2 <_vfiprintf_r+0x4e6>
  401f48:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401f4c:	e521      	b.n	401992 <_vfiprintf_r+0x6b6>
  401f4e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401f52:	f7ff bbf4 	b.w	40173e <_vfiprintf_r+0x462>
  401f56:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401f5a:	e491      	b.n	401880 <_vfiprintf_r+0x5a4>
  401f5c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401f60:	e469      	b.n	401836 <_vfiprintf_r+0x55a>
  401f62:	bf00      	nop
  401f64:	00403f1c 	.word	0x00403f1c
  401f68:	00403f14 	.word	0x00403f14

00401f6c <__sbprintf>:
  401f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401f70:	460c      	mov	r4, r1
  401f72:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  401f76:	8989      	ldrh	r1, [r1, #12]
  401f78:	6e66      	ldr	r6, [r4, #100]	; 0x64
  401f7a:	89e5      	ldrh	r5, [r4, #14]
  401f7c:	9619      	str	r6, [sp, #100]	; 0x64
  401f7e:	f021 0102 	bic.w	r1, r1, #2
  401f82:	4606      	mov	r6, r0
  401f84:	69e0      	ldr	r0, [r4, #28]
  401f86:	f8ad 100c 	strh.w	r1, [sp, #12]
  401f8a:	4617      	mov	r7, r2
  401f8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  401f90:	6a62      	ldr	r2, [r4, #36]	; 0x24
  401f92:	f8ad 500e 	strh.w	r5, [sp, #14]
  401f96:	4698      	mov	r8, r3
  401f98:	ad1a      	add	r5, sp, #104	; 0x68
  401f9a:	2300      	movs	r3, #0
  401f9c:	9007      	str	r0, [sp, #28]
  401f9e:	a816      	add	r0, sp, #88	; 0x58
  401fa0:	9209      	str	r2, [sp, #36]	; 0x24
  401fa2:	9306      	str	r3, [sp, #24]
  401fa4:	9500      	str	r5, [sp, #0]
  401fa6:	9504      	str	r5, [sp, #16]
  401fa8:	9102      	str	r1, [sp, #8]
  401faa:	9105      	str	r1, [sp, #20]
  401fac:	f000 fd48 	bl	402a40 <__retarget_lock_init_recursive>
  401fb0:	4643      	mov	r3, r8
  401fb2:	463a      	mov	r2, r7
  401fb4:	4669      	mov	r1, sp
  401fb6:	4630      	mov	r0, r6
  401fb8:	f7ff f990 	bl	4012dc <_vfiprintf_r>
  401fbc:	1e05      	subs	r5, r0, #0
  401fbe:	db07      	blt.n	401fd0 <__sbprintf+0x64>
  401fc0:	4630      	mov	r0, r6
  401fc2:	4669      	mov	r1, sp
  401fc4:	f000 f928 	bl	402218 <_fflush_r>
  401fc8:	2800      	cmp	r0, #0
  401fca:	bf18      	it	ne
  401fcc:	f04f 35ff 	movne.w	r5, #4294967295
  401fd0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  401fd4:	065b      	lsls	r3, r3, #25
  401fd6:	d503      	bpl.n	401fe0 <__sbprintf+0x74>
  401fd8:	89a3      	ldrh	r3, [r4, #12]
  401fda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401fde:	81a3      	strh	r3, [r4, #12]
  401fe0:	9816      	ldr	r0, [sp, #88]	; 0x58
  401fe2:	f000 fd2f 	bl	402a44 <__retarget_lock_close_recursive>
  401fe6:	4628      	mov	r0, r5
  401fe8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  401fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00401ff0 <__swsetup_r>:
  401ff0:	b538      	push	{r3, r4, r5, lr}
  401ff2:	4b30      	ldr	r3, [pc, #192]	; (4020b4 <__swsetup_r+0xc4>)
  401ff4:	681b      	ldr	r3, [r3, #0]
  401ff6:	4605      	mov	r5, r0
  401ff8:	460c      	mov	r4, r1
  401ffa:	b113      	cbz	r3, 402002 <__swsetup_r+0x12>
  401ffc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  401ffe:	2a00      	cmp	r2, #0
  402000:	d038      	beq.n	402074 <__swsetup_r+0x84>
  402002:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402006:	b293      	uxth	r3, r2
  402008:	0718      	lsls	r0, r3, #28
  40200a:	d50c      	bpl.n	402026 <__swsetup_r+0x36>
  40200c:	6920      	ldr	r0, [r4, #16]
  40200e:	b1a8      	cbz	r0, 40203c <__swsetup_r+0x4c>
  402010:	f013 0201 	ands.w	r2, r3, #1
  402014:	d01e      	beq.n	402054 <__swsetup_r+0x64>
  402016:	6963      	ldr	r3, [r4, #20]
  402018:	2200      	movs	r2, #0
  40201a:	425b      	negs	r3, r3
  40201c:	61a3      	str	r3, [r4, #24]
  40201e:	60a2      	str	r2, [r4, #8]
  402020:	b1f0      	cbz	r0, 402060 <__swsetup_r+0x70>
  402022:	2000      	movs	r0, #0
  402024:	bd38      	pop	{r3, r4, r5, pc}
  402026:	06d9      	lsls	r1, r3, #27
  402028:	d53c      	bpl.n	4020a4 <__swsetup_r+0xb4>
  40202a:	0758      	lsls	r0, r3, #29
  40202c:	d426      	bmi.n	40207c <__swsetup_r+0x8c>
  40202e:	6920      	ldr	r0, [r4, #16]
  402030:	f042 0308 	orr.w	r3, r2, #8
  402034:	81a3      	strh	r3, [r4, #12]
  402036:	b29b      	uxth	r3, r3
  402038:	2800      	cmp	r0, #0
  40203a:	d1e9      	bne.n	402010 <__swsetup_r+0x20>
  40203c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  402040:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  402044:	d0e4      	beq.n	402010 <__swsetup_r+0x20>
  402046:	4628      	mov	r0, r5
  402048:	4621      	mov	r1, r4
  40204a:	f000 fd2f 	bl	402aac <__smakebuf_r>
  40204e:	89a3      	ldrh	r3, [r4, #12]
  402050:	6920      	ldr	r0, [r4, #16]
  402052:	e7dd      	b.n	402010 <__swsetup_r+0x20>
  402054:	0799      	lsls	r1, r3, #30
  402056:	bf58      	it	pl
  402058:	6962      	ldrpl	r2, [r4, #20]
  40205a:	60a2      	str	r2, [r4, #8]
  40205c:	2800      	cmp	r0, #0
  40205e:	d1e0      	bne.n	402022 <__swsetup_r+0x32>
  402060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402064:	061a      	lsls	r2, r3, #24
  402066:	d5dd      	bpl.n	402024 <__swsetup_r+0x34>
  402068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40206c:	81a3      	strh	r3, [r4, #12]
  40206e:	f04f 30ff 	mov.w	r0, #4294967295
  402072:	bd38      	pop	{r3, r4, r5, pc}
  402074:	4618      	mov	r0, r3
  402076:	f000 f927 	bl	4022c8 <__sinit>
  40207a:	e7c2      	b.n	402002 <__swsetup_r+0x12>
  40207c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40207e:	b151      	cbz	r1, 402096 <__swsetup_r+0xa6>
  402080:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402084:	4299      	cmp	r1, r3
  402086:	d004      	beq.n	402092 <__swsetup_r+0xa2>
  402088:	4628      	mov	r0, r5
  40208a:	f000 fa43 	bl	402514 <_free_r>
  40208e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402092:	2300      	movs	r3, #0
  402094:	6323      	str	r3, [r4, #48]	; 0x30
  402096:	2300      	movs	r3, #0
  402098:	6920      	ldr	r0, [r4, #16]
  40209a:	6063      	str	r3, [r4, #4]
  40209c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4020a0:	6020      	str	r0, [r4, #0]
  4020a2:	e7c5      	b.n	402030 <__swsetup_r+0x40>
  4020a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4020a8:	2309      	movs	r3, #9
  4020aa:	602b      	str	r3, [r5, #0]
  4020ac:	f04f 30ff 	mov.w	r0, #4294967295
  4020b0:	81a2      	strh	r2, [r4, #12]
  4020b2:	bd38      	pop	{r3, r4, r5, pc}
  4020b4:	20000010 	.word	0x20000010

004020b8 <register_fini>:
  4020b8:	4b02      	ldr	r3, [pc, #8]	; (4020c4 <register_fini+0xc>)
  4020ba:	b113      	cbz	r3, 4020c2 <register_fini+0xa>
  4020bc:	4802      	ldr	r0, [pc, #8]	; (4020c8 <register_fini+0x10>)
  4020be:	f000 b805 	b.w	4020cc <atexit>
  4020c2:	4770      	bx	lr
  4020c4:	00000000 	.word	0x00000000
  4020c8:	00402339 	.word	0x00402339

004020cc <atexit>:
  4020cc:	2300      	movs	r3, #0
  4020ce:	4601      	mov	r1, r0
  4020d0:	461a      	mov	r2, r3
  4020d2:	4618      	mov	r0, r3
  4020d4:	f001 bc00 	b.w	4038d8 <__register_exitproc>

004020d8 <__sflush_r>:
  4020d8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4020dc:	b29a      	uxth	r2, r3
  4020de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4020e2:	460d      	mov	r5, r1
  4020e4:	0711      	lsls	r1, r2, #28
  4020e6:	4680      	mov	r8, r0
  4020e8:	d43a      	bmi.n	402160 <__sflush_r+0x88>
  4020ea:	686a      	ldr	r2, [r5, #4]
  4020ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4020f0:	2a00      	cmp	r2, #0
  4020f2:	81ab      	strh	r3, [r5, #12]
  4020f4:	dd6f      	ble.n	4021d6 <__sflush_r+0xfe>
  4020f6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4020f8:	2c00      	cmp	r4, #0
  4020fa:	d049      	beq.n	402190 <__sflush_r+0xb8>
  4020fc:	2200      	movs	r2, #0
  4020fe:	b29b      	uxth	r3, r3
  402100:	f8d8 6000 	ldr.w	r6, [r8]
  402104:	f8c8 2000 	str.w	r2, [r8]
  402108:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40210c:	d067      	beq.n	4021de <__sflush_r+0x106>
  40210e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  402110:	075f      	lsls	r7, r3, #29
  402112:	d505      	bpl.n	402120 <__sflush_r+0x48>
  402114:	6869      	ldr	r1, [r5, #4]
  402116:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402118:	1a52      	subs	r2, r2, r1
  40211a:	b10b      	cbz	r3, 402120 <__sflush_r+0x48>
  40211c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40211e:	1ad2      	subs	r2, r2, r3
  402120:	2300      	movs	r3, #0
  402122:	69e9      	ldr	r1, [r5, #28]
  402124:	4640      	mov	r0, r8
  402126:	47a0      	blx	r4
  402128:	1c44      	adds	r4, r0, #1
  40212a:	d03c      	beq.n	4021a6 <__sflush_r+0xce>
  40212c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  402130:	692a      	ldr	r2, [r5, #16]
  402132:	602a      	str	r2, [r5, #0]
  402134:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402138:	2200      	movs	r2, #0
  40213a:	81ab      	strh	r3, [r5, #12]
  40213c:	04db      	lsls	r3, r3, #19
  40213e:	606a      	str	r2, [r5, #4]
  402140:	d447      	bmi.n	4021d2 <__sflush_r+0xfa>
  402142:	6b29      	ldr	r1, [r5, #48]	; 0x30
  402144:	f8c8 6000 	str.w	r6, [r8]
  402148:	b311      	cbz	r1, 402190 <__sflush_r+0xb8>
  40214a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40214e:	4299      	cmp	r1, r3
  402150:	d002      	beq.n	402158 <__sflush_r+0x80>
  402152:	4640      	mov	r0, r8
  402154:	f000 f9de 	bl	402514 <_free_r>
  402158:	2000      	movs	r0, #0
  40215a:	6328      	str	r0, [r5, #48]	; 0x30
  40215c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402160:	692e      	ldr	r6, [r5, #16]
  402162:	b1ae      	cbz	r6, 402190 <__sflush_r+0xb8>
  402164:	682c      	ldr	r4, [r5, #0]
  402166:	602e      	str	r6, [r5, #0]
  402168:	0791      	lsls	r1, r2, #30
  40216a:	bf0c      	ite	eq
  40216c:	696b      	ldreq	r3, [r5, #20]
  40216e:	2300      	movne	r3, #0
  402170:	1ba4      	subs	r4, r4, r6
  402172:	60ab      	str	r3, [r5, #8]
  402174:	e00a      	b.n	40218c <__sflush_r+0xb4>
  402176:	4623      	mov	r3, r4
  402178:	4632      	mov	r2, r6
  40217a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40217c:	69e9      	ldr	r1, [r5, #28]
  40217e:	4640      	mov	r0, r8
  402180:	47b8      	blx	r7
  402182:	2800      	cmp	r0, #0
  402184:	eba4 0400 	sub.w	r4, r4, r0
  402188:	4406      	add	r6, r0
  40218a:	dd04      	ble.n	402196 <__sflush_r+0xbe>
  40218c:	2c00      	cmp	r4, #0
  40218e:	dcf2      	bgt.n	402176 <__sflush_r+0x9e>
  402190:	2000      	movs	r0, #0
  402192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402196:	89ab      	ldrh	r3, [r5, #12]
  402198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40219c:	81ab      	strh	r3, [r5, #12]
  40219e:	f04f 30ff 	mov.w	r0, #4294967295
  4021a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4021a6:	f8d8 4000 	ldr.w	r4, [r8]
  4021aa:	2c1d      	cmp	r4, #29
  4021ac:	d8f3      	bhi.n	402196 <__sflush_r+0xbe>
  4021ae:	4b19      	ldr	r3, [pc, #100]	; (402214 <__sflush_r+0x13c>)
  4021b0:	40e3      	lsrs	r3, r4
  4021b2:	43db      	mvns	r3, r3
  4021b4:	f013 0301 	ands.w	r3, r3, #1
  4021b8:	d1ed      	bne.n	402196 <__sflush_r+0xbe>
  4021ba:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4021be:	606b      	str	r3, [r5, #4]
  4021c0:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  4021c4:	6929      	ldr	r1, [r5, #16]
  4021c6:	81ab      	strh	r3, [r5, #12]
  4021c8:	04da      	lsls	r2, r3, #19
  4021ca:	6029      	str	r1, [r5, #0]
  4021cc:	d5b9      	bpl.n	402142 <__sflush_r+0x6a>
  4021ce:	2c00      	cmp	r4, #0
  4021d0:	d1b7      	bne.n	402142 <__sflush_r+0x6a>
  4021d2:	6528      	str	r0, [r5, #80]	; 0x50
  4021d4:	e7b5      	b.n	402142 <__sflush_r+0x6a>
  4021d6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4021d8:	2a00      	cmp	r2, #0
  4021da:	dc8c      	bgt.n	4020f6 <__sflush_r+0x1e>
  4021dc:	e7d8      	b.n	402190 <__sflush_r+0xb8>
  4021de:	2301      	movs	r3, #1
  4021e0:	69e9      	ldr	r1, [r5, #28]
  4021e2:	4640      	mov	r0, r8
  4021e4:	47a0      	blx	r4
  4021e6:	1c43      	adds	r3, r0, #1
  4021e8:	4602      	mov	r2, r0
  4021ea:	d002      	beq.n	4021f2 <__sflush_r+0x11a>
  4021ec:	89ab      	ldrh	r3, [r5, #12]
  4021ee:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4021f0:	e78e      	b.n	402110 <__sflush_r+0x38>
  4021f2:	f8d8 3000 	ldr.w	r3, [r8]
  4021f6:	2b00      	cmp	r3, #0
  4021f8:	d0f8      	beq.n	4021ec <__sflush_r+0x114>
  4021fa:	2b1d      	cmp	r3, #29
  4021fc:	d001      	beq.n	402202 <__sflush_r+0x12a>
  4021fe:	2b16      	cmp	r3, #22
  402200:	d102      	bne.n	402208 <__sflush_r+0x130>
  402202:	f8c8 6000 	str.w	r6, [r8]
  402206:	e7c3      	b.n	402190 <__sflush_r+0xb8>
  402208:	89ab      	ldrh	r3, [r5, #12]
  40220a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40220e:	81ab      	strh	r3, [r5, #12]
  402210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402214:	20400001 	.word	0x20400001

00402218 <_fflush_r>:
  402218:	b538      	push	{r3, r4, r5, lr}
  40221a:	460d      	mov	r5, r1
  40221c:	4604      	mov	r4, r0
  40221e:	b108      	cbz	r0, 402224 <_fflush_r+0xc>
  402220:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402222:	b1bb      	cbz	r3, 402254 <_fflush_r+0x3c>
  402224:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  402228:	b188      	cbz	r0, 40224e <_fflush_r+0x36>
  40222a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40222c:	07db      	lsls	r3, r3, #31
  40222e:	d401      	bmi.n	402234 <_fflush_r+0x1c>
  402230:	0581      	lsls	r1, r0, #22
  402232:	d517      	bpl.n	402264 <_fflush_r+0x4c>
  402234:	4620      	mov	r0, r4
  402236:	4629      	mov	r1, r5
  402238:	f7ff ff4e 	bl	4020d8 <__sflush_r>
  40223c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40223e:	07da      	lsls	r2, r3, #31
  402240:	4604      	mov	r4, r0
  402242:	d402      	bmi.n	40224a <_fflush_r+0x32>
  402244:	89ab      	ldrh	r3, [r5, #12]
  402246:	059b      	lsls	r3, r3, #22
  402248:	d507      	bpl.n	40225a <_fflush_r+0x42>
  40224a:	4620      	mov	r0, r4
  40224c:	bd38      	pop	{r3, r4, r5, pc}
  40224e:	4604      	mov	r4, r0
  402250:	4620      	mov	r0, r4
  402252:	bd38      	pop	{r3, r4, r5, pc}
  402254:	f000 f838 	bl	4022c8 <__sinit>
  402258:	e7e4      	b.n	402224 <_fflush_r+0xc>
  40225a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40225c:	f000 fbf6 	bl	402a4c <__retarget_lock_release_recursive>
  402260:	4620      	mov	r0, r4
  402262:	bd38      	pop	{r3, r4, r5, pc}
  402264:	6da8      	ldr	r0, [r5, #88]	; 0x58
  402266:	f000 fbef 	bl	402a48 <__retarget_lock_acquire_recursive>
  40226a:	e7e3      	b.n	402234 <_fflush_r+0x1c>

0040226c <_cleanup_r>:
  40226c:	4901      	ldr	r1, [pc, #4]	; (402274 <_cleanup_r+0x8>)
  40226e:	f000 bbaf 	b.w	4029d0 <_fwalk_reent>
  402272:	bf00      	nop
  402274:	004039c1 	.word	0x004039c1

00402278 <std.isra.0>:
  402278:	b510      	push	{r4, lr}
  40227a:	2300      	movs	r3, #0
  40227c:	4604      	mov	r4, r0
  40227e:	8181      	strh	r1, [r0, #12]
  402280:	81c2      	strh	r2, [r0, #14]
  402282:	6003      	str	r3, [r0, #0]
  402284:	6043      	str	r3, [r0, #4]
  402286:	6083      	str	r3, [r0, #8]
  402288:	6643      	str	r3, [r0, #100]	; 0x64
  40228a:	6103      	str	r3, [r0, #16]
  40228c:	6143      	str	r3, [r0, #20]
  40228e:	6183      	str	r3, [r0, #24]
  402290:	4619      	mov	r1, r3
  402292:	2208      	movs	r2, #8
  402294:	305c      	adds	r0, #92	; 0x5c
  402296:	f7fe fdfb 	bl	400e90 <memset>
  40229a:	4807      	ldr	r0, [pc, #28]	; (4022b8 <std.isra.0+0x40>)
  40229c:	4907      	ldr	r1, [pc, #28]	; (4022bc <std.isra.0+0x44>)
  40229e:	4a08      	ldr	r2, [pc, #32]	; (4022c0 <std.isra.0+0x48>)
  4022a0:	4b08      	ldr	r3, [pc, #32]	; (4022c4 <std.isra.0+0x4c>)
  4022a2:	6220      	str	r0, [r4, #32]
  4022a4:	61e4      	str	r4, [r4, #28]
  4022a6:	6261      	str	r1, [r4, #36]	; 0x24
  4022a8:	62a2      	str	r2, [r4, #40]	; 0x28
  4022aa:	62e3      	str	r3, [r4, #44]	; 0x2c
  4022ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4022b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4022b4:	f000 bbc4 	b.w	402a40 <__retarget_lock_init_recursive>
  4022b8:	00403705 	.word	0x00403705
  4022bc:	00403729 	.word	0x00403729
  4022c0:	00403765 	.word	0x00403765
  4022c4:	00403785 	.word	0x00403785

004022c8 <__sinit>:
  4022c8:	b510      	push	{r4, lr}
  4022ca:	4604      	mov	r4, r0
  4022cc:	4812      	ldr	r0, [pc, #72]	; (402318 <__sinit+0x50>)
  4022ce:	f000 fbbb 	bl	402a48 <__retarget_lock_acquire_recursive>
  4022d2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4022d4:	b9d2      	cbnz	r2, 40230c <__sinit+0x44>
  4022d6:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  4022da:	4810      	ldr	r0, [pc, #64]	; (40231c <__sinit+0x54>)
  4022dc:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4022e0:	2103      	movs	r1, #3
  4022e2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4022e6:	63e0      	str	r0, [r4, #60]	; 0x3c
  4022e8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4022ec:	6860      	ldr	r0, [r4, #4]
  4022ee:	2104      	movs	r1, #4
  4022f0:	f7ff ffc2 	bl	402278 <std.isra.0>
  4022f4:	2201      	movs	r2, #1
  4022f6:	2109      	movs	r1, #9
  4022f8:	68a0      	ldr	r0, [r4, #8]
  4022fa:	f7ff ffbd 	bl	402278 <std.isra.0>
  4022fe:	2202      	movs	r2, #2
  402300:	2112      	movs	r1, #18
  402302:	68e0      	ldr	r0, [r4, #12]
  402304:	f7ff ffb8 	bl	402278 <std.isra.0>
  402308:	2301      	movs	r3, #1
  40230a:	63a3      	str	r3, [r4, #56]	; 0x38
  40230c:	4802      	ldr	r0, [pc, #8]	; (402318 <__sinit+0x50>)
  40230e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402312:	f000 bb9b 	b.w	402a4c <__retarget_lock_release_recursive>
  402316:	bf00      	nop
  402318:	20000af0 	.word	0x20000af0
  40231c:	0040226d 	.word	0x0040226d

00402320 <__sfp_lock_acquire>:
  402320:	4801      	ldr	r0, [pc, #4]	; (402328 <__sfp_lock_acquire+0x8>)
  402322:	f000 bb91 	b.w	402a48 <__retarget_lock_acquire_recursive>
  402326:	bf00      	nop
  402328:	20000b04 	.word	0x20000b04

0040232c <__sfp_lock_release>:
  40232c:	4801      	ldr	r0, [pc, #4]	; (402334 <__sfp_lock_release+0x8>)
  40232e:	f000 bb8d 	b.w	402a4c <__retarget_lock_release_recursive>
  402332:	bf00      	nop
  402334:	20000b04 	.word	0x20000b04

00402338 <__libc_fini_array>:
  402338:	b538      	push	{r3, r4, r5, lr}
  40233a:	4c0a      	ldr	r4, [pc, #40]	; (402364 <__libc_fini_array+0x2c>)
  40233c:	4d0a      	ldr	r5, [pc, #40]	; (402368 <__libc_fini_array+0x30>)
  40233e:	1b64      	subs	r4, r4, r5
  402340:	10a4      	asrs	r4, r4, #2
  402342:	d00a      	beq.n	40235a <__libc_fini_array+0x22>
  402344:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402348:	3b01      	subs	r3, #1
  40234a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40234e:	3c01      	subs	r4, #1
  402350:	f855 3904 	ldr.w	r3, [r5], #-4
  402354:	4798      	blx	r3
  402356:	2c00      	cmp	r4, #0
  402358:	d1f9      	bne.n	40234e <__libc_fini_array+0x16>
  40235a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40235e:	f001 be81 	b.w	404064 <_fini>
  402362:	bf00      	nop
  402364:	00404074 	.word	0x00404074
  402368:	00404070 	.word	0x00404070

0040236c <__fputwc>:
  40236c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402370:	b082      	sub	sp, #8
  402372:	4680      	mov	r8, r0
  402374:	4689      	mov	r9, r1
  402376:	4614      	mov	r4, r2
  402378:	f000 fb54 	bl	402a24 <__locale_mb_cur_max>
  40237c:	2801      	cmp	r0, #1
  40237e:	d036      	beq.n	4023ee <__fputwc+0x82>
  402380:	464a      	mov	r2, r9
  402382:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  402386:	a901      	add	r1, sp, #4
  402388:	4640      	mov	r0, r8
  40238a:	f001 fa57 	bl	40383c <_wcrtomb_r>
  40238e:	1c42      	adds	r2, r0, #1
  402390:	4606      	mov	r6, r0
  402392:	d025      	beq.n	4023e0 <__fputwc+0x74>
  402394:	b3a8      	cbz	r0, 402402 <__fputwc+0x96>
  402396:	f89d e004 	ldrb.w	lr, [sp, #4]
  40239a:	2500      	movs	r5, #0
  40239c:	f10d 0a04 	add.w	sl, sp, #4
  4023a0:	e009      	b.n	4023b6 <__fputwc+0x4a>
  4023a2:	6823      	ldr	r3, [r4, #0]
  4023a4:	1c5a      	adds	r2, r3, #1
  4023a6:	6022      	str	r2, [r4, #0]
  4023a8:	f883 e000 	strb.w	lr, [r3]
  4023ac:	3501      	adds	r5, #1
  4023ae:	42b5      	cmp	r5, r6
  4023b0:	d227      	bcs.n	402402 <__fputwc+0x96>
  4023b2:	f815 e00a 	ldrb.w	lr, [r5, sl]
  4023b6:	68a3      	ldr	r3, [r4, #8]
  4023b8:	3b01      	subs	r3, #1
  4023ba:	2b00      	cmp	r3, #0
  4023bc:	60a3      	str	r3, [r4, #8]
  4023be:	daf0      	bge.n	4023a2 <__fputwc+0x36>
  4023c0:	69a7      	ldr	r7, [r4, #24]
  4023c2:	42bb      	cmp	r3, r7
  4023c4:	4671      	mov	r1, lr
  4023c6:	4622      	mov	r2, r4
  4023c8:	4640      	mov	r0, r8
  4023ca:	db02      	blt.n	4023d2 <__fputwc+0x66>
  4023cc:	f1be 0f0a 	cmp.w	lr, #10
  4023d0:	d1e7      	bne.n	4023a2 <__fputwc+0x36>
  4023d2:	f001 f9db 	bl	40378c <__swbuf_r>
  4023d6:	1c43      	adds	r3, r0, #1
  4023d8:	d1e8      	bne.n	4023ac <__fputwc+0x40>
  4023da:	b002      	add	sp, #8
  4023dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4023e0:	89a3      	ldrh	r3, [r4, #12]
  4023e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4023e6:	81a3      	strh	r3, [r4, #12]
  4023e8:	b002      	add	sp, #8
  4023ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4023ee:	f109 33ff 	add.w	r3, r9, #4294967295
  4023f2:	2bfe      	cmp	r3, #254	; 0xfe
  4023f4:	d8c4      	bhi.n	402380 <__fputwc+0x14>
  4023f6:	fa5f fe89 	uxtb.w	lr, r9
  4023fa:	4606      	mov	r6, r0
  4023fc:	f88d e004 	strb.w	lr, [sp, #4]
  402400:	e7cb      	b.n	40239a <__fputwc+0x2e>
  402402:	4648      	mov	r0, r9
  402404:	b002      	add	sp, #8
  402406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40240a:	bf00      	nop

0040240c <_fputwc_r>:
  40240c:	b530      	push	{r4, r5, lr}
  40240e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  402410:	f013 0f01 	tst.w	r3, #1
  402414:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  402418:	4614      	mov	r4, r2
  40241a:	b083      	sub	sp, #12
  40241c:	4605      	mov	r5, r0
  40241e:	b29a      	uxth	r2, r3
  402420:	d101      	bne.n	402426 <_fputwc_r+0x1a>
  402422:	0590      	lsls	r0, r2, #22
  402424:	d51c      	bpl.n	402460 <_fputwc_r+0x54>
  402426:	0490      	lsls	r0, r2, #18
  402428:	d406      	bmi.n	402438 <_fputwc_r+0x2c>
  40242a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40242c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  402430:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  402434:	81a3      	strh	r3, [r4, #12]
  402436:	6662      	str	r2, [r4, #100]	; 0x64
  402438:	4628      	mov	r0, r5
  40243a:	4622      	mov	r2, r4
  40243c:	f7ff ff96 	bl	40236c <__fputwc>
  402440:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402442:	07da      	lsls	r2, r3, #31
  402444:	4605      	mov	r5, r0
  402446:	d402      	bmi.n	40244e <_fputwc_r+0x42>
  402448:	89a3      	ldrh	r3, [r4, #12]
  40244a:	059b      	lsls	r3, r3, #22
  40244c:	d502      	bpl.n	402454 <_fputwc_r+0x48>
  40244e:	4628      	mov	r0, r5
  402450:	b003      	add	sp, #12
  402452:	bd30      	pop	{r4, r5, pc}
  402454:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402456:	f000 faf9 	bl	402a4c <__retarget_lock_release_recursive>
  40245a:	4628      	mov	r0, r5
  40245c:	b003      	add	sp, #12
  40245e:	bd30      	pop	{r4, r5, pc}
  402460:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402462:	9101      	str	r1, [sp, #4]
  402464:	f000 faf0 	bl	402a48 <__retarget_lock_acquire_recursive>
  402468:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40246c:	9901      	ldr	r1, [sp, #4]
  40246e:	b29a      	uxth	r2, r3
  402470:	e7d9      	b.n	402426 <_fputwc_r+0x1a>
  402472:	bf00      	nop

00402474 <_malloc_trim_r>:
  402474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402476:	4f24      	ldr	r7, [pc, #144]	; (402508 <_malloc_trim_r+0x94>)
  402478:	460c      	mov	r4, r1
  40247a:	4606      	mov	r6, r0
  40247c:	f000 ff7e 	bl	40337c <__malloc_lock>
  402480:	68bb      	ldr	r3, [r7, #8]
  402482:	685d      	ldr	r5, [r3, #4]
  402484:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  402488:	310f      	adds	r1, #15
  40248a:	f025 0503 	bic.w	r5, r5, #3
  40248e:	4429      	add	r1, r5
  402490:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  402494:	f021 010f 	bic.w	r1, r1, #15
  402498:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40249c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4024a0:	db07      	blt.n	4024b2 <_malloc_trim_r+0x3e>
  4024a2:	2100      	movs	r1, #0
  4024a4:	4630      	mov	r0, r6
  4024a6:	f001 f91b 	bl	4036e0 <_sbrk_r>
  4024aa:	68bb      	ldr	r3, [r7, #8]
  4024ac:	442b      	add	r3, r5
  4024ae:	4298      	cmp	r0, r3
  4024b0:	d004      	beq.n	4024bc <_malloc_trim_r+0x48>
  4024b2:	4630      	mov	r0, r6
  4024b4:	f000 ff68 	bl	403388 <__malloc_unlock>
  4024b8:	2000      	movs	r0, #0
  4024ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4024bc:	4261      	negs	r1, r4
  4024be:	4630      	mov	r0, r6
  4024c0:	f001 f90e 	bl	4036e0 <_sbrk_r>
  4024c4:	3001      	adds	r0, #1
  4024c6:	d00d      	beq.n	4024e4 <_malloc_trim_r+0x70>
  4024c8:	4b10      	ldr	r3, [pc, #64]	; (40250c <_malloc_trim_r+0x98>)
  4024ca:	68ba      	ldr	r2, [r7, #8]
  4024cc:	6819      	ldr	r1, [r3, #0]
  4024ce:	1b2d      	subs	r5, r5, r4
  4024d0:	f045 0501 	orr.w	r5, r5, #1
  4024d4:	4630      	mov	r0, r6
  4024d6:	1b09      	subs	r1, r1, r4
  4024d8:	6055      	str	r5, [r2, #4]
  4024da:	6019      	str	r1, [r3, #0]
  4024dc:	f000 ff54 	bl	403388 <__malloc_unlock>
  4024e0:	2001      	movs	r0, #1
  4024e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4024e4:	2100      	movs	r1, #0
  4024e6:	4630      	mov	r0, r6
  4024e8:	f001 f8fa 	bl	4036e0 <_sbrk_r>
  4024ec:	68ba      	ldr	r2, [r7, #8]
  4024ee:	1a83      	subs	r3, r0, r2
  4024f0:	2b0f      	cmp	r3, #15
  4024f2:	ddde      	ble.n	4024b2 <_malloc_trim_r+0x3e>
  4024f4:	4c06      	ldr	r4, [pc, #24]	; (402510 <_malloc_trim_r+0x9c>)
  4024f6:	4905      	ldr	r1, [pc, #20]	; (40250c <_malloc_trim_r+0x98>)
  4024f8:	6824      	ldr	r4, [r4, #0]
  4024fa:	f043 0301 	orr.w	r3, r3, #1
  4024fe:	1b00      	subs	r0, r0, r4
  402500:	6053      	str	r3, [r2, #4]
  402502:	6008      	str	r0, [r1, #0]
  402504:	e7d5      	b.n	4024b2 <_malloc_trim_r+0x3e>
  402506:	bf00      	nop
  402508:	200005b0 	.word	0x200005b0
  40250c:	200009e4 	.word	0x200009e4
  402510:	200009b8 	.word	0x200009b8

00402514 <_free_r>:
  402514:	2900      	cmp	r1, #0
  402516:	d044      	beq.n	4025a2 <_free_r+0x8e>
  402518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40251c:	460d      	mov	r5, r1
  40251e:	4680      	mov	r8, r0
  402520:	f000 ff2c 	bl	40337c <__malloc_lock>
  402524:	f855 7c04 	ldr.w	r7, [r5, #-4]
  402528:	4969      	ldr	r1, [pc, #420]	; (4026d0 <_free_r+0x1bc>)
  40252a:	f027 0301 	bic.w	r3, r7, #1
  40252e:	f1a5 0408 	sub.w	r4, r5, #8
  402532:	18e2      	adds	r2, r4, r3
  402534:	688e      	ldr	r6, [r1, #8]
  402536:	6850      	ldr	r0, [r2, #4]
  402538:	42b2      	cmp	r2, r6
  40253a:	f020 0003 	bic.w	r0, r0, #3
  40253e:	d05e      	beq.n	4025fe <_free_r+0xea>
  402540:	07fe      	lsls	r6, r7, #31
  402542:	6050      	str	r0, [r2, #4]
  402544:	d40b      	bmi.n	40255e <_free_r+0x4a>
  402546:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40254a:	1be4      	subs	r4, r4, r7
  40254c:	f101 0e08 	add.w	lr, r1, #8
  402550:	68a5      	ldr	r5, [r4, #8]
  402552:	4575      	cmp	r5, lr
  402554:	443b      	add	r3, r7
  402556:	d06d      	beq.n	402634 <_free_r+0x120>
  402558:	68e7      	ldr	r7, [r4, #12]
  40255a:	60ef      	str	r7, [r5, #12]
  40255c:	60bd      	str	r5, [r7, #8]
  40255e:	1815      	adds	r5, r2, r0
  402560:	686d      	ldr	r5, [r5, #4]
  402562:	07ed      	lsls	r5, r5, #31
  402564:	d53e      	bpl.n	4025e4 <_free_r+0xd0>
  402566:	f043 0201 	orr.w	r2, r3, #1
  40256a:	6062      	str	r2, [r4, #4]
  40256c:	50e3      	str	r3, [r4, r3]
  40256e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402572:	d217      	bcs.n	4025a4 <_free_r+0x90>
  402574:	08db      	lsrs	r3, r3, #3
  402576:	1c58      	adds	r0, r3, #1
  402578:	109a      	asrs	r2, r3, #2
  40257a:	684d      	ldr	r5, [r1, #4]
  40257c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  402580:	60a7      	str	r7, [r4, #8]
  402582:	2301      	movs	r3, #1
  402584:	4093      	lsls	r3, r2
  402586:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40258a:	432b      	orrs	r3, r5
  40258c:	3a08      	subs	r2, #8
  40258e:	60e2      	str	r2, [r4, #12]
  402590:	604b      	str	r3, [r1, #4]
  402592:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  402596:	60fc      	str	r4, [r7, #12]
  402598:	4640      	mov	r0, r8
  40259a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40259e:	f000 bef3 	b.w	403388 <__malloc_unlock>
  4025a2:	4770      	bx	lr
  4025a4:	0a5a      	lsrs	r2, r3, #9
  4025a6:	2a04      	cmp	r2, #4
  4025a8:	d852      	bhi.n	402650 <_free_r+0x13c>
  4025aa:	099a      	lsrs	r2, r3, #6
  4025ac:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4025b0:	00ff      	lsls	r7, r7, #3
  4025b2:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4025b6:	19c8      	adds	r0, r1, r7
  4025b8:	59ca      	ldr	r2, [r1, r7]
  4025ba:	3808      	subs	r0, #8
  4025bc:	4290      	cmp	r0, r2
  4025be:	d04f      	beq.n	402660 <_free_r+0x14c>
  4025c0:	6851      	ldr	r1, [r2, #4]
  4025c2:	f021 0103 	bic.w	r1, r1, #3
  4025c6:	428b      	cmp	r3, r1
  4025c8:	d232      	bcs.n	402630 <_free_r+0x11c>
  4025ca:	6892      	ldr	r2, [r2, #8]
  4025cc:	4290      	cmp	r0, r2
  4025ce:	d1f7      	bne.n	4025c0 <_free_r+0xac>
  4025d0:	68c3      	ldr	r3, [r0, #12]
  4025d2:	60a0      	str	r0, [r4, #8]
  4025d4:	60e3      	str	r3, [r4, #12]
  4025d6:	609c      	str	r4, [r3, #8]
  4025d8:	60c4      	str	r4, [r0, #12]
  4025da:	4640      	mov	r0, r8
  4025dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4025e0:	f000 bed2 	b.w	403388 <__malloc_unlock>
  4025e4:	6895      	ldr	r5, [r2, #8]
  4025e6:	4f3b      	ldr	r7, [pc, #236]	; (4026d4 <_free_r+0x1c0>)
  4025e8:	42bd      	cmp	r5, r7
  4025ea:	4403      	add	r3, r0
  4025ec:	d040      	beq.n	402670 <_free_r+0x15c>
  4025ee:	68d0      	ldr	r0, [r2, #12]
  4025f0:	60e8      	str	r0, [r5, #12]
  4025f2:	f043 0201 	orr.w	r2, r3, #1
  4025f6:	6085      	str	r5, [r0, #8]
  4025f8:	6062      	str	r2, [r4, #4]
  4025fa:	50e3      	str	r3, [r4, r3]
  4025fc:	e7b7      	b.n	40256e <_free_r+0x5a>
  4025fe:	07ff      	lsls	r7, r7, #31
  402600:	4403      	add	r3, r0
  402602:	d407      	bmi.n	402614 <_free_r+0x100>
  402604:	f855 2c08 	ldr.w	r2, [r5, #-8]
  402608:	1aa4      	subs	r4, r4, r2
  40260a:	4413      	add	r3, r2
  40260c:	68a0      	ldr	r0, [r4, #8]
  40260e:	68e2      	ldr	r2, [r4, #12]
  402610:	60c2      	str	r2, [r0, #12]
  402612:	6090      	str	r0, [r2, #8]
  402614:	4a30      	ldr	r2, [pc, #192]	; (4026d8 <_free_r+0x1c4>)
  402616:	6812      	ldr	r2, [r2, #0]
  402618:	f043 0001 	orr.w	r0, r3, #1
  40261c:	4293      	cmp	r3, r2
  40261e:	6060      	str	r0, [r4, #4]
  402620:	608c      	str	r4, [r1, #8]
  402622:	d3b9      	bcc.n	402598 <_free_r+0x84>
  402624:	4b2d      	ldr	r3, [pc, #180]	; (4026dc <_free_r+0x1c8>)
  402626:	4640      	mov	r0, r8
  402628:	6819      	ldr	r1, [r3, #0]
  40262a:	f7ff ff23 	bl	402474 <_malloc_trim_r>
  40262e:	e7b3      	b.n	402598 <_free_r+0x84>
  402630:	4610      	mov	r0, r2
  402632:	e7cd      	b.n	4025d0 <_free_r+0xbc>
  402634:	1811      	adds	r1, r2, r0
  402636:	6849      	ldr	r1, [r1, #4]
  402638:	07c9      	lsls	r1, r1, #31
  40263a:	d444      	bmi.n	4026c6 <_free_r+0x1b2>
  40263c:	6891      	ldr	r1, [r2, #8]
  40263e:	68d2      	ldr	r2, [r2, #12]
  402640:	60ca      	str	r2, [r1, #12]
  402642:	4403      	add	r3, r0
  402644:	f043 0001 	orr.w	r0, r3, #1
  402648:	6091      	str	r1, [r2, #8]
  40264a:	6060      	str	r0, [r4, #4]
  40264c:	50e3      	str	r3, [r4, r3]
  40264e:	e7a3      	b.n	402598 <_free_r+0x84>
  402650:	2a14      	cmp	r2, #20
  402652:	d816      	bhi.n	402682 <_free_r+0x16e>
  402654:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  402658:	00ff      	lsls	r7, r7, #3
  40265a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40265e:	e7aa      	b.n	4025b6 <_free_r+0xa2>
  402660:	10aa      	asrs	r2, r5, #2
  402662:	2301      	movs	r3, #1
  402664:	684d      	ldr	r5, [r1, #4]
  402666:	4093      	lsls	r3, r2
  402668:	432b      	orrs	r3, r5
  40266a:	604b      	str	r3, [r1, #4]
  40266c:	4603      	mov	r3, r0
  40266e:	e7b0      	b.n	4025d2 <_free_r+0xbe>
  402670:	f043 0201 	orr.w	r2, r3, #1
  402674:	614c      	str	r4, [r1, #20]
  402676:	610c      	str	r4, [r1, #16]
  402678:	60e5      	str	r5, [r4, #12]
  40267a:	60a5      	str	r5, [r4, #8]
  40267c:	6062      	str	r2, [r4, #4]
  40267e:	50e3      	str	r3, [r4, r3]
  402680:	e78a      	b.n	402598 <_free_r+0x84>
  402682:	2a54      	cmp	r2, #84	; 0x54
  402684:	d806      	bhi.n	402694 <_free_r+0x180>
  402686:	0b1a      	lsrs	r2, r3, #12
  402688:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40268c:	00ff      	lsls	r7, r7, #3
  40268e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  402692:	e790      	b.n	4025b6 <_free_r+0xa2>
  402694:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402698:	d806      	bhi.n	4026a8 <_free_r+0x194>
  40269a:	0bda      	lsrs	r2, r3, #15
  40269c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4026a0:	00ff      	lsls	r7, r7, #3
  4026a2:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4026a6:	e786      	b.n	4025b6 <_free_r+0xa2>
  4026a8:	f240 5054 	movw	r0, #1364	; 0x554
  4026ac:	4282      	cmp	r2, r0
  4026ae:	d806      	bhi.n	4026be <_free_r+0x1aa>
  4026b0:	0c9a      	lsrs	r2, r3, #18
  4026b2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4026b6:	00ff      	lsls	r7, r7, #3
  4026b8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4026bc:	e77b      	b.n	4025b6 <_free_r+0xa2>
  4026be:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4026c2:	257e      	movs	r5, #126	; 0x7e
  4026c4:	e777      	b.n	4025b6 <_free_r+0xa2>
  4026c6:	f043 0101 	orr.w	r1, r3, #1
  4026ca:	6061      	str	r1, [r4, #4]
  4026cc:	6013      	str	r3, [r2, #0]
  4026ce:	e763      	b.n	402598 <_free_r+0x84>
  4026d0:	200005b0 	.word	0x200005b0
  4026d4:	200005b8 	.word	0x200005b8
  4026d8:	200009bc 	.word	0x200009bc
  4026dc:	20000a14 	.word	0x20000a14

004026e0 <__sfvwrite_r>:
  4026e0:	6893      	ldr	r3, [r2, #8]
  4026e2:	2b00      	cmp	r3, #0
  4026e4:	d073      	beq.n	4027ce <__sfvwrite_r+0xee>
  4026e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4026ea:	898b      	ldrh	r3, [r1, #12]
  4026ec:	b083      	sub	sp, #12
  4026ee:	460c      	mov	r4, r1
  4026f0:	0719      	lsls	r1, r3, #28
  4026f2:	9000      	str	r0, [sp, #0]
  4026f4:	4616      	mov	r6, r2
  4026f6:	d526      	bpl.n	402746 <__sfvwrite_r+0x66>
  4026f8:	6922      	ldr	r2, [r4, #16]
  4026fa:	b322      	cbz	r2, 402746 <__sfvwrite_r+0x66>
  4026fc:	f013 0002 	ands.w	r0, r3, #2
  402700:	6835      	ldr	r5, [r6, #0]
  402702:	d02c      	beq.n	40275e <__sfvwrite_r+0x7e>
  402704:	f04f 0900 	mov.w	r9, #0
  402708:	4fb0      	ldr	r7, [pc, #704]	; (4029cc <__sfvwrite_r+0x2ec>)
  40270a:	46c8      	mov	r8, r9
  40270c:	46b2      	mov	sl, r6
  40270e:	45b8      	cmp	r8, r7
  402710:	4643      	mov	r3, r8
  402712:	464a      	mov	r2, r9
  402714:	bf28      	it	cs
  402716:	463b      	movcs	r3, r7
  402718:	9800      	ldr	r0, [sp, #0]
  40271a:	f1b8 0f00 	cmp.w	r8, #0
  40271e:	d050      	beq.n	4027c2 <__sfvwrite_r+0xe2>
  402720:	69e1      	ldr	r1, [r4, #28]
  402722:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402724:	47b0      	blx	r6
  402726:	2800      	cmp	r0, #0
  402728:	dd58      	ble.n	4027dc <__sfvwrite_r+0xfc>
  40272a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40272e:	1a1b      	subs	r3, r3, r0
  402730:	4481      	add	r9, r0
  402732:	eba8 0800 	sub.w	r8, r8, r0
  402736:	f8ca 3008 	str.w	r3, [sl, #8]
  40273a:	2b00      	cmp	r3, #0
  40273c:	d1e7      	bne.n	40270e <__sfvwrite_r+0x2e>
  40273e:	2000      	movs	r0, #0
  402740:	b003      	add	sp, #12
  402742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402746:	4621      	mov	r1, r4
  402748:	9800      	ldr	r0, [sp, #0]
  40274a:	f7ff fc51 	bl	401ff0 <__swsetup_r>
  40274e:	2800      	cmp	r0, #0
  402750:	f040 8133 	bne.w	4029ba <__sfvwrite_r+0x2da>
  402754:	89a3      	ldrh	r3, [r4, #12]
  402756:	6835      	ldr	r5, [r6, #0]
  402758:	f013 0002 	ands.w	r0, r3, #2
  40275c:	d1d2      	bne.n	402704 <__sfvwrite_r+0x24>
  40275e:	f013 0901 	ands.w	r9, r3, #1
  402762:	d145      	bne.n	4027f0 <__sfvwrite_r+0x110>
  402764:	464f      	mov	r7, r9
  402766:	9601      	str	r6, [sp, #4]
  402768:	b337      	cbz	r7, 4027b8 <__sfvwrite_r+0xd8>
  40276a:	059a      	lsls	r2, r3, #22
  40276c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  402770:	f140 8083 	bpl.w	40287a <__sfvwrite_r+0x19a>
  402774:	4547      	cmp	r7, r8
  402776:	46c3      	mov	fp, r8
  402778:	f0c0 80ab 	bcc.w	4028d2 <__sfvwrite_r+0x1f2>
  40277c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  402780:	f040 80ac 	bne.w	4028dc <__sfvwrite_r+0x1fc>
  402784:	6820      	ldr	r0, [r4, #0]
  402786:	46ba      	mov	sl, r7
  402788:	465a      	mov	r2, fp
  40278a:	4649      	mov	r1, r9
  40278c:	f000 fd92 	bl	4032b4 <memmove>
  402790:	68a2      	ldr	r2, [r4, #8]
  402792:	6823      	ldr	r3, [r4, #0]
  402794:	eba2 0208 	sub.w	r2, r2, r8
  402798:	445b      	add	r3, fp
  40279a:	60a2      	str	r2, [r4, #8]
  40279c:	6023      	str	r3, [r4, #0]
  40279e:	9a01      	ldr	r2, [sp, #4]
  4027a0:	6893      	ldr	r3, [r2, #8]
  4027a2:	eba3 030a 	sub.w	r3, r3, sl
  4027a6:	44d1      	add	r9, sl
  4027a8:	eba7 070a 	sub.w	r7, r7, sl
  4027ac:	6093      	str	r3, [r2, #8]
  4027ae:	2b00      	cmp	r3, #0
  4027b0:	d0c5      	beq.n	40273e <__sfvwrite_r+0x5e>
  4027b2:	89a3      	ldrh	r3, [r4, #12]
  4027b4:	2f00      	cmp	r7, #0
  4027b6:	d1d8      	bne.n	40276a <__sfvwrite_r+0x8a>
  4027b8:	f8d5 9000 	ldr.w	r9, [r5]
  4027bc:	686f      	ldr	r7, [r5, #4]
  4027be:	3508      	adds	r5, #8
  4027c0:	e7d2      	b.n	402768 <__sfvwrite_r+0x88>
  4027c2:	f8d5 9000 	ldr.w	r9, [r5]
  4027c6:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4027ca:	3508      	adds	r5, #8
  4027cc:	e79f      	b.n	40270e <__sfvwrite_r+0x2e>
  4027ce:	2000      	movs	r0, #0
  4027d0:	4770      	bx	lr
  4027d2:	4621      	mov	r1, r4
  4027d4:	9800      	ldr	r0, [sp, #0]
  4027d6:	f7ff fd1f 	bl	402218 <_fflush_r>
  4027da:	b370      	cbz	r0, 40283a <__sfvwrite_r+0x15a>
  4027dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4027e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4027e4:	f04f 30ff 	mov.w	r0, #4294967295
  4027e8:	81a3      	strh	r3, [r4, #12]
  4027ea:	b003      	add	sp, #12
  4027ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4027f0:	4681      	mov	r9, r0
  4027f2:	4633      	mov	r3, r6
  4027f4:	464e      	mov	r6, r9
  4027f6:	46a8      	mov	r8, r5
  4027f8:	469a      	mov	sl, r3
  4027fa:	464d      	mov	r5, r9
  4027fc:	b34e      	cbz	r6, 402852 <__sfvwrite_r+0x172>
  4027fe:	b380      	cbz	r0, 402862 <__sfvwrite_r+0x182>
  402800:	6820      	ldr	r0, [r4, #0]
  402802:	6923      	ldr	r3, [r4, #16]
  402804:	6962      	ldr	r2, [r4, #20]
  402806:	45b1      	cmp	r9, r6
  402808:	46cb      	mov	fp, r9
  40280a:	bf28      	it	cs
  40280c:	46b3      	movcs	fp, r6
  40280e:	4298      	cmp	r0, r3
  402810:	465f      	mov	r7, fp
  402812:	d904      	bls.n	40281e <__sfvwrite_r+0x13e>
  402814:	68a3      	ldr	r3, [r4, #8]
  402816:	4413      	add	r3, r2
  402818:	459b      	cmp	fp, r3
  40281a:	f300 80a6 	bgt.w	40296a <__sfvwrite_r+0x28a>
  40281e:	4593      	cmp	fp, r2
  402820:	db4b      	blt.n	4028ba <__sfvwrite_r+0x1da>
  402822:	4613      	mov	r3, r2
  402824:	6a67      	ldr	r7, [r4, #36]	; 0x24
  402826:	69e1      	ldr	r1, [r4, #28]
  402828:	9800      	ldr	r0, [sp, #0]
  40282a:	462a      	mov	r2, r5
  40282c:	47b8      	blx	r7
  40282e:	1e07      	subs	r7, r0, #0
  402830:	ddd4      	ble.n	4027dc <__sfvwrite_r+0xfc>
  402832:	ebb9 0907 	subs.w	r9, r9, r7
  402836:	d0cc      	beq.n	4027d2 <__sfvwrite_r+0xf2>
  402838:	2001      	movs	r0, #1
  40283a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40283e:	1bdb      	subs	r3, r3, r7
  402840:	443d      	add	r5, r7
  402842:	1bf6      	subs	r6, r6, r7
  402844:	f8ca 3008 	str.w	r3, [sl, #8]
  402848:	2b00      	cmp	r3, #0
  40284a:	f43f af78 	beq.w	40273e <__sfvwrite_r+0x5e>
  40284e:	2e00      	cmp	r6, #0
  402850:	d1d5      	bne.n	4027fe <__sfvwrite_r+0x11e>
  402852:	f108 0308 	add.w	r3, r8, #8
  402856:	e913 0060 	ldmdb	r3, {r5, r6}
  40285a:	4698      	mov	r8, r3
  40285c:	3308      	adds	r3, #8
  40285e:	2e00      	cmp	r6, #0
  402860:	d0f9      	beq.n	402856 <__sfvwrite_r+0x176>
  402862:	4632      	mov	r2, r6
  402864:	210a      	movs	r1, #10
  402866:	4628      	mov	r0, r5
  402868:	f000 fc3a 	bl	4030e0 <memchr>
  40286c:	2800      	cmp	r0, #0
  40286e:	f000 80a1 	beq.w	4029b4 <__sfvwrite_r+0x2d4>
  402872:	3001      	adds	r0, #1
  402874:	eba0 0905 	sub.w	r9, r0, r5
  402878:	e7c2      	b.n	402800 <__sfvwrite_r+0x120>
  40287a:	6820      	ldr	r0, [r4, #0]
  40287c:	6923      	ldr	r3, [r4, #16]
  40287e:	4298      	cmp	r0, r3
  402880:	d802      	bhi.n	402888 <__sfvwrite_r+0x1a8>
  402882:	6963      	ldr	r3, [r4, #20]
  402884:	429f      	cmp	r7, r3
  402886:	d25d      	bcs.n	402944 <__sfvwrite_r+0x264>
  402888:	45b8      	cmp	r8, r7
  40288a:	bf28      	it	cs
  40288c:	46b8      	movcs	r8, r7
  40288e:	4642      	mov	r2, r8
  402890:	4649      	mov	r1, r9
  402892:	f000 fd0f 	bl	4032b4 <memmove>
  402896:	68a3      	ldr	r3, [r4, #8]
  402898:	6822      	ldr	r2, [r4, #0]
  40289a:	eba3 0308 	sub.w	r3, r3, r8
  40289e:	4442      	add	r2, r8
  4028a0:	60a3      	str	r3, [r4, #8]
  4028a2:	6022      	str	r2, [r4, #0]
  4028a4:	b10b      	cbz	r3, 4028aa <__sfvwrite_r+0x1ca>
  4028a6:	46c2      	mov	sl, r8
  4028a8:	e779      	b.n	40279e <__sfvwrite_r+0xbe>
  4028aa:	4621      	mov	r1, r4
  4028ac:	9800      	ldr	r0, [sp, #0]
  4028ae:	f7ff fcb3 	bl	402218 <_fflush_r>
  4028b2:	2800      	cmp	r0, #0
  4028b4:	d192      	bne.n	4027dc <__sfvwrite_r+0xfc>
  4028b6:	46c2      	mov	sl, r8
  4028b8:	e771      	b.n	40279e <__sfvwrite_r+0xbe>
  4028ba:	465a      	mov	r2, fp
  4028bc:	4629      	mov	r1, r5
  4028be:	f000 fcf9 	bl	4032b4 <memmove>
  4028c2:	68a2      	ldr	r2, [r4, #8]
  4028c4:	6823      	ldr	r3, [r4, #0]
  4028c6:	eba2 020b 	sub.w	r2, r2, fp
  4028ca:	445b      	add	r3, fp
  4028cc:	60a2      	str	r2, [r4, #8]
  4028ce:	6023      	str	r3, [r4, #0]
  4028d0:	e7af      	b.n	402832 <__sfvwrite_r+0x152>
  4028d2:	6820      	ldr	r0, [r4, #0]
  4028d4:	46b8      	mov	r8, r7
  4028d6:	46ba      	mov	sl, r7
  4028d8:	46bb      	mov	fp, r7
  4028da:	e755      	b.n	402788 <__sfvwrite_r+0xa8>
  4028dc:	6962      	ldr	r2, [r4, #20]
  4028de:	6820      	ldr	r0, [r4, #0]
  4028e0:	6921      	ldr	r1, [r4, #16]
  4028e2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4028e6:	eba0 0a01 	sub.w	sl, r0, r1
  4028ea:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4028ee:	f10a 0001 	add.w	r0, sl, #1
  4028f2:	ea4f 0868 	mov.w	r8, r8, asr #1
  4028f6:	4438      	add	r0, r7
  4028f8:	4540      	cmp	r0, r8
  4028fa:	4642      	mov	r2, r8
  4028fc:	bf84      	itt	hi
  4028fe:	4680      	movhi	r8, r0
  402900:	4642      	movhi	r2, r8
  402902:	055b      	lsls	r3, r3, #21
  402904:	d544      	bpl.n	402990 <__sfvwrite_r+0x2b0>
  402906:	4611      	mov	r1, r2
  402908:	9800      	ldr	r0, [sp, #0]
  40290a:	f000 f921 	bl	402b50 <_malloc_r>
  40290e:	4683      	mov	fp, r0
  402910:	2800      	cmp	r0, #0
  402912:	d055      	beq.n	4029c0 <__sfvwrite_r+0x2e0>
  402914:	4652      	mov	r2, sl
  402916:	6921      	ldr	r1, [r4, #16]
  402918:	f000 fc32 	bl	403180 <memcpy>
  40291c:	89a3      	ldrh	r3, [r4, #12]
  40291e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  402922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402926:	81a3      	strh	r3, [r4, #12]
  402928:	eb0b 000a 	add.w	r0, fp, sl
  40292c:	eba8 030a 	sub.w	r3, r8, sl
  402930:	f8c4 b010 	str.w	fp, [r4, #16]
  402934:	f8c4 8014 	str.w	r8, [r4, #20]
  402938:	6020      	str	r0, [r4, #0]
  40293a:	60a3      	str	r3, [r4, #8]
  40293c:	46b8      	mov	r8, r7
  40293e:	46ba      	mov	sl, r7
  402940:	46bb      	mov	fp, r7
  402942:	e721      	b.n	402788 <__sfvwrite_r+0xa8>
  402944:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  402948:	42b9      	cmp	r1, r7
  40294a:	bf28      	it	cs
  40294c:	4639      	movcs	r1, r7
  40294e:	464a      	mov	r2, r9
  402950:	fb91 f1f3 	sdiv	r1, r1, r3
  402954:	9800      	ldr	r0, [sp, #0]
  402956:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402958:	fb03 f301 	mul.w	r3, r3, r1
  40295c:	69e1      	ldr	r1, [r4, #28]
  40295e:	47b0      	blx	r6
  402960:	f1b0 0a00 	subs.w	sl, r0, #0
  402964:	f73f af1b 	bgt.w	40279e <__sfvwrite_r+0xbe>
  402968:	e738      	b.n	4027dc <__sfvwrite_r+0xfc>
  40296a:	461a      	mov	r2, r3
  40296c:	4629      	mov	r1, r5
  40296e:	9301      	str	r3, [sp, #4]
  402970:	f000 fca0 	bl	4032b4 <memmove>
  402974:	6822      	ldr	r2, [r4, #0]
  402976:	9b01      	ldr	r3, [sp, #4]
  402978:	9800      	ldr	r0, [sp, #0]
  40297a:	441a      	add	r2, r3
  40297c:	6022      	str	r2, [r4, #0]
  40297e:	4621      	mov	r1, r4
  402980:	f7ff fc4a 	bl	402218 <_fflush_r>
  402984:	9b01      	ldr	r3, [sp, #4]
  402986:	2800      	cmp	r0, #0
  402988:	f47f af28 	bne.w	4027dc <__sfvwrite_r+0xfc>
  40298c:	461f      	mov	r7, r3
  40298e:	e750      	b.n	402832 <__sfvwrite_r+0x152>
  402990:	9800      	ldr	r0, [sp, #0]
  402992:	f000 fcff 	bl	403394 <_realloc_r>
  402996:	4683      	mov	fp, r0
  402998:	2800      	cmp	r0, #0
  40299a:	d1c5      	bne.n	402928 <__sfvwrite_r+0x248>
  40299c:	9d00      	ldr	r5, [sp, #0]
  40299e:	6921      	ldr	r1, [r4, #16]
  4029a0:	4628      	mov	r0, r5
  4029a2:	f7ff fdb7 	bl	402514 <_free_r>
  4029a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4029aa:	220c      	movs	r2, #12
  4029ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4029b0:	602a      	str	r2, [r5, #0]
  4029b2:	e715      	b.n	4027e0 <__sfvwrite_r+0x100>
  4029b4:	f106 0901 	add.w	r9, r6, #1
  4029b8:	e722      	b.n	402800 <__sfvwrite_r+0x120>
  4029ba:	f04f 30ff 	mov.w	r0, #4294967295
  4029be:	e6bf      	b.n	402740 <__sfvwrite_r+0x60>
  4029c0:	9a00      	ldr	r2, [sp, #0]
  4029c2:	230c      	movs	r3, #12
  4029c4:	6013      	str	r3, [r2, #0]
  4029c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4029ca:	e709      	b.n	4027e0 <__sfvwrite_r+0x100>
  4029cc:	7ffffc00 	.word	0x7ffffc00

004029d0 <_fwalk_reent>:
  4029d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4029d4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4029d8:	d01f      	beq.n	402a1a <_fwalk_reent+0x4a>
  4029da:	4688      	mov	r8, r1
  4029dc:	4606      	mov	r6, r0
  4029de:	f04f 0900 	mov.w	r9, #0
  4029e2:	687d      	ldr	r5, [r7, #4]
  4029e4:	68bc      	ldr	r4, [r7, #8]
  4029e6:	3d01      	subs	r5, #1
  4029e8:	d411      	bmi.n	402a0e <_fwalk_reent+0x3e>
  4029ea:	89a3      	ldrh	r3, [r4, #12]
  4029ec:	2b01      	cmp	r3, #1
  4029ee:	f105 35ff 	add.w	r5, r5, #4294967295
  4029f2:	d908      	bls.n	402a06 <_fwalk_reent+0x36>
  4029f4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4029f8:	3301      	adds	r3, #1
  4029fa:	4621      	mov	r1, r4
  4029fc:	4630      	mov	r0, r6
  4029fe:	d002      	beq.n	402a06 <_fwalk_reent+0x36>
  402a00:	47c0      	blx	r8
  402a02:	ea49 0900 	orr.w	r9, r9, r0
  402a06:	1c6b      	adds	r3, r5, #1
  402a08:	f104 0468 	add.w	r4, r4, #104	; 0x68
  402a0c:	d1ed      	bne.n	4029ea <_fwalk_reent+0x1a>
  402a0e:	683f      	ldr	r7, [r7, #0]
  402a10:	2f00      	cmp	r7, #0
  402a12:	d1e6      	bne.n	4029e2 <_fwalk_reent+0x12>
  402a14:	4648      	mov	r0, r9
  402a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402a1a:	46b9      	mov	r9, r7
  402a1c:	4648      	mov	r0, r9
  402a1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402a22:	bf00      	nop

00402a24 <__locale_mb_cur_max>:
  402a24:	4b04      	ldr	r3, [pc, #16]	; (402a38 <__locale_mb_cur_max+0x14>)
  402a26:	4a05      	ldr	r2, [pc, #20]	; (402a3c <__locale_mb_cur_max+0x18>)
  402a28:	681b      	ldr	r3, [r3, #0]
  402a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  402a2c:	2b00      	cmp	r3, #0
  402a2e:	bf08      	it	eq
  402a30:	4613      	moveq	r3, r2
  402a32:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  402a36:	4770      	bx	lr
  402a38:	20000010 	.word	0x20000010
  402a3c:	20000444 	.word	0x20000444

00402a40 <__retarget_lock_init_recursive>:
  402a40:	4770      	bx	lr
  402a42:	bf00      	nop

00402a44 <__retarget_lock_close_recursive>:
  402a44:	4770      	bx	lr
  402a46:	bf00      	nop

00402a48 <__retarget_lock_acquire_recursive>:
  402a48:	4770      	bx	lr
  402a4a:	bf00      	nop

00402a4c <__retarget_lock_release_recursive>:
  402a4c:	4770      	bx	lr
  402a4e:	bf00      	nop

00402a50 <__swhatbuf_r>:
  402a50:	b570      	push	{r4, r5, r6, lr}
  402a52:	460c      	mov	r4, r1
  402a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402a58:	2900      	cmp	r1, #0
  402a5a:	b090      	sub	sp, #64	; 0x40
  402a5c:	4615      	mov	r5, r2
  402a5e:	461e      	mov	r6, r3
  402a60:	db14      	blt.n	402a8c <__swhatbuf_r+0x3c>
  402a62:	aa01      	add	r2, sp, #4
  402a64:	f001 f80e 	bl	403a84 <_fstat_r>
  402a68:	2800      	cmp	r0, #0
  402a6a:	db0f      	blt.n	402a8c <__swhatbuf_r+0x3c>
  402a6c:	9a02      	ldr	r2, [sp, #8]
  402a6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  402a72:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  402a76:	fab2 f282 	clz	r2, r2
  402a7a:	0952      	lsrs	r2, r2, #5
  402a7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402a80:	f44f 6000 	mov.w	r0, #2048	; 0x800
  402a84:	6032      	str	r2, [r6, #0]
  402a86:	602b      	str	r3, [r5, #0]
  402a88:	b010      	add	sp, #64	; 0x40
  402a8a:	bd70      	pop	{r4, r5, r6, pc}
  402a8c:	89a2      	ldrh	r2, [r4, #12]
  402a8e:	2300      	movs	r3, #0
  402a90:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  402a94:	6033      	str	r3, [r6, #0]
  402a96:	d004      	beq.n	402aa2 <__swhatbuf_r+0x52>
  402a98:	2240      	movs	r2, #64	; 0x40
  402a9a:	4618      	mov	r0, r3
  402a9c:	602a      	str	r2, [r5, #0]
  402a9e:	b010      	add	sp, #64	; 0x40
  402aa0:	bd70      	pop	{r4, r5, r6, pc}
  402aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402aa6:	602b      	str	r3, [r5, #0]
  402aa8:	b010      	add	sp, #64	; 0x40
  402aaa:	bd70      	pop	{r4, r5, r6, pc}

00402aac <__smakebuf_r>:
  402aac:	898a      	ldrh	r2, [r1, #12]
  402aae:	0792      	lsls	r2, r2, #30
  402ab0:	460b      	mov	r3, r1
  402ab2:	d506      	bpl.n	402ac2 <__smakebuf_r+0x16>
  402ab4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  402ab8:	2101      	movs	r1, #1
  402aba:	601a      	str	r2, [r3, #0]
  402abc:	611a      	str	r2, [r3, #16]
  402abe:	6159      	str	r1, [r3, #20]
  402ac0:	4770      	bx	lr
  402ac2:	b5f0      	push	{r4, r5, r6, r7, lr}
  402ac4:	b083      	sub	sp, #12
  402ac6:	ab01      	add	r3, sp, #4
  402ac8:	466a      	mov	r2, sp
  402aca:	460c      	mov	r4, r1
  402acc:	4606      	mov	r6, r0
  402ace:	f7ff ffbf 	bl	402a50 <__swhatbuf_r>
  402ad2:	9900      	ldr	r1, [sp, #0]
  402ad4:	4605      	mov	r5, r0
  402ad6:	4630      	mov	r0, r6
  402ad8:	f000 f83a 	bl	402b50 <_malloc_r>
  402adc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402ae0:	b1d8      	cbz	r0, 402b1a <__smakebuf_r+0x6e>
  402ae2:	9a01      	ldr	r2, [sp, #4]
  402ae4:	4f15      	ldr	r7, [pc, #84]	; (402b3c <__smakebuf_r+0x90>)
  402ae6:	9900      	ldr	r1, [sp, #0]
  402ae8:	63f7      	str	r7, [r6, #60]	; 0x3c
  402aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402aee:	81a3      	strh	r3, [r4, #12]
  402af0:	6020      	str	r0, [r4, #0]
  402af2:	6120      	str	r0, [r4, #16]
  402af4:	6161      	str	r1, [r4, #20]
  402af6:	b91a      	cbnz	r2, 402b00 <__smakebuf_r+0x54>
  402af8:	432b      	orrs	r3, r5
  402afa:	81a3      	strh	r3, [r4, #12]
  402afc:	b003      	add	sp, #12
  402afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402b00:	4630      	mov	r0, r6
  402b02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402b06:	f000 ffd1 	bl	403aac <_isatty_r>
  402b0a:	b1a0      	cbz	r0, 402b36 <__smakebuf_r+0x8a>
  402b0c:	89a3      	ldrh	r3, [r4, #12]
  402b0e:	f023 0303 	bic.w	r3, r3, #3
  402b12:	f043 0301 	orr.w	r3, r3, #1
  402b16:	b21b      	sxth	r3, r3
  402b18:	e7ee      	b.n	402af8 <__smakebuf_r+0x4c>
  402b1a:	059a      	lsls	r2, r3, #22
  402b1c:	d4ee      	bmi.n	402afc <__smakebuf_r+0x50>
  402b1e:	f023 0303 	bic.w	r3, r3, #3
  402b22:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402b26:	f043 0302 	orr.w	r3, r3, #2
  402b2a:	2101      	movs	r1, #1
  402b2c:	81a3      	strh	r3, [r4, #12]
  402b2e:	6022      	str	r2, [r4, #0]
  402b30:	6122      	str	r2, [r4, #16]
  402b32:	6161      	str	r1, [r4, #20]
  402b34:	e7e2      	b.n	402afc <__smakebuf_r+0x50>
  402b36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402b3a:	e7dd      	b.n	402af8 <__smakebuf_r+0x4c>
  402b3c:	0040226d 	.word	0x0040226d

00402b40 <malloc>:
  402b40:	4b02      	ldr	r3, [pc, #8]	; (402b4c <malloc+0xc>)
  402b42:	4601      	mov	r1, r0
  402b44:	6818      	ldr	r0, [r3, #0]
  402b46:	f000 b803 	b.w	402b50 <_malloc_r>
  402b4a:	bf00      	nop
  402b4c:	20000010 	.word	0x20000010

00402b50 <_malloc_r>:
  402b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402b54:	f101 060b 	add.w	r6, r1, #11
  402b58:	2e16      	cmp	r6, #22
  402b5a:	b083      	sub	sp, #12
  402b5c:	4605      	mov	r5, r0
  402b5e:	f240 809e 	bls.w	402c9e <_malloc_r+0x14e>
  402b62:	f036 0607 	bics.w	r6, r6, #7
  402b66:	f100 80bd 	bmi.w	402ce4 <_malloc_r+0x194>
  402b6a:	42b1      	cmp	r1, r6
  402b6c:	f200 80ba 	bhi.w	402ce4 <_malloc_r+0x194>
  402b70:	f000 fc04 	bl	40337c <__malloc_lock>
  402b74:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  402b78:	f0c0 8293 	bcc.w	4030a2 <_malloc_r+0x552>
  402b7c:	0a73      	lsrs	r3, r6, #9
  402b7e:	f000 80b8 	beq.w	402cf2 <_malloc_r+0x1a2>
  402b82:	2b04      	cmp	r3, #4
  402b84:	f200 8179 	bhi.w	402e7a <_malloc_r+0x32a>
  402b88:	09b3      	lsrs	r3, r6, #6
  402b8a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  402b8e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  402b92:	00c3      	lsls	r3, r0, #3
  402b94:	4fbf      	ldr	r7, [pc, #764]	; (402e94 <_malloc_r+0x344>)
  402b96:	443b      	add	r3, r7
  402b98:	f1a3 0108 	sub.w	r1, r3, #8
  402b9c:	685c      	ldr	r4, [r3, #4]
  402b9e:	42a1      	cmp	r1, r4
  402ba0:	d106      	bne.n	402bb0 <_malloc_r+0x60>
  402ba2:	e00c      	b.n	402bbe <_malloc_r+0x6e>
  402ba4:	2a00      	cmp	r2, #0
  402ba6:	f280 80aa 	bge.w	402cfe <_malloc_r+0x1ae>
  402baa:	68e4      	ldr	r4, [r4, #12]
  402bac:	42a1      	cmp	r1, r4
  402bae:	d006      	beq.n	402bbe <_malloc_r+0x6e>
  402bb0:	6863      	ldr	r3, [r4, #4]
  402bb2:	f023 0303 	bic.w	r3, r3, #3
  402bb6:	1b9a      	subs	r2, r3, r6
  402bb8:	2a0f      	cmp	r2, #15
  402bba:	ddf3      	ble.n	402ba4 <_malloc_r+0x54>
  402bbc:	4670      	mov	r0, lr
  402bbe:	693c      	ldr	r4, [r7, #16]
  402bc0:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 402ea8 <_malloc_r+0x358>
  402bc4:	4574      	cmp	r4, lr
  402bc6:	f000 81ab 	beq.w	402f20 <_malloc_r+0x3d0>
  402bca:	6863      	ldr	r3, [r4, #4]
  402bcc:	f023 0303 	bic.w	r3, r3, #3
  402bd0:	1b9a      	subs	r2, r3, r6
  402bd2:	2a0f      	cmp	r2, #15
  402bd4:	f300 8190 	bgt.w	402ef8 <_malloc_r+0x3a8>
  402bd8:	2a00      	cmp	r2, #0
  402bda:	f8c7 e014 	str.w	lr, [r7, #20]
  402bde:	f8c7 e010 	str.w	lr, [r7, #16]
  402be2:	f280 809d 	bge.w	402d20 <_malloc_r+0x1d0>
  402be6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402bea:	f080 8161 	bcs.w	402eb0 <_malloc_r+0x360>
  402bee:	08db      	lsrs	r3, r3, #3
  402bf0:	f103 0c01 	add.w	ip, r3, #1
  402bf4:	1099      	asrs	r1, r3, #2
  402bf6:	687a      	ldr	r2, [r7, #4]
  402bf8:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  402bfc:	f8c4 8008 	str.w	r8, [r4, #8]
  402c00:	2301      	movs	r3, #1
  402c02:	408b      	lsls	r3, r1
  402c04:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  402c08:	4313      	orrs	r3, r2
  402c0a:	3908      	subs	r1, #8
  402c0c:	60e1      	str	r1, [r4, #12]
  402c0e:	607b      	str	r3, [r7, #4]
  402c10:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  402c14:	f8c8 400c 	str.w	r4, [r8, #12]
  402c18:	1082      	asrs	r2, r0, #2
  402c1a:	2401      	movs	r4, #1
  402c1c:	4094      	lsls	r4, r2
  402c1e:	429c      	cmp	r4, r3
  402c20:	f200 808b 	bhi.w	402d3a <_malloc_r+0x1ea>
  402c24:	421c      	tst	r4, r3
  402c26:	d106      	bne.n	402c36 <_malloc_r+0xe6>
  402c28:	f020 0003 	bic.w	r0, r0, #3
  402c2c:	0064      	lsls	r4, r4, #1
  402c2e:	421c      	tst	r4, r3
  402c30:	f100 0004 	add.w	r0, r0, #4
  402c34:	d0fa      	beq.n	402c2c <_malloc_r+0xdc>
  402c36:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  402c3a:	46cc      	mov	ip, r9
  402c3c:	4680      	mov	r8, r0
  402c3e:	f8dc 300c 	ldr.w	r3, [ip, #12]
  402c42:	459c      	cmp	ip, r3
  402c44:	d107      	bne.n	402c56 <_malloc_r+0x106>
  402c46:	e16d      	b.n	402f24 <_malloc_r+0x3d4>
  402c48:	2a00      	cmp	r2, #0
  402c4a:	f280 817b 	bge.w	402f44 <_malloc_r+0x3f4>
  402c4e:	68db      	ldr	r3, [r3, #12]
  402c50:	459c      	cmp	ip, r3
  402c52:	f000 8167 	beq.w	402f24 <_malloc_r+0x3d4>
  402c56:	6859      	ldr	r1, [r3, #4]
  402c58:	f021 0103 	bic.w	r1, r1, #3
  402c5c:	1b8a      	subs	r2, r1, r6
  402c5e:	2a0f      	cmp	r2, #15
  402c60:	ddf2      	ble.n	402c48 <_malloc_r+0xf8>
  402c62:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  402c66:	f8d3 8008 	ldr.w	r8, [r3, #8]
  402c6a:	9300      	str	r3, [sp, #0]
  402c6c:	199c      	adds	r4, r3, r6
  402c6e:	4628      	mov	r0, r5
  402c70:	f046 0601 	orr.w	r6, r6, #1
  402c74:	f042 0501 	orr.w	r5, r2, #1
  402c78:	605e      	str	r6, [r3, #4]
  402c7a:	f8c8 c00c 	str.w	ip, [r8, #12]
  402c7e:	f8cc 8008 	str.w	r8, [ip, #8]
  402c82:	617c      	str	r4, [r7, #20]
  402c84:	613c      	str	r4, [r7, #16]
  402c86:	f8c4 e00c 	str.w	lr, [r4, #12]
  402c8a:	f8c4 e008 	str.w	lr, [r4, #8]
  402c8e:	6065      	str	r5, [r4, #4]
  402c90:	505a      	str	r2, [r3, r1]
  402c92:	f000 fb79 	bl	403388 <__malloc_unlock>
  402c96:	9b00      	ldr	r3, [sp, #0]
  402c98:	f103 0408 	add.w	r4, r3, #8
  402c9c:	e01e      	b.n	402cdc <_malloc_r+0x18c>
  402c9e:	2910      	cmp	r1, #16
  402ca0:	d820      	bhi.n	402ce4 <_malloc_r+0x194>
  402ca2:	f000 fb6b 	bl	40337c <__malloc_lock>
  402ca6:	2610      	movs	r6, #16
  402ca8:	2318      	movs	r3, #24
  402caa:	2002      	movs	r0, #2
  402cac:	4f79      	ldr	r7, [pc, #484]	; (402e94 <_malloc_r+0x344>)
  402cae:	443b      	add	r3, r7
  402cb0:	f1a3 0208 	sub.w	r2, r3, #8
  402cb4:	685c      	ldr	r4, [r3, #4]
  402cb6:	4294      	cmp	r4, r2
  402cb8:	f000 813d 	beq.w	402f36 <_malloc_r+0x3e6>
  402cbc:	6863      	ldr	r3, [r4, #4]
  402cbe:	68e1      	ldr	r1, [r4, #12]
  402cc0:	68a6      	ldr	r6, [r4, #8]
  402cc2:	f023 0303 	bic.w	r3, r3, #3
  402cc6:	4423      	add	r3, r4
  402cc8:	4628      	mov	r0, r5
  402cca:	685a      	ldr	r2, [r3, #4]
  402ccc:	60f1      	str	r1, [r6, #12]
  402cce:	f042 0201 	orr.w	r2, r2, #1
  402cd2:	608e      	str	r6, [r1, #8]
  402cd4:	605a      	str	r2, [r3, #4]
  402cd6:	f000 fb57 	bl	403388 <__malloc_unlock>
  402cda:	3408      	adds	r4, #8
  402cdc:	4620      	mov	r0, r4
  402cde:	b003      	add	sp, #12
  402ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402ce4:	2400      	movs	r4, #0
  402ce6:	230c      	movs	r3, #12
  402ce8:	4620      	mov	r0, r4
  402cea:	602b      	str	r3, [r5, #0]
  402cec:	b003      	add	sp, #12
  402cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402cf2:	2040      	movs	r0, #64	; 0x40
  402cf4:	f44f 7300 	mov.w	r3, #512	; 0x200
  402cf8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  402cfc:	e74a      	b.n	402b94 <_malloc_r+0x44>
  402cfe:	4423      	add	r3, r4
  402d00:	68e1      	ldr	r1, [r4, #12]
  402d02:	685a      	ldr	r2, [r3, #4]
  402d04:	68a6      	ldr	r6, [r4, #8]
  402d06:	f042 0201 	orr.w	r2, r2, #1
  402d0a:	60f1      	str	r1, [r6, #12]
  402d0c:	4628      	mov	r0, r5
  402d0e:	608e      	str	r6, [r1, #8]
  402d10:	605a      	str	r2, [r3, #4]
  402d12:	f000 fb39 	bl	403388 <__malloc_unlock>
  402d16:	3408      	adds	r4, #8
  402d18:	4620      	mov	r0, r4
  402d1a:	b003      	add	sp, #12
  402d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402d20:	4423      	add	r3, r4
  402d22:	4628      	mov	r0, r5
  402d24:	685a      	ldr	r2, [r3, #4]
  402d26:	f042 0201 	orr.w	r2, r2, #1
  402d2a:	605a      	str	r2, [r3, #4]
  402d2c:	f000 fb2c 	bl	403388 <__malloc_unlock>
  402d30:	3408      	adds	r4, #8
  402d32:	4620      	mov	r0, r4
  402d34:	b003      	add	sp, #12
  402d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402d3a:	68bc      	ldr	r4, [r7, #8]
  402d3c:	6863      	ldr	r3, [r4, #4]
  402d3e:	f023 0803 	bic.w	r8, r3, #3
  402d42:	45b0      	cmp	r8, r6
  402d44:	d304      	bcc.n	402d50 <_malloc_r+0x200>
  402d46:	eba8 0306 	sub.w	r3, r8, r6
  402d4a:	2b0f      	cmp	r3, #15
  402d4c:	f300 8085 	bgt.w	402e5a <_malloc_r+0x30a>
  402d50:	f8df 9158 	ldr.w	r9, [pc, #344]	; 402eac <_malloc_r+0x35c>
  402d54:	4b50      	ldr	r3, [pc, #320]	; (402e98 <_malloc_r+0x348>)
  402d56:	f8d9 2000 	ldr.w	r2, [r9]
  402d5a:	681b      	ldr	r3, [r3, #0]
  402d5c:	3201      	adds	r2, #1
  402d5e:	4433      	add	r3, r6
  402d60:	eb04 0a08 	add.w	sl, r4, r8
  402d64:	f000 8155 	beq.w	403012 <_malloc_r+0x4c2>
  402d68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  402d6c:	330f      	adds	r3, #15
  402d6e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  402d72:	f02b 0b0f 	bic.w	fp, fp, #15
  402d76:	4659      	mov	r1, fp
  402d78:	4628      	mov	r0, r5
  402d7a:	f000 fcb1 	bl	4036e0 <_sbrk_r>
  402d7e:	1c41      	adds	r1, r0, #1
  402d80:	4602      	mov	r2, r0
  402d82:	f000 80fc 	beq.w	402f7e <_malloc_r+0x42e>
  402d86:	4582      	cmp	sl, r0
  402d88:	f200 80f7 	bhi.w	402f7a <_malloc_r+0x42a>
  402d8c:	4b43      	ldr	r3, [pc, #268]	; (402e9c <_malloc_r+0x34c>)
  402d8e:	6819      	ldr	r1, [r3, #0]
  402d90:	4459      	add	r1, fp
  402d92:	6019      	str	r1, [r3, #0]
  402d94:	f000 814d 	beq.w	403032 <_malloc_r+0x4e2>
  402d98:	f8d9 0000 	ldr.w	r0, [r9]
  402d9c:	3001      	adds	r0, #1
  402d9e:	bf1b      	ittet	ne
  402da0:	eba2 0a0a 	subne.w	sl, r2, sl
  402da4:	4451      	addne	r1, sl
  402da6:	f8c9 2000 	streq.w	r2, [r9]
  402daa:	6019      	strne	r1, [r3, #0]
  402dac:	f012 0107 	ands.w	r1, r2, #7
  402db0:	f000 8115 	beq.w	402fde <_malloc_r+0x48e>
  402db4:	f1c1 0008 	rsb	r0, r1, #8
  402db8:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  402dbc:	4402      	add	r2, r0
  402dbe:	3108      	adds	r1, #8
  402dc0:	eb02 090b 	add.w	r9, r2, fp
  402dc4:	f3c9 090b 	ubfx	r9, r9, #0, #12
  402dc8:	eba1 0909 	sub.w	r9, r1, r9
  402dcc:	4649      	mov	r1, r9
  402dce:	4628      	mov	r0, r5
  402dd0:	9301      	str	r3, [sp, #4]
  402dd2:	9200      	str	r2, [sp, #0]
  402dd4:	f000 fc84 	bl	4036e0 <_sbrk_r>
  402dd8:	1c43      	adds	r3, r0, #1
  402dda:	e89d 000c 	ldmia.w	sp, {r2, r3}
  402dde:	f000 8143 	beq.w	403068 <_malloc_r+0x518>
  402de2:	1a80      	subs	r0, r0, r2
  402de4:	4448      	add	r0, r9
  402de6:	f040 0001 	orr.w	r0, r0, #1
  402dea:	6819      	ldr	r1, [r3, #0]
  402dec:	60ba      	str	r2, [r7, #8]
  402dee:	4449      	add	r1, r9
  402df0:	42bc      	cmp	r4, r7
  402df2:	6050      	str	r0, [r2, #4]
  402df4:	6019      	str	r1, [r3, #0]
  402df6:	d017      	beq.n	402e28 <_malloc_r+0x2d8>
  402df8:	f1b8 0f0f 	cmp.w	r8, #15
  402dfc:	f240 80fb 	bls.w	402ff6 <_malloc_r+0x4a6>
  402e00:	6860      	ldr	r0, [r4, #4]
  402e02:	f1a8 020c 	sub.w	r2, r8, #12
  402e06:	f022 0207 	bic.w	r2, r2, #7
  402e0a:	eb04 0e02 	add.w	lr, r4, r2
  402e0e:	f000 0001 	and.w	r0, r0, #1
  402e12:	f04f 0c05 	mov.w	ip, #5
  402e16:	4310      	orrs	r0, r2
  402e18:	2a0f      	cmp	r2, #15
  402e1a:	6060      	str	r0, [r4, #4]
  402e1c:	f8ce c004 	str.w	ip, [lr, #4]
  402e20:	f8ce c008 	str.w	ip, [lr, #8]
  402e24:	f200 8117 	bhi.w	403056 <_malloc_r+0x506>
  402e28:	4b1d      	ldr	r3, [pc, #116]	; (402ea0 <_malloc_r+0x350>)
  402e2a:	68bc      	ldr	r4, [r7, #8]
  402e2c:	681a      	ldr	r2, [r3, #0]
  402e2e:	4291      	cmp	r1, r2
  402e30:	bf88      	it	hi
  402e32:	6019      	strhi	r1, [r3, #0]
  402e34:	4b1b      	ldr	r3, [pc, #108]	; (402ea4 <_malloc_r+0x354>)
  402e36:	681a      	ldr	r2, [r3, #0]
  402e38:	4291      	cmp	r1, r2
  402e3a:	6862      	ldr	r2, [r4, #4]
  402e3c:	bf88      	it	hi
  402e3e:	6019      	strhi	r1, [r3, #0]
  402e40:	f022 0203 	bic.w	r2, r2, #3
  402e44:	4296      	cmp	r6, r2
  402e46:	eba2 0306 	sub.w	r3, r2, r6
  402e4a:	d801      	bhi.n	402e50 <_malloc_r+0x300>
  402e4c:	2b0f      	cmp	r3, #15
  402e4e:	dc04      	bgt.n	402e5a <_malloc_r+0x30a>
  402e50:	4628      	mov	r0, r5
  402e52:	f000 fa99 	bl	403388 <__malloc_unlock>
  402e56:	2400      	movs	r4, #0
  402e58:	e740      	b.n	402cdc <_malloc_r+0x18c>
  402e5a:	19a2      	adds	r2, r4, r6
  402e5c:	f043 0301 	orr.w	r3, r3, #1
  402e60:	f046 0601 	orr.w	r6, r6, #1
  402e64:	6066      	str	r6, [r4, #4]
  402e66:	4628      	mov	r0, r5
  402e68:	60ba      	str	r2, [r7, #8]
  402e6a:	6053      	str	r3, [r2, #4]
  402e6c:	f000 fa8c 	bl	403388 <__malloc_unlock>
  402e70:	3408      	adds	r4, #8
  402e72:	4620      	mov	r0, r4
  402e74:	b003      	add	sp, #12
  402e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402e7a:	2b14      	cmp	r3, #20
  402e7c:	d971      	bls.n	402f62 <_malloc_r+0x412>
  402e7e:	2b54      	cmp	r3, #84	; 0x54
  402e80:	f200 80a3 	bhi.w	402fca <_malloc_r+0x47a>
  402e84:	0b33      	lsrs	r3, r6, #12
  402e86:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  402e8a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  402e8e:	00c3      	lsls	r3, r0, #3
  402e90:	e680      	b.n	402b94 <_malloc_r+0x44>
  402e92:	bf00      	nop
  402e94:	200005b0 	.word	0x200005b0
  402e98:	20000a14 	.word	0x20000a14
  402e9c:	200009e4 	.word	0x200009e4
  402ea0:	20000a0c 	.word	0x20000a0c
  402ea4:	20000a10 	.word	0x20000a10
  402ea8:	200005b8 	.word	0x200005b8
  402eac:	200009b8 	.word	0x200009b8
  402eb0:	0a5a      	lsrs	r2, r3, #9
  402eb2:	2a04      	cmp	r2, #4
  402eb4:	d95b      	bls.n	402f6e <_malloc_r+0x41e>
  402eb6:	2a14      	cmp	r2, #20
  402eb8:	f200 80ae 	bhi.w	403018 <_malloc_r+0x4c8>
  402ebc:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  402ec0:	00c9      	lsls	r1, r1, #3
  402ec2:	325b      	adds	r2, #91	; 0x5b
  402ec4:	eb07 0c01 	add.w	ip, r7, r1
  402ec8:	5879      	ldr	r1, [r7, r1]
  402eca:	f1ac 0c08 	sub.w	ip, ip, #8
  402ece:	458c      	cmp	ip, r1
  402ed0:	f000 8088 	beq.w	402fe4 <_malloc_r+0x494>
  402ed4:	684a      	ldr	r2, [r1, #4]
  402ed6:	f022 0203 	bic.w	r2, r2, #3
  402eda:	4293      	cmp	r3, r2
  402edc:	d273      	bcs.n	402fc6 <_malloc_r+0x476>
  402ede:	6889      	ldr	r1, [r1, #8]
  402ee0:	458c      	cmp	ip, r1
  402ee2:	d1f7      	bne.n	402ed4 <_malloc_r+0x384>
  402ee4:	f8dc 200c 	ldr.w	r2, [ip, #12]
  402ee8:	687b      	ldr	r3, [r7, #4]
  402eea:	60e2      	str	r2, [r4, #12]
  402eec:	f8c4 c008 	str.w	ip, [r4, #8]
  402ef0:	6094      	str	r4, [r2, #8]
  402ef2:	f8cc 400c 	str.w	r4, [ip, #12]
  402ef6:	e68f      	b.n	402c18 <_malloc_r+0xc8>
  402ef8:	19a1      	adds	r1, r4, r6
  402efa:	f046 0c01 	orr.w	ip, r6, #1
  402efe:	f042 0601 	orr.w	r6, r2, #1
  402f02:	f8c4 c004 	str.w	ip, [r4, #4]
  402f06:	4628      	mov	r0, r5
  402f08:	6179      	str	r1, [r7, #20]
  402f0a:	6139      	str	r1, [r7, #16]
  402f0c:	f8c1 e00c 	str.w	lr, [r1, #12]
  402f10:	f8c1 e008 	str.w	lr, [r1, #8]
  402f14:	604e      	str	r6, [r1, #4]
  402f16:	50e2      	str	r2, [r4, r3]
  402f18:	f000 fa36 	bl	403388 <__malloc_unlock>
  402f1c:	3408      	adds	r4, #8
  402f1e:	e6dd      	b.n	402cdc <_malloc_r+0x18c>
  402f20:	687b      	ldr	r3, [r7, #4]
  402f22:	e679      	b.n	402c18 <_malloc_r+0xc8>
  402f24:	f108 0801 	add.w	r8, r8, #1
  402f28:	f018 0f03 	tst.w	r8, #3
  402f2c:	f10c 0c08 	add.w	ip, ip, #8
  402f30:	f47f ae85 	bne.w	402c3e <_malloc_r+0xee>
  402f34:	e02d      	b.n	402f92 <_malloc_r+0x442>
  402f36:	68dc      	ldr	r4, [r3, #12]
  402f38:	42a3      	cmp	r3, r4
  402f3a:	bf08      	it	eq
  402f3c:	3002      	addeq	r0, #2
  402f3e:	f43f ae3e 	beq.w	402bbe <_malloc_r+0x6e>
  402f42:	e6bb      	b.n	402cbc <_malloc_r+0x16c>
  402f44:	4419      	add	r1, r3
  402f46:	461c      	mov	r4, r3
  402f48:	684a      	ldr	r2, [r1, #4]
  402f4a:	68db      	ldr	r3, [r3, #12]
  402f4c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  402f50:	f042 0201 	orr.w	r2, r2, #1
  402f54:	604a      	str	r2, [r1, #4]
  402f56:	4628      	mov	r0, r5
  402f58:	60f3      	str	r3, [r6, #12]
  402f5a:	609e      	str	r6, [r3, #8]
  402f5c:	f000 fa14 	bl	403388 <__malloc_unlock>
  402f60:	e6bc      	b.n	402cdc <_malloc_r+0x18c>
  402f62:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  402f66:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  402f6a:	00c3      	lsls	r3, r0, #3
  402f6c:	e612      	b.n	402b94 <_malloc_r+0x44>
  402f6e:	099a      	lsrs	r2, r3, #6
  402f70:	f102 0139 	add.w	r1, r2, #57	; 0x39
  402f74:	00c9      	lsls	r1, r1, #3
  402f76:	3238      	adds	r2, #56	; 0x38
  402f78:	e7a4      	b.n	402ec4 <_malloc_r+0x374>
  402f7a:	42bc      	cmp	r4, r7
  402f7c:	d054      	beq.n	403028 <_malloc_r+0x4d8>
  402f7e:	68bc      	ldr	r4, [r7, #8]
  402f80:	6862      	ldr	r2, [r4, #4]
  402f82:	f022 0203 	bic.w	r2, r2, #3
  402f86:	e75d      	b.n	402e44 <_malloc_r+0x2f4>
  402f88:	f859 3908 	ldr.w	r3, [r9], #-8
  402f8c:	4599      	cmp	r9, r3
  402f8e:	f040 8086 	bne.w	40309e <_malloc_r+0x54e>
  402f92:	f010 0f03 	tst.w	r0, #3
  402f96:	f100 30ff 	add.w	r0, r0, #4294967295
  402f9a:	d1f5      	bne.n	402f88 <_malloc_r+0x438>
  402f9c:	687b      	ldr	r3, [r7, #4]
  402f9e:	ea23 0304 	bic.w	r3, r3, r4
  402fa2:	607b      	str	r3, [r7, #4]
  402fa4:	0064      	lsls	r4, r4, #1
  402fa6:	429c      	cmp	r4, r3
  402fa8:	f63f aec7 	bhi.w	402d3a <_malloc_r+0x1ea>
  402fac:	2c00      	cmp	r4, #0
  402fae:	f43f aec4 	beq.w	402d3a <_malloc_r+0x1ea>
  402fb2:	421c      	tst	r4, r3
  402fb4:	4640      	mov	r0, r8
  402fb6:	f47f ae3e 	bne.w	402c36 <_malloc_r+0xe6>
  402fba:	0064      	lsls	r4, r4, #1
  402fbc:	421c      	tst	r4, r3
  402fbe:	f100 0004 	add.w	r0, r0, #4
  402fc2:	d0fa      	beq.n	402fba <_malloc_r+0x46a>
  402fc4:	e637      	b.n	402c36 <_malloc_r+0xe6>
  402fc6:	468c      	mov	ip, r1
  402fc8:	e78c      	b.n	402ee4 <_malloc_r+0x394>
  402fca:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  402fce:	d815      	bhi.n	402ffc <_malloc_r+0x4ac>
  402fd0:	0bf3      	lsrs	r3, r6, #15
  402fd2:	f103 0078 	add.w	r0, r3, #120	; 0x78
  402fd6:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  402fda:	00c3      	lsls	r3, r0, #3
  402fdc:	e5da      	b.n	402b94 <_malloc_r+0x44>
  402fde:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  402fe2:	e6ed      	b.n	402dc0 <_malloc_r+0x270>
  402fe4:	687b      	ldr	r3, [r7, #4]
  402fe6:	1092      	asrs	r2, r2, #2
  402fe8:	2101      	movs	r1, #1
  402fea:	fa01 f202 	lsl.w	r2, r1, r2
  402fee:	4313      	orrs	r3, r2
  402ff0:	607b      	str	r3, [r7, #4]
  402ff2:	4662      	mov	r2, ip
  402ff4:	e779      	b.n	402eea <_malloc_r+0x39a>
  402ff6:	2301      	movs	r3, #1
  402ff8:	6053      	str	r3, [r2, #4]
  402ffa:	e729      	b.n	402e50 <_malloc_r+0x300>
  402ffc:	f240 5254 	movw	r2, #1364	; 0x554
  403000:	4293      	cmp	r3, r2
  403002:	d822      	bhi.n	40304a <_malloc_r+0x4fa>
  403004:	0cb3      	lsrs	r3, r6, #18
  403006:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40300a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40300e:	00c3      	lsls	r3, r0, #3
  403010:	e5c0      	b.n	402b94 <_malloc_r+0x44>
  403012:	f103 0b10 	add.w	fp, r3, #16
  403016:	e6ae      	b.n	402d76 <_malloc_r+0x226>
  403018:	2a54      	cmp	r2, #84	; 0x54
  40301a:	d829      	bhi.n	403070 <_malloc_r+0x520>
  40301c:	0b1a      	lsrs	r2, r3, #12
  40301e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403022:	00c9      	lsls	r1, r1, #3
  403024:	326e      	adds	r2, #110	; 0x6e
  403026:	e74d      	b.n	402ec4 <_malloc_r+0x374>
  403028:	4b20      	ldr	r3, [pc, #128]	; (4030ac <_malloc_r+0x55c>)
  40302a:	6819      	ldr	r1, [r3, #0]
  40302c:	4459      	add	r1, fp
  40302e:	6019      	str	r1, [r3, #0]
  403030:	e6b2      	b.n	402d98 <_malloc_r+0x248>
  403032:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403036:	2800      	cmp	r0, #0
  403038:	f47f aeae 	bne.w	402d98 <_malloc_r+0x248>
  40303c:	eb08 030b 	add.w	r3, r8, fp
  403040:	68ba      	ldr	r2, [r7, #8]
  403042:	f043 0301 	orr.w	r3, r3, #1
  403046:	6053      	str	r3, [r2, #4]
  403048:	e6ee      	b.n	402e28 <_malloc_r+0x2d8>
  40304a:	207f      	movs	r0, #127	; 0x7f
  40304c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403050:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403054:	e59e      	b.n	402b94 <_malloc_r+0x44>
  403056:	f104 0108 	add.w	r1, r4, #8
  40305a:	4628      	mov	r0, r5
  40305c:	9300      	str	r3, [sp, #0]
  40305e:	f7ff fa59 	bl	402514 <_free_r>
  403062:	9b00      	ldr	r3, [sp, #0]
  403064:	6819      	ldr	r1, [r3, #0]
  403066:	e6df      	b.n	402e28 <_malloc_r+0x2d8>
  403068:	2001      	movs	r0, #1
  40306a:	f04f 0900 	mov.w	r9, #0
  40306e:	e6bc      	b.n	402dea <_malloc_r+0x29a>
  403070:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403074:	d805      	bhi.n	403082 <_malloc_r+0x532>
  403076:	0bda      	lsrs	r2, r3, #15
  403078:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40307c:	00c9      	lsls	r1, r1, #3
  40307e:	3277      	adds	r2, #119	; 0x77
  403080:	e720      	b.n	402ec4 <_malloc_r+0x374>
  403082:	f240 5154 	movw	r1, #1364	; 0x554
  403086:	428a      	cmp	r2, r1
  403088:	d805      	bhi.n	403096 <_malloc_r+0x546>
  40308a:	0c9a      	lsrs	r2, r3, #18
  40308c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403090:	00c9      	lsls	r1, r1, #3
  403092:	327c      	adds	r2, #124	; 0x7c
  403094:	e716      	b.n	402ec4 <_malloc_r+0x374>
  403096:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40309a:	227e      	movs	r2, #126	; 0x7e
  40309c:	e712      	b.n	402ec4 <_malloc_r+0x374>
  40309e:	687b      	ldr	r3, [r7, #4]
  4030a0:	e780      	b.n	402fa4 <_malloc_r+0x454>
  4030a2:	08f0      	lsrs	r0, r6, #3
  4030a4:	f106 0308 	add.w	r3, r6, #8
  4030a8:	e600      	b.n	402cac <_malloc_r+0x15c>
  4030aa:	bf00      	nop
  4030ac:	200009e4 	.word	0x200009e4

004030b0 <__ascii_mbtowc>:
  4030b0:	b082      	sub	sp, #8
  4030b2:	b149      	cbz	r1, 4030c8 <__ascii_mbtowc+0x18>
  4030b4:	b15a      	cbz	r2, 4030ce <__ascii_mbtowc+0x1e>
  4030b6:	b16b      	cbz	r3, 4030d4 <__ascii_mbtowc+0x24>
  4030b8:	7813      	ldrb	r3, [r2, #0]
  4030ba:	600b      	str	r3, [r1, #0]
  4030bc:	7812      	ldrb	r2, [r2, #0]
  4030be:	1c10      	adds	r0, r2, #0
  4030c0:	bf18      	it	ne
  4030c2:	2001      	movne	r0, #1
  4030c4:	b002      	add	sp, #8
  4030c6:	4770      	bx	lr
  4030c8:	a901      	add	r1, sp, #4
  4030ca:	2a00      	cmp	r2, #0
  4030cc:	d1f3      	bne.n	4030b6 <__ascii_mbtowc+0x6>
  4030ce:	4610      	mov	r0, r2
  4030d0:	b002      	add	sp, #8
  4030d2:	4770      	bx	lr
  4030d4:	f06f 0001 	mvn.w	r0, #1
  4030d8:	e7f4      	b.n	4030c4 <__ascii_mbtowc+0x14>
  4030da:	bf00      	nop
  4030dc:	0000      	movs	r0, r0
	...

004030e0 <memchr>:
  4030e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4030e4:	2a10      	cmp	r2, #16
  4030e6:	db2b      	blt.n	403140 <memchr+0x60>
  4030e8:	f010 0f07 	tst.w	r0, #7
  4030ec:	d008      	beq.n	403100 <memchr+0x20>
  4030ee:	f810 3b01 	ldrb.w	r3, [r0], #1
  4030f2:	3a01      	subs	r2, #1
  4030f4:	428b      	cmp	r3, r1
  4030f6:	d02d      	beq.n	403154 <memchr+0x74>
  4030f8:	f010 0f07 	tst.w	r0, #7
  4030fc:	b342      	cbz	r2, 403150 <memchr+0x70>
  4030fe:	d1f6      	bne.n	4030ee <memchr+0xe>
  403100:	b4f0      	push	{r4, r5, r6, r7}
  403102:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  403106:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40310a:	f022 0407 	bic.w	r4, r2, #7
  40310e:	f07f 0700 	mvns.w	r7, #0
  403112:	2300      	movs	r3, #0
  403114:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  403118:	3c08      	subs	r4, #8
  40311a:	ea85 0501 	eor.w	r5, r5, r1
  40311e:	ea86 0601 	eor.w	r6, r6, r1
  403122:	fa85 f547 	uadd8	r5, r5, r7
  403126:	faa3 f587 	sel	r5, r3, r7
  40312a:	fa86 f647 	uadd8	r6, r6, r7
  40312e:	faa5 f687 	sel	r6, r5, r7
  403132:	b98e      	cbnz	r6, 403158 <memchr+0x78>
  403134:	d1ee      	bne.n	403114 <memchr+0x34>
  403136:	bcf0      	pop	{r4, r5, r6, r7}
  403138:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40313c:	f002 0207 	and.w	r2, r2, #7
  403140:	b132      	cbz	r2, 403150 <memchr+0x70>
  403142:	f810 3b01 	ldrb.w	r3, [r0], #1
  403146:	3a01      	subs	r2, #1
  403148:	ea83 0301 	eor.w	r3, r3, r1
  40314c:	b113      	cbz	r3, 403154 <memchr+0x74>
  40314e:	d1f8      	bne.n	403142 <memchr+0x62>
  403150:	2000      	movs	r0, #0
  403152:	4770      	bx	lr
  403154:	3801      	subs	r0, #1
  403156:	4770      	bx	lr
  403158:	2d00      	cmp	r5, #0
  40315a:	bf06      	itte	eq
  40315c:	4635      	moveq	r5, r6
  40315e:	3803      	subeq	r0, #3
  403160:	3807      	subne	r0, #7
  403162:	f015 0f01 	tst.w	r5, #1
  403166:	d107      	bne.n	403178 <memchr+0x98>
  403168:	3001      	adds	r0, #1
  40316a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40316e:	bf02      	ittt	eq
  403170:	3001      	addeq	r0, #1
  403172:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  403176:	3001      	addeq	r0, #1
  403178:	bcf0      	pop	{r4, r5, r6, r7}
  40317a:	3801      	subs	r0, #1
  40317c:	4770      	bx	lr
  40317e:	bf00      	nop

00403180 <memcpy>:
  403180:	4684      	mov	ip, r0
  403182:	ea41 0300 	orr.w	r3, r1, r0
  403186:	f013 0303 	ands.w	r3, r3, #3
  40318a:	d16d      	bne.n	403268 <memcpy+0xe8>
  40318c:	3a40      	subs	r2, #64	; 0x40
  40318e:	d341      	bcc.n	403214 <memcpy+0x94>
  403190:	f851 3b04 	ldr.w	r3, [r1], #4
  403194:	f840 3b04 	str.w	r3, [r0], #4
  403198:	f851 3b04 	ldr.w	r3, [r1], #4
  40319c:	f840 3b04 	str.w	r3, [r0], #4
  4031a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4031a4:	f840 3b04 	str.w	r3, [r0], #4
  4031a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4031ac:	f840 3b04 	str.w	r3, [r0], #4
  4031b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4031b4:	f840 3b04 	str.w	r3, [r0], #4
  4031b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4031bc:	f840 3b04 	str.w	r3, [r0], #4
  4031c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4031c4:	f840 3b04 	str.w	r3, [r0], #4
  4031c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4031cc:	f840 3b04 	str.w	r3, [r0], #4
  4031d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4031d4:	f840 3b04 	str.w	r3, [r0], #4
  4031d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4031dc:	f840 3b04 	str.w	r3, [r0], #4
  4031e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4031e4:	f840 3b04 	str.w	r3, [r0], #4
  4031e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4031ec:	f840 3b04 	str.w	r3, [r0], #4
  4031f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4031f4:	f840 3b04 	str.w	r3, [r0], #4
  4031f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4031fc:	f840 3b04 	str.w	r3, [r0], #4
  403200:	f851 3b04 	ldr.w	r3, [r1], #4
  403204:	f840 3b04 	str.w	r3, [r0], #4
  403208:	f851 3b04 	ldr.w	r3, [r1], #4
  40320c:	f840 3b04 	str.w	r3, [r0], #4
  403210:	3a40      	subs	r2, #64	; 0x40
  403212:	d2bd      	bcs.n	403190 <memcpy+0x10>
  403214:	3230      	adds	r2, #48	; 0x30
  403216:	d311      	bcc.n	40323c <memcpy+0xbc>
  403218:	f851 3b04 	ldr.w	r3, [r1], #4
  40321c:	f840 3b04 	str.w	r3, [r0], #4
  403220:	f851 3b04 	ldr.w	r3, [r1], #4
  403224:	f840 3b04 	str.w	r3, [r0], #4
  403228:	f851 3b04 	ldr.w	r3, [r1], #4
  40322c:	f840 3b04 	str.w	r3, [r0], #4
  403230:	f851 3b04 	ldr.w	r3, [r1], #4
  403234:	f840 3b04 	str.w	r3, [r0], #4
  403238:	3a10      	subs	r2, #16
  40323a:	d2ed      	bcs.n	403218 <memcpy+0x98>
  40323c:	320c      	adds	r2, #12
  40323e:	d305      	bcc.n	40324c <memcpy+0xcc>
  403240:	f851 3b04 	ldr.w	r3, [r1], #4
  403244:	f840 3b04 	str.w	r3, [r0], #4
  403248:	3a04      	subs	r2, #4
  40324a:	d2f9      	bcs.n	403240 <memcpy+0xc0>
  40324c:	3204      	adds	r2, #4
  40324e:	d008      	beq.n	403262 <memcpy+0xe2>
  403250:	07d2      	lsls	r2, r2, #31
  403252:	bf1c      	itt	ne
  403254:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403258:	f800 3b01 	strbne.w	r3, [r0], #1
  40325c:	d301      	bcc.n	403262 <memcpy+0xe2>
  40325e:	880b      	ldrh	r3, [r1, #0]
  403260:	8003      	strh	r3, [r0, #0]
  403262:	4660      	mov	r0, ip
  403264:	4770      	bx	lr
  403266:	bf00      	nop
  403268:	2a08      	cmp	r2, #8
  40326a:	d313      	bcc.n	403294 <memcpy+0x114>
  40326c:	078b      	lsls	r3, r1, #30
  40326e:	d08d      	beq.n	40318c <memcpy+0xc>
  403270:	f010 0303 	ands.w	r3, r0, #3
  403274:	d08a      	beq.n	40318c <memcpy+0xc>
  403276:	f1c3 0304 	rsb	r3, r3, #4
  40327a:	1ad2      	subs	r2, r2, r3
  40327c:	07db      	lsls	r3, r3, #31
  40327e:	bf1c      	itt	ne
  403280:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403284:	f800 3b01 	strbne.w	r3, [r0], #1
  403288:	d380      	bcc.n	40318c <memcpy+0xc>
  40328a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40328e:	f820 3b02 	strh.w	r3, [r0], #2
  403292:	e77b      	b.n	40318c <memcpy+0xc>
  403294:	3a04      	subs	r2, #4
  403296:	d3d9      	bcc.n	40324c <memcpy+0xcc>
  403298:	3a01      	subs	r2, #1
  40329a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40329e:	f800 3b01 	strb.w	r3, [r0], #1
  4032a2:	d2f9      	bcs.n	403298 <memcpy+0x118>
  4032a4:	780b      	ldrb	r3, [r1, #0]
  4032a6:	7003      	strb	r3, [r0, #0]
  4032a8:	784b      	ldrb	r3, [r1, #1]
  4032aa:	7043      	strb	r3, [r0, #1]
  4032ac:	788b      	ldrb	r3, [r1, #2]
  4032ae:	7083      	strb	r3, [r0, #2]
  4032b0:	4660      	mov	r0, ip
  4032b2:	4770      	bx	lr

004032b4 <memmove>:
  4032b4:	4288      	cmp	r0, r1
  4032b6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4032b8:	d90d      	bls.n	4032d6 <memmove+0x22>
  4032ba:	188b      	adds	r3, r1, r2
  4032bc:	4298      	cmp	r0, r3
  4032be:	d20a      	bcs.n	4032d6 <memmove+0x22>
  4032c0:	1884      	adds	r4, r0, r2
  4032c2:	2a00      	cmp	r2, #0
  4032c4:	d051      	beq.n	40336a <memmove+0xb6>
  4032c6:	4622      	mov	r2, r4
  4032c8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4032cc:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4032d0:	4299      	cmp	r1, r3
  4032d2:	d1f9      	bne.n	4032c8 <memmove+0x14>
  4032d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4032d6:	2a0f      	cmp	r2, #15
  4032d8:	d948      	bls.n	40336c <memmove+0xb8>
  4032da:	ea41 0300 	orr.w	r3, r1, r0
  4032de:	079b      	lsls	r3, r3, #30
  4032e0:	d146      	bne.n	403370 <memmove+0xbc>
  4032e2:	f100 0410 	add.w	r4, r0, #16
  4032e6:	f101 0310 	add.w	r3, r1, #16
  4032ea:	4615      	mov	r5, r2
  4032ec:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4032f0:	f844 6c10 	str.w	r6, [r4, #-16]
  4032f4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4032f8:	f844 6c0c 	str.w	r6, [r4, #-12]
  4032fc:	f853 6c08 	ldr.w	r6, [r3, #-8]
  403300:	f844 6c08 	str.w	r6, [r4, #-8]
  403304:	3d10      	subs	r5, #16
  403306:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40330a:	f844 6c04 	str.w	r6, [r4, #-4]
  40330e:	2d0f      	cmp	r5, #15
  403310:	f103 0310 	add.w	r3, r3, #16
  403314:	f104 0410 	add.w	r4, r4, #16
  403318:	d8e8      	bhi.n	4032ec <memmove+0x38>
  40331a:	f1a2 0310 	sub.w	r3, r2, #16
  40331e:	f023 030f 	bic.w	r3, r3, #15
  403322:	f002 0e0f 	and.w	lr, r2, #15
  403326:	3310      	adds	r3, #16
  403328:	f1be 0f03 	cmp.w	lr, #3
  40332c:	4419      	add	r1, r3
  40332e:	4403      	add	r3, r0
  403330:	d921      	bls.n	403376 <memmove+0xc2>
  403332:	1f1e      	subs	r6, r3, #4
  403334:	460d      	mov	r5, r1
  403336:	4674      	mov	r4, lr
  403338:	3c04      	subs	r4, #4
  40333a:	f855 7b04 	ldr.w	r7, [r5], #4
  40333e:	f846 7f04 	str.w	r7, [r6, #4]!
  403342:	2c03      	cmp	r4, #3
  403344:	d8f8      	bhi.n	403338 <memmove+0x84>
  403346:	f1ae 0404 	sub.w	r4, lr, #4
  40334a:	f024 0403 	bic.w	r4, r4, #3
  40334e:	3404      	adds	r4, #4
  403350:	4421      	add	r1, r4
  403352:	4423      	add	r3, r4
  403354:	f002 0203 	and.w	r2, r2, #3
  403358:	b162      	cbz	r2, 403374 <memmove+0xc0>
  40335a:	3b01      	subs	r3, #1
  40335c:	440a      	add	r2, r1
  40335e:	f811 4b01 	ldrb.w	r4, [r1], #1
  403362:	f803 4f01 	strb.w	r4, [r3, #1]!
  403366:	428a      	cmp	r2, r1
  403368:	d1f9      	bne.n	40335e <memmove+0xaa>
  40336a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40336c:	4603      	mov	r3, r0
  40336e:	e7f3      	b.n	403358 <memmove+0xa4>
  403370:	4603      	mov	r3, r0
  403372:	e7f2      	b.n	40335a <memmove+0xa6>
  403374:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403376:	4672      	mov	r2, lr
  403378:	e7ee      	b.n	403358 <memmove+0xa4>
  40337a:	bf00      	nop

0040337c <__malloc_lock>:
  40337c:	4801      	ldr	r0, [pc, #4]	; (403384 <__malloc_lock+0x8>)
  40337e:	f7ff bb63 	b.w	402a48 <__retarget_lock_acquire_recursive>
  403382:	bf00      	nop
  403384:	20000af4 	.word	0x20000af4

00403388 <__malloc_unlock>:
  403388:	4801      	ldr	r0, [pc, #4]	; (403390 <__malloc_unlock+0x8>)
  40338a:	f7ff bb5f 	b.w	402a4c <__retarget_lock_release_recursive>
  40338e:	bf00      	nop
  403390:	20000af4 	.word	0x20000af4

00403394 <_realloc_r>:
  403394:	2900      	cmp	r1, #0
  403396:	f000 8095 	beq.w	4034c4 <_realloc_r+0x130>
  40339a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40339e:	460d      	mov	r5, r1
  4033a0:	4616      	mov	r6, r2
  4033a2:	b083      	sub	sp, #12
  4033a4:	4680      	mov	r8, r0
  4033a6:	f106 070b 	add.w	r7, r6, #11
  4033aa:	f7ff ffe7 	bl	40337c <__malloc_lock>
  4033ae:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4033b2:	2f16      	cmp	r7, #22
  4033b4:	f02e 0403 	bic.w	r4, lr, #3
  4033b8:	f1a5 0908 	sub.w	r9, r5, #8
  4033bc:	d83c      	bhi.n	403438 <_realloc_r+0xa4>
  4033be:	2210      	movs	r2, #16
  4033c0:	4617      	mov	r7, r2
  4033c2:	42be      	cmp	r6, r7
  4033c4:	d83d      	bhi.n	403442 <_realloc_r+0xae>
  4033c6:	4294      	cmp	r4, r2
  4033c8:	da43      	bge.n	403452 <_realloc_r+0xbe>
  4033ca:	4bc4      	ldr	r3, [pc, #784]	; (4036dc <_realloc_r+0x348>)
  4033cc:	6899      	ldr	r1, [r3, #8]
  4033ce:	eb09 0004 	add.w	r0, r9, r4
  4033d2:	4288      	cmp	r0, r1
  4033d4:	f000 80b4 	beq.w	403540 <_realloc_r+0x1ac>
  4033d8:	6843      	ldr	r3, [r0, #4]
  4033da:	f023 0101 	bic.w	r1, r3, #1
  4033de:	4401      	add	r1, r0
  4033e0:	6849      	ldr	r1, [r1, #4]
  4033e2:	07c9      	lsls	r1, r1, #31
  4033e4:	d54c      	bpl.n	403480 <_realloc_r+0xec>
  4033e6:	f01e 0f01 	tst.w	lr, #1
  4033ea:	f000 809b 	beq.w	403524 <_realloc_r+0x190>
  4033ee:	4631      	mov	r1, r6
  4033f0:	4640      	mov	r0, r8
  4033f2:	f7ff fbad 	bl	402b50 <_malloc_r>
  4033f6:	4606      	mov	r6, r0
  4033f8:	2800      	cmp	r0, #0
  4033fa:	d03a      	beq.n	403472 <_realloc_r+0xde>
  4033fc:	f855 3c04 	ldr.w	r3, [r5, #-4]
  403400:	f023 0301 	bic.w	r3, r3, #1
  403404:	444b      	add	r3, r9
  403406:	f1a0 0208 	sub.w	r2, r0, #8
  40340a:	429a      	cmp	r2, r3
  40340c:	f000 8121 	beq.w	403652 <_realloc_r+0x2be>
  403410:	1f22      	subs	r2, r4, #4
  403412:	2a24      	cmp	r2, #36	; 0x24
  403414:	f200 8107 	bhi.w	403626 <_realloc_r+0x292>
  403418:	2a13      	cmp	r2, #19
  40341a:	f200 80db 	bhi.w	4035d4 <_realloc_r+0x240>
  40341e:	4603      	mov	r3, r0
  403420:	462a      	mov	r2, r5
  403422:	6811      	ldr	r1, [r2, #0]
  403424:	6019      	str	r1, [r3, #0]
  403426:	6851      	ldr	r1, [r2, #4]
  403428:	6059      	str	r1, [r3, #4]
  40342a:	6892      	ldr	r2, [r2, #8]
  40342c:	609a      	str	r2, [r3, #8]
  40342e:	4629      	mov	r1, r5
  403430:	4640      	mov	r0, r8
  403432:	f7ff f86f 	bl	402514 <_free_r>
  403436:	e01c      	b.n	403472 <_realloc_r+0xde>
  403438:	f027 0707 	bic.w	r7, r7, #7
  40343c:	2f00      	cmp	r7, #0
  40343e:	463a      	mov	r2, r7
  403440:	dabf      	bge.n	4033c2 <_realloc_r+0x2e>
  403442:	2600      	movs	r6, #0
  403444:	230c      	movs	r3, #12
  403446:	4630      	mov	r0, r6
  403448:	f8c8 3000 	str.w	r3, [r8]
  40344c:	b003      	add	sp, #12
  40344e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403452:	462e      	mov	r6, r5
  403454:	1be3      	subs	r3, r4, r7
  403456:	2b0f      	cmp	r3, #15
  403458:	d81e      	bhi.n	403498 <_realloc_r+0x104>
  40345a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40345e:	f003 0301 	and.w	r3, r3, #1
  403462:	4323      	orrs	r3, r4
  403464:	444c      	add	r4, r9
  403466:	f8c9 3004 	str.w	r3, [r9, #4]
  40346a:	6863      	ldr	r3, [r4, #4]
  40346c:	f043 0301 	orr.w	r3, r3, #1
  403470:	6063      	str	r3, [r4, #4]
  403472:	4640      	mov	r0, r8
  403474:	f7ff ff88 	bl	403388 <__malloc_unlock>
  403478:	4630      	mov	r0, r6
  40347a:	b003      	add	sp, #12
  40347c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403480:	f023 0303 	bic.w	r3, r3, #3
  403484:	18e1      	adds	r1, r4, r3
  403486:	4291      	cmp	r1, r2
  403488:	db1f      	blt.n	4034ca <_realloc_r+0x136>
  40348a:	68c3      	ldr	r3, [r0, #12]
  40348c:	6882      	ldr	r2, [r0, #8]
  40348e:	462e      	mov	r6, r5
  403490:	60d3      	str	r3, [r2, #12]
  403492:	460c      	mov	r4, r1
  403494:	609a      	str	r2, [r3, #8]
  403496:	e7dd      	b.n	403454 <_realloc_r+0xc0>
  403498:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40349c:	eb09 0107 	add.w	r1, r9, r7
  4034a0:	f002 0201 	and.w	r2, r2, #1
  4034a4:	444c      	add	r4, r9
  4034a6:	f043 0301 	orr.w	r3, r3, #1
  4034aa:	4317      	orrs	r7, r2
  4034ac:	f8c9 7004 	str.w	r7, [r9, #4]
  4034b0:	604b      	str	r3, [r1, #4]
  4034b2:	6863      	ldr	r3, [r4, #4]
  4034b4:	f043 0301 	orr.w	r3, r3, #1
  4034b8:	3108      	adds	r1, #8
  4034ba:	6063      	str	r3, [r4, #4]
  4034bc:	4640      	mov	r0, r8
  4034be:	f7ff f829 	bl	402514 <_free_r>
  4034c2:	e7d6      	b.n	403472 <_realloc_r+0xde>
  4034c4:	4611      	mov	r1, r2
  4034c6:	f7ff bb43 	b.w	402b50 <_malloc_r>
  4034ca:	f01e 0f01 	tst.w	lr, #1
  4034ce:	d18e      	bne.n	4033ee <_realloc_r+0x5a>
  4034d0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4034d4:	eba9 0a01 	sub.w	sl, r9, r1
  4034d8:	f8da 1004 	ldr.w	r1, [sl, #4]
  4034dc:	f021 0103 	bic.w	r1, r1, #3
  4034e0:	440b      	add	r3, r1
  4034e2:	4423      	add	r3, r4
  4034e4:	4293      	cmp	r3, r2
  4034e6:	db25      	blt.n	403534 <_realloc_r+0x1a0>
  4034e8:	68c2      	ldr	r2, [r0, #12]
  4034ea:	6881      	ldr	r1, [r0, #8]
  4034ec:	4656      	mov	r6, sl
  4034ee:	60ca      	str	r2, [r1, #12]
  4034f0:	6091      	str	r1, [r2, #8]
  4034f2:	f8da 100c 	ldr.w	r1, [sl, #12]
  4034f6:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4034fa:	1f22      	subs	r2, r4, #4
  4034fc:	2a24      	cmp	r2, #36	; 0x24
  4034fe:	60c1      	str	r1, [r0, #12]
  403500:	6088      	str	r0, [r1, #8]
  403502:	f200 8094 	bhi.w	40362e <_realloc_r+0x29a>
  403506:	2a13      	cmp	r2, #19
  403508:	d96f      	bls.n	4035ea <_realloc_r+0x256>
  40350a:	6829      	ldr	r1, [r5, #0]
  40350c:	f8ca 1008 	str.w	r1, [sl, #8]
  403510:	6869      	ldr	r1, [r5, #4]
  403512:	f8ca 100c 	str.w	r1, [sl, #12]
  403516:	2a1b      	cmp	r2, #27
  403518:	f200 80a2 	bhi.w	403660 <_realloc_r+0x2cc>
  40351c:	3508      	adds	r5, #8
  40351e:	f10a 0210 	add.w	r2, sl, #16
  403522:	e063      	b.n	4035ec <_realloc_r+0x258>
  403524:	f855 3c08 	ldr.w	r3, [r5, #-8]
  403528:	eba9 0a03 	sub.w	sl, r9, r3
  40352c:	f8da 1004 	ldr.w	r1, [sl, #4]
  403530:	f021 0103 	bic.w	r1, r1, #3
  403534:	1863      	adds	r3, r4, r1
  403536:	4293      	cmp	r3, r2
  403538:	f6ff af59 	blt.w	4033ee <_realloc_r+0x5a>
  40353c:	4656      	mov	r6, sl
  40353e:	e7d8      	b.n	4034f2 <_realloc_r+0x15e>
  403540:	6841      	ldr	r1, [r0, #4]
  403542:	f021 0b03 	bic.w	fp, r1, #3
  403546:	44a3      	add	fp, r4
  403548:	f107 0010 	add.w	r0, r7, #16
  40354c:	4583      	cmp	fp, r0
  40354e:	da56      	bge.n	4035fe <_realloc_r+0x26a>
  403550:	f01e 0f01 	tst.w	lr, #1
  403554:	f47f af4b 	bne.w	4033ee <_realloc_r+0x5a>
  403558:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40355c:	eba9 0a01 	sub.w	sl, r9, r1
  403560:	f8da 1004 	ldr.w	r1, [sl, #4]
  403564:	f021 0103 	bic.w	r1, r1, #3
  403568:	448b      	add	fp, r1
  40356a:	4558      	cmp	r0, fp
  40356c:	dce2      	bgt.n	403534 <_realloc_r+0x1a0>
  40356e:	4656      	mov	r6, sl
  403570:	f8da 100c 	ldr.w	r1, [sl, #12]
  403574:	f856 0f08 	ldr.w	r0, [r6, #8]!
  403578:	1f22      	subs	r2, r4, #4
  40357a:	2a24      	cmp	r2, #36	; 0x24
  40357c:	60c1      	str	r1, [r0, #12]
  40357e:	6088      	str	r0, [r1, #8]
  403580:	f200 808f 	bhi.w	4036a2 <_realloc_r+0x30e>
  403584:	2a13      	cmp	r2, #19
  403586:	f240 808a 	bls.w	40369e <_realloc_r+0x30a>
  40358a:	6829      	ldr	r1, [r5, #0]
  40358c:	f8ca 1008 	str.w	r1, [sl, #8]
  403590:	6869      	ldr	r1, [r5, #4]
  403592:	f8ca 100c 	str.w	r1, [sl, #12]
  403596:	2a1b      	cmp	r2, #27
  403598:	f200 808a 	bhi.w	4036b0 <_realloc_r+0x31c>
  40359c:	3508      	adds	r5, #8
  40359e:	f10a 0210 	add.w	r2, sl, #16
  4035a2:	6829      	ldr	r1, [r5, #0]
  4035a4:	6011      	str	r1, [r2, #0]
  4035a6:	6869      	ldr	r1, [r5, #4]
  4035a8:	6051      	str	r1, [r2, #4]
  4035aa:	68a9      	ldr	r1, [r5, #8]
  4035ac:	6091      	str	r1, [r2, #8]
  4035ae:	eb0a 0107 	add.w	r1, sl, r7
  4035b2:	ebab 0207 	sub.w	r2, fp, r7
  4035b6:	f042 0201 	orr.w	r2, r2, #1
  4035ba:	6099      	str	r1, [r3, #8]
  4035bc:	604a      	str	r2, [r1, #4]
  4035be:	f8da 3004 	ldr.w	r3, [sl, #4]
  4035c2:	f003 0301 	and.w	r3, r3, #1
  4035c6:	431f      	orrs	r7, r3
  4035c8:	4640      	mov	r0, r8
  4035ca:	f8ca 7004 	str.w	r7, [sl, #4]
  4035ce:	f7ff fedb 	bl	403388 <__malloc_unlock>
  4035d2:	e751      	b.n	403478 <_realloc_r+0xe4>
  4035d4:	682b      	ldr	r3, [r5, #0]
  4035d6:	6003      	str	r3, [r0, #0]
  4035d8:	686b      	ldr	r3, [r5, #4]
  4035da:	6043      	str	r3, [r0, #4]
  4035dc:	2a1b      	cmp	r2, #27
  4035de:	d82d      	bhi.n	40363c <_realloc_r+0x2a8>
  4035e0:	f100 0308 	add.w	r3, r0, #8
  4035e4:	f105 0208 	add.w	r2, r5, #8
  4035e8:	e71b      	b.n	403422 <_realloc_r+0x8e>
  4035ea:	4632      	mov	r2, r6
  4035ec:	6829      	ldr	r1, [r5, #0]
  4035ee:	6011      	str	r1, [r2, #0]
  4035f0:	6869      	ldr	r1, [r5, #4]
  4035f2:	6051      	str	r1, [r2, #4]
  4035f4:	68a9      	ldr	r1, [r5, #8]
  4035f6:	6091      	str	r1, [r2, #8]
  4035f8:	461c      	mov	r4, r3
  4035fa:	46d1      	mov	r9, sl
  4035fc:	e72a      	b.n	403454 <_realloc_r+0xc0>
  4035fe:	eb09 0107 	add.w	r1, r9, r7
  403602:	ebab 0b07 	sub.w	fp, fp, r7
  403606:	f04b 0201 	orr.w	r2, fp, #1
  40360a:	6099      	str	r1, [r3, #8]
  40360c:	604a      	str	r2, [r1, #4]
  40360e:	f855 3c04 	ldr.w	r3, [r5, #-4]
  403612:	f003 0301 	and.w	r3, r3, #1
  403616:	431f      	orrs	r7, r3
  403618:	4640      	mov	r0, r8
  40361a:	f845 7c04 	str.w	r7, [r5, #-4]
  40361e:	f7ff feb3 	bl	403388 <__malloc_unlock>
  403622:	462e      	mov	r6, r5
  403624:	e728      	b.n	403478 <_realloc_r+0xe4>
  403626:	4629      	mov	r1, r5
  403628:	f7ff fe44 	bl	4032b4 <memmove>
  40362c:	e6ff      	b.n	40342e <_realloc_r+0x9a>
  40362e:	4629      	mov	r1, r5
  403630:	4630      	mov	r0, r6
  403632:	461c      	mov	r4, r3
  403634:	46d1      	mov	r9, sl
  403636:	f7ff fe3d 	bl	4032b4 <memmove>
  40363a:	e70b      	b.n	403454 <_realloc_r+0xc0>
  40363c:	68ab      	ldr	r3, [r5, #8]
  40363e:	6083      	str	r3, [r0, #8]
  403640:	68eb      	ldr	r3, [r5, #12]
  403642:	60c3      	str	r3, [r0, #12]
  403644:	2a24      	cmp	r2, #36	; 0x24
  403646:	d017      	beq.n	403678 <_realloc_r+0x2e4>
  403648:	f100 0310 	add.w	r3, r0, #16
  40364c:	f105 0210 	add.w	r2, r5, #16
  403650:	e6e7      	b.n	403422 <_realloc_r+0x8e>
  403652:	f850 3c04 	ldr.w	r3, [r0, #-4]
  403656:	f023 0303 	bic.w	r3, r3, #3
  40365a:	441c      	add	r4, r3
  40365c:	462e      	mov	r6, r5
  40365e:	e6f9      	b.n	403454 <_realloc_r+0xc0>
  403660:	68a9      	ldr	r1, [r5, #8]
  403662:	f8ca 1010 	str.w	r1, [sl, #16]
  403666:	68e9      	ldr	r1, [r5, #12]
  403668:	f8ca 1014 	str.w	r1, [sl, #20]
  40366c:	2a24      	cmp	r2, #36	; 0x24
  40366e:	d00c      	beq.n	40368a <_realloc_r+0x2f6>
  403670:	3510      	adds	r5, #16
  403672:	f10a 0218 	add.w	r2, sl, #24
  403676:	e7b9      	b.n	4035ec <_realloc_r+0x258>
  403678:	692b      	ldr	r3, [r5, #16]
  40367a:	6103      	str	r3, [r0, #16]
  40367c:	696b      	ldr	r3, [r5, #20]
  40367e:	6143      	str	r3, [r0, #20]
  403680:	f105 0218 	add.w	r2, r5, #24
  403684:	f100 0318 	add.w	r3, r0, #24
  403688:	e6cb      	b.n	403422 <_realloc_r+0x8e>
  40368a:	692a      	ldr	r2, [r5, #16]
  40368c:	f8ca 2018 	str.w	r2, [sl, #24]
  403690:	696a      	ldr	r2, [r5, #20]
  403692:	f8ca 201c 	str.w	r2, [sl, #28]
  403696:	3518      	adds	r5, #24
  403698:	f10a 0220 	add.w	r2, sl, #32
  40369c:	e7a6      	b.n	4035ec <_realloc_r+0x258>
  40369e:	4632      	mov	r2, r6
  4036a0:	e77f      	b.n	4035a2 <_realloc_r+0x20e>
  4036a2:	4629      	mov	r1, r5
  4036a4:	4630      	mov	r0, r6
  4036a6:	9301      	str	r3, [sp, #4]
  4036a8:	f7ff fe04 	bl	4032b4 <memmove>
  4036ac:	9b01      	ldr	r3, [sp, #4]
  4036ae:	e77e      	b.n	4035ae <_realloc_r+0x21a>
  4036b0:	68a9      	ldr	r1, [r5, #8]
  4036b2:	f8ca 1010 	str.w	r1, [sl, #16]
  4036b6:	68e9      	ldr	r1, [r5, #12]
  4036b8:	f8ca 1014 	str.w	r1, [sl, #20]
  4036bc:	2a24      	cmp	r2, #36	; 0x24
  4036be:	d003      	beq.n	4036c8 <_realloc_r+0x334>
  4036c0:	3510      	adds	r5, #16
  4036c2:	f10a 0218 	add.w	r2, sl, #24
  4036c6:	e76c      	b.n	4035a2 <_realloc_r+0x20e>
  4036c8:	692a      	ldr	r2, [r5, #16]
  4036ca:	f8ca 2018 	str.w	r2, [sl, #24]
  4036ce:	696a      	ldr	r2, [r5, #20]
  4036d0:	f8ca 201c 	str.w	r2, [sl, #28]
  4036d4:	3518      	adds	r5, #24
  4036d6:	f10a 0220 	add.w	r2, sl, #32
  4036da:	e762      	b.n	4035a2 <_realloc_r+0x20e>
  4036dc:	200005b0 	.word	0x200005b0

004036e0 <_sbrk_r>:
  4036e0:	b538      	push	{r3, r4, r5, lr}
  4036e2:	4c07      	ldr	r4, [pc, #28]	; (403700 <_sbrk_r+0x20>)
  4036e4:	2300      	movs	r3, #0
  4036e6:	4605      	mov	r5, r0
  4036e8:	4608      	mov	r0, r1
  4036ea:	6023      	str	r3, [r4, #0]
  4036ec:	f7fd fb6c 	bl	400dc8 <_sbrk>
  4036f0:	1c43      	adds	r3, r0, #1
  4036f2:	d000      	beq.n	4036f6 <_sbrk_r+0x16>
  4036f4:	bd38      	pop	{r3, r4, r5, pc}
  4036f6:	6823      	ldr	r3, [r4, #0]
  4036f8:	2b00      	cmp	r3, #0
  4036fa:	d0fb      	beq.n	4036f4 <_sbrk_r+0x14>
  4036fc:	602b      	str	r3, [r5, #0]
  4036fe:	bd38      	pop	{r3, r4, r5, pc}
  403700:	20000b08 	.word	0x20000b08

00403704 <__sread>:
  403704:	b510      	push	{r4, lr}
  403706:	460c      	mov	r4, r1
  403708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40370c:	f000 f9f6 	bl	403afc <_read_r>
  403710:	2800      	cmp	r0, #0
  403712:	db03      	blt.n	40371c <__sread+0x18>
  403714:	6d23      	ldr	r3, [r4, #80]	; 0x50
  403716:	4403      	add	r3, r0
  403718:	6523      	str	r3, [r4, #80]	; 0x50
  40371a:	bd10      	pop	{r4, pc}
  40371c:	89a3      	ldrh	r3, [r4, #12]
  40371e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  403722:	81a3      	strh	r3, [r4, #12]
  403724:	bd10      	pop	{r4, pc}
  403726:	bf00      	nop

00403728 <__swrite>:
  403728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40372c:	4616      	mov	r6, r2
  40372e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  403732:	461f      	mov	r7, r3
  403734:	05d3      	lsls	r3, r2, #23
  403736:	460c      	mov	r4, r1
  403738:	4605      	mov	r5, r0
  40373a:	d507      	bpl.n	40374c <__swrite+0x24>
  40373c:	2200      	movs	r2, #0
  40373e:	2302      	movs	r3, #2
  403740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403744:	f000 f9c4 	bl	403ad0 <_lseek_r>
  403748:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40374c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403750:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  403754:	81a2      	strh	r2, [r4, #12]
  403756:	463b      	mov	r3, r7
  403758:	4632      	mov	r2, r6
  40375a:	4628      	mov	r0, r5
  40375c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403760:	f000 b8a4 	b.w	4038ac <_write_r>

00403764 <__sseek>:
  403764:	b510      	push	{r4, lr}
  403766:	460c      	mov	r4, r1
  403768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40376c:	f000 f9b0 	bl	403ad0 <_lseek_r>
  403770:	89a3      	ldrh	r3, [r4, #12]
  403772:	1c42      	adds	r2, r0, #1
  403774:	bf0e      	itee	eq
  403776:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40377a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40377e:	6520      	strne	r0, [r4, #80]	; 0x50
  403780:	81a3      	strh	r3, [r4, #12]
  403782:	bd10      	pop	{r4, pc}

00403784 <__sclose>:
  403784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403788:	f000 b908 	b.w	40399c <_close_r>

0040378c <__swbuf_r>:
  40378c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40378e:	460d      	mov	r5, r1
  403790:	4614      	mov	r4, r2
  403792:	4606      	mov	r6, r0
  403794:	b110      	cbz	r0, 40379c <__swbuf_r+0x10>
  403796:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403798:	2b00      	cmp	r3, #0
  40379a:	d04b      	beq.n	403834 <__swbuf_r+0xa8>
  40379c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4037a0:	69a3      	ldr	r3, [r4, #24]
  4037a2:	60a3      	str	r3, [r4, #8]
  4037a4:	b291      	uxth	r1, r2
  4037a6:	0708      	lsls	r0, r1, #28
  4037a8:	d539      	bpl.n	40381e <__swbuf_r+0x92>
  4037aa:	6923      	ldr	r3, [r4, #16]
  4037ac:	2b00      	cmp	r3, #0
  4037ae:	d036      	beq.n	40381e <__swbuf_r+0x92>
  4037b0:	b2ed      	uxtb	r5, r5
  4037b2:	0489      	lsls	r1, r1, #18
  4037b4:	462f      	mov	r7, r5
  4037b6:	d515      	bpl.n	4037e4 <__swbuf_r+0x58>
  4037b8:	6822      	ldr	r2, [r4, #0]
  4037ba:	6961      	ldr	r1, [r4, #20]
  4037bc:	1ad3      	subs	r3, r2, r3
  4037be:	428b      	cmp	r3, r1
  4037c0:	da1c      	bge.n	4037fc <__swbuf_r+0x70>
  4037c2:	3301      	adds	r3, #1
  4037c4:	68a1      	ldr	r1, [r4, #8]
  4037c6:	1c50      	adds	r0, r2, #1
  4037c8:	3901      	subs	r1, #1
  4037ca:	60a1      	str	r1, [r4, #8]
  4037cc:	6020      	str	r0, [r4, #0]
  4037ce:	7015      	strb	r5, [r2, #0]
  4037d0:	6962      	ldr	r2, [r4, #20]
  4037d2:	429a      	cmp	r2, r3
  4037d4:	d01a      	beq.n	40380c <__swbuf_r+0x80>
  4037d6:	89a3      	ldrh	r3, [r4, #12]
  4037d8:	07db      	lsls	r3, r3, #31
  4037da:	d501      	bpl.n	4037e0 <__swbuf_r+0x54>
  4037dc:	2d0a      	cmp	r5, #10
  4037de:	d015      	beq.n	40380c <__swbuf_r+0x80>
  4037e0:	4638      	mov	r0, r7
  4037e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4037e4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4037e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4037ea:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4037ee:	81a2      	strh	r2, [r4, #12]
  4037f0:	6822      	ldr	r2, [r4, #0]
  4037f2:	6661      	str	r1, [r4, #100]	; 0x64
  4037f4:	6961      	ldr	r1, [r4, #20]
  4037f6:	1ad3      	subs	r3, r2, r3
  4037f8:	428b      	cmp	r3, r1
  4037fa:	dbe2      	blt.n	4037c2 <__swbuf_r+0x36>
  4037fc:	4621      	mov	r1, r4
  4037fe:	4630      	mov	r0, r6
  403800:	f7fe fd0a 	bl	402218 <_fflush_r>
  403804:	b940      	cbnz	r0, 403818 <__swbuf_r+0x8c>
  403806:	6822      	ldr	r2, [r4, #0]
  403808:	2301      	movs	r3, #1
  40380a:	e7db      	b.n	4037c4 <__swbuf_r+0x38>
  40380c:	4621      	mov	r1, r4
  40380e:	4630      	mov	r0, r6
  403810:	f7fe fd02 	bl	402218 <_fflush_r>
  403814:	2800      	cmp	r0, #0
  403816:	d0e3      	beq.n	4037e0 <__swbuf_r+0x54>
  403818:	f04f 37ff 	mov.w	r7, #4294967295
  40381c:	e7e0      	b.n	4037e0 <__swbuf_r+0x54>
  40381e:	4621      	mov	r1, r4
  403820:	4630      	mov	r0, r6
  403822:	f7fe fbe5 	bl	401ff0 <__swsetup_r>
  403826:	2800      	cmp	r0, #0
  403828:	d1f6      	bne.n	403818 <__swbuf_r+0x8c>
  40382a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40382e:	6923      	ldr	r3, [r4, #16]
  403830:	b291      	uxth	r1, r2
  403832:	e7bd      	b.n	4037b0 <__swbuf_r+0x24>
  403834:	f7fe fd48 	bl	4022c8 <__sinit>
  403838:	e7b0      	b.n	40379c <__swbuf_r+0x10>
  40383a:	bf00      	nop

0040383c <_wcrtomb_r>:
  40383c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40383e:	4606      	mov	r6, r0
  403840:	b085      	sub	sp, #20
  403842:	461f      	mov	r7, r3
  403844:	b189      	cbz	r1, 40386a <_wcrtomb_r+0x2e>
  403846:	4c10      	ldr	r4, [pc, #64]	; (403888 <_wcrtomb_r+0x4c>)
  403848:	4d10      	ldr	r5, [pc, #64]	; (40388c <_wcrtomb_r+0x50>)
  40384a:	6824      	ldr	r4, [r4, #0]
  40384c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40384e:	2c00      	cmp	r4, #0
  403850:	bf08      	it	eq
  403852:	462c      	moveq	r4, r5
  403854:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  403858:	47a0      	blx	r4
  40385a:	1c43      	adds	r3, r0, #1
  40385c:	d103      	bne.n	403866 <_wcrtomb_r+0x2a>
  40385e:	2200      	movs	r2, #0
  403860:	238a      	movs	r3, #138	; 0x8a
  403862:	603a      	str	r2, [r7, #0]
  403864:	6033      	str	r3, [r6, #0]
  403866:	b005      	add	sp, #20
  403868:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40386a:	460c      	mov	r4, r1
  40386c:	4906      	ldr	r1, [pc, #24]	; (403888 <_wcrtomb_r+0x4c>)
  40386e:	4a07      	ldr	r2, [pc, #28]	; (40388c <_wcrtomb_r+0x50>)
  403870:	6809      	ldr	r1, [r1, #0]
  403872:	6b49      	ldr	r1, [r1, #52]	; 0x34
  403874:	2900      	cmp	r1, #0
  403876:	bf08      	it	eq
  403878:	4611      	moveq	r1, r2
  40387a:	4622      	mov	r2, r4
  40387c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  403880:	a901      	add	r1, sp, #4
  403882:	47a0      	blx	r4
  403884:	e7e9      	b.n	40385a <_wcrtomb_r+0x1e>
  403886:	bf00      	nop
  403888:	20000010 	.word	0x20000010
  40388c:	20000444 	.word	0x20000444

00403890 <__ascii_wctomb>:
  403890:	b121      	cbz	r1, 40389c <__ascii_wctomb+0xc>
  403892:	2aff      	cmp	r2, #255	; 0xff
  403894:	d804      	bhi.n	4038a0 <__ascii_wctomb+0x10>
  403896:	700a      	strb	r2, [r1, #0]
  403898:	2001      	movs	r0, #1
  40389a:	4770      	bx	lr
  40389c:	4608      	mov	r0, r1
  40389e:	4770      	bx	lr
  4038a0:	238a      	movs	r3, #138	; 0x8a
  4038a2:	6003      	str	r3, [r0, #0]
  4038a4:	f04f 30ff 	mov.w	r0, #4294967295
  4038a8:	4770      	bx	lr
  4038aa:	bf00      	nop

004038ac <_write_r>:
  4038ac:	b570      	push	{r4, r5, r6, lr}
  4038ae:	460d      	mov	r5, r1
  4038b0:	4c08      	ldr	r4, [pc, #32]	; (4038d4 <_write_r+0x28>)
  4038b2:	4611      	mov	r1, r2
  4038b4:	4606      	mov	r6, r0
  4038b6:	461a      	mov	r2, r3
  4038b8:	4628      	mov	r0, r5
  4038ba:	2300      	movs	r3, #0
  4038bc:	6023      	str	r3, [r4, #0]
  4038be:	f7fc fe07 	bl	4004d0 <_write>
  4038c2:	1c43      	adds	r3, r0, #1
  4038c4:	d000      	beq.n	4038c8 <_write_r+0x1c>
  4038c6:	bd70      	pop	{r4, r5, r6, pc}
  4038c8:	6823      	ldr	r3, [r4, #0]
  4038ca:	2b00      	cmp	r3, #0
  4038cc:	d0fb      	beq.n	4038c6 <_write_r+0x1a>
  4038ce:	6033      	str	r3, [r6, #0]
  4038d0:	bd70      	pop	{r4, r5, r6, pc}
  4038d2:	bf00      	nop
  4038d4:	20000b08 	.word	0x20000b08

004038d8 <__register_exitproc>:
  4038d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4038dc:	4d2c      	ldr	r5, [pc, #176]	; (403990 <__register_exitproc+0xb8>)
  4038de:	4606      	mov	r6, r0
  4038e0:	6828      	ldr	r0, [r5, #0]
  4038e2:	4698      	mov	r8, r3
  4038e4:	460f      	mov	r7, r1
  4038e6:	4691      	mov	r9, r2
  4038e8:	f7ff f8ae 	bl	402a48 <__retarget_lock_acquire_recursive>
  4038ec:	4b29      	ldr	r3, [pc, #164]	; (403994 <__register_exitproc+0xbc>)
  4038ee:	681c      	ldr	r4, [r3, #0]
  4038f0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4038f4:	2b00      	cmp	r3, #0
  4038f6:	d03e      	beq.n	403976 <__register_exitproc+0x9e>
  4038f8:	685a      	ldr	r2, [r3, #4]
  4038fa:	2a1f      	cmp	r2, #31
  4038fc:	dc1c      	bgt.n	403938 <__register_exitproc+0x60>
  4038fe:	f102 0e01 	add.w	lr, r2, #1
  403902:	b176      	cbz	r6, 403922 <__register_exitproc+0x4a>
  403904:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  403908:	2401      	movs	r4, #1
  40390a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40390e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  403912:	4094      	lsls	r4, r2
  403914:	4320      	orrs	r0, r4
  403916:	2e02      	cmp	r6, #2
  403918:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40391c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  403920:	d023      	beq.n	40396a <__register_exitproc+0x92>
  403922:	3202      	adds	r2, #2
  403924:	f8c3 e004 	str.w	lr, [r3, #4]
  403928:	6828      	ldr	r0, [r5, #0]
  40392a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40392e:	f7ff f88d 	bl	402a4c <__retarget_lock_release_recursive>
  403932:	2000      	movs	r0, #0
  403934:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403938:	4b17      	ldr	r3, [pc, #92]	; (403998 <__register_exitproc+0xc0>)
  40393a:	b30b      	cbz	r3, 403980 <__register_exitproc+0xa8>
  40393c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  403940:	f7ff f8fe 	bl	402b40 <malloc>
  403944:	4603      	mov	r3, r0
  403946:	b1d8      	cbz	r0, 403980 <__register_exitproc+0xa8>
  403948:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40394c:	6002      	str	r2, [r0, #0]
  40394e:	2100      	movs	r1, #0
  403950:	6041      	str	r1, [r0, #4]
  403952:	460a      	mov	r2, r1
  403954:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  403958:	f04f 0e01 	mov.w	lr, #1
  40395c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  403960:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  403964:	2e00      	cmp	r6, #0
  403966:	d0dc      	beq.n	403922 <__register_exitproc+0x4a>
  403968:	e7cc      	b.n	403904 <__register_exitproc+0x2c>
  40396a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40396e:	430c      	orrs	r4, r1
  403970:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  403974:	e7d5      	b.n	403922 <__register_exitproc+0x4a>
  403976:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40397a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40397e:	e7bb      	b.n	4038f8 <__register_exitproc+0x20>
  403980:	6828      	ldr	r0, [r5, #0]
  403982:	f7ff f863 	bl	402a4c <__retarget_lock_release_recursive>
  403986:	f04f 30ff 	mov.w	r0, #4294967295
  40398a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40398e:	bf00      	nop
  403990:	20000440 	.word	0x20000440
  403994:	00403ee4 	.word	0x00403ee4
  403998:	00402b41 	.word	0x00402b41

0040399c <_close_r>:
  40399c:	b538      	push	{r3, r4, r5, lr}
  40399e:	4c07      	ldr	r4, [pc, #28]	; (4039bc <_close_r+0x20>)
  4039a0:	2300      	movs	r3, #0
  4039a2:	4605      	mov	r5, r0
  4039a4:	4608      	mov	r0, r1
  4039a6:	6023      	str	r3, [r4, #0]
  4039a8:	f7fd fa2a 	bl	400e00 <_close>
  4039ac:	1c43      	adds	r3, r0, #1
  4039ae:	d000      	beq.n	4039b2 <_close_r+0x16>
  4039b0:	bd38      	pop	{r3, r4, r5, pc}
  4039b2:	6823      	ldr	r3, [r4, #0]
  4039b4:	2b00      	cmp	r3, #0
  4039b6:	d0fb      	beq.n	4039b0 <_close_r+0x14>
  4039b8:	602b      	str	r3, [r5, #0]
  4039ba:	bd38      	pop	{r3, r4, r5, pc}
  4039bc:	20000b08 	.word	0x20000b08

004039c0 <_fclose_r>:
  4039c0:	b570      	push	{r4, r5, r6, lr}
  4039c2:	b159      	cbz	r1, 4039dc <_fclose_r+0x1c>
  4039c4:	4605      	mov	r5, r0
  4039c6:	460c      	mov	r4, r1
  4039c8:	b110      	cbz	r0, 4039d0 <_fclose_r+0x10>
  4039ca:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4039cc:	2b00      	cmp	r3, #0
  4039ce:	d03c      	beq.n	403a4a <_fclose_r+0x8a>
  4039d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4039d2:	07d8      	lsls	r0, r3, #31
  4039d4:	d505      	bpl.n	4039e2 <_fclose_r+0x22>
  4039d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4039da:	b92b      	cbnz	r3, 4039e8 <_fclose_r+0x28>
  4039dc:	2600      	movs	r6, #0
  4039de:	4630      	mov	r0, r6
  4039e0:	bd70      	pop	{r4, r5, r6, pc}
  4039e2:	89a3      	ldrh	r3, [r4, #12]
  4039e4:	0599      	lsls	r1, r3, #22
  4039e6:	d53c      	bpl.n	403a62 <_fclose_r+0xa2>
  4039e8:	4621      	mov	r1, r4
  4039ea:	4628      	mov	r0, r5
  4039ec:	f7fe fb74 	bl	4020d8 <__sflush_r>
  4039f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4039f2:	4606      	mov	r6, r0
  4039f4:	b133      	cbz	r3, 403a04 <_fclose_r+0x44>
  4039f6:	69e1      	ldr	r1, [r4, #28]
  4039f8:	4628      	mov	r0, r5
  4039fa:	4798      	blx	r3
  4039fc:	2800      	cmp	r0, #0
  4039fe:	bfb8      	it	lt
  403a00:	f04f 36ff 	movlt.w	r6, #4294967295
  403a04:	89a3      	ldrh	r3, [r4, #12]
  403a06:	061a      	lsls	r2, r3, #24
  403a08:	d422      	bmi.n	403a50 <_fclose_r+0x90>
  403a0a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403a0c:	b141      	cbz	r1, 403a20 <_fclose_r+0x60>
  403a0e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403a12:	4299      	cmp	r1, r3
  403a14:	d002      	beq.n	403a1c <_fclose_r+0x5c>
  403a16:	4628      	mov	r0, r5
  403a18:	f7fe fd7c 	bl	402514 <_free_r>
  403a1c:	2300      	movs	r3, #0
  403a1e:	6323      	str	r3, [r4, #48]	; 0x30
  403a20:	6c61      	ldr	r1, [r4, #68]	; 0x44
  403a22:	b121      	cbz	r1, 403a2e <_fclose_r+0x6e>
  403a24:	4628      	mov	r0, r5
  403a26:	f7fe fd75 	bl	402514 <_free_r>
  403a2a:	2300      	movs	r3, #0
  403a2c:	6463      	str	r3, [r4, #68]	; 0x44
  403a2e:	f7fe fc77 	bl	402320 <__sfp_lock_acquire>
  403a32:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403a34:	2200      	movs	r2, #0
  403a36:	07db      	lsls	r3, r3, #31
  403a38:	81a2      	strh	r2, [r4, #12]
  403a3a:	d50e      	bpl.n	403a5a <_fclose_r+0x9a>
  403a3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403a3e:	f7ff f801 	bl	402a44 <__retarget_lock_close_recursive>
  403a42:	f7fe fc73 	bl	40232c <__sfp_lock_release>
  403a46:	4630      	mov	r0, r6
  403a48:	bd70      	pop	{r4, r5, r6, pc}
  403a4a:	f7fe fc3d 	bl	4022c8 <__sinit>
  403a4e:	e7bf      	b.n	4039d0 <_fclose_r+0x10>
  403a50:	6921      	ldr	r1, [r4, #16]
  403a52:	4628      	mov	r0, r5
  403a54:	f7fe fd5e 	bl	402514 <_free_r>
  403a58:	e7d7      	b.n	403a0a <_fclose_r+0x4a>
  403a5a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403a5c:	f7fe fff6 	bl	402a4c <__retarget_lock_release_recursive>
  403a60:	e7ec      	b.n	403a3c <_fclose_r+0x7c>
  403a62:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403a64:	f7fe fff0 	bl	402a48 <__retarget_lock_acquire_recursive>
  403a68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403a6c:	2b00      	cmp	r3, #0
  403a6e:	d1bb      	bne.n	4039e8 <_fclose_r+0x28>
  403a70:	6e66      	ldr	r6, [r4, #100]	; 0x64
  403a72:	f016 0601 	ands.w	r6, r6, #1
  403a76:	d1b1      	bne.n	4039dc <_fclose_r+0x1c>
  403a78:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403a7a:	f7fe ffe7 	bl	402a4c <__retarget_lock_release_recursive>
  403a7e:	4630      	mov	r0, r6
  403a80:	bd70      	pop	{r4, r5, r6, pc}
  403a82:	bf00      	nop

00403a84 <_fstat_r>:
  403a84:	b538      	push	{r3, r4, r5, lr}
  403a86:	460b      	mov	r3, r1
  403a88:	4c07      	ldr	r4, [pc, #28]	; (403aa8 <_fstat_r+0x24>)
  403a8a:	4605      	mov	r5, r0
  403a8c:	4611      	mov	r1, r2
  403a8e:	4618      	mov	r0, r3
  403a90:	2300      	movs	r3, #0
  403a92:	6023      	str	r3, [r4, #0]
  403a94:	f7fd f9b7 	bl	400e06 <_fstat>
  403a98:	1c43      	adds	r3, r0, #1
  403a9a:	d000      	beq.n	403a9e <_fstat_r+0x1a>
  403a9c:	bd38      	pop	{r3, r4, r5, pc}
  403a9e:	6823      	ldr	r3, [r4, #0]
  403aa0:	2b00      	cmp	r3, #0
  403aa2:	d0fb      	beq.n	403a9c <_fstat_r+0x18>
  403aa4:	602b      	str	r3, [r5, #0]
  403aa6:	bd38      	pop	{r3, r4, r5, pc}
  403aa8:	20000b08 	.word	0x20000b08

00403aac <_isatty_r>:
  403aac:	b538      	push	{r3, r4, r5, lr}
  403aae:	4c07      	ldr	r4, [pc, #28]	; (403acc <_isatty_r+0x20>)
  403ab0:	2300      	movs	r3, #0
  403ab2:	4605      	mov	r5, r0
  403ab4:	4608      	mov	r0, r1
  403ab6:	6023      	str	r3, [r4, #0]
  403ab8:	f7fd f9aa 	bl	400e10 <_isatty>
  403abc:	1c43      	adds	r3, r0, #1
  403abe:	d000      	beq.n	403ac2 <_isatty_r+0x16>
  403ac0:	bd38      	pop	{r3, r4, r5, pc}
  403ac2:	6823      	ldr	r3, [r4, #0]
  403ac4:	2b00      	cmp	r3, #0
  403ac6:	d0fb      	beq.n	403ac0 <_isatty_r+0x14>
  403ac8:	602b      	str	r3, [r5, #0]
  403aca:	bd38      	pop	{r3, r4, r5, pc}
  403acc:	20000b08 	.word	0x20000b08

00403ad0 <_lseek_r>:
  403ad0:	b570      	push	{r4, r5, r6, lr}
  403ad2:	460d      	mov	r5, r1
  403ad4:	4c08      	ldr	r4, [pc, #32]	; (403af8 <_lseek_r+0x28>)
  403ad6:	4611      	mov	r1, r2
  403ad8:	4606      	mov	r6, r0
  403ada:	461a      	mov	r2, r3
  403adc:	4628      	mov	r0, r5
  403ade:	2300      	movs	r3, #0
  403ae0:	6023      	str	r3, [r4, #0]
  403ae2:	f7fd f997 	bl	400e14 <_lseek>
  403ae6:	1c43      	adds	r3, r0, #1
  403ae8:	d000      	beq.n	403aec <_lseek_r+0x1c>
  403aea:	bd70      	pop	{r4, r5, r6, pc}
  403aec:	6823      	ldr	r3, [r4, #0]
  403aee:	2b00      	cmp	r3, #0
  403af0:	d0fb      	beq.n	403aea <_lseek_r+0x1a>
  403af2:	6033      	str	r3, [r6, #0]
  403af4:	bd70      	pop	{r4, r5, r6, pc}
  403af6:	bf00      	nop
  403af8:	20000b08 	.word	0x20000b08

00403afc <_read_r>:
  403afc:	b570      	push	{r4, r5, r6, lr}
  403afe:	460d      	mov	r5, r1
  403b00:	4c08      	ldr	r4, [pc, #32]	; (403b24 <_read_r+0x28>)
  403b02:	4611      	mov	r1, r2
  403b04:	4606      	mov	r6, r0
  403b06:	461a      	mov	r2, r3
  403b08:	4628      	mov	r0, r5
  403b0a:	2300      	movs	r3, #0
  403b0c:	6023      	str	r3, [r4, #0]
  403b0e:	f7fc fcc1 	bl	400494 <_read>
  403b12:	1c43      	adds	r3, r0, #1
  403b14:	d000      	beq.n	403b18 <_read_r+0x1c>
  403b16:	bd70      	pop	{r4, r5, r6, pc}
  403b18:	6823      	ldr	r3, [r4, #0]
  403b1a:	2b00      	cmp	r3, #0
  403b1c:	d0fb      	beq.n	403b16 <_read_r+0x1a>
  403b1e:	6033      	str	r3, [r6, #0]
  403b20:	bd70      	pop	{r4, r5, r6, pc}
  403b22:	bf00      	nop
  403b24:	20000b08 	.word	0x20000b08

00403b28 <__aeabi_uldivmod>:
  403b28:	b953      	cbnz	r3, 403b40 <__aeabi_uldivmod+0x18>
  403b2a:	b94a      	cbnz	r2, 403b40 <__aeabi_uldivmod+0x18>
  403b2c:	2900      	cmp	r1, #0
  403b2e:	bf08      	it	eq
  403b30:	2800      	cmpeq	r0, #0
  403b32:	bf1c      	itt	ne
  403b34:	f04f 31ff 	movne.w	r1, #4294967295
  403b38:	f04f 30ff 	movne.w	r0, #4294967295
  403b3c:	f000 b97a 	b.w	403e34 <__aeabi_idiv0>
  403b40:	f1ad 0c08 	sub.w	ip, sp, #8
  403b44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  403b48:	f000 f806 	bl	403b58 <__udivmoddi4>
  403b4c:	f8dd e004 	ldr.w	lr, [sp, #4]
  403b50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403b54:	b004      	add	sp, #16
  403b56:	4770      	bx	lr

00403b58 <__udivmoddi4>:
  403b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403b5c:	468c      	mov	ip, r1
  403b5e:	460d      	mov	r5, r1
  403b60:	4604      	mov	r4, r0
  403b62:	9e08      	ldr	r6, [sp, #32]
  403b64:	2b00      	cmp	r3, #0
  403b66:	d151      	bne.n	403c0c <__udivmoddi4+0xb4>
  403b68:	428a      	cmp	r2, r1
  403b6a:	4617      	mov	r7, r2
  403b6c:	d96d      	bls.n	403c4a <__udivmoddi4+0xf2>
  403b6e:	fab2 fe82 	clz	lr, r2
  403b72:	f1be 0f00 	cmp.w	lr, #0
  403b76:	d00b      	beq.n	403b90 <__udivmoddi4+0x38>
  403b78:	f1ce 0c20 	rsb	ip, lr, #32
  403b7c:	fa01 f50e 	lsl.w	r5, r1, lr
  403b80:	fa20 fc0c 	lsr.w	ip, r0, ip
  403b84:	fa02 f70e 	lsl.w	r7, r2, lr
  403b88:	ea4c 0c05 	orr.w	ip, ip, r5
  403b8c:	fa00 f40e 	lsl.w	r4, r0, lr
  403b90:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  403b94:	0c25      	lsrs	r5, r4, #16
  403b96:	fbbc f8fa 	udiv	r8, ip, sl
  403b9a:	fa1f f987 	uxth.w	r9, r7
  403b9e:	fb0a cc18 	mls	ip, sl, r8, ip
  403ba2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  403ba6:	fb08 f309 	mul.w	r3, r8, r9
  403baa:	42ab      	cmp	r3, r5
  403bac:	d90a      	bls.n	403bc4 <__udivmoddi4+0x6c>
  403bae:	19ed      	adds	r5, r5, r7
  403bb0:	f108 32ff 	add.w	r2, r8, #4294967295
  403bb4:	f080 8123 	bcs.w	403dfe <__udivmoddi4+0x2a6>
  403bb8:	42ab      	cmp	r3, r5
  403bba:	f240 8120 	bls.w	403dfe <__udivmoddi4+0x2a6>
  403bbe:	f1a8 0802 	sub.w	r8, r8, #2
  403bc2:	443d      	add	r5, r7
  403bc4:	1aed      	subs	r5, r5, r3
  403bc6:	b2a4      	uxth	r4, r4
  403bc8:	fbb5 f0fa 	udiv	r0, r5, sl
  403bcc:	fb0a 5510 	mls	r5, sl, r0, r5
  403bd0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  403bd4:	fb00 f909 	mul.w	r9, r0, r9
  403bd8:	45a1      	cmp	r9, r4
  403bda:	d909      	bls.n	403bf0 <__udivmoddi4+0x98>
  403bdc:	19e4      	adds	r4, r4, r7
  403bde:	f100 33ff 	add.w	r3, r0, #4294967295
  403be2:	f080 810a 	bcs.w	403dfa <__udivmoddi4+0x2a2>
  403be6:	45a1      	cmp	r9, r4
  403be8:	f240 8107 	bls.w	403dfa <__udivmoddi4+0x2a2>
  403bec:	3802      	subs	r0, #2
  403bee:	443c      	add	r4, r7
  403bf0:	eba4 0409 	sub.w	r4, r4, r9
  403bf4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403bf8:	2100      	movs	r1, #0
  403bfa:	2e00      	cmp	r6, #0
  403bfc:	d061      	beq.n	403cc2 <__udivmoddi4+0x16a>
  403bfe:	fa24 f40e 	lsr.w	r4, r4, lr
  403c02:	2300      	movs	r3, #0
  403c04:	6034      	str	r4, [r6, #0]
  403c06:	6073      	str	r3, [r6, #4]
  403c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403c0c:	428b      	cmp	r3, r1
  403c0e:	d907      	bls.n	403c20 <__udivmoddi4+0xc8>
  403c10:	2e00      	cmp	r6, #0
  403c12:	d054      	beq.n	403cbe <__udivmoddi4+0x166>
  403c14:	2100      	movs	r1, #0
  403c16:	e886 0021 	stmia.w	r6, {r0, r5}
  403c1a:	4608      	mov	r0, r1
  403c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403c20:	fab3 f183 	clz	r1, r3
  403c24:	2900      	cmp	r1, #0
  403c26:	f040 808e 	bne.w	403d46 <__udivmoddi4+0x1ee>
  403c2a:	42ab      	cmp	r3, r5
  403c2c:	d302      	bcc.n	403c34 <__udivmoddi4+0xdc>
  403c2e:	4282      	cmp	r2, r0
  403c30:	f200 80fa 	bhi.w	403e28 <__udivmoddi4+0x2d0>
  403c34:	1a84      	subs	r4, r0, r2
  403c36:	eb65 0503 	sbc.w	r5, r5, r3
  403c3a:	2001      	movs	r0, #1
  403c3c:	46ac      	mov	ip, r5
  403c3e:	2e00      	cmp	r6, #0
  403c40:	d03f      	beq.n	403cc2 <__udivmoddi4+0x16a>
  403c42:	e886 1010 	stmia.w	r6, {r4, ip}
  403c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403c4a:	b912      	cbnz	r2, 403c52 <__udivmoddi4+0xfa>
  403c4c:	2701      	movs	r7, #1
  403c4e:	fbb7 f7f2 	udiv	r7, r7, r2
  403c52:	fab7 fe87 	clz	lr, r7
  403c56:	f1be 0f00 	cmp.w	lr, #0
  403c5a:	d134      	bne.n	403cc6 <__udivmoddi4+0x16e>
  403c5c:	1beb      	subs	r3, r5, r7
  403c5e:	0c3a      	lsrs	r2, r7, #16
  403c60:	fa1f fc87 	uxth.w	ip, r7
  403c64:	2101      	movs	r1, #1
  403c66:	fbb3 f8f2 	udiv	r8, r3, r2
  403c6a:	0c25      	lsrs	r5, r4, #16
  403c6c:	fb02 3318 	mls	r3, r2, r8, r3
  403c70:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403c74:	fb0c f308 	mul.w	r3, ip, r8
  403c78:	42ab      	cmp	r3, r5
  403c7a:	d907      	bls.n	403c8c <__udivmoddi4+0x134>
  403c7c:	19ed      	adds	r5, r5, r7
  403c7e:	f108 30ff 	add.w	r0, r8, #4294967295
  403c82:	d202      	bcs.n	403c8a <__udivmoddi4+0x132>
  403c84:	42ab      	cmp	r3, r5
  403c86:	f200 80d1 	bhi.w	403e2c <__udivmoddi4+0x2d4>
  403c8a:	4680      	mov	r8, r0
  403c8c:	1aed      	subs	r5, r5, r3
  403c8e:	b2a3      	uxth	r3, r4
  403c90:	fbb5 f0f2 	udiv	r0, r5, r2
  403c94:	fb02 5510 	mls	r5, r2, r0, r5
  403c98:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  403c9c:	fb0c fc00 	mul.w	ip, ip, r0
  403ca0:	45a4      	cmp	ip, r4
  403ca2:	d907      	bls.n	403cb4 <__udivmoddi4+0x15c>
  403ca4:	19e4      	adds	r4, r4, r7
  403ca6:	f100 33ff 	add.w	r3, r0, #4294967295
  403caa:	d202      	bcs.n	403cb2 <__udivmoddi4+0x15a>
  403cac:	45a4      	cmp	ip, r4
  403cae:	f200 80b8 	bhi.w	403e22 <__udivmoddi4+0x2ca>
  403cb2:	4618      	mov	r0, r3
  403cb4:	eba4 040c 	sub.w	r4, r4, ip
  403cb8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403cbc:	e79d      	b.n	403bfa <__udivmoddi4+0xa2>
  403cbe:	4631      	mov	r1, r6
  403cc0:	4630      	mov	r0, r6
  403cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403cc6:	f1ce 0420 	rsb	r4, lr, #32
  403cca:	fa05 f30e 	lsl.w	r3, r5, lr
  403cce:	fa07 f70e 	lsl.w	r7, r7, lr
  403cd2:	fa20 f804 	lsr.w	r8, r0, r4
  403cd6:	0c3a      	lsrs	r2, r7, #16
  403cd8:	fa25 f404 	lsr.w	r4, r5, r4
  403cdc:	ea48 0803 	orr.w	r8, r8, r3
  403ce0:	fbb4 f1f2 	udiv	r1, r4, r2
  403ce4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  403ce8:	fb02 4411 	mls	r4, r2, r1, r4
  403cec:	fa1f fc87 	uxth.w	ip, r7
  403cf0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  403cf4:	fb01 f30c 	mul.w	r3, r1, ip
  403cf8:	42ab      	cmp	r3, r5
  403cfa:	fa00 f40e 	lsl.w	r4, r0, lr
  403cfe:	d909      	bls.n	403d14 <__udivmoddi4+0x1bc>
  403d00:	19ed      	adds	r5, r5, r7
  403d02:	f101 30ff 	add.w	r0, r1, #4294967295
  403d06:	f080 808a 	bcs.w	403e1e <__udivmoddi4+0x2c6>
  403d0a:	42ab      	cmp	r3, r5
  403d0c:	f240 8087 	bls.w	403e1e <__udivmoddi4+0x2c6>
  403d10:	3902      	subs	r1, #2
  403d12:	443d      	add	r5, r7
  403d14:	1aeb      	subs	r3, r5, r3
  403d16:	fa1f f588 	uxth.w	r5, r8
  403d1a:	fbb3 f0f2 	udiv	r0, r3, r2
  403d1e:	fb02 3310 	mls	r3, r2, r0, r3
  403d22:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403d26:	fb00 f30c 	mul.w	r3, r0, ip
  403d2a:	42ab      	cmp	r3, r5
  403d2c:	d907      	bls.n	403d3e <__udivmoddi4+0x1e6>
  403d2e:	19ed      	adds	r5, r5, r7
  403d30:	f100 38ff 	add.w	r8, r0, #4294967295
  403d34:	d26f      	bcs.n	403e16 <__udivmoddi4+0x2be>
  403d36:	42ab      	cmp	r3, r5
  403d38:	d96d      	bls.n	403e16 <__udivmoddi4+0x2be>
  403d3a:	3802      	subs	r0, #2
  403d3c:	443d      	add	r5, r7
  403d3e:	1aeb      	subs	r3, r5, r3
  403d40:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  403d44:	e78f      	b.n	403c66 <__udivmoddi4+0x10e>
  403d46:	f1c1 0720 	rsb	r7, r1, #32
  403d4a:	fa22 f807 	lsr.w	r8, r2, r7
  403d4e:	408b      	lsls	r3, r1
  403d50:	fa05 f401 	lsl.w	r4, r5, r1
  403d54:	ea48 0303 	orr.w	r3, r8, r3
  403d58:	fa20 fe07 	lsr.w	lr, r0, r7
  403d5c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  403d60:	40fd      	lsrs	r5, r7
  403d62:	ea4e 0e04 	orr.w	lr, lr, r4
  403d66:	fbb5 f9fc 	udiv	r9, r5, ip
  403d6a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  403d6e:	fb0c 5519 	mls	r5, ip, r9, r5
  403d72:	fa1f f883 	uxth.w	r8, r3
  403d76:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  403d7a:	fb09 f408 	mul.w	r4, r9, r8
  403d7e:	42ac      	cmp	r4, r5
  403d80:	fa02 f201 	lsl.w	r2, r2, r1
  403d84:	fa00 fa01 	lsl.w	sl, r0, r1
  403d88:	d908      	bls.n	403d9c <__udivmoddi4+0x244>
  403d8a:	18ed      	adds	r5, r5, r3
  403d8c:	f109 30ff 	add.w	r0, r9, #4294967295
  403d90:	d243      	bcs.n	403e1a <__udivmoddi4+0x2c2>
  403d92:	42ac      	cmp	r4, r5
  403d94:	d941      	bls.n	403e1a <__udivmoddi4+0x2c2>
  403d96:	f1a9 0902 	sub.w	r9, r9, #2
  403d9a:	441d      	add	r5, r3
  403d9c:	1b2d      	subs	r5, r5, r4
  403d9e:	fa1f fe8e 	uxth.w	lr, lr
  403da2:	fbb5 f0fc 	udiv	r0, r5, ip
  403da6:	fb0c 5510 	mls	r5, ip, r0, r5
  403daa:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  403dae:	fb00 f808 	mul.w	r8, r0, r8
  403db2:	45a0      	cmp	r8, r4
  403db4:	d907      	bls.n	403dc6 <__udivmoddi4+0x26e>
  403db6:	18e4      	adds	r4, r4, r3
  403db8:	f100 35ff 	add.w	r5, r0, #4294967295
  403dbc:	d229      	bcs.n	403e12 <__udivmoddi4+0x2ba>
  403dbe:	45a0      	cmp	r8, r4
  403dc0:	d927      	bls.n	403e12 <__udivmoddi4+0x2ba>
  403dc2:	3802      	subs	r0, #2
  403dc4:	441c      	add	r4, r3
  403dc6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  403dca:	eba4 0408 	sub.w	r4, r4, r8
  403dce:	fba0 8902 	umull	r8, r9, r0, r2
  403dd2:	454c      	cmp	r4, r9
  403dd4:	46c6      	mov	lr, r8
  403dd6:	464d      	mov	r5, r9
  403dd8:	d315      	bcc.n	403e06 <__udivmoddi4+0x2ae>
  403dda:	d012      	beq.n	403e02 <__udivmoddi4+0x2aa>
  403ddc:	b156      	cbz	r6, 403df4 <__udivmoddi4+0x29c>
  403dde:	ebba 030e 	subs.w	r3, sl, lr
  403de2:	eb64 0405 	sbc.w	r4, r4, r5
  403de6:	fa04 f707 	lsl.w	r7, r4, r7
  403dea:	40cb      	lsrs	r3, r1
  403dec:	431f      	orrs	r7, r3
  403dee:	40cc      	lsrs	r4, r1
  403df0:	6037      	str	r7, [r6, #0]
  403df2:	6074      	str	r4, [r6, #4]
  403df4:	2100      	movs	r1, #0
  403df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403dfa:	4618      	mov	r0, r3
  403dfc:	e6f8      	b.n	403bf0 <__udivmoddi4+0x98>
  403dfe:	4690      	mov	r8, r2
  403e00:	e6e0      	b.n	403bc4 <__udivmoddi4+0x6c>
  403e02:	45c2      	cmp	sl, r8
  403e04:	d2ea      	bcs.n	403ddc <__udivmoddi4+0x284>
  403e06:	ebb8 0e02 	subs.w	lr, r8, r2
  403e0a:	eb69 0503 	sbc.w	r5, r9, r3
  403e0e:	3801      	subs	r0, #1
  403e10:	e7e4      	b.n	403ddc <__udivmoddi4+0x284>
  403e12:	4628      	mov	r0, r5
  403e14:	e7d7      	b.n	403dc6 <__udivmoddi4+0x26e>
  403e16:	4640      	mov	r0, r8
  403e18:	e791      	b.n	403d3e <__udivmoddi4+0x1e6>
  403e1a:	4681      	mov	r9, r0
  403e1c:	e7be      	b.n	403d9c <__udivmoddi4+0x244>
  403e1e:	4601      	mov	r1, r0
  403e20:	e778      	b.n	403d14 <__udivmoddi4+0x1bc>
  403e22:	3802      	subs	r0, #2
  403e24:	443c      	add	r4, r7
  403e26:	e745      	b.n	403cb4 <__udivmoddi4+0x15c>
  403e28:	4608      	mov	r0, r1
  403e2a:	e708      	b.n	403c3e <__udivmoddi4+0xe6>
  403e2c:	f1a8 0802 	sub.w	r8, r8, #2
  403e30:	443d      	add	r5, r7
  403e32:	e72b      	b.n	403c8c <__udivmoddi4+0x134>

00403e34 <__aeabi_idiv0>:
  403e34:	4770      	bx	lr
  403e36:	bf00      	nop
  403e38:	5253492d 	.word	0x5253492d
  403e3c:	6f503a2d 	.word	0x6f503a2d
  403e40:	746e6574 	.word	0x746e6574
  403e44:	656d6f69 	.word	0x656d6f69
  403e48:	20726574 	.word	0x20726574
  403e4c:	746c6f76 	.word	0x746c6f76
  403e50:	20656761 	.word	0x20656761
  403e54:	6d206425 	.word	0x6d206425
  403e58:	73692076 	.word	0x73692076
  403e5c:	206e6920 	.word	0x206e6920
  403e60:	20656874 	.word	0x20656874
  403e64:	706d6f63 	.word	0x706d6f63
  403e68:	73697261 	.word	0x73697261
  403e6c:	77206e6f 	.word	0x77206e6f
  403e70:	6f646e69 	.word	0x6f646e69
  403e74:	64253a77 	.word	0x64253a77
  403e78:	64252d20 	.word	0x64252d20
  403e7c:	21766d20 	.word	0x21766d20
  403e80:	00000d0a 	.word	0x00000d0a
  403e84:	41202d2d 	.word	0x41202d2d
  403e88:	20434546 	.word	0x20434546
  403e8c:	6f747541 	.word	0x6f747541
  403e90:	6974616d 	.word	0x6974616d
  403e94:	6f432063 	.word	0x6f432063
  403e98:	7261706d 	.word	0x7261706d
  403e9c:	6e6f7369 	.word	0x6e6f7369
  403ea0:	61784520 	.word	0x61784520
  403ea4:	656c706d 	.word	0x656c706d
  403ea8:	0d2d2d20 	.word	0x0d2d2d20
  403eac:	202d2d0a 	.word	0x202d2d0a
  403eb0:	344d4153 	.word	0x344d4153
  403eb4:	4b452d45 	.word	0x4b452d45
  403eb8:	0d2d2d20 	.word	0x0d2d2d20
  403ebc:	202d2d0a 	.word	0x202d2d0a
  403ec0:	706d6f43 	.word	0x706d6f43
  403ec4:	64656c69 	.word	0x64656c69
  403ec8:	614d203a 	.word	0x614d203a
  403ecc:	33322079 	.word	0x33322079
  403ed0:	31303220 	.word	0x31303220
  403ed4:	33322039 	.word	0x33322039
  403ed8:	3a36343a 	.word	0x3a36343a
  403edc:	2d203230 	.word	0x2d203230
  403ee0:	00000d2d 	.word	0x00000d2d

00403ee4 <_global_impure_ptr>:
  403ee4:	20000018 0000000a 33323130 37363534     ... ....01234567
  403ef4:	42413938 46454443 00000000 33323130     89ABCDEF....0123
  403f04:	37363534 62613938 66656463 00000000     456789abcdef....
  403f14:	6c756e28 0000296c                       (null)..

00403f1c <blanks.7217>:
  403f1c:	20202020 20202020 20202020 20202020                     

00403f2c <zeroes.7218>:
  403f2c:	30303030 30303030 30303030 30303030     0000000000000000
  403f3c:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00403f4c <_ctype_>:
  403f4c:	20202000 20202020 28282020 20282828     .         ((((( 
  403f5c:	20202020 20202020 20202020 20202020                     
  403f6c:	10108820 10101010 10101010 10101010      ...............
  403f7c:	04040410 04040404 10040404 10101010     ................
  403f8c:	41411010 41414141 01010101 01010101     ..AAAAAA........
  403f9c:	01010101 01010101 01010101 10101010     ................
  403fac:	42421010 42424242 02020202 02020202     ..BBBBBB........
  403fbc:	02020202 02020202 02020202 10101010     ................
  403fcc:	00000020 00000000 00000000 00000000      ...............
	...

00404050 <_init>:
  404050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404052:	bf00      	nop
  404054:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404056:	bc08      	pop	{r3}
  404058:	469e      	mov	lr, r3
  40405a:	4770      	bx	lr

0040405c <__init_array_start>:
  40405c:	004020b9 	.word	0x004020b9

00404060 <__frame_dummy_init_array_entry>:
  404060:	0040011d                                ..@.

00404064 <_fini>:
  404064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404066:	bf00      	nop
  404068:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40406a:	bc08      	pop	{r3}
  40406c:	469e      	mov	lr, r3
  40406e:	4770      	bx	lr

00404070 <__fini_array_start>:
  404070:	004000f9 	.word	0x004000f9

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr

2000000a <g_interrupt_enabled>:
2000000a:	0001                                        ..

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <_impure_ptr>:
20000010:	0018 2000 0000 0000                         ... ....

20000018 <impure_data>:
20000018:	0000 0000 0304 2000 036c 2000 03d4 2000     ....... l.. ... 
	...
200000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000440 <__atexit_recursive_mutex>:
20000440:	0ae4 2000                                   ... 

20000444 <__global_locale>:
20000444:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000464:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000484:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200004a4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200004c4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200004e4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000504:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000524:	3891 0040 30b1 0040 0000 0000 3f4c 0040     .8@..0@.....L?@.
20000534:	3f48 0040 3efc 0040 3efc 0040 3efc 0040     H?@..>@..>@..>@.
20000544:	3efc 0040 3efc 0040 3efc 0040 3efc 0040     .>@..>@..>@..>@.
20000554:	3efc 0040 3efc 0040 ffff ffff ffff ffff     .>@..>@.........
20000564:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2000058c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

200005b0 <__malloc_av_>:
	...
200005b8:	05b0 2000 05b0 2000 05b8 2000 05b8 2000     ... ... ... ... 
200005c8:	05c0 2000 05c0 2000 05c8 2000 05c8 2000     ... ... ... ... 
200005d8:	05d0 2000 05d0 2000 05d8 2000 05d8 2000     ... ... ... ... 
200005e8:	05e0 2000 05e0 2000 05e8 2000 05e8 2000     ... ... ... ... 
200005f8:	05f0 2000 05f0 2000 05f8 2000 05f8 2000     ... ... ... ... 
20000608:	0600 2000 0600 2000 0608 2000 0608 2000     ... ... ... ... 
20000618:	0610 2000 0610 2000 0618 2000 0618 2000     ... ... ... ... 
20000628:	0620 2000 0620 2000 0628 2000 0628 2000      ..  .. (.. (.. 
20000638:	0630 2000 0630 2000 0638 2000 0638 2000     0.. 0.. 8.. 8.. 
20000648:	0640 2000 0640 2000 0648 2000 0648 2000     @.. @.. H.. H.. 
20000658:	0650 2000 0650 2000 0658 2000 0658 2000     P.. P.. X.. X.. 
20000668:	0660 2000 0660 2000 0668 2000 0668 2000     `.. `.. h.. h.. 
20000678:	0670 2000 0670 2000 0678 2000 0678 2000     p.. p.. x.. x.. 
20000688:	0680 2000 0680 2000 0688 2000 0688 2000     ... ... ... ... 
20000698:	0690 2000 0690 2000 0698 2000 0698 2000     ... ... ... ... 
200006a8:	06a0 2000 06a0 2000 06a8 2000 06a8 2000     ... ... ... ... 
200006b8:	06b0 2000 06b0 2000 06b8 2000 06b8 2000     ... ... ... ... 
200006c8:	06c0 2000 06c0 2000 06c8 2000 06c8 2000     ... ... ... ... 
200006d8:	06d0 2000 06d0 2000 06d8 2000 06d8 2000     ... ... ... ... 
200006e8:	06e0 2000 06e0 2000 06e8 2000 06e8 2000     ... ... ... ... 
200006f8:	06f0 2000 06f0 2000 06f8 2000 06f8 2000     ... ... ... ... 
20000708:	0700 2000 0700 2000 0708 2000 0708 2000     ... ... ... ... 
20000718:	0710 2000 0710 2000 0718 2000 0718 2000     ... ... ... ... 
20000728:	0720 2000 0720 2000 0728 2000 0728 2000      ..  .. (.. (.. 
20000738:	0730 2000 0730 2000 0738 2000 0738 2000     0.. 0.. 8.. 8.. 
20000748:	0740 2000 0740 2000 0748 2000 0748 2000     @.. @.. H.. H.. 
20000758:	0750 2000 0750 2000 0758 2000 0758 2000     P.. P.. X.. X.. 
20000768:	0760 2000 0760 2000 0768 2000 0768 2000     `.. `.. h.. h.. 
20000778:	0770 2000 0770 2000 0778 2000 0778 2000     p.. p.. x.. x.. 
20000788:	0780 2000 0780 2000 0788 2000 0788 2000     ... ... ... ... 
20000798:	0790 2000 0790 2000 0798 2000 0798 2000     ... ... ... ... 
200007a8:	07a0 2000 07a0 2000 07a8 2000 07a8 2000     ... ... ... ... 
200007b8:	07b0 2000 07b0 2000 07b8 2000 07b8 2000     ... ... ... ... 
200007c8:	07c0 2000 07c0 2000 07c8 2000 07c8 2000     ... ... ... ... 
200007d8:	07d0 2000 07d0 2000 07d8 2000 07d8 2000     ... ... ... ... 
200007e8:	07e0 2000 07e0 2000 07e8 2000 07e8 2000     ... ... ... ... 
200007f8:	07f0 2000 07f0 2000 07f8 2000 07f8 2000     ... ... ... ... 
20000808:	0800 2000 0800 2000 0808 2000 0808 2000     ... ... ... ... 
20000818:	0810 2000 0810 2000 0818 2000 0818 2000     ... ... ... ... 
20000828:	0820 2000 0820 2000 0828 2000 0828 2000      ..  .. (.. (.. 
20000838:	0830 2000 0830 2000 0838 2000 0838 2000     0.. 0.. 8.. 8.. 
20000848:	0840 2000 0840 2000 0848 2000 0848 2000     @.. @.. H.. H.. 
20000858:	0850 2000 0850 2000 0858 2000 0858 2000     P.. P.. X.. X.. 
20000868:	0860 2000 0860 2000 0868 2000 0868 2000     `.. `.. h.. h.. 
20000878:	0870 2000 0870 2000 0878 2000 0878 2000     p.. p.. x.. x.. 
20000888:	0880 2000 0880 2000 0888 2000 0888 2000     ... ... ... ... 
20000898:	0890 2000 0890 2000 0898 2000 0898 2000     ... ... ... ... 
200008a8:	08a0 2000 08a0 2000 08a8 2000 08a8 2000     ... ... ... ... 
200008b8:	08b0 2000 08b0 2000 08b8 2000 08b8 2000     ... ... ... ... 
200008c8:	08c0 2000 08c0 2000 08c8 2000 08c8 2000     ... ... ... ... 
200008d8:	08d0 2000 08d0 2000 08d8 2000 08d8 2000     ... ... ... ... 
200008e8:	08e0 2000 08e0 2000 08e8 2000 08e8 2000     ... ... ... ... 
200008f8:	08f0 2000 08f0 2000 08f8 2000 08f8 2000     ... ... ... ... 
20000908:	0900 2000 0900 2000 0908 2000 0908 2000     ... ... ... ... 
20000918:	0910 2000 0910 2000 0918 2000 0918 2000     ... ... ... ... 
20000928:	0920 2000 0920 2000 0928 2000 0928 2000      ..  .. (.. (.. 
20000938:	0930 2000 0930 2000 0938 2000 0938 2000     0.. 0.. 8.. 8.. 
20000948:	0940 2000 0940 2000 0948 2000 0948 2000     @.. @.. H.. H.. 
20000958:	0950 2000 0950 2000 0958 2000 0958 2000     P.. P.. X.. X.. 
20000968:	0960 2000 0960 2000 0968 2000 0968 2000     `.. `.. h.. h.. 
20000978:	0970 2000 0970 2000 0978 2000 0978 2000     p.. p.. x.. x.. 
20000988:	0980 2000 0980 2000 0988 2000 0988 2000     ... ... ... ... 
20000998:	0990 2000 0990 2000 0998 2000 0998 2000     ... ... ... ... 
200009a8:	09a0 2000 09a0 2000 09a8 2000 09a8 2000     ... ... ... ... 

200009b8 <__malloc_sbrk_base>:
200009b8:	ffff ffff                                   ....

200009bc <__malloc_trim_threshold>:
200009bc:	0000 0002                                   ....
